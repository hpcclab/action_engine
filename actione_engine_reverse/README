# Action Engine Reverse
This is for a reverse method to automatically generate workflow.

1. Let LLM think the output format
2. Look for the API repository (only output description)
if there is matched API which has similar output description
3. Extract the api information
4. For each required input parameter for the API
    4-a. We use LLM to clasify is given user direct prompt can be used or not.
    if the user direct provided input can be used as parameter:
        fill the parameter
    else:
        Look for the API repository (only output description) to find muched API
5. Repeate this process until the last decendent API is found and the parameter has been fullfilled.

else:
    return user that there is no sufficient API to fullfill the request. 


"""
Psudo Code:

function reverse_action_engine(user_request):
    // Step 1: Let LLM determine the intended final output format from user request
    final_output_description = LLM.determine_output(user_request)
    
    // Step 2: Search the API repository for APIs that produce the desired final output
    candidate_apis = find_apis_by_output_description(final_output_description)
    
    if candidate_apis is empty:
        return "No API found that can produce the requested final output."
    
    // Choose the most appropriate API (for example, the one most closely matching the request)
    chosen_api = select_best_api(candidate_apis, user_request)

    // Step 3 & 4: For each required input parameter of the chosen API, attempt to fulfill it
    required_params = chosen_api.input_parameters
    param_values = {}
    
    for param in required_params:
        // 4-a: Check if user’s direct input can fulfill this parameter
        if LLM.can_fulfill_directly(user_request, param):
            param_values[param] = LLM.extract_value(user_request, param)
        else:
            // Not directly available from user input
            // We must find an API that can produce this parameter’s required output
            param_output_desc = param.output_description_needed
            
            // Search for an API that can produce this parameter’s needed output
            sub_candidate_apis = find_apis_by_output_description(param_output_desc)
            
            if sub_candidate_apis is empty:
                return "No API found to fulfill the required input: " + param
            
            // Recursively resolve the sub-API to get its parameters
            chosen_sub_api = select_best_api(sub_candidate_apis, param_output_desc)
            
            // Recursively call the reverse_action_engine to resolve the chosen_sub_api
            sub_workflow = build_workflow_for_api(chosen_sub_api, user_request)
            
            if sub_workflow is failure:
                return "Unable to fulfill parameter: " + param
            
            // Once resolved, we now have a sub-workflow and an output that can feed into param_values
            param_values[param] = sub_workflow
    
    // If all parameters are resolved successfully, build the final workflow
    final_workflow = create_workflow(chosen_api, param_values)
    return final_workflow

//-----------------------------------------------------------

// Helper function to build a workflow for a given API (recursive step)
function build_workflow_for_api(api, user_request):
    param_values = {}
    
    for param in api.input_parameters:
        if LLM.can_fulfill_directly(user_request, param):
            param_values[param] = LLM.extract_value(user_request, param)
        else:
            // Need to find another API to produce this parameter
            sub_candidate_apis = find_apis_by_output_description(param.output_description_needed)
            
            if sub_candidate_apis is empty:
                return failure
            
            chosen_sub_api = select_best_api(sub_candidate_apis, param.output_description_needed)
            sub_workflow = build_workflow_for_api(chosen_sub_api, user_request)
            
            if sub_workflow is failure:
                return failure
            
            param_values[param] = sub_workflow
    
    return create_workflow(api, param_values)


//-----------------------------------------------------------
// The following are conceptual helper functions that would be implemented as needed:

function LLM.determine_output(user_request):
    // Uses LLM to interpret the user request and identify the final intended output format/description
    // returns a textual descriptor of the final output

function LLM.can_fulfill_directly(user_request, param):
    // Uses LLM logic to see if the user directly provided information to fill this parameter

function LLM.extract_value(user_request, param):
    // Extracts the direct value from user input if available

function find_apis_by_output_description(output_description):
    // Searches a known API repository for APIs that produce the given output description

function select_best_api(api_list, context):
    // Chooses the most appropriate API from a list based on the context
    // Could be done via LLM reasoning or a predefined ranking

function create_workflow(api, param_values):
    // Constructs a workflow node or definition that calls `api` with the given `param_values`

//-----------------------------------------------------------

"""