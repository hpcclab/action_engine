[
    {
        "Id": 2,
        "name": "tti_Charcoal_Art",
        "input_parameters_with_datatype": [
            {
                "name": "prompt",
                "datatype": "string",
                "description": "The 'prompt' parameter is a user prompt in string data type. It is required for the API to generate a visually engaging charcoal art style image based on the content or theme specified by the user. The prompt serves as the input text that will be transformed into a unique charcoal art representation by the API."
            }
        ],
        "input_description": "The input parameter for this API is a user prompt in string data type.",
        "output_data_type": "binary_image_file",
        "output description": "An image of a serene forest rendered in a charcoal art style.",
        "description": "This API processes an input user prompt to generate an image in charcoal art style. It takes a text prompt from the user converts it into a charcoal art style image and returns the resulting image. The input parameter is a string containing the user prompt and the output is an image in the charcoal art style.",
        "method": "POST",
        "url": null,
        "summary": "The 'tti_Charcoal_Art' API utilizes a POST method to transform textual prompts into visually engaging charcoal art style images. Users supply a prompt in string format, specifying the content or theme for the artwork they desire. This input prompt is then processed by the API to generate a unique image in the distinctive charcoal art style. The output of the API is delivered as a binary_image_file, presenting the user with a creative representation of their original prompt transformed into a charcoal art format. This API seamlessly merges textual input with artistic expression, providing users with a simple yet powerful tool to create captivating charcoal art imagery.",
        "source_code": "from fastapi import FastAPI, HTTPException\nfrom fastapi.responses import FileResponse\n\nfrom PIL import Image\nfrom diffusers import StableDiffusionPipeline, DPMSolverMultistepScheduler\nimport torch\nfrom pydantic import BaseModel\nfrom pathlib import Path\n\napp = FastAPI()\n\ndef load_model():\n    model_id = 'Falah/charcoal-style'\n    pipe = StableDiffusionPipeline.from_pretrained(model_id, torch_dtype=torch.float16)\n    pipe.scheduler = DPMSolverMultistepScheduler.from_config(pipe.scheduler.config)\n    pipe = pipe.to('cuda')\n    return pipe\n\ndef process_data(prompt, pipe):\n    response = pipe(prompt).images[0]\n    return response\n\n@app.post(\"/generate_charcoal_image/\")\nasync def generate_image(prompt:str):\n    try:\n\n        # Load the model (replace load_model() with your actual model loading logic)\n        pipe = load_model()\n\n        # Prompt Creation\n        prompt = \"Charcoal-style picture: \" + prompt\n\n        # Process the data (replace process_data() with your actual data processing logic)\n        response = process_data(prompt, pipe)\n\n        ## Save the image\n        response.save('generated_img.png')\n\n        image_path = Path('generated_img.png')\n        if not image_path.is_file():\n            return {\"error\": \"Image not found on the server\"}\n\n        return FileResponse(image_path)\n    except Exception as e:\n        # Handle exceptions or errors here\n        raise HTTPException(status_code=500, detail=str(e))",
        "task_num": 1,
        "task_description": "Generate a charcoal art image of a serene forest.",
        "dependencies": [],
        "dependency_output": {},
        "depended_params": []
    }
]