[
    {
        "Id": 2,
        "name": "tti_Charcoal_Art",
        "input_parameters_with_datatype": [
            {
                "name": "prompt",
                "datatype": "string",
                "description": "The 'prompt' parameter is a user prompt in string data type. It is required for the API to generate a visually engaging charcoal art style image based on the content or theme specified by the user. The prompt serves as the input text that will be transformed into a unique charcoal art representation by the API."
            }
        ],
        "input_description": "The input parameter for this API is a user prompt in string data type.",
        "output_data_type": "binary_image_file",
        "output description": "An image of a serene forest rendered in a charcoal art style.",
        "description": "This API processes an input user prompt to generate an image in charcoal art style. It takes a text prompt from the user converts it into a charcoal art style image and returns the resulting image. The input parameter is a string containing the user prompt and the output is an image in the charcoal art style.",
        "method": "POST",
        "url": null,
        "summary": "The 'tti_Charcoal_Art' API utilizes a POST method to transform textual prompts into visually engaging charcoal art style images. Users supply a prompt in string format, specifying the content or theme for the artwork they desire. This input prompt is then processed by the API to generate a unique image in the distinctive charcoal art style. The output of the API is delivered as a binary_image_file, presenting the user with a creative representation of their original prompt transformed into a charcoal art format. This API seamlessly merges textual input with artistic expression, providing users with a simple yet powerful tool to create captivating charcoal art imagery.",
        "source_code": "from fastapi import FastAPI, HTTPException\nfrom fastapi.responses import FileResponse\n\nfrom PIL import Image\nfrom diffusers import StableDiffusionPipeline, DPMSolverMultistepScheduler\nimport torch\nfrom pydantic import BaseModel\nfrom pathlib import Path\n\napp = FastAPI()\n\ndef load_model():\n    model_id = 'Falah/charcoal-style'\n    pipe = StableDiffusionPipeline.from_pretrained(model_id, torch_dtype=torch.float16)\n    pipe.scheduler = DPMSolverMultistepScheduler.from_config(pipe.scheduler.config)\n    pipe = pipe.to('cuda')\n    return pipe\n\ndef process_data(prompt, pipe):\n    response = pipe(prompt).images[0]\n    return response\n\n@app.post(\"/generate_charcoal_image/\")\nasync def generate_image(prompt:str):\n    try:\n\n        # Load the model (replace load_model() with your actual model loading logic)\n        pipe = load_model()\n\n        # Prompt Creation\n        prompt = \"Charcoal-style picture: \" + prompt\n\n        # Process the data (replace process_data() with your actual data processing logic)\n        response = process_data(prompt, pipe)\n\n        ## Save the image\n        response.save('generated_img.png')\n\n        image_path = Path('generated_img.png')\n        if not image_path.is_file():\n            return {\"error\": \"Image not found on the server\"}\n\n        return FileResponse(image_path)\n    except Exception as e:\n        # Handle exceptions or errors here\n        raise HTTPException(status_code=500, detail=str(e))",
        "task_num": 1,
        "task_description": "Generate a charcoal art image of a serene forest.",
        "dependencies": [],
        "dependency_output": {},
        "depended_params": []
    },
    {
        "Id": 12,
        "name": "Image_Resizing",
        "input_parameters_with_datatype": [
            {
                "name": "width",
                "datatype": "int",
                "description": "The 'width' parameter specifies the desired width dimension for resizing the user-uploaded image file. This parameter is essential for determining the new width of the image during the resizing process. It plays a crucial role in adjusting the dimensions of the image according to user requirements, ensuring the output meets the specified width criteria for the resized image."
            },
            {
                "name": "height",
                "datatype": "int",
                "description": "The height parameter specifies the desired height dimension for resizing the user-uploaded image file. This parameter is essential for determining the final dimensions of the resized image, ensuring that the output meets the user's requirements for image size adjustments."
            },
            {
                "name": "file",
                "datatype": "binary_image_file",
                "description": "The 'file' parameter of datatype 'binary_image_file' is required for this API as it serves as the input containing the image file uploaded by the user. This parameter is essential for the 'Image_Resizing' API to receive the binary form of the image file, enabling the resizing process to be carried out on the user-provided visual content."
            }
        ],
        "input_description": "The input for this API is an image file uploaded by the user.",
        "output_data_type": "binary_image_file",
        "output description": "The output of this API will be a PDF file containing the resized charcoal art image of the serene forest, adjusted to the dimensions of 1920x1080 pixels.",
        "description": "This API takes an image file as input uploaded by the user and resizes it to the specified width and height. It then converts the resized image into a PDF file and returns the PDF file as output. The main objective of this API is to allow users to resize images and convert them into PDF format.",
        "method": "POST",
        "url": null,
        "summary": "The 'Image_Resizing' API employs a POST method to resize user-uploaded image files by the specified width and height dimensions. Users provide image files in binary form as input to the API, where the resizing process is carried out. Upon completion, the resized image is transformed into a PDF file, serving as the output in binary_image_file format. This API streamlines the task of image resizing and conversion to PDF, facilitating efficient handling of visual content for users seeking to adjust image dimensions and format for various purposes.",
        "source_code": "# FastAPI\nfrom fastapi import FastAPI, HTTPException, File, UploadFile\nfrom fastapi.responses import FileResponse\nfrom PIL import Image\nimport io\nimport os\n\napp = FastAPI()\n\n@app.post('/resize_image/')\nasync def resize_image(width: int, height: int, file: UploadFile):\n    try:\n        # Read the uploaded file contents\n        contents = await file.read()\n\n        image = Image.open(io.BytesIO(contents))\n        \n        # Resize the image\n        resized = image.resize((width, height))\n        \n        # Saving the resized image to a temporary file\n        filename = \"resized_image.png\"\n        resized.save(filename)\n\n        return FileResponse(filename, media_type=\"image/png\", filename=\"output.png\")\n    \n    except Exception as e:\n        # Handle exceptions or errors here\n        raise HTTPException(status_code=500, detail=str(e))",
        "task_num": 2,
        "task_description": "Resize the charcoal art image of the serene forest to 1920x1080 pixels.",
        "dependencies": [
            "t1"
        ],
        "dependency_output": {
            "t1": {
                "output_data_type": "binary_image_file",
                "output_description": "An image of a serene forest rendered in a charcoal art style."
            }
        },
        "depended_params": [
            {
                "file": "t1"
            }
        ]
    },
    {
        "Id": 11,
        "name": "image_to_pdf_conversion",
        "input_parameters_with_datatype": [
            {
                "name": "file",
                "datatype": "binary_image_file",
                "description": "The 'file' parameter should be a binary image file in one of the supported formats: JPEG, PNG, GIF, BMP, TIFF, PBM, PGM, or PPM. This parameter is required for the 'image_to_pdf_conversion' API to receive the input image file that will be converted to a PDF document. The API processes the provided image file and generates a PDF output, enabling users to efficiently transform visual content into a universally accessible format for sharing, printing, or archiving purposes."
            }
        ],
        "input_description": "An image file in supported format (.JPEG .PNG .GIF .BMP .TIFF .PBM .PGM .PPM)",
        "output_data_type": "binary_image_file",
        "output description": "A PDF file containing the resized charcoal art image of the serene forest, formatted and ready for printing.",
        "description": "This API allows users to convert an image file to a PDF document. Users need to upload an image file with one of the supported formats and the API will process the image and generate a corresponding PDF file as output.",
        "method": "POST",
        "url": null,
        "summary": "The 'image_to_pdf_conversion' API offers a convenient solution for converting image files to PDF documents through a POST method. Users can upload an image file in formats such as JPEG, PNG, GIF, BMP, TIFF, PBM, PGM, or PPM as the input parameter. Once the image is provided, the API seamlessly processes it and produces a PDF file as the output, allowing for efficient transformation of visual content into a portable and universally accessible format. This functionality streamlines the conversion process, enabling users to effortlessly convert diverse image types into PDF documents to facilitate sharing, printing, or archiving purposes.",
        "source_code": "from fastapi import FastAPI, File, UploadFile, HTTPException\nfrom fastapi.responses import FileResponse\nfrom pathlib import Path\nfrom PIL import Image\nimport img2pdf\n\napp = FastAPI()\n\n# Define the supported image extensions\nsupported_extensions = [\".JPEG\", \".PNG\", \".GIF\", \".BMP\", \".TIFF\", \".PBM\", \".PGM\", \".PPM\"]\n\n\ndef check_file_extension(file_path):\n    file_extension = file_path.suffix.upper()\n    if file_extension not in supported_extensions:\n        return False\n    return True\n\n\n@app.post(\"/convert_to_pdf/\")\nasync def image_to_pdf(file: UploadFile):\n    try:\n        file_path = Path(file.filename)\n        file_name = file_path.stem\n        \n        \n        # # File format support check\n        if not check_file_extension(file_path):\n            return {\"error\": \"Unsupported format\"}\n\n        # Read the contents of the uploaded file\n        contents = await file.read()\n        \n        pdf_bytes = img2pdf.convert(contents)\n        \n        pdf_file_path = f'{file_name}.pdf'\n\n        with open(pdf_file_path, 'wb') as pdf_file:\n            pdf_file.write(pdf_bytes)\n\n        # Return the PDF file\n        return FileResponse(pdf_file_path, media_type=\"application/pdf\", filename=\"output.pdf\")\n    except Exception as e:\n        # Handle exceptions or errors here\n        raise HTTPException(status_code=500, detail=str(e))",
        "task_num": 3,
        "task_description": "Convert the resized charcoal art image of the serene forest to a PDF for printing.",
        "dependencies": [
            "t2"
        ],
        "dependency_output": {
            "t2": {
                "output_data_type": "binary_image_file",
                "output_description": "The output of this API will be a PDF file containing the resized charcoal art image of the serene forest, adjusted to the dimensions of 1920x1080 pixels."
            }
        },
        "depended_params": [
            {
                "file": "t1"
            }
        ]
    }
]