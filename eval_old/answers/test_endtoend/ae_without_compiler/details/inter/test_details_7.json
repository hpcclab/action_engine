[
    {
        "Id": 8,
        "name": "tti_Pastel_Art",
        "input_parameters_with_datatype": [
            {
                "name": "prompt",
                "datatype": "string",
                "description": "The prompt parameter is a string data type that serves as a user input to guide the generation of a unique pastel art piece using a pre-trained model specialized for the pastel art style. It is essential for users to provide a creative prompt that influences the artistic output of the API, allowing them to translate their ideas into visually appealing pastel art images."
            }
        ],
        "input_description": "The input parameter for this API is a user prompt in string data type.",
        "output_data_type": "binary_image_file",
        "output description": "Generated pastel art image of a sunset over the ocean in PNG file format.",
        "description": "This API takes a user prompt and generates an image in pastel art style. It loads a pre-trained model for pastel art generation and processes the user prompt to create the image. The generated image is returned in the form of a PNG file.",
        "method": "POST",
        "url": null,
        "summary": "The 'tti_Pastel_Art' API allows users to create pastel art images through a POST method. By providing a prompt in string format, users can guide the generation of a unique pastel art piece using a pre-trained model specialized for this art style. The output of this API is delivered as a binary_image_file, presenting the final artwork in PNG file format. This API facilitates the seamless translation of text prompts into visually appealing pastel art, offering a creative tool for digital artists and enthusiasts to explore and express their artistic visions in a distinctive, soft-palette aesthetic.",
        "source_code": "from fastapi import FastAPI, HTTPException\nfrom fastapi.responses import FileResponse\n\nfrom PIL import Image\nfrom diffusers import StableDiffusionPipeline, DPMSolverMultistepScheduler\nimport torch\nfrom pydantic import BaseModel\nfrom pathlib import Path\n\napp = FastAPI()\n\ndef load_model():\n    model_id = 'JamesFlare/pastel-mix'\n    pipe = StableDiffusionPipeline.from_pretrained(model_id, torch_dtype=torch.float16)\n    pipe.scheduler = DPMSolverMultistepScheduler.from_config(pipe.scheduler.config)\n    pipe = pipe.to('cuda')\n    return pipe\n\ndef process_data(prompt, pipe):\n    response = pipe(prompt).images[0]\n    return response\n\n@app.post(\"/generate_pastel_image/\")\nasync def generate_image(prompt:str):\n    try:\n\n        # Load the model (replace load_model() with your actual model loading logic)\n        pipe = load_model()\n\n        # Prompt Creation\n        prompt = \"Pastel-style picture: \" + prompt\n\n        # Process the data (replace process_data() with your actual data processing logic)\n        response = process_data(prompt, pipe)\n\n        ## Save the image\n        response.save('generated_img.png')\n\n        image_path = Path('generated_img.png')\n        if not image_path.is_file():\n            return {\"error\": \"Image not found on the server\"}\n\n        return FileResponse(image_path)\n    except Exception as e:\n        # Handle exceptions or errors here\n        raise HTTPException(status_code=500, detail=str(e))",
        "task_num": 1,
        "task_description": "Create a pastel art image of a sunset over the ocean.",
        "dependencies": [],
        "dependency_output": {},
        "depended_params": []
    },
    {
        "Id": 13,
        "name": "Image_Enhancement",
        "input_parameters_with_datatype": [
            {
                "name": "file",
                "datatype": "binary_image_file",
                "description": "A single image file in supported formats (.bmp .jpeg .png etc.) required for enhancing the quality of the image by applying denoising, contrast stretching, sharpening, brightness adjustment, and gamma correction techniques to improve its visual quality."
            }
        ],
        "input_description": "A single image file in supported formats (.bmp .jpeg .png etc.)",
        "output_data_type": "binary_image_file",
        "output description": "Enhanced pastel art image of the sunset over the ocean in JPEG format, with improved quality through denoising, contrast stretching, sharpening, brightness adjustment, and gamma correction.",
        "description": "API that takes an image as input enhances its quality by denoising contrast stretching sharpening adjusting brightness and gamma correction then returns the enhanced image in JPG format.",
        "method": "POST",
        "url": null,
        "summary": "The 'Image_Enhancement' API offers a POST method to enhance the quality of images provided by users. Users can upload a single image file in supported formats like .bmp, .jpeg, or .png. The API processes the image by applying denoising, contrast stretching, sharpening, brightness adjustment, and gamma correction techniques to improve its visual quality. Upon completion of enhancements, the API returns the enhanced image in JPG format, allowing users to obtain a higher-quality version of their input image effortlessly.",
        "source_code": "#FastAPI\nfrom fastapi import FastAPI, HTTPException, File, UploadFile\nfrom fastapi.responses import FileResponse\nfrom pathlib import Path\n\n#Image Enhancement\nimport cv2\nimport numpy as np\nfrom PIL import Image\n\nfile_path = Path(\"./flower.jpg\")\n\nSUPPORTED_FORMATS = [\n    \".bmp\", \".dib\",\n    \".jpeg\", \".jpg\", \".jpe\",\n    \".jp2\",\n    \".png\",\n    \".webp\",\n    \".avif\",\n    \".pbm\", \".pgm\", \".ppm\", \".pxm\", \".pnm\",\n    \".pfm\",\n    \".sr\", \".ras\",\n    \".tiff\", \".tif\",\n    \".exr\",\n    \".hdr\", \".pic\"\n]\n\n\napp = FastAPI()\n\ndef check_image_extension(img):\n    img_path = Path(img.filename)\n    return img_path.suffix\n\n@app.post('/image_enhance/')\nasync def enhance_image(file: UploadFile):\n    try:\n        #Saving original image\n        image_name = file.filename \n        image = Image.open(file.file) \n        image.save(image_name)\n\n        #Loading the image\n        img = cv2.imread(image_name)\n\n        #Denoising image\n        denoised_image = cv2.fastNlMeansDenoisingColored(img, None, 10, 10, 7, 21)\n\n        #Contrast Stretching(Normalizing)\n        contrast_stretched_image = cv2.normalize(denoised_image, None, 255, 0, cv2.NORM_MINMAX, cv2.CV_8UC1)\n\n        # Image Sharpening\n        kernel = np.array([[0, -1, 0], [-1, 5, -1], [0, -1, 0]], np.float32)\n        sharpened_image = cv2.filter2D(contrast_stretched_image, -1, kernel=kernel)\n\n        #Adjusting Brightness\n        brightness_image = cv2.convertScaleAbs(sharpened_image, alpha=1, beta=5)\n\n        # Gamma Correction\n        gamma = 1.5\n        lookup_table = np.array([((i / 255.0) ** gamma) * 255 for i in np.arange(0, 256)]).astype(\"uint8\")\n        gamma_corrected_image = cv2.LUT(brightness_image, lookup_table)\n\n        final_name = f'final_{image_name}'\n        # Save final image\n        cv2.imwrite(final_name, gamma_corrected_image)\n\n        return FileResponse(final_name, media_type='image/jpg', filename=final_name)\n    except Exception as e:\n        raise HTTPException(status_code=500, detail=str(e))",
        "task_num": 2,
        "task_description": "Convert the pastel art image of the sunset over the ocean to a JPEG format.",
        "dependencies": [
            "t1"
        ],
        "dependency_output": {
            "t1": {
                "output_data_type": "binary_image_file",
                "output_description": "Generated pastel art image of a sunset over the ocean in PNG file format."
            }
        },
        "depended_params": [
            {
                "file": "t1"
            }
        ]
    },
    {
        "Id": 12,
        "name": "Image_Resizing",
        "input_parameters_with_datatype": [
            {
                "name": "width",
                "datatype": "int",
                "description": "The 'width' parameter specifies the desired width dimension for resizing the user-uploaded image file. This parameter is essential for determining the new width of the image during the resizing process. It plays a crucial role in adjusting the dimensions of the image according to user requirements, ensuring the output meets the specified width criteria for the resized image."
            },
            {
                "name": "height",
                "datatype": "int",
                "description": "The height parameter specifies the desired height dimension for resizing the user-uploaded image file. This parameter is essential for determining the final dimensions of the resized image, ensuring that the output meets the user's requirements for image size adjustments."
            },
            {
                "name": "file",
                "datatype": "binary_image_file",
                "description": "The 'file' parameter of datatype 'binary_image_file' is required for this API as it serves as the input containing the image file uploaded by the user. This parameter is essential for the 'Image_Resizing' API to receive the binary form of the image file, enabling the resizing process to be carried out on the user-provided visual content."
            }
        ],
        "input_description": "The input for this API is an image file uploaded by the user.",
        "output_data_type": "binary_image_file",
        "output description": "The output of this API will be a PDF file containing the resized JPEG image of the sunset over the ocean, resized to 1024x768 pixels.",
        "description": "This API takes an image file as input uploaded by the user and resizes it to the specified width and height. It then converts the resized image into a PDF file and returns the PDF file as output. The main objective of this API is to allow users to resize images and convert them into PDF format.",
        "method": "POST",
        "url": null,
        "summary": "The 'Image_Resizing' API employs a POST method to resize user-uploaded image files by the specified width and height dimensions. Users provide image files in binary form as input to the API, where the resizing process is carried out. Upon completion, the resized image is transformed into a PDF file, serving as the output in binary_image_file format. This API streamlines the task of image resizing and conversion to PDF, facilitating efficient handling of visual content for users seeking to adjust image dimensions and format for various purposes.",
        "source_code": "# FastAPI\nfrom fastapi import FastAPI, HTTPException, File, UploadFile\nfrom fastapi.responses import FileResponse\nfrom PIL import Image\nimport io\nimport os\n\napp = FastAPI()\n\n@app.post('/resize_image/')\nasync def resize_image(width: int, height: int, file: UploadFile):\n    try:\n        # Read the uploaded file contents\n        contents = await file.read()\n\n        image = Image.open(io.BytesIO(contents))\n        \n        # Resize the image\n        resized = image.resize((width, height))\n        \n        # Saving the resized image to a temporary file\n        filename = \"resized_image.png\"\n        resized.save(filename)\n\n        return FileResponse(filename, media_type=\"image/png\", filename=\"output.png\")\n    \n    except Exception as e:\n        # Handle exceptions or errors here\n        raise HTTPException(status_code=500, detail=str(e))",
        "task_num": 3,
        "task_description": "Resize the JPEG image of the sunset over the ocean to 1024x768 pixels.",
        "dependencies": [
            "t2"
        ],
        "dependency_output": {
            "t2": {
                "output_data_type": "binary_image_file",
                "output_description": "Enhanced pastel art image of the sunset over the ocean in JPEG format, with improved quality through denoising, contrast stretching, sharpening, brightness adjustment, and gamma correction."
            }
        },
        "depended_params": [
            {
                "file": "t1"
            }
        ]
    },
    {
        "Id": 13,
        "name": "Image_Enhancement",
        "input_parameters_with_datatype": [
            {
                "name": "file",
                "datatype": "binary_image_file",
                "description": "A single image file in supported formats (.bmp .jpeg .png etc.) required for enhancing the quality of the image by applying denoising, contrast stretching, sharpening, brightness adjustment, and gamma correction techniques to improve its visual quality."
            }
        ],
        "input_description": "A single image file in supported formats (.bmp .jpeg .png etc.)",
        "output_data_type": "binary_image_file",
        "output description": "Enhanced JPEG image of the sunset over the ocean with improved quality through denoising, contrast stretching, sharpening, brightness adjustment, and gamma correction.",
        "description": "API that takes an image as input enhances its quality by denoising contrast stretching sharpening adjusting brightness and gamma correction then returns the enhanced image in JPG format.",
        "method": "POST",
        "url": null,
        "summary": "The 'Image_Enhancement' API offers a POST method to enhance the quality of images provided by users. Users can upload a single image file in supported formats like .bmp, .jpeg, or .png. The API processes the image by applying denoising, contrast stretching, sharpening, brightness adjustment, and gamma correction techniques to improve its visual quality. Upon completion of enhancements, the API returns the enhanced image in JPG format, allowing users to obtain a higher-quality version of their input image effortlessly.",
        "source_code": "#FastAPI\nfrom fastapi import FastAPI, HTTPException, File, UploadFile\nfrom fastapi.responses import FileResponse\nfrom pathlib import Path\n\n#Image Enhancement\nimport cv2\nimport numpy as np\nfrom PIL import Image\n\nfile_path = Path(\"./flower.jpg\")\n\nSUPPORTED_FORMATS = [\n    \".bmp\", \".dib\",\n    \".jpeg\", \".jpg\", \".jpe\",\n    \".jp2\",\n    \".png\",\n    \".webp\",\n    \".avif\",\n    \".pbm\", \".pgm\", \".ppm\", \".pxm\", \".pnm\",\n    \".pfm\",\n    \".sr\", \".ras\",\n    \".tiff\", \".tif\",\n    \".exr\",\n    \".hdr\", \".pic\"\n]\n\n\napp = FastAPI()\n\ndef check_image_extension(img):\n    img_path = Path(img.filename)\n    return img_path.suffix\n\n@app.post('/image_enhance/')\nasync def enhance_image(file: UploadFile):\n    try:\n        #Saving original image\n        image_name = file.filename \n        image = Image.open(file.file) \n        image.save(image_name)\n\n        #Loading the image\n        img = cv2.imread(image_name)\n\n        #Denoising image\n        denoised_image = cv2.fastNlMeansDenoisingColored(img, None, 10, 10, 7, 21)\n\n        #Contrast Stretching(Normalizing)\n        contrast_stretched_image = cv2.normalize(denoised_image, None, 255, 0, cv2.NORM_MINMAX, cv2.CV_8UC1)\n\n        # Image Sharpening\n        kernel = np.array([[0, -1, 0], [-1, 5, -1], [0, -1, 0]], np.float32)\n        sharpened_image = cv2.filter2D(contrast_stretched_image, -1, kernel=kernel)\n\n        #Adjusting Brightness\n        brightness_image = cv2.convertScaleAbs(sharpened_image, alpha=1, beta=5)\n\n        # Gamma Correction\n        gamma = 1.5\n        lookup_table = np.array([((i / 255.0) ** gamma) * 255 for i in np.arange(0, 256)]).astype(\"uint8\")\n        gamma_corrected_image = cv2.LUT(brightness_image, lookup_table)\n\n        final_name = f'final_{image_name}'\n        # Save final image\n        cv2.imwrite(final_name, gamma_corrected_image)\n\n        return FileResponse(final_name, media_type='image/jpg', filename=final_name)\n    except Exception as e:\n        raise HTTPException(status_code=500, detail=str(e))",
        "task_num": 4,
        "task_description": "Enhance the quality of the resized JPEG image of the sunset over the ocean.",
        "dependencies": [
            "t3"
        ],
        "dependency_output": {
            "t3": {
                "output_data_type": "binary_image_file",
                "output_description": "The output of this API will be a PDF file containing the resized JPEG image of the sunset over the ocean, resized to 1024x768 pixels."
            }
        },
        "depended_params": [
            {
                "file": "t1"
            }
        ]
    },
    {
        "Id": 13,
        "name": "Image_Enhancement",
        "input_parameters_with_datatype": [
            {
                "name": "file",
                "datatype": "binary_image_file",
                "description": "A single image file in supported formats (.bmp .jpeg .png etc.) required for enhancing the quality of the image by applying denoising, contrast stretching, sharpening, brightness adjustment, and gamma correction techniques to improve its visual quality."
            }
        ],
        "input_description": "A single image file in supported formats (.bmp .jpeg .png etc.)",
        "output_data_type": "binary_image_file",
        "output description": "Enhanced JPEG image of the sunset over the ocean with improved quality through denoising, contrast stretching, sharpening, brightness adjustment, and gamma correction.",
        "description": "API that takes an image as input enhances its quality by denoising contrast stretching sharpening adjusting brightness and gamma correction then returns the enhanced image in JPG format.",
        "method": "POST",
        "url": null,
        "summary": "The 'Image_Enhancement' API offers a POST method to enhance the quality of images provided by users. Users can upload a single image file in supported formats like .bmp, .jpeg, or .png. The API processes the image by applying denoising, contrast stretching, sharpening, brightness adjustment, and gamma correction techniques to improve its visual quality. Upon completion of enhancements, the API returns the enhanced image in JPG format, allowing users to obtain a higher-quality version of their input image effortlessly.",
        "source_code": "#FastAPI\nfrom fastapi import FastAPI, HTTPException, File, UploadFile\nfrom fastapi.responses import FileResponse\nfrom pathlib import Path\n\n#Image Enhancement\nimport cv2\nimport numpy as np\nfrom PIL import Image\n\nfile_path = Path(\"./flower.jpg\")\n\nSUPPORTED_FORMATS = [\n    \".bmp\", \".dib\",\n    \".jpeg\", \".jpg\", \".jpe\",\n    \".jp2\",\n    \".png\",\n    \".webp\",\n    \".avif\",\n    \".pbm\", \".pgm\", \".ppm\", \".pxm\", \".pnm\",\n    \".pfm\",\n    \".sr\", \".ras\",\n    \".tiff\", \".tif\",\n    \".exr\",\n    \".hdr\", \".pic\"\n]\n\n\napp = FastAPI()\n\ndef check_image_extension(img):\n    img_path = Path(img.filename)\n    return img_path.suffix\n\n@app.post('/image_enhance/')\nasync def enhance_image(file: UploadFile):\n    try:\n        #Saving original image\n        image_name = file.filename \n        image = Image.open(file.file) \n        image.save(image_name)\n\n        #Loading the image\n        img = cv2.imread(image_name)\n\n        #Denoising image\n        denoised_image = cv2.fastNlMeansDenoisingColored(img, None, 10, 10, 7, 21)\n\n        #Contrast Stretching(Normalizing)\n        contrast_stretched_image = cv2.normalize(denoised_image, None, 255, 0, cv2.NORM_MINMAX, cv2.CV_8UC1)\n\n        # Image Sharpening\n        kernel = np.array([[0, -1, 0], [-1, 5, -1], [0, -1, 0]], np.float32)\n        sharpened_image = cv2.filter2D(contrast_stretched_image, -1, kernel=kernel)\n\n        #Adjusting Brightness\n        brightness_image = cv2.convertScaleAbs(sharpened_image, alpha=1, beta=5)\n\n        # Gamma Correction\n        gamma = 1.5\n        lookup_table = np.array([((i / 255.0) ** gamma) * 255 for i in np.arange(0, 256)]).astype(\"uint8\")\n        gamma_corrected_image = cv2.LUT(brightness_image, lookup_table)\n\n        final_name = f'final_{image_name}'\n        # Save final image\n        cv2.imwrite(final_name, gamma_corrected_image)\n\n        return FileResponse(final_name, media_type='image/jpg', filename=final_name)\n    except Exception as e:\n        raise HTTPException(status_code=500, detail=str(e))",
        "task_num": 5,
        "task_description": "Send the enhanced JPEG image of the sunset over the ocean to my friend via email.",
        "dependencies": [
            "t4"
        ],
        "dependency_output": {
            "t4": {
                "output_data_type": "binary_image_file",
                "output_description": "Enhanced JPEG image of the sunset over the ocean with improved quality through denoising, contrast stretching, sharpening, brightness adjustment, and gamma correction."
            }
        },
        "depended_params": [
            {
                "file": "t1"
            }
        ]
    }
]