[
    {
        "Id": 9,
        "name": "tti_Sketching_Art",
        "input_parameters_with_datatype": [
            {
                "name": "prompt",
                "datatype": "string",
                "description": "The 'prompt' parameter is a user-provided textual prompt in string format that serves as the input for generating artistic sketching images. It is essential for guiding the AI model to create visually striking sketching art style images based on the user's creative input."
            }
        ],
        "input_description": "The input parameter for this API is a user prompt in string data type.",
        "output_data_type": "binary_image_file",
        "output description": "Generated high-quality sketch of a castle surrounded by a dense forest in PNG format, using the LoRA model and VAE component, guided by predefined negative prompts.",
        "description": "This API takes a user prompt as input and generates an image in sketching art style using the LoRA model and VAE component. The input prompt is combined with predefined negative prompts to guide the image generation process. The output is a high-quality sketching art style image saved in PNG format.",
        "method": "POST",
        "url": null,
        "summary": "The 'tti_Sketching_Art' API operates through a POST method to transform user prompts into artistic sketching images with the aid of the LoRA model and VAE component. Users provide a textual prompt in string format, which is then harmonized with pre-defined negative prompts to steer the generation of the artwork. The API proficiently processes this input, resulting in the creation of a visually striking sketching art style image. The final output is delivered in the form of a binary_image_file, encapsulating the generated art piece in PNG format. This API seamlessly merges user creativity with advanced AI techniques, empowering users to effortlessly convert simple prompts into sophisticated sketching art, enabling diverse applications in digital artistry and creative projects.",
        "source_code": "from fastapi import FastAPI, HTTPException\nfrom fastapi.responses import FileResponse\n\nfrom pydantic import BaseModel\nfrom pathlib import Path\n\n\nimport torch\nfrom diffusers import (\n    StableDiffusionXLPipeline, \n    EulerAncestralDiscreteScheduler,\n    AutoencoderKL\n)\napp = FastAPI()\n\n@app.post(\"/generate_sketching_image/\")\nasync def generate_image(prompt:str):\n    try:\n\n        # Initialize LoRA model and weights\n        lora_model_id = \"Linaqruf/sketch-style-xl-lora\"\n        lora_filename = \"sketch-style-xl.safetensors\"\n\n        # Load VAE component\n        vae = AutoencoderKL.from_pretrained(\n            \"madebyollin/sdxl-vae-fp16-fix\", \n            torch_dtype=torch.float16\n        )\n\n        # Configure the pipeline\n        pipe = StableDiffusionXLPipeline.from_pretrained(\n            \"Linaqruf/animagine-xl-2.0\", \n            vae=vae,\n            torch_dtype=torch.float16, \n            use_safetensors=True, \n            variant=\"fp16\"\n        )\n        pipe.scheduler = EulerAncestralDiscreteScheduler.from_config(pipe.scheduler.config)\n        pipe.to('cuda')\n\n        # Load and fuse LoRA weights\n        pipe.load_lora_weights(lora_model_id, weight_name=lora_filename)\n        pipe.fuse_lora(lora_scale=0.6)\n\n        # Define prompts and generate image\n        prompt = \"Monochrome, Greyscale Sketch-style picture: \" + prompt\n        \n\n        negative_prompt = \"lowres, bad anatomy, bad hands, text, error, missing fingers, extra digit, fewer digits, cropped, worst quality, low quality, normal quality, jpeg artifacts, signature, watermark, username, blurry\"\n\n        image = pipe(\n            prompt, \n            negative_prompt=negative_prompt, \n            width=1024,\n            height=1024,\n            guidance_scale=12,\n            num_inference_steps=50\n        ).images[0]\n\n        # Unfuse LoRA before saving the image\n        pipe.unfuse_lora()\n        image.save(\"generated_img.png\")\n\n        image_path = Path('generated_img.png')\n        if not image_path.is_file():\n            return {\"error\": \"Image not found on the server\"}\n        return FileResponse(image_path)\n    except Exception as e:\n        # Handle exceptions or errors here\n        raise HTTPException(status_code=500, detail=str(e))",
        "task_num": 1,
        "task_description": "Create a sketch of a castle surrounded by a dense forest.",
        "dependencies": [],
        "dependency_output": {},
        "depended_params": []
    },
    {
        "Id": 12,
        "name": "Image_Resizing",
        "input_parameters_with_datatype": [
            {
                "name": "width",
                "datatype": "int",
                "description": "The 'width' parameter specifies the desired width dimension for resizing the user-uploaded image file. This parameter is essential for determining the new width of the image during the resizing process. It plays a crucial role in adjusting the dimensions of the image according to user requirements, ensuring the output meets the specified width criteria for the resized image."
            },
            {
                "name": "height",
                "datatype": "int",
                "description": "The height parameter specifies the desired height dimension for resizing the user-uploaded image file. This parameter is essential for determining the final dimensions of the resized image, ensuring that the output meets the user's requirements for image size adjustments."
            },
            {
                "name": "file",
                "datatype": "binary_image_file",
                "description": "The 'file' parameter of datatype 'binary_image_file' is required for this API as it serves as the input containing the image file uploaded by the user. This parameter is essential for the 'Image_Resizing' API to receive the binary form of the image file, enabling the resizing process to be carried out on the user-provided visual content."
            }
        ],
        "input_description": "The input for this API is an image file uploaded by the user.",
        "output_data_type": "binary_image_file",
        "output description": "The output of this API will be a PDF file containing the resized sketch of the castle surrounded by a dense forest, with the dimensions adjusted to 1280x720 pixels.",
        "description": "This API takes an image file as input uploaded by the user and resizes it to the specified width and height. It then converts the resized image into a PDF file and returns the PDF file as output. The main objective of this API is to allow users to resize images and convert them into PDF format.",
        "method": "POST",
        "url": null,
        "summary": "The 'Image_Resizing' API employs a POST method to resize user-uploaded image files by the specified width and height dimensions. Users provide image files in binary form as input to the API, where the resizing process is carried out. Upon completion, the resized image is transformed into a PDF file, serving as the output in binary_image_file format. This API streamlines the task of image resizing and conversion to PDF, facilitating efficient handling of visual content for users seeking to adjust image dimensions and format for various purposes.",
        "source_code": "# FastAPI\nfrom fastapi import FastAPI, HTTPException, File, UploadFile\nfrom fastapi.responses import FileResponse\nfrom PIL import Image\nimport io\nimport os\n\napp = FastAPI()\n\n@app.post('/resize_image/')\nasync def resize_image(width: int, height: int, file: UploadFile):\n    try:\n        # Read the uploaded file contents\n        contents = await file.read()\n\n        image = Image.open(io.BytesIO(contents))\n        \n        # Resize the image\n        resized = image.resize((width, height))\n        \n        # Saving the resized image to a temporary file\n        filename = \"resized_image.png\"\n        resized.save(filename)\n\n        return FileResponse(filename, media_type=\"image/png\", filename=\"output.png\")\n    \n    except Exception as e:\n        # Handle exceptions or errors here\n        raise HTTPException(status_code=500, detail=str(e))",
        "task_num": 2,
        "task_description": "Resize the sketch of the castle surrounded by a dense forest to 1280x720 pixels.",
        "dependencies": [
            "t1"
        ],
        "dependency_output": {
            "t1": {
                "output_data_type": "binary_image_file",
                "output_description": "Generated high-quality sketch of a castle surrounded by a dense forest in PNG format, using the LoRA model and VAE component, guided by predefined negative prompts."
            }
        },
        "depended_params": [
            {
                "file": "t1"
            }
        ]
    },
    {
        "Id": 13,
        "name": "Image_Enhancement",
        "input_parameters_with_datatype": [
            {
                "name": "file",
                "datatype": "binary_image_file",
                "description": "A single image file in supported formats (.bmp .jpeg .png etc.) required for enhancing the quality of the image by applying denoising, contrast stretching, sharpening, brightness adjustment, and gamma correction techniques to improve its visual quality."
            }
        ],
        "input_description": "A single image file in supported formats (.bmp .jpeg .png etc.)",
        "output_data_type": "binary_image_file",
        "output description": "Enhanced image file in JPG format of the resized sketch of the castle surrounded by a dense forest, with improved quality through denoising, contrast stretching, sharpening, brightness adjustment, and gamma correction.",
        "description": "API that takes an image as input enhances its quality by denoising contrast stretching sharpening adjusting brightness and gamma correction then returns the enhanced image in JPG format.",
        "method": "POST",
        "url": null,
        "summary": "The 'Image_Enhancement' API offers a POST method to enhance the quality of images provided by users. Users can upload a single image file in supported formats like .bmp, .jpeg, or .png. The API processes the image by applying denoising, contrast stretching, sharpening, brightness adjustment, and gamma correction techniques to improve its visual quality. Upon completion of enhancements, the API returns the enhanced image in JPG format, allowing users to obtain a higher-quality version of their input image effortlessly.",
        "source_code": "#FastAPI\nfrom fastapi import FastAPI, HTTPException, File, UploadFile\nfrom fastapi.responses import FileResponse\nfrom pathlib import Path\n\n#Image Enhancement\nimport cv2\nimport numpy as np\nfrom PIL import Image\n\nfile_path = Path(\"./flower.jpg\")\n\nSUPPORTED_FORMATS = [\n    \".bmp\", \".dib\",\n    \".jpeg\", \".jpg\", \".jpe\",\n    \".jp2\",\n    \".png\",\n    \".webp\",\n    \".avif\",\n    \".pbm\", \".pgm\", \".ppm\", \".pxm\", \".pnm\",\n    \".pfm\",\n    \".sr\", \".ras\",\n    \".tiff\", \".tif\",\n    \".exr\",\n    \".hdr\", \".pic\"\n]\n\n\napp = FastAPI()\n\ndef check_image_extension(img):\n    img_path = Path(img.filename)\n    return img_path.suffix\n\n@app.post('/image_enhance/')\nasync def enhance_image(file: UploadFile):\n    try:\n        #Saving original image\n        image_name = file.filename \n        image = Image.open(file.file) \n        image.save(image_name)\n\n        #Loading the image\n        img = cv2.imread(image_name)\n\n        #Denoising image\n        denoised_image = cv2.fastNlMeansDenoisingColored(img, None, 10, 10, 7, 21)\n\n        #Contrast Stretching(Normalizing)\n        contrast_stretched_image = cv2.normalize(denoised_image, None, 255, 0, cv2.NORM_MINMAX, cv2.CV_8UC1)\n\n        # Image Sharpening\n        kernel = np.array([[0, -1, 0], [-1, 5, -1], [0, -1, 0]], np.float32)\n        sharpened_image = cv2.filter2D(contrast_stretched_image, -1, kernel=kernel)\n\n        #Adjusting Brightness\n        brightness_image = cv2.convertScaleAbs(sharpened_image, alpha=1, beta=5)\n\n        # Gamma Correction\n        gamma = 1.5\n        lookup_table = np.array([((i / 255.0) ** gamma) * 255 for i in np.arange(0, 256)]).astype(\"uint8\")\n        gamma_corrected_image = cv2.LUT(brightness_image, lookup_table)\n\n        final_name = f'final_{image_name}'\n        # Save final image\n        cv2.imwrite(final_name, gamma_corrected_image)\n\n        return FileResponse(final_name, media_type='image/jpg', filename=final_name)\n    except Exception as e:\n        raise HTTPException(status_code=500, detail=str(e))",
        "task_num": 3,
        "task_description": "Enhance the image quality of the resized sketch of the castle surrounded by a dense forest.",
        "dependencies": [
            "t2"
        ],
        "dependency_output": {
            "t2": {
                "output_data_type": "binary_image_file",
                "output_description": "The output of this API will be a PDF file containing the resized sketch of the castle surrounded by a dense forest, with the dimensions adjusted to 1280x720 pixels."
            }
        },
        "depended_params": [
            {
                "file": "t1"
            }
        ]
    },
    {
        "Id": 11,
        "name": "image_to_pdf_conversion",
        "input_parameters_with_datatype": [
            {
                "name": "file",
                "datatype": "binary_image_file",
                "description": "The 'file' parameter should be a binary image file in one of the supported formats: JPEG, PNG, GIF, BMP, TIFF, PBM, PGM, or PPM. This parameter is required for the 'image_to_pdf_conversion' API to receive the input image file that will be converted to a PDF document. The API processes the provided image file and generates a PDF output, enabling users to efficiently transform visual content into a universally accessible format for sharing, printing, or archiving purposes."
            }
        ],
        "input_description": "An image file in supported format (.JPEG .PNG .GIF .BMP .TIFF .PBM .PGM .PPM)",
        "output_data_type": "binary_image_file",
        "output description": "A PDF file containing the enhanced sketch of the castle surrounded by a dense forest.",
        "description": "This API allows users to convert an image file to a PDF document. Users need to upload an image file with one of the supported formats and the API will process the image and generate a corresponding PDF file as output.",
        "method": "POST",
        "url": null,
        "summary": "The 'image_to_pdf_conversion' API offers a convenient solution for converting image files to PDF documents through a POST method. Users can upload an image file in formats such as JPEG, PNG, GIF, BMP, TIFF, PBM, PGM, or PPM as the input parameter. Once the image is provided, the API seamlessly processes it and produces a PDF file as the output, allowing for efficient transformation of visual content into a portable and universally accessible format. This functionality streamlines the conversion process, enabling users to effortlessly convert diverse image types into PDF documents to facilitate sharing, printing, or archiving purposes.",
        "source_code": "from fastapi import FastAPI, File, UploadFile, HTTPException\nfrom fastapi.responses import FileResponse\nfrom pathlib import Path\nfrom PIL import Image\nimport img2pdf\n\napp = FastAPI()\n\n# Define the supported image extensions\nsupported_extensions = [\".JPEG\", \".PNG\", \".GIF\", \".BMP\", \".TIFF\", \".PBM\", \".PGM\", \".PPM\"]\n\n\ndef check_file_extension(file_path):\n    file_extension = file_path.suffix.upper()\n    if file_extension not in supported_extensions:\n        return False\n    return True\n\n\n@app.post(\"/convert_to_pdf/\")\nasync def image_to_pdf(file: UploadFile):\n    try:\n        file_path = Path(file.filename)\n        file_name = file_path.stem\n        \n        \n        # # File format support check\n        if not check_file_extension(file_path):\n            return {\"error\": \"Unsupported format\"}\n\n        # Read the contents of the uploaded file\n        contents = await file.read()\n        \n        pdf_bytes = img2pdf.convert(contents)\n        \n        pdf_file_path = f'{file_name}.pdf'\n\n        with open(pdf_file_path, 'wb') as pdf_file:\n            pdf_file.write(pdf_bytes)\n\n        # Return the PDF file\n        return FileResponse(pdf_file_path, media_type=\"application/pdf\", filename=\"output.pdf\")\n    except Exception as e:\n        # Handle exceptions or errors here\n        raise HTTPException(status_code=500, detail=str(e))",
        "task_num": 4,
        "task_description": "Convert the enhanced sketch of the castle surrounded by a dense forest to a PDF format.",
        "dependencies": [
            "t3"
        ],
        "dependency_output": {
            "t3": {
                "output_data_type": "binary_image_file",
                "output_description": "Enhanced image file in JPG format of the resized sketch of the castle surrounded by a dense forest, with improved quality through denoising, contrast stretching, sharpening, brightness adjustment, and gamma correction."
            }
        },
        "depended_params": [
            {
                "file": "t1"
            }
        ]
    },
    {
        "Id": 11,
        "name": "image_to_pdf_conversion",
        "input_parameters_with_datatype": [
            {
                "name": "file",
                "datatype": "binary_image_file",
                "description": "The 'file' parameter should be a binary image file in one of the supported formats: JPEG, PNG, GIF, BMP, TIFF, PBM, PGM, or PPM. This parameter is required for the 'image_to_pdf_conversion' API to receive the input image file that will be converted to a PDF document. The API processes the provided image file and generates a PDF output, enabling users to efficiently transform visual content into a universally accessible format for sharing, printing, or archiving purposes."
            }
        ],
        "input_description": "An image file in supported format (.JPEG .PNG .GIF .BMP .TIFF .PBM .PGM .PPM)",
        "output_data_type": "binary_image_file",
        "output description": "A PDF file of the enhanced sketch, ready to be sent to the colleague's email.",
        "description": "This API allows users to convert an image file to a PDF document. Users need to upload an image file with one of the supported formats and the API will process the image and generate a corresponding PDF file as output.",
        "method": "POST",
        "url": null,
        "summary": "The 'image_to_pdf_conversion' API offers a convenient solution for converting image files to PDF documents through a POST method. Users can upload an image file in formats such as JPEG, PNG, GIF, BMP, TIFF, PBM, PGM, or PPM as the input parameter. Once the image is provided, the API seamlessly processes it and produces a PDF file as the output, allowing for efficient transformation of visual content into a portable and universally accessible format. This functionality streamlines the conversion process, enabling users to effortlessly convert diverse image types into PDF documents to facilitate sharing, printing, or archiving purposes.",
        "source_code": "from fastapi import FastAPI, File, UploadFile, HTTPException\nfrom fastapi.responses import FileResponse\nfrom pathlib import Path\nfrom PIL import Image\nimport img2pdf\n\napp = FastAPI()\n\n# Define the supported image extensions\nsupported_extensions = [\".JPEG\", \".PNG\", \".GIF\", \".BMP\", \".TIFF\", \".PBM\", \".PGM\", \".PPM\"]\n\n\ndef check_file_extension(file_path):\n    file_extension = file_path.suffix.upper()\n    if file_extension not in supported_extensions:\n        return False\n    return True\n\n\n@app.post(\"/convert_to_pdf/\")\nasync def image_to_pdf(file: UploadFile):\n    try:\n        file_path = Path(file.filename)\n        file_name = file_path.stem\n        \n        \n        # # File format support check\n        if not check_file_extension(file_path):\n            return {\"error\": \"Unsupported format\"}\n\n        # Read the contents of the uploaded file\n        contents = await file.read()\n        \n        pdf_bytes = img2pdf.convert(contents)\n        \n        pdf_file_path = f'{file_name}.pdf'\n\n        with open(pdf_file_path, 'wb') as pdf_file:\n            pdf_file.write(pdf_bytes)\n\n        # Return the PDF file\n        return FileResponse(pdf_file_path, media_type=\"application/pdf\", filename=\"output.pdf\")\n    except Exception as e:\n        # Handle exceptions or errors here\n        raise HTTPException(status_code=500, detail=str(e))",
        "task_num": 5,
        "task_description": "Send the PDF of the enhanced sketch to the colleague's email.",
        "dependencies": [
            "t4"
        ],
        "dependency_output": {
            "t4": {
                "output_data_type": "binary_image_file",
                "output_description": "A PDF file containing the enhanced sketch of the castle surrounded by a dense forest."
            }
        },
        "depended_params": [
            {
                "file": "t1"
            }
        ]
    }
]