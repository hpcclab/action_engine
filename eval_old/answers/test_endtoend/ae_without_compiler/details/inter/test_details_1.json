[
    {
        "Id": 4,
        "name": "tti_Futuristic_Art",
        "input_parameters_with_datatype": [
            {
                "name": "prompt",
                "datatype": "string",
                "description": "The 'prompt' parameter is a user prompt in string data type. It is required for the API to generate visually captivating images inspired by Futuristic art. The prompt serves as the input text that will be processed by a pre-trained model to create artwork embodying Futuristic art aesthetics. This parameter is essential for users to provide the specific textual content that will be transformed into a Futuristic art-themed visual representation."
            }
        ],
        "input_description": "The input parameter for this API is a user prompt in string data type.",
        "output_data_type": "binary_image_file",
        "output description": "Generated digital art piece of a futuristic cityscape (image file)",
        "description": "This API takes a user prompt as input and generates an image in Futuristic art style using a pre-trained model. The input is a user prompt in the form of a string and the output is the generated image in the Futuristic art style in the form of an image file.",
        "method": "POST",
        "url": null,
        "summary": "The 'tti_Futuristic_Art' API utilizes a POST method to transform user prompts into visually captivating images inspired by Futuristic art. By inputting a textual prompt in string format, users can trigger the API to process the information through a pre-trained model, resulting in the creation of an artwork embodying Futuristic art aesthetics. The output of the API is a binary_image_file containing the generated image, allowing users to seamlessly convert their ideas into Futuristic art-themed visual representations, ideal for creative projects and digital artistry.",
        "source_code": "from fastapi import FastAPI, HTTPException\nfrom fastapi.responses import FileResponse\n\nfrom PIL import Image\nfrom diffusers import StableDiffusionPipeline, DPMSolverMultistepScheduler\nimport torch\nfrom pydantic import BaseModel\nfrom pathlib import Path\n\napp = FastAPI()\n\ndef load_model():\n    model_id = 'nitrosocke/Future-Diffusion'\n    pipe = StableDiffusionPipeline.from_pretrained(model_id, torch_dtype=torch.float16)\n    pipe.scheduler = DPMSolverMultistepScheduler.from_config(pipe.scheduler.config)\n    pipe = pipe.to('cuda')\n    return pipe\n\ndef process_data(prompt, pipe):\n    response = pipe(prompt).images[0]\n    return response\n\n@app.post(\"/generate_futuristic_image/\")\nasync def generate_image(prompt:str):\n    try:\n\n        # Load the model (replace load_model() with your actual model loading logic)\n        pipe = load_model()\n\n        # Prompt Creation\n        prompt = \"Futuristic-style picture: \" + prompt\n\n        # Process the data (replace process_data() with your actual data processing logic)\n        response = process_data(prompt, pipe)\n\n        ## Save the image\n        response.save('generated_img.png')\n\n        image_path = Path('generated_img.png')\n        if not image_path.is_file():\n            return {\"error\": \"Image not found on the server\"}\n\n        return FileResponse(image_path)\n    except Exception as e:\n        # Handle exceptions or errors here\n        raise HTTPException(status_code=500, detail=str(e))",
        "task_num": 1,
        "task_description": "Create a digital art piece of a futuristic cityscape.",
        "dependencies": [],
        "dependency_output": {},
        "depended_params": []
    },
    {
        "Id": 3,
        "name": "tti_Digital_Art",
        "input_parameters_with_datatype": [
            {
                "name": "prompt",
                "datatype": "string",
                "description": "The 'prompt' parameter is a user prompt in string data type, which serves as the input for this API. It describes the desired content or concept for the digital artwork generation process. The prompt is essential for guiding the model in creating visually striking digital art images based on the user's input, enabling users to convert their ideas into unique digital artworks."
            }
        ],
        "input_description": "The input parameter for this API is a user prompt in string data type.",
        "output_data_type": "binary_image_file",
        "output description": "Enhanced digital art image of a futuristic cityscape in file format",
        "description": "This API takes a user prompt as input and generates an image in digital art style using a pre-trained model for diffusion art generation. The user prompt is provided as a string and the output is a digital art image saved in a file format.",
        "method": "POST",
        "url": null,
        "summary": "The 'tti_Digital_Art' API utilizes a POST method to transform user prompts into visually striking digital art images through a pre-trained model specialized in diffusion art generation. Users supply a prompt in string format, describing the desired content or concept for the artwork. The API processes this input to create a unique digital art piece, which is then delivered to the user as a binary_image_file, encapsulating the generated masterpiece in a file format. This API seamlessly merges textual inspiration with artistic interpretation, empowering users to effortlessly convert their ideas into captivating digital artworks, enhancing creative projects and visual storytelling.",
        "source_code": "from fastapi import FastAPI, HTTPException\nfrom fastapi.responses import FileResponse\n\nfrom PIL import Image\nfrom diffusers import StableDiffusionPipeline, DPMSolverMultistepScheduler\nimport torch\nfrom pydantic import BaseModel\nfrom pathlib import Path\n\napp = FastAPI()\n\ndef load_model():\n    model_id = \"DGSpitzer/DGSpitzer-Art-Diffusion\"\n    pipe = StableDiffusionPipeline.from_pretrained(model_id, torch_dtype=torch.float16)\n    pipe.scheduler = DPMSolverMultistepScheduler.from_config(pipe.scheduler.config)\n    pipe = pipe.to('cuda')\n    return pipe\n\ndef process_data(prompt, pipe):\n    response = pipe(prompt).images[0]\n    return response\n\n@app.post(\"/generate_digital_image/\")\nasync def generate_image(prompt:str):\n    try:\n\n        # Load the model (replace load_model() with your actual model loading logic)\n        pipe = load_model()\n\n        # Prompt Creation\n        prompt = \"Digital-style picture: \" + prompt\n\n        # Process the data (replace process_data() with your actual data processing logic)\n        response = process_data(prompt, pipe)\n\n        ## Save the image\n        response.save('generated_img.png')\n\n        image_path = Path('generated_img.png')\n        if not image_path.is_file():\n            return {\"error\": \"Image not found on the server\"}\n\n        return FileResponse(image_path)\n    except Exception as e:\n        # Handle exceptions or errors here\n        raise HTTPException(status_code=500, detail=str(e))",
        "task_num": 2,
        "task_description": "Enhance the quality of the digital art piece of the futuristic cityscape.",
        "dependencies": [
            "t1"
        ],
        "dependency_output": {
            "t1": {
                "output_data_type": "binary_image_file",
                "output_description": "Generated digital art piece of a futuristic cityscape (image file)"
            }
        },
        "depended_params": []
    },
    {
        "Id": 11,
        "name": "image_to_pdf_conversion",
        "input_parameters_with_datatype": [
            {
                "name": "file",
                "datatype": "binary_image_file",
                "description": "The 'file' parameter should be a binary image file in one of the supported formats: JPEG, PNG, GIF, BMP, TIFF, PBM, PGM, or PPM. This parameter is required for the 'image_to_pdf_conversion' API to receive the input image file that will be converted to a PDF document. The API processes the provided image file and generates a PDF output, enabling users to efficiently transform visual content into a universally accessible format for sharing, printing, or archiving purposes."
            }
        ],
        "input_description": "An image file in supported format (.JPEG .PNG .GIF .BMP .TIFF .PBM .PGM .PPM)",
        "output_data_type": "binary_image_file",
        "output description": "A PDF file containing the enhanced digital art piece of the futuristic cityscape, formatted for presentation purposes.",
        "description": "This API allows users to convert an image file to a PDF document. Users need to upload an image file with one of the supported formats and the API will process the image and generate a corresponding PDF file as output.",
        "method": "POST",
        "url": null,
        "summary": "The 'image_to_pdf_conversion' API offers a convenient solution for converting image files to PDF documents through a POST method. Users can upload an image file in formats such as JPEG, PNG, GIF, BMP, TIFF, PBM, PGM, or PPM as the input parameter. Once the image is provided, the API seamlessly processes it and produces a PDF file as the output, allowing for efficient transformation of visual content into a portable and universally accessible format. This functionality streamlines the conversion process, enabling users to effortlessly convert diverse image types into PDF documents to facilitate sharing, printing, or archiving purposes.",
        "source_code": "from fastapi import FastAPI, File, UploadFile, HTTPException\nfrom fastapi.responses import FileResponse\nfrom pathlib import Path\nfrom PIL import Image\nimport img2pdf\n\napp = FastAPI()\n\n# Define the supported image extensions\nsupported_extensions = [\".JPEG\", \".PNG\", \".GIF\", \".BMP\", \".TIFF\", \".PBM\", \".PGM\", \".PPM\"]\n\n\ndef check_file_extension(file_path):\n    file_extension = file_path.suffix.upper()\n    if file_extension not in supported_extensions:\n        return False\n    return True\n\n\n@app.post(\"/convert_to_pdf/\")\nasync def image_to_pdf(file: UploadFile):\n    try:\n        file_path = Path(file.filename)\n        file_name = file_path.stem\n        \n        \n        # # File format support check\n        if not check_file_extension(file_path):\n            return {\"error\": \"Unsupported format\"}\n\n        # Read the contents of the uploaded file\n        contents = await file.read()\n        \n        pdf_bytes = img2pdf.convert(contents)\n        \n        pdf_file_path = f'{file_name}.pdf'\n\n        with open(pdf_file_path, 'wb') as pdf_file:\n            pdf_file.write(pdf_bytes)\n\n        # Return the PDF file\n        return FileResponse(pdf_file_path, media_type=\"application/pdf\", filename=\"output.pdf\")\n    except Exception as e:\n        # Handle exceptions or errors here\n        raise HTTPException(status_code=500, detail=str(e))",
        "task_num": 3,
        "task_description": "Convert the enhanced digital art piece of the futuristic cityscape into PDF format for a presentation.",
        "dependencies": [
            "t2"
        ],
        "dependency_output": {
            "t2": {
                "output_data_type": "binary_image_file",
                "output_description": "Enhanced digital art image of a futuristic cityscape in file format"
            }
        },
        "depended_params": [
            {
                "file": "t1"
            }
        ]
    }
]