[
    {
        "Id": 9,
        "name": "tti_Sketching_Art",
        "input_parameters_with_datatype": [
            {
                "name": "prompt",
                "datatype": "string",
                "description": "The 'prompt' parameter is a user-provided textual prompt in string format that serves as the input for generating artistic sketching images. It is essential for guiding the AI model to create visually striking sketching art style images based on the user's creative input."
            }
        ],
        "input_description": "The input parameter for this API is a user prompt in string data type.",
        "output_data_type": "binary_image_file",
        "output description": "A high-quality sketching art style image depicting technological advancements of computers in the early 1900s, showcasing intricate details and historical elements in a visually appealing manner. The image captures the essence of early computer technology through a sketching art style, highlighting key features and innovations of that era.",
        "description": "This API takes a user prompt as input and generates an image in sketching art style using the LoRA model and VAE component. The input prompt is combined with predefined negative prompts to guide the image generation process. The output is a high-quality sketching art style image saved in PNG format.",
        "method": "POST",
        "url": null,
        "summary": "The 'tti_Sketching_Art' API operates through a POST method to transform user prompts into artistic sketching images with the aid of the LoRA model and VAE component. Users provide a textual prompt in string format, which is then harmonized with pre-defined negative prompts to steer the generation of the artwork. The API proficiently processes this input, resulting in the creation of a visually striking sketching art style image. The final output is delivered in the form of a binary_image_file, encapsulating the generated art piece in PNG format. This API seamlessly merges user creativity with advanced AI techniques, empowering users to effortlessly convert simple prompts into sophisticated sketching art, enabling diverse applications in digital artistry and creative projects.",
        "source_code": "from fastapi import FastAPI, HTTPException\nfrom fastapi.responses import FileResponse\n\nfrom pydantic import BaseModel\nfrom pathlib import Path\n\n\nimport torch\nfrom diffusers import (\n    StableDiffusionXLPipeline, \n    EulerAncestralDiscreteScheduler,\n    AutoencoderKL\n)\napp = FastAPI()\n\n@app.post(\"/generate_sketching_image/\")\nasync def generate_image(prompt:str):\n    try:\n\n        # Initialize LoRA model and weights\n        lora_model_id = \"Linaqruf/sketch-style-xl-lora\"\n        lora_filename = \"sketch-style-xl.safetensors\"\n\n        # Load VAE component\n        vae = AutoencoderKL.from_pretrained(\n            \"madebyollin/sdxl-vae-fp16-fix\", \n            torch_dtype=torch.float16\n        )\n\n        # Configure the pipeline\n        pipe = StableDiffusionXLPipeline.from_pretrained(\n            \"Linaqruf/animagine-xl-2.0\", \n            vae=vae,\n            torch_dtype=torch.float16, \n            use_safetensors=True, \n            variant=\"fp16\"\n        )\n        pipe.scheduler = EulerAncestralDiscreteScheduler.from_config(pipe.scheduler.config)\n        pipe.to('cuda')\n\n        # Load and fuse LoRA weights\n        pipe.load_lora_weights(lora_model_id, weight_name=lora_filename)\n        pipe.fuse_lora(lora_scale=0.6)\n\n        # Define prompts and generate image\n        prompt = \"Monochrome, Greyscale Sketch-style picture: \" + prompt\n        \n\n        negative_prompt = \"lowres, bad anatomy, bad hands, text, error, missing fingers, extra digit, fewer digits, cropped, worst quality, low quality, normal quality, jpeg artifacts, signature, watermark, username, blurry\"\n\n        image = pipe(\n            prompt, \n            negative_prompt=negative_prompt, \n            width=1024,\n            height=1024,\n            guidance_scale=12,\n            num_inference_steps=50\n        ).images[0]\n\n        # Unfuse LoRA before saving the image\n        pipe.unfuse_lora()\n        image.save(\"generated_img.png\")\n\n        image_path = Path('generated_img.png')\n        if not image_path.is_file():\n            return {\"error\": \"Image not found on the server\"}\n        return FileResponse(image_path)\n    except Exception as e:\n        # Handle exceptions or errors here\n        raise HTTPException(status_code=500, detail=str(e))",
        "task_num": 1,
        "task_description": "Generate a sketching art style image depicting technological advancements of computers in the early 1900s.",
        "dependencies": [],
        "dependency_output": {},
        "depended_params": []
    },
    {
        "Id": 9,
        "name": "tti_Sketching_Art",
        "input_parameters_with_datatype": [
            {
                "name": "prompt",
                "datatype": "string",
                "description": "The 'prompt' parameter is a user-provided textual prompt in string format that serves as the input for generating artistic sketching images. It is essential for guiding the AI model to create visually striking sketching art style images based on the user's creative input."
            }
        ],
        "input_description": "The input parameter for this API is a user prompt in string data type.",
        "output_data_type": "binary_image_file",
        "output description": "A high-quality sketching art style image depicting technological advancements of computers in the 1950s, created using the LoRA model and VAE component. The image showcases intricate details and design elements characteristic of computer technology from that era, presented in a sketching art style with a nostalgic touch.",
        "description": "This API takes a user prompt as input and generates an image in sketching art style using the LoRA model and VAE component. The input prompt is combined with predefined negative prompts to guide the image generation process. The output is a high-quality sketching art style image saved in PNG format.",
        "method": "POST",
        "url": null,
        "summary": "The 'tti_Sketching_Art' API operates through a POST method to transform user prompts into artistic sketching images with the aid of the LoRA model and VAE component. Users provide a textual prompt in string format, which is then harmonized with pre-defined negative prompts to steer the generation of the artwork. The API proficiently processes this input, resulting in the creation of a visually striking sketching art style image. The final output is delivered in the form of a binary_image_file, encapsulating the generated art piece in PNG format. This API seamlessly merges user creativity with advanced AI techniques, empowering users to effortlessly convert simple prompts into sophisticated sketching art, enabling diverse applications in digital artistry and creative projects.",
        "source_code": "from fastapi import FastAPI, HTTPException\nfrom fastapi.responses import FileResponse\n\nfrom pydantic import BaseModel\nfrom pathlib import Path\n\n\nimport torch\nfrom diffusers import (\n    StableDiffusionXLPipeline, \n    EulerAncestralDiscreteScheduler,\n    AutoencoderKL\n)\napp = FastAPI()\n\n@app.post(\"/generate_sketching_image/\")\nasync def generate_image(prompt:str):\n    try:\n\n        # Initialize LoRA model and weights\n        lora_model_id = \"Linaqruf/sketch-style-xl-lora\"\n        lora_filename = \"sketch-style-xl.safetensors\"\n\n        # Load VAE component\n        vae = AutoencoderKL.from_pretrained(\n            \"madebyollin/sdxl-vae-fp16-fix\", \n            torch_dtype=torch.float16\n        )\n\n        # Configure the pipeline\n        pipe = StableDiffusionXLPipeline.from_pretrained(\n            \"Linaqruf/animagine-xl-2.0\", \n            vae=vae,\n            torch_dtype=torch.float16, \n            use_safetensors=True, \n            variant=\"fp16\"\n        )\n        pipe.scheduler = EulerAncestralDiscreteScheduler.from_config(pipe.scheduler.config)\n        pipe.to('cuda')\n\n        # Load and fuse LoRA weights\n        pipe.load_lora_weights(lora_model_id, weight_name=lora_filename)\n        pipe.fuse_lora(lora_scale=0.6)\n\n        # Define prompts and generate image\n        prompt = \"Monochrome, Greyscale Sketch-style picture: \" + prompt\n        \n\n        negative_prompt = \"lowres, bad anatomy, bad hands, text, error, missing fingers, extra digit, fewer digits, cropped, worst quality, low quality, normal quality, jpeg artifacts, signature, watermark, username, blurry\"\n\n        image = pipe(\n            prompt, \n            negative_prompt=negative_prompt, \n            width=1024,\n            height=1024,\n            guidance_scale=12,\n            num_inference_steps=50\n        ).images[0]\n\n        # Unfuse LoRA before saving the image\n        pipe.unfuse_lora()\n        image.save(\"generated_img.png\")\n\n        image_path = Path('generated_img.png')\n        if not image_path.is_file():\n            return {\"error\": \"Image not found on the server\"}\n        return FileResponse(image_path)\n    except Exception as e:\n        # Handle exceptions or errors here\n        raise HTTPException(status_code=500, detail=str(e))",
        "task_num": 2,
        "task_description": "Generate a sketching art style image depicting technological advancements of computers in the 1950s.",
        "dependencies": [],
        "dependency_output": {},
        "depended_params": []
    },
    {
        "Id": 9,
        "name": "tti_Sketching_Art",
        "input_parameters_with_datatype": [
            {
                "name": "prompt",
                "datatype": "string",
                "description": "The 'prompt' parameter is a user-provided textual prompt in string format that serves as the input for generating artistic sketching images. It is essential for guiding the AI model to create visually striking sketching art style images based on the user's creative input."
            }
        ],
        "input_description": "The input parameter for this API is a user prompt in string data type.",
        "output_data_type": "binary_image_file",
        "output description": "A futuristic art style image depicting technological advancements of computers in the 2020s, created using the LoRA model and VAE component. The image will showcase innovative computer designs and features, reflecting the advancements of the era.",
        "description": "This API takes a user prompt as input and generates an image in sketching art style using the LoRA model and VAE component. The input prompt is combined with predefined negative prompts to guide the image generation process. The output is a high-quality sketching art style image saved in PNG format.",
        "method": "POST",
        "url": null,
        "summary": "The 'tti_Sketching_Art' API operates through a POST method to transform user prompts into artistic sketching images with the aid of the LoRA model and VAE component. Users provide a textual prompt in string format, which is then harmonized with pre-defined negative prompts to steer the generation of the artwork. The API proficiently processes this input, resulting in the creation of a visually striking sketching art style image. The final output is delivered in the form of a binary_image_file, encapsulating the generated art piece in PNG format. This API seamlessly merges user creativity with advanced AI techniques, empowering users to effortlessly convert simple prompts into sophisticated sketching art, enabling diverse applications in digital artistry and creative projects.",
        "source_code": "from fastapi import FastAPI, HTTPException\nfrom fastapi.responses import FileResponse\n\nfrom pydantic import BaseModel\nfrom pathlib import Path\n\n\nimport torch\nfrom diffusers import (\n    StableDiffusionXLPipeline, \n    EulerAncestralDiscreteScheduler,\n    AutoencoderKL\n)\napp = FastAPI()\n\n@app.post(\"/generate_sketching_image/\")\nasync def generate_image(prompt:str):\n    try:\n\n        # Initialize LoRA model and weights\n        lora_model_id = \"Linaqruf/sketch-style-xl-lora\"\n        lora_filename = \"sketch-style-xl.safetensors\"\n\n        # Load VAE component\n        vae = AutoencoderKL.from_pretrained(\n            \"madebyollin/sdxl-vae-fp16-fix\", \n            torch_dtype=torch.float16\n        )\n\n        # Configure the pipeline\n        pipe = StableDiffusionXLPipeline.from_pretrained(\n            \"Linaqruf/animagine-xl-2.0\", \n            vae=vae,\n            torch_dtype=torch.float16, \n            use_safetensors=True, \n            variant=\"fp16\"\n        )\n        pipe.scheduler = EulerAncestralDiscreteScheduler.from_config(pipe.scheduler.config)\n        pipe.to('cuda')\n\n        # Load and fuse LoRA weights\n        pipe.load_lora_weights(lora_model_id, weight_name=lora_filename)\n        pipe.fuse_lora(lora_scale=0.6)\n\n        # Define prompts and generate image\n        prompt = \"Monochrome, Greyscale Sketch-style picture: \" + prompt\n        \n\n        negative_prompt = \"lowres, bad anatomy, bad hands, text, error, missing fingers, extra digit, fewer digits, cropped, worst quality, low quality, normal quality, jpeg artifacts, signature, watermark, username, blurry\"\n\n        image = pipe(\n            prompt, \n            negative_prompt=negative_prompt, \n            width=1024,\n            height=1024,\n            guidance_scale=12,\n            num_inference_steps=50\n        ).images[0]\n\n        # Unfuse LoRA before saving the image\n        pipe.unfuse_lora()\n        image.save(\"generated_img.png\")\n\n        image_path = Path('generated_img.png')\n        if not image_path.is_file():\n            return {\"error\": \"Image not found on the server\"}\n        return FileResponse(image_path)\n    except Exception as e:\n        # Handle exceptions or errors here\n        raise HTTPException(status_code=500, detail=str(e))",
        "task_num": 3,
        "task_description": "Generate a futuristic art style image depicting technological advancements of computers in the 2020s.",
        "dependencies": [],
        "dependency_output": {},
        "depended_params": []
    },
    {
        "Id": 9,
        "name": "tti_Sketching_Art",
        "input_parameters_with_datatype": [
            {
                "name": "prompt",
                "datatype": "string",
                "description": "The 'prompt' parameter is a user-provided textual prompt in string format that serves as the input for generating artistic sketching images. It is essential for guiding the AI model to create visually striking sketching art style images based on the user's creative input."
            }
        ],
        "input_description": "The input parameter for this API is a user prompt in string data type.",
        "output_data_type": "binary_image_file",
        "output description": "A high-quality sketching art style image in PNG format, resembling the early 1900s art style.",
        "description": "This API takes a user prompt as input and generates an image in sketching art style using the LoRA model and VAE component. The input prompt is combined with predefined negative prompts to guide the image generation process. The output is a high-quality sketching art style image saved in PNG format.",
        "method": "POST",
        "url": null,
        "summary": "The 'tti_Sketching_Art' API operates through a POST method to transform user prompts into artistic sketching images with the aid of the LoRA model and VAE component. Users provide a textual prompt in string format, which is then harmonized with pre-defined negative prompts to steer the generation of the artwork. The API proficiently processes this input, resulting in the creation of a visually striking sketching art style image. The final output is delivered in the form of a binary_image_file, encapsulating the generated art piece in PNG format. This API seamlessly merges user creativity with advanced AI techniques, empowering users to effortlessly convert simple prompts into sophisticated sketching art, enabling diverse applications in digital artistry and creative projects.",
        "source_code": "from fastapi import FastAPI, HTTPException\nfrom fastapi.responses import FileResponse\n\nfrom pydantic import BaseModel\nfrom pathlib import Path\n\n\nimport torch\nfrom diffusers import (\n    StableDiffusionXLPipeline, \n    EulerAncestralDiscreteScheduler,\n    AutoencoderKL\n)\napp = FastAPI()\n\n@app.post(\"/generate_sketching_image/\")\nasync def generate_image(prompt:str):\n    try:\n\n        # Initialize LoRA model and weights\n        lora_model_id = \"Linaqruf/sketch-style-xl-lora\"\n        lora_filename = \"sketch-style-xl.safetensors\"\n\n        # Load VAE component\n        vae = AutoencoderKL.from_pretrained(\n            \"madebyollin/sdxl-vae-fp16-fix\", \n            torch_dtype=torch.float16\n        )\n\n        # Configure the pipeline\n        pipe = StableDiffusionXLPipeline.from_pretrained(\n            \"Linaqruf/animagine-xl-2.0\", \n            vae=vae,\n            torch_dtype=torch.float16, \n            use_safetensors=True, \n            variant=\"fp16\"\n        )\n        pipe.scheduler = EulerAncestralDiscreteScheduler.from_config(pipe.scheduler.config)\n        pipe.to('cuda')\n\n        # Load and fuse LoRA weights\n        pipe.load_lora_weights(lora_model_id, weight_name=lora_filename)\n        pipe.fuse_lora(lora_scale=0.6)\n\n        # Define prompts and generate image\n        prompt = \"Monochrome, Greyscale Sketch-style picture: \" + prompt\n        \n\n        negative_prompt = \"lowres, bad anatomy, bad hands, text, error, missing fingers, extra digit, fewer digits, cropped, worst quality, low quality, normal quality, jpeg artifacts, signature, watermark, username, blurry\"\n\n        image = pipe(\n            prompt, \n            negative_prompt=negative_prompt, \n            width=1024,\n            height=1024,\n            guidance_scale=12,\n            num_inference_steps=50\n        ).images[0]\n\n        # Unfuse LoRA before saving the image\n        pipe.unfuse_lora()\n        image.save(\"generated_img.png\")\n\n        image_path = Path('generated_img.png')\n        if not image_path.is_file():\n            return {\"error\": \"Image not found on the server\"}\n        return FileResponse(image_path)\n    except Exception as e:\n        # Handle exceptions or errors here\n        raise HTTPException(status_code=500, detail=str(e))",
        "task_num": 4,
        "task_description": "Convert the sketching art style image of the early 1900s to PNG format.",
        "dependencies": [
            "t1",
            "t2",
            "t3"
        ],
        "dependency_output": {
            "t1": {
                "output_data_type": "binary_image_file",
                "output_description": "A high-quality sketching art style image depicting technological advancements of computers in the early 1900s, showcasing intricate details and historical elements in a visually appealing manner. The image captures the essence of early computer technology through a sketching art style, highlighting key features and innovations of that era."
            },
            "t2": {
                "output_data_type": "binary_image_file",
                "output_description": "A high-quality sketching art style image depicting technological advancements of computers in the 1950s, created using the LoRA model and VAE component. The image showcases intricate details and design elements characteristic of computer technology from that era, presented in a sketching art style with a nostalgic touch."
            },
            "t3": {
                "output_data_type": "binary_image_file",
                "output_description": "A futuristic art style image depicting technological advancements of computers in the 2020s, created using the LoRA model and VAE component. The image will showcase innovative computer designs and features, reflecting the advancements of the era."
            }
        },
        "depended_params": []
    },
    {
        "Id": 9,
        "name": "tti_Sketching_Art",
        "input_parameters_with_datatype": [
            {
                "name": "prompt",
                "datatype": "string",
                "description": "The 'prompt' parameter is a user-provided textual prompt in string format that serves as the input for generating artistic sketching images. It is essential for guiding the AI model to create visually striking sketching art style images based on the user's creative input."
            }
        ],
        "input_description": "The input parameter for this API is a user prompt in string data type.",
        "output_data_type": "binary_image_file",
        "output description": "Generated sketching art style image of the 1950s in PNG format",
        "description": "This API takes a user prompt as input and generates an image in sketching art style using the LoRA model and VAE component. The input prompt is combined with predefined negative prompts to guide the image generation process. The output is a high-quality sketching art style image saved in PNG format.",
        "method": "POST",
        "url": null,
        "summary": "The 'tti_Sketching_Art' API operates through a POST method to transform user prompts into artistic sketching images with the aid of the LoRA model and VAE component. Users provide a textual prompt in string format, which is then harmonized with pre-defined negative prompts to steer the generation of the artwork. The API proficiently processes this input, resulting in the creation of a visually striking sketching art style image. The final output is delivered in the form of a binary_image_file, encapsulating the generated art piece in PNG format. This API seamlessly merges user creativity with advanced AI techniques, empowering users to effortlessly convert simple prompts into sophisticated sketching art, enabling diverse applications in digital artistry and creative projects.",
        "source_code": "from fastapi import FastAPI, HTTPException\nfrom fastapi.responses import FileResponse\n\nfrom pydantic import BaseModel\nfrom pathlib import Path\n\n\nimport torch\nfrom diffusers import (\n    StableDiffusionXLPipeline, \n    EulerAncestralDiscreteScheduler,\n    AutoencoderKL\n)\napp = FastAPI()\n\n@app.post(\"/generate_sketching_image/\")\nasync def generate_image(prompt:str):\n    try:\n\n        # Initialize LoRA model and weights\n        lora_model_id = \"Linaqruf/sketch-style-xl-lora\"\n        lora_filename = \"sketch-style-xl.safetensors\"\n\n        # Load VAE component\n        vae = AutoencoderKL.from_pretrained(\n            \"madebyollin/sdxl-vae-fp16-fix\", \n            torch_dtype=torch.float16\n        )\n\n        # Configure the pipeline\n        pipe = StableDiffusionXLPipeline.from_pretrained(\n            \"Linaqruf/animagine-xl-2.0\", \n            vae=vae,\n            torch_dtype=torch.float16, \n            use_safetensors=True, \n            variant=\"fp16\"\n        )\n        pipe.scheduler = EulerAncestralDiscreteScheduler.from_config(pipe.scheduler.config)\n        pipe.to('cuda')\n\n        # Load and fuse LoRA weights\n        pipe.load_lora_weights(lora_model_id, weight_name=lora_filename)\n        pipe.fuse_lora(lora_scale=0.6)\n\n        # Define prompts and generate image\n        prompt = \"Monochrome, Greyscale Sketch-style picture: \" + prompt\n        \n\n        negative_prompt = \"lowres, bad anatomy, bad hands, text, error, missing fingers, extra digit, fewer digits, cropped, worst quality, low quality, normal quality, jpeg artifacts, signature, watermark, username, blurry\"\n\n        image = pipe(\n            prompt, \n            negative_prompt=negative_prompt, \n            width=1024,\n            height=1024,\n            guidance_scale=12,\n            num_inference_steps=50\n        ).images[0]\n\n        # Unfuse LoRA before saving the image\n        pipe.unfuse_lora()\n        image.save(\"generated_img.png\")\n\n        image_path = Path('generated_img.png')\n        if not image_path.is_file():\n            return {\"error\": \"Image not found on the server\"}\n        return FileResponse(image_path)\n    except Exception as e:\n        # Handle exceptions or errors here\n        raise HTTPException(status_code=500, detail=str(e))",
        "task_num": 5,
        "task_description": "Convert the sketching art style image of the 1950s to PNG format.",
        "dependencies": [
            "t1",
            "t2",
            "t3"
        ],
        "dependency_output": {
            "t1": {
                "output_data_type": "binary_image_file",
                "output_description": "A high-quality sketching art style image depicting technological advancements of computers in the early 1900s, showcasing intricate details and historical elements in a visually appealing manner. The image captures the essence of early computer technology through a sketching art style, highlighting key features and innovations of that era."
            },
            "t2": {
                "output_data_type": "binary_image_file",
                "output_description": "A high-quality sketching art style image depicting technological advancements of computers in the 1950s, created using the LoRA model and VAE component. The image showcases intricate details and design elements characteristic of computer technology from that era, presented in a sketching art style with a nostalgic touch."
            },
            "t3": {
                "output_data_type": "binary_image_file",
                "output_description": "A futuristic art style image depicting technological advancements of computers in the 2020s, created using the LoRA model and VAE component. The image will showcase innovative computer designs and features, reflecting the advancements of the era."
            }
        },
        "depended_params": []
    },
    {
        "Id": 4,
        "name": "tti_Futuristic_Art",
        "input_parameters_with_datatype": [
            {
                "name": "prompt",
                "datatype": "string",
                "description": "The 'prompt' parameter is a user prompt in string data type. It is required for the API to generate visually captivating images inspired by Futuristic art. The prompt serves as the input text that will be processed by a pre-trained model to create artwork embodying Futuristic art aesthetics. This parameter is essential for users to provide the specific textual content that will be transformed into a Futuristic art-themed visual representation."
            }
        ],
        "input_description": "The input parameter for this API is a user prompt in string data type.",
        "output_data_type": "binary_image_file",
        "output description": "Converted image in PNG format with a futuristic art style of the 2020s",
        "description": "This API takes a user prompt as input and generates an image in Futuristic art style using a pre-trained model. The input is a user prompt in the form of a string and the output is the generated image in the Futuristic art style in the form of an image file.",
        "method": "POST",
        "url": null,
        "summary": "The 'tti_Futuristic_Art' API utilizes a POST method to transform user prompts into visually captivating images inspired by Futuristic art. By inputting a textual prompt in string format, users can trigger the API to process the information through a pre-trained model, resulting in the creation of an artwork embodying Futuristic art aesthetics. The output of the API is a binary_image_file containing the generated image, allowing users to seamlessly convert their ideas into Futuristic art-themed visual representations, ideal for creative projects and digital artistry.",
        "source_code": "from fastapi import FastAPI, HTTPException\nfrom fastapi.responses import FileResponse\n\nfrom PIL import Image\nfrom diffusers import StableDiffusionPipeline, DPMSolverMultistepScheduler\nimport torch\nfrom pydantic import BaseModel\nfrom pathlib import Path\n\napp = FastAPI()\n\ndef load_model():\n    model_id = 'nitrosocke/Future-Diffusion'\n    pipe = StableDiffusionPipeline.from_pretrained(model_id, torch_dtype=torch.float16)\n    pipe.scheduler = DPMSolverMultistepScheduler.from_config(pipe.scheduler.config)\n    pipe = pipe.to('cuda')\n    return pipe\n\ndef process_data(prompt, pipe):\n    response = pipe(prompt).images[0]\n    return response\n\n@app.post(\"/generate_futuristic_image/\")\nasync def generate_image(prompt:str):\n    try:\n\n        # Load the model (replace load_model() with your actual model loading logic)\n        pipe = load_model()\n\n        # Prompt Creation\n        prompt = \"Futuristic-style picture: \" + prompt\n\n        # Process the data (replace process_data() with your actual data processing logic)\n        response = process_data(prompt, pipe)\n\n        ## Save the image\n        response.save('generated_img.png')\n\n        image_path = Path('generated_img.png')\n        if not image_path.is_file():\n            return {\"error\": \"Image not found on the server\"}\n\n        return FileResponse(image_path)\n    except Exception as e:\n        # Handle exceptions or errors here\n        raise HTTPException(status_code=500, detail=str(e))",
        "task_num": 6,
        "task_description": "Convert the futuristic art style image of the 2020s to PNG format.",
        "dependencies": [
            "t1",
            "t2",
            "t3"
        ],
        "dependency_output": {
            "t1": {
                "output_data_type": "binary_image_file",
                "output_description": "A high-quality sketching art style image depicting technological advancements of computers in the early 1900s, showcasing intricate details and historical elements in a visually appealing manner. The image captures the essence of early computer technology through a sketching art style, highlighting key features and innovations of that era."
            },
            "t2": {
                "output_data_type": "binary_image_file",
                "output_description": "A high-quality sketching art style image depicting technological advancements of computers in the 1950s, created using the LoRA model and VAE component. The image showcases intricate details and design elements characteristic of computer technology from that era, presented in a sketching art style with a nostalgic touch."
            },
            "t3": {
                "output_data_type": "binary_image_file",
                "output_description": "A futuristic art style image depicting technological advancements of computers in the 2020s, created using the LoRA model and VAE component. The image will showcase innovative computer designs and features, reflecting the advancements of the era."
            }
        },
        "depended_params": []
    },
    {
        "Id": 9,
        "name": "tti_Sketching_Art",
        "input_parameters_with_datatype": [
            {
                "name": "prompt",
                "datatype": "string",
                "description": "The 'prompt' parameter is a user-provided textual prompt in string format that serves as the input for generating artistic sketching images. It is essential for guiding the AI model to create visually striking sketching art style images based on the user's creative input."
            }
        ],
        "input_description": "The input parameter for this API is a user prompt in string data type.",
        "output_data_type": "binary_image_file",
        "output description": "Generated sketching art style image in PNG format of the 2020s",
        "description": "This API takes a user prompt as input and generates an image in sketching art style using the LoRA model and VAE component. The input prompt is combined with predefined negative prompts to guide the image generation process. The output is a high-quality sketching art style image saved in PNG format.",
        "method": "POST",
        "url": null,
        "summary": "The 'tti_Sketching_Art' API operates through a POST method to transform user prompts into artistic sketching images with the aid of the LoRA model and VAE component. Users provide a textual prompt in string format, which is then harmonized with pre-defined negative prompts to steer the generation of the artwork. The API proficiently processes this input, resulting in the creation of a visually striking sketching art style image. The final output is delivered in the form of a binary_image_file, encapsulating the generated art piece in PNG format. This API seamlessly merges user creativity with advanced AI techniques, empowering users to effortlessly convert simple prompts into sophisticated sketching art, enabling diverse applications in digital artistry and creative projects.",
        "source_code": "from fastapi import FastAPI, HTTPException\nfrom fastapi.responses import FileResponse\n\nfrom pydantic import BaseModel\nfrom pathlib import Path\n\n\nimport torch\nfrom diffusers import (\n    StableDiffusionXLPipeline, \n    EulerAncestralDiscreteScheduler,\n    AutoencoderKL\n)\napp = FastAPI()\n\n@app.post(\"/generate_sketching_image/\")\nasync def generate_image(prompt:str):\n    try:\n\n        # Initialize LoRA model and weights\n        lora_model_id = \"Linaqruf/sketch-style-xl-lora\"\n        lora_filename = \"sketch-style-xl.safetensors\"\n\n        # Load VAE component\n        vae = AutoencoderKL.from_pretrained(\n            \"madebyollin/sdxl-vae-fp16-fix\", \n            torch_dtype=torch.float16\n        )\n\n        # Configure the pipeline\n        pipe = StableDiffusionXLPipeline.from_pretrained(\n            \"Linaqruf/animagine-xl-2.0\", \n            vae=vae,\n            torch_dtype=torch.float16, \n            use_safetensors=True, \n            variant=\"fp16\"\n        )\n        pipe.scheduler = EulerAncestralDiscreteScheduler.from_config(pipe.scheduler.config)\n        pipe.to('cuda')\n\n        # Load and fuse LoRA weights\n        pipe.load_lora_weights(lora_model_id, weight_name=lora_filename)\n        pipe.fuse_lora(lora_scale=0.6)\n\n        # Define prompts and generate image\n        prompt = \"Monochrome, Greyscale Sketch-style picture: \" + prompt\n        \n\n        negative_prompt = \"lowres, bad anatomy, bad hands, text, error, missing fingers, extra digit, fewer digits, cropped, worst quality, low quality, normal quality, jpeg artifacts, signature, watermark, username, blurry\"\n\n        image = pipe(\n            prompt, \n            negative_prompt=negative_prompt, \n            width=1024,\n            height=1024,\n            guidance_scale=12,\n            num_inference_steps=50\n        ).images[0]\n\n        # Unfuse LoRA before saving the image\n        pipe.unfuse_lora()\n        image.save(\"generated_img.png\")\n\n        image_path = Path('generated_img.png')\n        if not image_path.is_file():\n            return {\"error\": \"Image not found on the server\"}\n        return FileResponse(image_path)\n    except Exception as e:\n        # Handle exceptions or errors here\n        raise HTTPException(status_code=500, detail=str(e))",
        "task_num": 7,
        "task_description": "Email the PNG format image of the 2020s to the project supervisor.",
        "dependencies": [
            "t4",
            "t5",
            "t6"
        ],
        "dependency_output": {
            "t4": {
                "output_data_type": "binary_image_file",
                "output_description": "A high-quality sketching art style image in PNG format, resembling the early 1900s art style."
            },
            "t5": {
                "output_data_type": "binary_image_file",
                "output_description": "Generated sketching art style image of the 1950s in PNG format"
            },
            "t6": {
                "output_data_type": "binary_image_file",
                "output_description": "Converted image in PNG format with a futuristic art style of the 2020s"
            }
        },
        "depended_params": []
    }
]