[
    {
        "Id": 5,
        "name": "tti_Graffiti_Art",
        "input_parameters_with_datatype": [
            {
                "name": "prompt",
                "datatype": "string",
                "description": "The 'prompt' parameter is a user-provided textual prompt in string data type. It serves as the input for the 'tti_Graffiti_Art' API, allowing users to input their creative ideas or prompts to generate graffiti-style images. This parameter is essential for the API to transform the user's textual input into visually appealing graffiti art."
            }
        ],
        "input_description": "The input parameter for this API is a user prompt in string data type.",
        "output_data_type": "binary_image_file",
        "output description": "An image in graffiti art style depicting a bustling city street with vibrant colors and street performers.",
        "description": "This API takes a user prompt as input and generates an image in graffiti art style using a pre-trained model. The input is a string prompt provided by the user and the output is an image in graffiti art style",
        "method": "POST",
        "url": null,
        "summary": "The 'tti_Graffiti_Art' API utilizes a POST method to transform user-provided textual prompts into visually appealing graffiti-style images. By accepting a string input prompt from the user, this API leverages a pre-trained model to create unique artwork in the form of graffiti art. The output of this process is delivered as a binary_image_file, encapsulating the generated graffiti art image. This API serves as a creative tool, allowing users to seamlessly translate their ideas and prompts into vibrant graffiti-style visual representations, catering to artistic expression and design needs.",
        "source_code": "from fastapi import FastAPI, HTTPException\nfrom fastapi.responses import FileResponse\n\nfrom PIL import Image\nfrom diffusers import StableDiffusionPipeline, DPMSolverMultistepScheduler\nimport torch\nfrom pydantic import BaseModel\nfrom pathlib import Path\n\napp = FastAPI()\n\ndef load_model():\n    model_id = 'bakebrain/bergraffi-berlin-graffiti'\n    pipe = StableDiffusionPipeline.from_pretrained(model_id, torch_dtype=torch.float16)\n    pipe.scheduler = DPMSolverMultistepScheduler.from_config(pipe.scheduler.config)\n    pipe = pipe.to('cuda')\n    return pipe\n\ndef process_data(prompt, pipe):\n    response = pipe(prompt).images[0]\n    return response\n\n@app.post(\"/generate_grafiti_image/\")\nasync def generate_image(prompt:str):\n    try:\n\n        # Load the model (replace load_model() with your actual model loading logic)\n        pipe = load_model()\n\n        # Prompt Creation\n        prompt = \"Grafiti-style picture: \" + prompt\n\n        # Process the data (replace process_data() with your actual data processing logic)\n        response = process_data(prompt, pipe)\n\n        ## Save the image\n        response.save('generated_img.png')\n\n        image_path = Path('generated_img.png')\n        if not image_path.is_file():\n            return {\"error\": \"Image not found on the server\"}\n\n        return FileResponse(image_path)\n    except Exception as e:\n        # Handle exceptions or errors here\n        raise HTTPException(status_code=500, detail=str(e))",
        "task_num": 1,
        "task_description": "Create a graffiti art image of a bustling city street with vibrant colors and street performers.",
        "dependencies": [],
        "dependency_output": {},
        "depended_params": []
    },
    {
        "Id": 6,
        "name": "tti_Mosaic_Art",
        "input_parameters_with_datatype": [
            {
                "name": "prompt",
                "datatype": "string",
                "description": "The prompt parameter is a user-provided text input in string format that serves as the basis for generating a mosaic art style image. It is essential for triggering the creation of visually striking mosaic compositions based on the user's initial idea or concept."
            }
        ],
        "input_description": "The input parameter for this API is a user prompt in string data type.",
        "output_data_type": "binary_image_file",
        "output description": "Generated mosaic art image of the same city street in a more abstract form",
        "description": "This API takes a user prompt and generates an image in mosaic art style.",
        "method": "POST",
        "url": null,
        "summary": "The 'tti_Mosaic_Art' API utilizes a POST method to transform user-provided prompts into captivating mosaic art style images. By inputting a prompt in string format, users can trigger the generation of a visually striking mosaic art piece. The API then processes this input, leveraging intricate algorithms to craft a unique image that embodies the essence of mosaic aesthetics. The output is presented as a binary_image_file, encapsulating the mosaic artwork created based on the user's initial prompt. This API serves as a creative tool for generating artistic mosaic compositions, offering users a seamless pathway to infuse their ideas with visually stunning mosaic designs.",
        "source_code": "from fastapi import FastAPI, HTTPException\nfrom fastapi.responses import FileResponse\n\nfrom PIL import Image\nfrom diffusers import StableDiffusionPipeline, DPMSolverMultistepScheduler\nimport torch\nfrom pydantic import BaseModel\nfrom pathlib import Path\n\napp = FastAPI()\n\ndef load_model():\n    model_id = 'Guizmus/MosaicArt'\n    pipe = StableDiffusionPipeline.from_pretrained(model_id, torch_dtype=torch.float16)\n    pipe.scheduler = DPMSolverMultistepScheduler.from_config(pipe.scheduler.config)\n    pipe = pipe.to('cuda')\n    return pipe\n\ndef process_data(prompt, pipe):\n    response = pipe(prompt).images[0]\n    return response\n\n@app.post(\"/generate_mosaic_image/\")\nasync def generate_image(prompt:str):\n    try:\n\n        # Load the model (replace load_model() with your actual model loading logic)\n        pipe = load_model()\n\n        # Prompt Creation\n        prompt = \"Mosiac-style picture: \" + prompt\n\n        # Process the data (replace process_data() with your actual data processing logic)\n        response = process_data(prompt, pipe)\n\n        ## Save the image\n        response.save('generated_img.png')\n\n        image_path = Path('generated_img.png')\n        if not image_path.is_file():\n            return {\"error\": \"Image not found on the server\"}\n\n        return FileResponse(image_path)\n    except Exception as e:\n        # Handle exceptions or errors here\n        raise HTTPException(status_code=500, detail=str(e))",
        "task_num": 2,
        "task_description": "Create a mosaic art image of the same city street but in a more abstract form.",
        "dependencies": [],
        "dependency_output": {},
        "depended_params": []
    },
    {
        "Id": 10,
        "name": "tti_Ukiyo-e_Art",
        "input_parameters_with_datatype": [
            {
                "name": "prompt",
                "datatype": "string",
                "description": "The 'prompt' parameter is a user prompt in string data type. It is required for the API to generate visually captivating images resembling the traditional Japanese ukiyo-e art style. The prompt should be enriched by appending 'Japanese Ukiyo e-style picture:' to guide the image creation process, as specified in the function description."
            }
        ],
        "input_description": "The input parameter for this API is a user prompt in string data type.",
        "output_data_type": "binary_image_file",
        "output description": "The output of this API is an image of a city street with traditional Japanese elements, generated in the ukiyo-e art style. The image is saved as a PNG file and returned as a response.",
        "description": "This API takes a user prompt as input and generates an image in the traditional Japanese ukiyo-e art style. The input prompt is concatenated with 'Japanese Ukiyo e-style picture:' before processing. The generated image is then saved as a PNG file and returned as a response.",
        "method": "POST",
        "url": null,
        "summary": "The 'tti_Ukiyo-e_Art' API is a resourceful tool that converts user prompts into visually captivating images resembling the traditional Japanese ukiyo-e art style using a POST method. Users submit a prompt in string format, which is enriched by appending 'Japanese Ukiyo e-style picture:' to guide the image creation process. Through intricate processing, the API yields an image brimming with ukiyo-e aesthetics and nuances, ultimately delivering the output as a PNG binary_image_file. This API seamlessly merges modern inputs with historical artistic styles, offering users a gateway to explore and integrate traditional Japanese artistry into contemporary digital creations.",
        "source_code": "from fastapi import FastAPI, HTTPException\nfrom fastapi.responses import FileResponse\n\nfrom PIL import Image\nfrom diffusers import StableDiffusionPipeline, DPMSolverMultistepScheduler\nimport torch\nfrom pydantic import BaseModel\nfrom pathlib import Path\n\napp = FastAPI()\n\ndef load_model():\n    model_id = 'salmonhumorous/ukeiyo-style-diffusion'\n    pipe = StableDiffusionPipeline.from_pretrained(model_id, torch_dtype=torch.float16)\n    pipe.scheduler = DPMSolverMultistepScheduler.from_config(pipe.scheduler.config)\n    pipe = pipe.to('cuda')\n    return pipe\n\ndef process_data(prompt, pipe):\n    response = pipe(prompt).images[0]\n    return response\n\n@app.post(\"/generate_ukiyoe_image/\")\nasync def generate_image(prompt:str):\n    try:\n\n        # Load the model (replace load_model() with your actual model loading logic)\n        pipe = load_model()\n\n        # Prompt Creation\n        prompt = \"Japanese Ukiyo e-style picture: \" + prompt\n\n        # Process the data (replace process_data() with your actual data processing logic)\n        response = process_data(prompt, pipe)\n\n        ## Save the image\n        response.save('generated_img.png')\n\n        image_path = Path('generated_img.png')\n        if not image_path.is_file():\n            return {\"error\": \"Image not found on the server\"}\n\n        return FileResponse(image_path)\n    except Exception as e:\n        # Handle exceptions or errors here\n        raise HTTPException(status_code=500, detail=str(e))",
        "task_num": 3,
        "task_description": "Create a ukiyo-e art image of the city street with traditional Japanese elements.",
        "dependencies": [],
        "dependency_output": {},
        "depended_params": []
    },
    {
        "Id": 12,
        "name": "Image_Resizing",
        "input_parameters_with_datatype": [
            {
                "name": "width",
                "datatype": "int",
                "description": "The 'width' parameter specifies the desired width dimension for resizing the user-uploaded image file. This parameter is essential for determining the new width of the image during the resizing process. It plays a crucial role in adjusting the dimensions of the image according to user requirements, ensuring the output meets the specified width criteria for the resized image."
            },
            {
                "name": "height",
                "datatype": "int",
                "description": "The height parameter specifies the desired height dimension for resizing the user-uploaded image file. This parameter is essential for determining the final dimensions of the resized image, ensuring that the output meets the user's requirements for image size adjustments."
            },
            {
                "name": "file",
                "datatype": "binary_image_file",
                "description": "The 'file' parameter of datatype 'binary_image_file' is required for this API as it serves as the input containing the image file uploaded by the user. This parameter is essential for the 'Image_Resizing' API to receive the binary form of the image file, enabling the resizing process to be carried out on the user-provided visual content."
            }
        ],
        "input_description": "The input for this API is an image file uploaded by the user.",
        "output_data_type": "binary_image_file",
        "output description": "The output of this API is a resized version of the graffiti art image to 1080x720 pixels in PDF format.",
        "description": "This API takes an image file as input uploaded by the user and resizes it to the specified width and height. It then converts the resized image into a PDF file and returns the PDF file as output. The main objective of this API is to allow users to resize images and convert them into PDF format.",
        "method": "POST",
        "url": null,
        "summary": "The 'Image_Resizing' API employs a POST method to resize user-uploaded image files by the specified width and height dimensions. Users provide image files in binary form as input to the API, where the resizing process is carried out. Upon completion, the resized image is transformed into a PDF file, serving as the output in binary_image_file format. This API streamlines the task of image resizing and conversion to PDF, facilitating efficient handling of visual content for users seeking to adjust image dimensions and format for various purposes.",
        "source_code": "# FastAPI\nfrom fastapi import FastAPI, HTTPException, File, UploadFile\nfrom fastapi.responses import FileResponse\nfrom PIL import Image\nimport io\nimport os\n\napp = FastAPI()\n\n@app.post('/resize_image/')\nasync def resize_image(width: int, height: int, file: UploadFile):\n    try:\n        # Read the uploaded file contents\n        contents = await file.read()\n\n        image = Image.open(io.BytesIO(contents))\n        \n        # Resize the image\n        resized = image.resize((width, height))\n        \n        # Saving the resized image to a temporary file\n        filename = \"resized_image.png\"\n        resized.save(filename)\n\n        return FileResponse(filename, media_type=\"image/png\", filename=\"output.png\")\n    \n    except Exception as e:\n        # Handle exceptions or errors here\n        raise HTTPException(status_code=500, detail=str(e))",
        "task_num": 4,
        "task_description": "Resize the graffiti art image to 1080x720 pixels.",
        "dependencies": [
            "t1",
            "t2",
            "t3"
        ],
        "dependency_output": {
            "t1": {
                "output_data_type": "binary_image_file",
                "output_description": "An image in graffiti art style depicting a bustling city street with vibrant colors and street performers."
            },
            "t2": {
                "output_data_type": "binary_image_file",
                "output_description": "Generated mosaic art image of the same city street in a more abstract form"
            },
            "t3": {
                "output_data_type": "binary_image_file",
                "output_description": "The output of this API is an image of a city street with traditional Japanese elements, generated in the ukiyo-e art style. The image is saved as a PNG file and returned as a response."
            }
        },
        "depended_params": [
            {
                "file": "t1"
            }
        ]
    },
    {
        "Id": 13,
        "name": "Image_Enhancement",
        "input_parameters_with_datatype": [
            {
                "name": "file",
                "datatype": "binary_image_file",
                "description": "A single image file in supported formats (.bmp .jpeg .png etc.) required for enhancing the quality of the image by applying denoising, contrast stretching, sharpening, brightness adjustment, and gamma correction techniques to improve its visual quality."
            }
        ],
        "input_description": "A single image file in supported formats (.bmp .jpeg .png etc.)",
        "output_data_type": "binary_image_file",
        "output description": "Enhanced mosaic art image file in JPG format, with improved quality through denoising, contrast stretching, sharpening, brightness adjustment, and gamma correction.",
        "description": "API that takes an image as input enhances its quality by denoising contrast stretching sharpening adjusting brightness and gamma correction then returns the enhanced image in JPG format.",
        "method": "POST",
        "url": null,
        "summary": "The 'Image_Enhancement' API offers a POST method to enhance the quality of images provided by users. Users can upload a single image file in supported formats like .bmp, .jpeg, or .png. The API processes the image by applying denoising, contrast stretching, sharpening, brightness adjustment, and gamma correction techniques to improve its visual quality. Upon completion of enhancements, the API returns the enhanced image in JPG format, allowing users to obtain a higher-quality version of their input image effortlessly.",
        "source_code": "#FastAPI\nfrom fastapi import FastAPI, HTTPException, File, UploadFile\nfrom fastapi.responses import FileResponse\nfrom pathlib import Path\n\n#Image Enhancement\nimport cv2\nimport numpy as np\nfrom PIL import Image\n\nfile_path = Path(\"./flower.jpg\")\n\nSUPPORTED_FORMATS = [\n    \".bmp\", \".dib\",\n    \".jpeg\", \".jpg\", \".jpe\",\n    \".jp2\",\n    \".png\",\n    \".webp\",\n    \".avif\",\n    \".pbm\", \".pgm\", \".ppm\", \".pxm\", \".pnm\",\n    \".pfm\",\n    \".sr\", \".ras\",\n    \".tiff\", \".tif\",\n    \".exr\",\n    \".hdr\", \".pic\"\n]\n\n\napp = FastAPI()\n\ndef check_image_extension(img):\n    img_path = Path(img.filename)\n    return img_path.suffix\n\n@app.post('/image_enhance/')\nasync def enhance_image(file: UploadFile):\n    try:\n        #Saving original image\n        image_name = file.filename \n        image = Image.open(file.file) \n        image.save(image_name)\n\n        #Loading the image\n        img = cv2.imread(image_name)\n\n        #Denoising image\n        denoised_image = cv2.fastNlMeansDenoisingColored(img, None, 10, 10, 7, 21)\n\n        #Contrast Stretching(Normalizing)\n        contrast_stretched_image = cv2.normalize(denoised_image, None, 255, 0, cv2.NORM_MINMAX, cv2.CV_8UC1)\n\n        # Image Sharpening\n        kernel = np.array([[0, -1, 0], [-1, 5, -1], [0, -1, 0]], np.float32)\n        sharpened_image = cv2.filter2D(contrast_stretched_image, -1, kernel=kernel)\n\n        #Adjusting Brightness\n        brightness_image = cv2.convertScaleAbs(sharpened_image, alpha=1, beta=5)\n\n        # Gamma Correction\n        gamma = 1.5\n        lookup_table = np.array([((i / 255.0) ** gamma) * 255 for i in np.arange(0, 256)]).astype(\"uint8\")\n        gamma_corrected_image = cv2.LUT(brightness_image, lookup_table)\n\n        final_name = f'final_{image_name}'\n        # Save final image\n        cv2.imwrite(final_name, gamma_corrected_image)\n\n        return FileResponse(final_name, media_type='image/jpg', filename=final_name)\n    except Exception as e:\n        raise HTTPException(status_code=500, detail=str(e))",
        "task_num": 5,
        "task_description": "Enhance the quality of the generated mosaic art image.",
        "dependencies": [
            "t4"
        ],
        "dependency_output": {
            "t4": {
                "output_data_type": "binary_image_file",
                "output_description": "The output of this API is a resized version of the graffiti art image to 1080x720 pixels in PDF format."
            }
        },
        "depended_params": [
            {
                "file": "t1"
            }
        ]
    },
    {
        "Id": 10,
        "name": "tti_Ukiyo-e_Art",
        "input_parameters_with_datatype": [
            {
                "name": "prompt",
                "datatype": "string",
                "description": "The 'prompt' parameter is a user prompt in string data type. It is required for the API to generate visually captivating images resembling the traditional Japanese ukiyo-e art style. The prompt should be enriched by appending 'Japanese Ukiyo e-style picture:' to guide the image creation process, as specified in the function description."
            }
        ],
        "input_description": "The input parameter for this API is a user prompt in string data type.",
        "output_data_type": "binary_image_file",
        "output description": "The output of this API is an enhanced-quality image generated in the traditional Japanese ukiyo-e art style based on the user's prompt. The image is saved as a PNG file and returned as a response.",
        "description": "This API takes a user prompt as input and generates an image in the traditional Japanese ukiyo-e art style. The input prompt is concatenated with 'Japanese Ukiyo e-style picture:' before processing. The generated image is then saved as a PNG file and returned as a response.",
        "method": "POST",
        "url": null,
        "summary": "The 'tti_Ukiyo-e_Art' API is a resourceful tool that converts user prompts into visually captivating images resembling the traditional Japanese ukiyo-e art style using a POST method. Users submit a prompt in string format, which is enriched by appending 'Japanese Ukiyo e-style picture:' to guide the image creation process. Through intricate processing, the API yields an image brimming with ukiyo-e aesthetics and nuances, ultimately delivering the output as a PNG binary_image_file. This API seamlessly merges modern inputs with historical artistic styles, offering users a gateway to explore and integrate traditional Japanese artistry into contemporary digital creations.",
        "source_code": "from fastapi import FastAPI, HTTPException\nfrom fastapi.responses import FileResponse\n\nfrom PIL import Image\nfrom diffusers import StableDiffusionPipeline, DPMSolverMultistepScheduler\nimport torch\nfrom pydantic import BaseModel\nfrom pathlib import Path\n\napp = FastAPI()\n\ndef load_model():\n    model_id = 'salmonhumorous/ukeiyo-style-diffusion'\n    pipe = StableDiffusionPipeline.from_pretrained(model_id, torch_dtype=torch.float16)\n    pipe.scheduler = DPMSolverMultistepScheduler.from_config(pipe.scheduler.config)\n    pipe = pipe.to('cuda')\n    return pipe\n\ndef process_data(prompt, pipe):\n    response = pipe(prompt).images[0]\n    return response\n\n@app.post(\"/generate_ukiyoe_image/\")\nasync def generate_image(prompt:str):\n    try:\n\n        # Load the model (replace load_model() with your actual model loading logic)\n        pipe = load_model()\n\n        # Prompt Creation\n        prompt = \"Japanese Ukiyo e-style picture: \" + prompt\n\n        # Process the data (replace process_data() with your actual data processing logic)\n        response = process_data(prompt, pipe)\n\n        ## Save the image\n        response.save('generated_img.png')\n\n        image_path = Path('generated_img.png')\n        if not image_path.is_file():\n            return {\"error\": \"Image not found on the server\"}\n\n        return FileResponse(image_path)\n    except Exception as e:\n        # Handle exceptions or errors here\n        raise HTTPException(status_code=500, detail=str(e))",
        "task_num": 6,
        "task_description": "Enhance the quality of the generated ukiyo-e art image.",
        "dependencies": [
            "t4"
        ],
        "dependency_output": {
            "t4": {
                "output_data_type": "binary_image_file",
                "output_description": "The output of this API is a resized version of the graffiti art image to 1080x720 pixels in PDF format."
            }
        },
        "depended_params": []
    }
]