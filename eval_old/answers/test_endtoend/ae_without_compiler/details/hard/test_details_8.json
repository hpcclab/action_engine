[
    {
        "Id": 9,
        "name": "tti_Sketching_Art",
        "input_parameters_with_datatype": [
            {
                "name": "prompt",
                "datatype": "string",
                "description": "The 'prompt' parameter is a user-provided textual prompt in string format that serves as the input for generating artistic sketching images. It is essential for guiding the AI model to create visually striking sketching art style images based on the user's creative input."
            }
        ],
        "input_description": "The input parameter for this API is a user prompt in string data type.",
        "output_data_type": "binary_image_file",
        "output description": "Generated sketching art style image of the Jomon period (14,000\u2013300 BCE) in PNG format",
        "description": "This API takes a user prompt as input and generates an image in sketching art style using the LoRA model and VAE component. The input prompt is combined with predefined negative prompts to guide the image generation process. The output is a high-quality sketching art style image saved in PNG format.",
        "method": "POST",
        "url": null,
        "summary": "The 'tti_Sketching_Art' API operates through a POST method to transform user prompts into artistic sketching images with the aid of the LoRA model and VAE component. Users provide a textual prompt in string format, which is then harmonized with pre-defined negative prompts to steer the generation of the artwork. The API proficiently processes this input, resulting in the creation of a visually striking sketching art style image. The final output is delivered in the form of a binary_image_file, encapsulating the generated art piece in PNG format. This API seamlessly merges user creativity with advanced AI techniques, empowering users to effortlessly convert simple prompts into sophisticated sketching art, enabling diverse applications in digital artistry and creative projects.",
        "source_code": "from fastapi import FastAPI, HTTPException\nfrom fastapi.responses import FileResponse\n\nfrom pydantic import BaseModel\nfrom pathlib import Path\n\n\nimport torch\nfrom diffusers import (\n    StableDiffusionXLPipeline, \n    EulerAncestralDiscreteScheduler,\n    AutoencoderKL\n)\napp = FastAPI()\n\n@app.post(\"/generate_sketching_image/\")\nasync def generate_image(prompt:str):\n    try:\n\n        # Initialize LoRA model and weights\n        lora_model_id = \"Linaqruf/sketch-style-xl-lora\"\n        lora_filename = \"sketch-style-xl.safetensors\"\n\n        # Load VAE component\n        vae = AutoencoderKL.from_pretrained(\n            \"madebyollin/sdxl-vae-fp16-fix\", \n            torch_dtype=torch.float16\n        )\n\n        # Configure the pipeline\n        pipe = StableDiffusionXLPipeline.from_pretrained(\n            \"Linaqruf/animagine-xl-2.0\", \n            vae=vae,\n            torch_dtype=torch.float16, \n            use_safetensors=True, \n            variant=\"fp16\"\n        )\n        pipe.scheduler = EulerAncestralDiscreteScheduler.from_config(pipe.scheduler.config)\n        pipe.to('cuda')\n\n        # Load and fuse LoRA weights\n        pipe.load_lora_weights(lora_model_id, weight_name=lora_filename)\n        pipe.fuse_lora(lora_scale=0.6)\n\n        # Define prompts and generate image\n        prompt = \"Monochrome, Greyscale Sketch-style picture: \" + prompt\n        \n\n        negative_prompt = \"lowres, bad anatomy, bad hands, text, error, missing fingers, extra digit, fewer digits, cropped, worst quality, low quality, normal quality, jpeg artifacts, signature, watermark, username, blurry\"\n\n        image = pipe(\n            prompt, \n            negative_prompt=negative_prompt, \n            width=1024,\n            height=1024,\n            guidance_scale=12,\n            num_inference_steps=50\n        ).images[0]\n\n        # Unfuse LoRA before saving the image\n        pipe.unfuse_lora()\n        image.save(\"generated_img.png\")\n\n        image_path = Path('generated_img.png')\n        if not image_path.is_file():\n            return {\"error\": \"Image not found on the server\"}\n        return FileResponse(image_path)\n    except Exception as e:\n        # Handle exceptions or errors here\n        raise HTTPException(status_code=500, detail=str(e))",
        "task_num": 1,
        "task_description": "Generate a sketching art style image of the Jomon period (14,000\u2013300 BCE).",
        "dependencies": [],
        "dependency_output": {},
        "depended_params": []
    },
    {
        "Id": 9,
        "name": "tti_Sketching_Art",
        "input_parameters_with_datatype": [
            {
                "name": "prompt",
                "datatype": "string",
                "description": "The 'prompt' parameter is a user-provided textual prompt in string format that serves as the input for generating artistic sketching images. It is essential for guiding the AI model to create visually striking sketching art style images based on the user's creative input."
            }
        ],
        "input_description": "The input parameter for this API is a user prompt in string data type.",
        "output_data_type": "binary_image_file",
        "output description": "Generated sketching art style image of the Nara period (710\u2013794) in PNG format",
        "description": "This API takes a user prompt as input and generates an image in sketching art style using the LoRA model and VAE component. The input prompt is combined with predefined negative prompts to guide the image generation process. The output is a high-quality sketching art style image saved in PNG format.",
        "method": "POST",
        "url": null,
        "summary": "The 'tti_Sketching_Art' API operates through a POST method to transform user prompts into artistic sketching images with the aid of the LoRA model and VAE component. Users provide a textual prompt in string format, which is then harmonized with pre-defined negative prompts to steer the generation of the artwork. The API proficiently processes this input, resulting in the creation of a visually striking sketching art style image. The final output is delivered in the form of a binary_image_file, encapsulating the generated art piece in PNG format. This API seamlessly merges user creativity with advanced AI techniques, empowering users to effortlessly convert simple prompts into sophisticated sketching art, enabling diverse applications in digital artistry and creative projects.",
        "source_code": "from fastapi import FastAPI, HTTPException\nfrom fastapi.responses import FileResponse\n\nfrom pydantic import BaseModel\nfrom pathlib import Path\n\n\nimport torch\nfrom diffusers import (\n    StableDiffusionXLPipeline, \n    EulerAncestralDiscreteScheduler,\n    AutoencoderKL\n)\napp = FastAPI()\n\n@app.post(\"/generate_sketching_image/\")\nasync def generate_image(prompt:str):\n    try:\n\n        # Initialize LoRA model and weights\n        lora_model_id = \"Linaqruf/sketch-style-xl-lora\"\n        lora_filename = \"sketch-style-xl.safetensors\"\n\n        # Load VAE component\n        vae = AutoencoderKL.from_pretrained(\n            \"madebyollin/sdxl-vae-fp16-fix\", \n            torch_dtype=torch.float16\n        )\n\n        # Configure the pipeline\n        pipe = StableDiffusionXLPipeline.from_pretrained(\n            \"Linaqruf/animagine-xl-2.0\", \n            vae=vae,\n            torch_dtype=torch.float16, \n            use_safetensors=True, \n            variant=\"fp16\"\n        )\n        pipe.scheduler = EulerAncestralDiscreteScheduler.from_config(pipe.scheduler.config)\n        pipe.to('cuda')\n\n        # Load and fuse LoRA weights\n        pipe.load_lora_weights(lora_model_id, weight_name=lora_filename)\n        pipe.fuse_lora(lora_scale=0.6)\n\n        # Define prompts and generate image\n        prompt = \"Monochrome, Greyscale Sketch-style picture: \" + prompt\n        \n\n        negative_prompt = \"lowres, bad anatomy, bad hands, text, error, missing fingers, extra digit, fewer digits, cropped, worst quality, low quality, normal quality, jpeg artifacts, signature, watermark, username, blurry\"\n\n        image = pipe(\n            prompt, \n            negative_prompt=negative_prompt, \n            width=1024,\n            height=1024,\n            guidance_scale=12,\n            num_inference_steps=50\n        ).images[0]\n\n        # Unfuse LoRA before saving the image\n        pipe.unfuse_lora()\n        image.save(\"generated_img.png\")\n\n        image_path = Path('generated_img.png')\n        if not image_path.is_file():\n            return {\"error\": \"Image not found on the server\"}\n        return FileResponse(image_path)\n    except Exception as e:\n        # Handle exceptions or errors here\n        raise HTTPException(status_code=500, detail=str(e))",
        "task_num": 2,
        "task_description": "Generate a sketching art style image of the Nara period (710\u2013794).",
        "dependencies": [],
        "dependency_output": {},
        "depended_params": []
    },
    {
        "Id": 9,
        "name": "tti_Sketching_Art",
        "input_parameters_with_datatype": [
            {
                "name": "prompt",
                "datatype": "string",
                "description": "The 'prompt' parameter is a user-provided textual prompt in string format that serves as the input for generating artistic sketching images. It is essential for guiding the AI model to create visually striking sketching art style images based on the user's creative input."
            }
        ],
        "input_description": "The input parameter for this API is a user prompt in string data type.",
        "output_data_type": "binary_image_file",
        "output description": "Generated sketching art style image of the Heian period (794\u20131185) in PNG format",
        "description": "This API takes a user prompt as input and generates an image in sketching art style using the LoRA model and VAE component. The input prompt is combined with predefined negative prompts to guide the image generation process. The output is a high-quality sketching art style image saved in PNG format.",
        "method": "POST",
        "url": null,
        "summary": "The 'tti_Sketching_Art' API operates through a POST method to transform user prompts into artistic sketching images with the aid of the LoRA model and VAE component. Users provide a textual prompt in string format, which is then harmonized with pre-defined negative prompts to steer the generation of the artwork. The API proficiently processes this input, resulting in the creation of a visually striking sketching art style image. The final output is delivered in the form of a binary_image_file, encapsulating the generated art piece in PNG format. This API seamlessly merges user creativity with advanced AI techniques, empowering users to effortlessly convert simple prompts into sophisticated sketching art, enabling diverse applications in digital artistry and creative projects.",
        "source_code": "from fastapi import FastAPI, HTTPException\nfrom fastapi.responses import FileResponse\n\nfrom pydantic import BaseModel\nfrom pathlib import Path\n\n\nimport torch\nfrom diffusers import (\n    StableDiffusionXLPipeline, \n    EulerAncestralDiscreteScheduler,\n    AutoencoderKL\n)\napp = FastAPI()\n\n@app.post(\"/generate_sketching_image/\")\nasync def generate_image(prompt:str):\n    try:\n\n        # Initialize LoRA model and weights\n        lora_model_id = \"Linaqruf/sketch-style-xl-lora\"\n        lora_filename = \"sketch-style-xl.safetensors\"\n\n        # Load VAE component\n        vae = AutoencoderKL.from_pretrained(\n            \"madebyollin/sdxl-vae-fp16-fix\", \n            torch_dtype=torch.float16\n        )\n\n        # Configure the pipeline\n        pipe = StableDiffusionXLPipeline.from_pretrained(\n            \"Linaqruf/animagine-xl-2.0\", \n            vae=vae,\n            torch_dtype=torch.float16, \n            use_safetensors=True, \n            variant=\"fp16\"\n        )\n        pipe.scheduler = EulerAncestralDiscreteScheduler.from_config(pipe.scheduler.config)\n        pipe.to('cuda')\n\n        # Load and fuse LoRA weights\n        pipe.load_lora_weights(lora_model_id, weight_name=lora_filename)\n        pipe.fuse_lora(lora_scale=0.6)\n\n        # Define prompts and generate image\n        prompt = \"Monochrome, Greyscale Sketch-style picture: \" + prompt\n        \n\n        negative_prompt = \"lowres, bad anatomy, bad hands, text, error, missing fingers, extra digit, fewer digits, cropped, worst quality, low quality, normal quality, jpeg artifacts, signature, watermark, username, blurry\"\n\n        image = pipe(\n            prompt, \n            negative_prompt=negative_prompt, \n            width=1024,\n            height=1024,\n            guidance_scale=12,\n            num_inference_steps=50\n        ).images[0]\n\n        # Unfuse LoRA before saving the image\n        pipe.unfuse_lora()\n        image.save(\"generated_img.png\")\n\n        image_path = Path('generated_img.png')\n        if not image_path.is_file():\n            return {\"error\": \"Image not found on the server\"}\n        return FileResponse(image_path)\n    except Exception as e:\n        # Handle exceptions or errors here\n        raise HTTPException(status_code=500, detail=str(e))",
        "task_num": 3,
        "task_description": "Generate a sketching art style image of the Heian period (794\u20131185).",
        "dependencies": [],
        "dependency_output": {},
        "depended_params": []
    },
    {
        "Id": 9,
        "name": "tti_Sketching_Art",
        "input_parameters_with_datatype": [
            {
                "name": "prompt",
                "datatype": "string",
                "description": "The 'prompt' parameter is a user-provided textual prompt in string format that serves as the input for generating artistic sketching images. It is essential for guiding the AI model to create visually striking sketching art style images based on the user's creative input."
            }
        ],
        "input_description": "The input parameter for this API is a user prompt in string data type.",
        "output_data_type": "binary_image_file",
        "output description": "Generated high-quality sketching art style image of the Kamakura period (1185\u20131333) in PNG format",
        "description": "This API takes a user prompt as input and generates an image in sketching art style using the LoRA model and VAE component. The input prompt is combined with predefined negative prompts to guide the image generation process. The output is a high-quality sketching art style image saved in PNG format.",
        "method": "POST",
        "url": null,
        "summary": "The 'tti_Sketching_Art' API operates through a POST method to transform user prompts into artistic sketching images with the aid of the LoRA model and VAE component. Users provide a textual prompt in string format, which is then harmonized with pre-defined negative prompts to steer the generation of the artwork. The API proficiently processes this input, resulting in the creation of a visually striking sketching art style image. The final output is delivered in the form of a binary_image_file, encapsulating the generated art piece in PNG format. This API seamlessly merges user creativity with advanced AI techniques, empowering users to effortlessly convert simple prompts into sophisticated sketching art, enabling diverse applications in digital artistry and creative projects.",
        "source_code": "from fastapi import FastAPI, HTTPException\nfrom fastapi.responses import FileResponse\n\nfrom pydantic import BaseModel\nfrom pathlib import Path\n\n\nimport torch\nfrom diffusers import (\n    StableDiffusionXLPipeline, \n    EulerAncestralDiscreteScheduler,\n    AutoencoderKL\n)\napp = FastAPI()\n\n@app.post(\"/generate_sketching_image/\")\nasync def generate_image(prompt:str):\n    try:\n\n        # Initialize LoRA model and weights\n        lora_model_id = \"Linaqruf/sketch-style-xl-lora\"\n        lora_filename = \"sketch-style-xl.safetensors\"\n\n        # Load VAE component\n        vae = AutoencoderKL.from_pretrained(\n            \"madebyollin/sdxl-vae-fp16-fix\", \n            torch_dtype=torch.float16\n        )\n\n        # Configure the pipeline\n        pipe = StableDiffusionXLPipeline.from_pretrained(\n            \"Linaqruf/animagine-xl-2.0\", \n            vae=vae,\n            torch_dtype=torch.float16, \n            use_safetensors=True, \n            variant=\"fp16\"\n        )\n        pipe.scheduler = EulerAncestralDiscreteScheduler.from_config(pipe.scheduler.config)\n        pipe.to('cuda')\n\n        # Load and fuse LoRA weights\n        pipe.load_lora_weights(lora_model_id, weight_name=lora_filename)\n        pipe.fuse_lora(lora_scale=0.6)\n\n        # Define prompts and generate image\n        prompt = \"Monochrome, Greyscale Sketch-style picture: \" + prompt\n        \n\n        negative_prompt = \"lowres, bad anatomy, bad hands, text, error, missing fingers, extra digit, fewer digits, cropped, worst quality, low quality, normal quality, jpeg artifacts, signature, watermark, username, blurry\"\n\n        image = pipe(\n            prompt, \n            negative_prompt=negative_prompt, \n            width=1024,\n            height=1024,\n            guidance_scale=12,\n            num_inference_steps=50\n        ).images[0]\n\n        # Unfuse LoRA before saving the image\n        pipe.unfuse_lora()\n        image.save(\"generated_img.png\")\n\n        image_path = Path('generated_img.png')\n        if not image_path.is_file():\n            return {\"error\": \"Image not found on the server\"}\n        return FileResponse(image_path)\n    except Exception as e:\n        # Handle exceptions or errors here\n        raise HTTPException(status_code=500, detail=str(e))",
        "task_num": 4,
        "task_description": "Generate a sketching art style image of the Kamakura period (1185\u20131333).",
        "dependencies": [],
        "dependency_output": {},
        "depended_params": []
    },
    {
        "Id": 9,
        "name": "tti_Sketching_Art",
        "input_parameters_with_datatype": [
            {
                "name": "prompt",
                "datatype": "string",
                "description": "The 'prompt' parameter is a user-provided textual prompt in string format that serves as the input for generating artistic sketching images. It is essential for guiding the AI model to create visually striking sketching art style images based on the user's creative input."
            }
        ],
        "input_description": "The input parameter for this API is a user prompt in string data type.",
        "output_data_type": "binary_image_file",
        "output description": "Generated sketching art style image of the Muromachi period (1336\u20131573) in PNG format",
        "description": "This API takes a user prompt as input and generates an image in sketching art style using the LoRA model and VAE component. The input prompt is combined with predefined negative prompts to guide the image generation process. The output is a high-quality sketching art style image saved in PNG format.",
        "method": "POST",
        "url": null,
        "summary": "The 'tti_Sketching_Art' API operates through a POST method to transform user prompts into artistic sketching images with the aid of the LoRA model and VAE component. Users provide a textual prompt in string format, which is then harmonized with pre-defined negative prompts to steer the generation of the artwork. The API proficiently processes this input, resulting in the creation of a visually striking sketching art style image. The final output is delivered in the form of a binary_image_file, encapsulating the generated art piece in PNG format. This API seamlessly merges user creativity with advanced AI techniques, empowering users to effortlessly convert simple prompts into sophisticated sketching art, enabling diverse applications in digital artistry and creative projects.",
        "source_code": "from fastapi import FastAPI, HTTPException\nfrom fastapi.responses import FileResponse\n\nfrom pydantic import BaseModel\nfrom pathlib import Path\n\n\nimport torch\nfrom diffusers import (\n    StableDiffusionXLPipeline, \n    EulerAncestralDiscreteScheduler,\n    AutoencoderKL\n)\napp = FastAPI()\n\n@app.post(\"/generate_sketching_image/\")\nasync def generate_image(prompt:str):\n    try:\n\n        # Initialize LoRA model and weights\n        lora_model_id = \"Linaqruf/sketch-style-xl-lora\"\n        lora_filename = \"sketch-style-xl.safetensors\"\n\n        # Load VAE component\n        vae = AutoencoderKL.from_pretrained(\n            \"madebyollin/sdxl-vae-fp16-fix\", \n            torch_dtype=torch.float16\n        )\n\n        # Configure the pipeline\n        pipe = StableDiffusionXLPipeline.from_pretrained(\n            \"Linaqruf/animagine-xl-2.0\", \n            vae=vae,\n            torch_dtype=torch.float16, \n            use_safetensors=True, \n            variant=\"fp16\"\n        )\n        pipe.scheduler = EulerAncestralDiscreteScheduler.from_config(pipe.scheduler.config)\n        pipe.to('cuda')\n\n        # Load and fuse LoRA weights\n        pipe.load_lora_weights(lora_model_id, weight_name=lora_filename)\n        pipe.fuse_lora(lora_scale=0.6)\n\n        # Define prompts and generate image\n        prompt = \"Monochrome, Greyscale Sketch-style picture: \" + prompt\n        \n\n        negative_prompt = \"lowres, bad anatomy, bad hands, text, error, missing fingers, extra digit, fewer digits, cropped, worst quality, low quality, normal quality, jpeg artifacts, signature, watermark, username, blurry\"\n\n        image = pipe(\n            prompt, \n            negative_prompt=negative_prompt, \n            width=1024,\n            height=1024,\n            guidance_scale=12,\n            num_inference_steps=50\n        ).images[0]\n\n        # Unfuse LoRA before saving the image\n        pipe.unfuse_lora()\n        image.save(\"generated_img.png\")\n\n        image_path = Path('generated_img.png')\n        if not image_path.is_file():\n            return {\"error\": \"Image not found on the server\"}\n        return FileResponse(image_path)\n    except Exception as e:\n        # Handle exceptions or errors here\n        raise HTTPException(status_code=500, detail=str(e))",
        "task_num": 5,
        "task_description": "Generate a sketching art style image of the Muromachi period (1336\u20131573).",
        "dependencies": [],
        "dependency_output": {},
        "depended_params": []
    },
    {
        "Id": 9,
        "name": "tti_Sketching_Art",
        "input_parameters_with_datatype": [
            {
                "name": "prompt",
                "datatype": "string",
                "description": "The 'prompt' parameter is a user-provided textual prompt in string format that serves as the input for generating artistic sketching images. It is essential for guiding the AI model to create visually striking sketching art style images based on the user's creative input."
            }
        ],
        "input_description": "The input parameter for this API is a user prompt in string data type.",
        "output_data_type": "binary_image_file",
        "output description": "Generated sketching art style image of the Azuchi-Momoyama period (1573\u20131603) in PNG format",
        "description": "This API takes a user prompt as input and generates an image in sketching art style using the LoRA model and VAE component. The input prompt is combined with predefined negative prompts to guide the image generation process. The output is a high-quality sketching art style image saved in PNG format.",
        "method": "POST",
        "url": null,
        "summary": "The 'tti_Sketching_Art' API operates through a POST method to transform user prompts into artistic sketching images with the aid of the LoRA model and VAE component. Users provide a textual prompt in string format, which is then harmonized with pre-defined negative prompts to steer the generation of the artwork. The API proficiently processes this input, resulting in the creation of a visually striking sketching art style image. The final output is delivered in the form of a binary_image_file, encapsulating the generated art piece in PNG format. This API seamlessly merges user creativity with advanced AI techniques, empowering users to effortlessly convert simple prompts into sophisticated sketching art, enabling diverse applications in digital artistry and creative projects.",
        "source_code": "from fastapi import FastAPI, HTTPException\nfrom fastapi.responses import FileResponse\n\nfrom pydantic import BaseModel\nfrom pathlib import Path\n\n\nimport torch\nfrom diffusers import (\n    StableDiffusionXLPipeline, \n    EulerAncestralDiscreteScheduler,\n    AutoencoderKL\n)\napp = FastAPI()\n\n@app.post(\"/generate_sketching_image/\")\nasync def generate_image(prompt:str):\n    try:\n\n        # Initialize LoRA model and weights\n        lora_model_id = \"Linaqruf/sketch-style-xl-lora\"\n        lora_filename = \"sketch-style-xl.safetensors\"\n\n        # Load VAE component\n        vae = AutoencoderKL.from_pretrained(\n            \"madebyollin/sdxl-vae-fp16-fix\", \n            torch_dtype=torch.float16\n        )\n\n        # Configure the pipeline\n        pipe = StableDiffusionXLPipeline.from_pretrained(\n            \"Linaqruf/animagine-xl-2.0\", \n            vae=vae,\n            torch_dtype=torch.float16, \n            use_safetensors=True, \n            variant=\"fp16\"\n        )\n        pipe.scheduler = EulerAncestralDiscreteScheduler.from_config(pipe.scheduler.config)\n        pipe.to('cuda')\n\n        # Load and fuse LoRA weights\n        pipe.load_lora_weights(lora_model_id, weight_name=lora_filename)\n        pipe.fuse_lora(lora_scale=0.6)\n\n        # Define prompts and generate image\n        prompt = \"Monochrome, Greyscale Sketch-style picture: \" + prompt\n        \n\n        negative_prompt = \"lowres, bad anatomy, bad hands, text, error, missing fingers, extra digit, fewer digits, cropped, worst quality, low quality, normal quality, jpeg artifacts, signature, watermark, username, blurry\"\n\n        image = pipe(\n            prompt, \n            negative_prompt=negative_prompt, \n            width=1024,\n            height=1024,\n            guidance_scale=12,\n            num_inference_steps=50\n        ).images[0]\n\n        # Unfuse LoRA before saving the image\n        pipe.unfuse_lora()\n        image.save(\"generated_img.png\")\n\n        image_path = Path('generated_img.png')\n        if not image_path.is_file():\n            return {\"error\": \"Image not found on the server\"}\n        return FileResponse(image_path)\n    except Exception as e:\n        # Handle exceptions or errors here\n        raise HTTPException(status_code=500, detail=str(e))",
        "task_num": 6,
        "task_description": "Generate a sketching art style image of the Azuchi-Momoyama period (1573\u20131603).",
        "dependencies": [],
        "dependency_output": {},
        "depended_params": []
    },
    {
        "Id": 9,
        "name": "tti_Sketching_Art",
        "input_parameters_with_datatype": [
            {
                "name": "prompt",
                "datatype": "string",
                "description": "The 'prompt' parameter is a user-provided textual prompt in string format that serves as the input for generating artistic sketching images. It is essential for guiding the AI model to create visually striking sketching art style images based on the user's creative input."
            }
        ],
        "input_description": "The input parameter for this API is a user prompt in string data type.",
        "output_data_type": "binary_image_file",
        "output description": "Generated sketching art style image of the Edo period (1603\u20131868) in PNG format",
        "description": "This API takes a user prompt as input and generates an image in sketching art style using the LoRA model and VAE component. The input prompt is combined with predefined negative prompts to guide the image generation process. The output is a high-quality sketching art style image saved in PNG format.",
        "method": "POST",
        "url": null,
        "summary": "The 'tti_Sketching_Art' API operates through a POST method to transform user prompts into artistic sketching images with the aid of the LoRA model and VAE component. Users provide a textual prompt in string format, which is then harmonized with pre-defined negative prompts to steer the generation of the artwork. The API proficiently processes this input, resulting in the creation of a visually striking sketching art style image. The final output is delivered in the form of a binary_image_file, encapsulating the generated art piece in PNG format. This API seamlessly merges user creativity with advanced AI techniques, empowering users to effortlessly convert simple prompts into sophisticated sketching art, enabling diverse applications in digital artistry and creative projects.",
        "source_code": "from fastapi import FastAPI, HTTPException\nfrom fastapi.responses import FileResponse\n\nfrom pydantic import BaseModel\nfrom pathlib import Path\n\n\nimport torch\nfrom diffusers import (\n    StableDiffusionXLPipeline, \n    EulerAncestralDiscreteScheduler,\n    AutoencoderKL\n)\napp = FastAPI()\n\n@app.post(\"/generate_sketching_image/\")\nasync def generate_image(prompt:str):\n    try:\n\n        # Initialize LoRA model and weights\n        lora_model_id = \"Linaqruf/sketch-style-xl-lora\"\n        lora_filename = \"sketch-style-xl.safetensors\"\n\n        # Load VAE component\n        vae = AutoencoderKL.from_pretrained(\n            \"madebyollin/sdxl-vae-fp16-fix\", \n            torch_dtype=torch.float16\n        )\n\n        # Configure the pipeline\n        pipe = StableDiffusionXLPipeline.from_pretrained(\n            \"Linaqruf/animagine-xl-2.0\", \n            vae=vae,\n            torch_dtype=torch.float16, \n            use_safetensors=True, \n            variant=\"fp16\"\n        )\n        pipe.scheduler = EulerAncestralDiscreteScheduler.from_config(pipe.scheduler.config)\n        pipe.to('cuda')\n\n        # Load and fuse LoRA weights\n        pipe.load_lora_weights(lora_model_id, weight_name=lora_filename)\n        pipe.fuse_lora(lora_scale=0.6)\n\n        # Define prompts and generate image\n        prompt = \"Monochrome, Greyscale Sketch-style picture: \" + prompt\n        \n\n        negative_prompt = \"lowres, bad anatomy, bad hands, text, error, missing fingers, extra digit, fewer digits, cropped, worst quality, low quality, normal quality, jpeg artifacts, signature, watermark, username, blurry\"\n\n        image = pipe(\n            prompt, \n            negative_prompt=negative_prompt, \n            width=1024,\n            height=1024,\n            guidance_scale=12,\n            num_inference_steps=50\n        ).images[0]\n\n        # Unfuse LoRA before saving the image\n        pipe.unfuse_lora()\n        image.save(\"generated_img.png\")\n\n        image_path = Path('generated_img.png')\n        if not image_path.is_file():\n            return {\"error\": \"Image not found on the server\"}\n        return FileResponse(image_path)\n    except Exception as e:\n        # Handle exceptions or errors here\n        raise HTTPException(status_code=500, detail=str(e))",
        "task_num": 7,
        "task_description": "Generate a sketching art style image of the Edo period (1603\u20131868).",
        "dependencies": [],
        "dependency_output": {},
        "depended_params": []
    },
    {
        "Id": 9,
        "name": "tti_Sketching_Art",
        "input_parameters_with_datatype": [
            {
                "name": "prompt",
                "datatype": "string",
                "description": "The 'prompt' parameter is a user-provided textual prompt in string format that serves as the input for generating artistic sketching images. It is essential for guiding the AI model to create visually striking sketching art style images based on the user's creative input."
            }
        ],
        "input_description": "The input parameter for this API is a user prompt in string data type.",
        "output_data_type": "binary_image_file",
        "output description": "Generated sketching art style image of the Meiji period (1868\u20131912) in PNG format",
        "description": "This API takes a user prompt as input and generates an image in sketching art style using the LoRA model and VAE component. The input prompt is combined with predefined negative prompts to guide the image generation process. The output is a high-quality sketching art style image saved in PNG format.",
        "method": "POST",
        "url": null,
        "summary": "The 'tti_Sketching_Art' API operates through a POST method to transform user prompts into artistic sketching images with the aid of the LoRA model and VAE component. Users provide a textual prompt in string format, which is then harmonized with pre-defined negative prompts to steer the generation of the artwork. The API proficiently processes this input, resulting in the creation of a visually striking sketching art style image. The final output is delivered in the form of a binary_image_file, encapsulating the generated art piece in PNG format. This API seamlessly merges user creativity with advanced AI techniques, empowering users to effortlessly convert simple prompts into sophisticated sketching art, enabling diverse applications in digital artistry and creative projects.",
        "source_code": "from fastapi import FastAPI, HTTPException\nfrom fastapi.responses import FileResponse\n\nfrom pydantic import BaseModel\nfrom pathlib import Path\n\n\nimport torch\nfrom diffusers import (\n    StableDiffusionXLPipeline, \n    EulerAncestralDiscreteScheduler,\n    AutoencoderKL\n)\napp = FastAPI()\n\n@app.post(\"/generate_sketching_image/\")\nasync def generate_image(prompt:str):\n    try:\n\n        # Initialize LoRA model and weights\n        lora_model_id = \"Linaqruf/sketch-style-xl-lora\"\n        lora_filename = \"sketch-style-xl.safetensors\"\n\n        # Load VAE component\n        vae = AutoencoderKL.from_pretrained(\n            \"madebyollin/sdxl-vae-fp16-fix\", \n            torch_dtype=torch.float16\n        )\n\n        # Configure the pipeline\n        pipe = StableDiffusionXLPipeline.from_pretrained(\n            \"Linaqruf/animagine-xl-2.0\", \n            vae=vae,\n            torch_dtype=torch.float16, \n            use_safetensors=True, \n            variant=\"fp16\"\n        )\n        pipe.scheduler = EulerAncestralDiscreteScheduler.from_config(pipe.scheduler.config)\n        pipe.to('cuda')\n\n        # Load and fuse LoRA weights\n        pipe.load_lora_weights(lora_model_id, weight_name=lora_filename)\n        pipe.fuse_lora(lora_scale=0.6)\n\n        # Define prompts and generate image\n        prompt = \"Monochrome, Greyscale Sketch-style picture: \" + prompt\n        \n\n        negative_prompt = \"lowres, bad anatomy, bad hands, text, error, missing fingers, extra digit, fewer digits, cropped, worst quality, low quality, normal quality, jpeg artifacts, signature, watermark, username, blurry\"\n\n        image = pipe(\n            prompt, \n            negative_prompt=negative_prompt, \n            width=1024,\n            height=1024,\n            guidance_scale=12,\n            num_inference_steps=50\n        ).images[0]\n\n        # Unfuse LoRA before saving the image\n        pipe.unfuse_lora()\n        image.save(\"generated_img.png\")\n\n        image_path = Path('generated_img.png')\n        if not image_path.is_file():\n            return {\"error\": \"Image not found on the server\"}\n        return FileResponse(image_path)\n    except Exception as e:\n        # Handle exceptions or errors here\n        raise HTTPException(status_code=500, detail=str(e))",
        "task_num": 8,
        "task_description": "Generate a sketching art style image of the Meiji period (1868\u20131912).",
        "dependencies": [],
        "dependency_output": {},
        "depended_params": []
    },
    {
        "Id": 9,
        "name": "tti_Sketching_Art",
        "input_parameters_with_datatype": [
            {
                "name": "prompt",
                "datatype": "string",
                "description": "The 'prompt' parameter is a user-provided textual prompt in string format that serves as the input for generating artistic sketching images. It is essential for guiding the AI model to create visually striking sketching art style images based on the user's creative input."
            }
        ],
        "input_description": "The input parameter for this API is a user prompt in string data type.",
        "output_data_type": "binary_image_file",
        "output description": "Generated sketching art style image of the Showa period (1926\u20131989) in PNG format",
        "description": "This API takes a user prompt as input and generates an image in sketching art style using the LoRA model and VAE component. The input prompt is combined with predefined negative prompts to guide the image generation process. The output is a high-quality sketching art style image saved in PNG format.",
        "method": "POST",
        "url": null,
        "summary": "The 'tti_Sketching_Art' API operates through a POST method to transform user prompts into artistic sketching images with the aid of the LoRA model and VAE component. Users provide a textual prompt in string format, which is then harmonized with pre-defined negative prompts to steer the generation of the artwork. The API proficiently processes this input, resulting in the creation of a visually striking sketching art style image. The final output is delivered in the form of a binary_image_file, encapsulating the generated art piece in PNG format. This API seamlessly merges user creativity with advanced AI techniques, empowering users to effortlessly convert simple prompts into sophisticated sketching art, enabling diverse applications in digital artistry and creative projects.",
        "source_code": "from fastapi import FastAPI, HTTPException\nfrom fastapi.responses import FileResponse\n\nfrom pydantic import BaseModel\nfrom pathlib import Path\n\n\nimport torch\nfrom diffusers import (\n    StableDiffusionXLPipeline, \n    EulerAncestralDiscreteScheduler,\n    AutoencoderKL\n)\napp = FastAPI()\n\n@app.post(\"/generate_sketching_image/\")\nasync def generate_image(prompt:str):\n    try:\n\n        # Initialize LoRA model and weights\n        lora_model_id = \"Linaqruf/sketch-style-xl-lora\"\n        lora_filename = \"sketch-style-xl.safetensors\"\n\n        # Load VAE component\n        vae = AutoencoderKL.from_pretrained(\n            \"madebyollin/sdxl-vae-fp16-fix\", \n            torch_dtype=torch.float16\n        )\n\n        # Configure the pipeline\n        pipe = StableDiffusionXLPipeline.from_pretrained(\n            \"Linaqruf/animagine-xl-2.0\", \n            vae=vae,\n            torch_dtype=torch.float16, \n            use_safetensors=True, \n            variant=\"fp16\"\n        )\n        pipe.scheduler = EulerAncestralDiscreteScheduler.from_config(pipe.scheduler.config)\n        pipe.to('cuda')\n\n        # Load and fuse LoRA weights\n        pipe.load_lora_weights(lora_model_id, weight_name=lora_filename)\n        pipe.fuse_lora(lora_scale=0.6)\n\n        # Define prompts and generate image\n        prompt = \"Monochrome, Greyscale Sketch-style picture: \" + prompt\n        \n\n        negative_prompt = \"lowres, bad anatomy, bad hands, text, error, missing fingers, extra digit, fewer digits, cropped, worst quality, low quality, normal quality, jpeg artifacts, signature, watermark, username, blurry\"\n\n        image = pipe(\n            prompt, \n            negative_prompt=negative_prompt, \n            width=1024,\n            height=1024,\n            guidance_scale=12,\n            num_inference_steps=50\n        ).images[0]\n\n        # Unfuse LoRA before saving the image\n        pipe.unfuse_lora()\n        image.save(\"generated_img.png\")\n\n        image_path = Path('generated_img.png')\n        if not image_path.is_file():\n            return {\"error\": \"Image not found on the server\"}\n        return FileResponse(image_path)\n    except Exception as e:\n        # Handle exceptions or errors here\n        raise HTTPException(status_code=500, detail=str(e))",
        "task_num": 9,
        "task_description": "Generate a sketching art style image of the Showa period (1926\u20131989).",
        "dependencies": [],
        "dependency_output": {},
        "depended_params": []
    }
]