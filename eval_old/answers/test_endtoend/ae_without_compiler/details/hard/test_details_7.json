[
    {
        "Id": 1,
        "name": "tti_Animation_Art",
        "input_parameters_with_datatype": [
            {
                "name": "prompt",
                "datatype": "string",
                "description": "The 'prompt' parameter is a user prompt in string data type. It is required for providing descriptive content or themes for the image generation process in the 'tti_Animation_Art' API. This parameter serves as the textual input that will be transformed into vibrant animation-style images by the API's pre-trained model."
            }
        ],
        "input_description": "The input parameter for this API is a user prompt in string data type.",
        "output_data_type": "binary_image_file",
        "output description": "Generated animated image of a high school boy in Japan as a binary_image_file",
        "description": "This API takes a user prompt and generates an image in animation style using a pre-trained model. The user needs to provide a prompt in string format and the API will return the generated animation image as a response in the form of a FileResponse.",
        "method": "POST",
        "url": null,
        "summary": "The 'tti_Animation_Art' API utilizes a POST method to transform user prompts into captivating animation images. By inputting a user prompt in string format, individuals can provide descriptive content or themes for the image generation process. The API employs a sophisticated pre-trained model to convert these textual inputs into vibrant animation-style images. Upon processing the input prompt, the API seamlessly delivers the resulting artwork as a binary_image_file, encapsulating the dynamically generated animation. This API empowers users to effortlessly merge textual creativity with visual artistry, enabling the creation of detailed animated images for various digital media applications and creative projects.",
        "source_code": "from fastapi import FastAPI, HTTPException\nfrom fastapi.responses import FileResponse\n\nfrom PIL import Image\nfrom diffusers import StableDiffusionPipeline, DPMSolverMultistepScheduler\nimport torch\nfrom pydantic import BaseModel\nfrom pathlib import Path\n\napp = FastAPI()\n\ndef load_model():\n    model_id = 'dreamlike-art/dreamlike-anime-1.0'\n    pipe = StableDiffusionPipeline.from_pretrained(model_id, torch_dtype=torch.float16)\n    pipe.scheduler = DPMSolverMultistepScheduler.from_config(pipe.scheduler.config)\n    pipe = pipe.to('cuda')\n    return pipe\n\ndef process_data(prompt, pipe):\n    response = pipe(prompt).images[0]\n    return response\n\n@app.post(\"/generate_anime_image/\")\nasync def generate_image(prompt:str):\n    try:\n\n        # Load the model (replace load_model() with your actual model loading logic)\n        pipe = load_model()\n\n        # Prompt Creation\n        prompt = \"Anime-style picture: \" + prompt\n\n        # Process the data (replace process_data() with your actual data processing logic)\n        response = process_data(prompt, pipe)\n\n        ## Save the image\n        response.save('generated_img.png')\n\n        image_path = Path('generated_img.png')\n        \n        if not image_path.is_file():\n            return {\"error\": \"Image not found on the server\"}\n\n        return FileResponse(image_path)\n    except Exception as e:\n        # Handle exceptions or errors here\n        raise HTTPException(status_code=500, detail=str(e))",
        "task_num": 1,
        "task_description": "Generate an animated image of a high school boy in Japan.",
        "dependencies": [],
        "dependency_output": {},
        "depended_params": []
    },
    {
        "Id": 1,
        "name": "tti_Animation_Art",
        "input_parameters_with_datatype": [
            {
                "name": "prompt",
                "datatype": "string",
                "description": "The 'prompt' parameter is a user prompt in string data type. It is required for providing descriptive content or themes for the image generation process in the 'tti_Animation_Art' API. This parameter serves as the textual input that will be transformed into vibrant animation-style images by the API's pre-trained model."
            }
        ],
        "input_description": "The input parameter for this API is a user prompt in string data type.",
        "output_data_type": "binary_image_file",
        "output description": "Generated animated image of a high school girl in Japan as a binary_image_file",
        "description": "This API takes a user prompt and generates an image in animation style using a pre-trained model. The user needs to provide a prompt in string format and the API will return the generated animation image as a response in the form of a FileResponse.",
        "method": "POST",
        "url": null,
        "summary": "The 'tti_Animation_Art' API utilizes a POST method to transform user prompts into captivating animation images. By inputting a user prompt in string format, individuals can provide descriptive content or themes for the image generation process. The API employs a sophisticated pre-trained model to convert these textual inputs into vibrant animation-style images. Upon processing the input prompt, the API seamlessly delivers the resulting artwork as a binary_image_file, encapsulating the dynamically generated animation. This API empowers users to effortlessly merge textual creativity with visual artistry, enabling the creation of detailed animated images for various digital media applications and creative projects.",
        "source_code": "from fastapi import FastAPI, HTTPException\nfrom fastapi.responses import FileResponse\n\nfrom PIL import Image\nfrom diffusers import StableDiffusionPipeline, DPMSolverMultistepScheduler\nimport torch\nfrom pydantic import BaseModel\nfrom pathlib import Path\n\napp = FastAPI()\n\ndef load_model():\n    model_id = 'dreamlike-art/dreamlike-anime-1.0'\n    pipe = StableDiffusionPipeline.from_pretrained(model_id, torch_dtype=torch.float16)\n    pipe.scheduler = DPMSolverMultistepScheduler.from_config(pipe.scheduler.config)\n    pipe = pipe.to('cuda')\n    return pipe\n\ndef process_data(prompt, pipe):\n    response = pipe(prompt).images[0]\n    return response\n\n@app.post(\"/generate_anime_image/\")\nasync def generate_image(prompt:str):\n    try:\n\n        # Load the model (replace load_model() with your actual model loading logic)\n        pipe = load_model()\n\n        # Prompt Creation\n        prompt = \"Anime-style picture: \" + prompt\n\n        # Process the data (replace process_data() with your actual data processing logic)\n        response = process_data(prompt, pipe)\n\n        ## Save the image\n        response.save('generated_img.png')\n\n        image_path = Path('generated_img.png')\n        \n        if not image_path.is_file():\n            return {\"error\": \"Image not found on the server\"}\n\n        return FileResponse(image_path)\n    except Exception as e:\n        # Handle exceptions or errors here\n        raise HTTPException(status_code=500, detail=str(e))",
        "task_num": 2,
        "task_description": "Generate an animated image of a high school girl in Japan.",
        "dependencies": [],
        "dependency_output": {},
        "depended_params": []
    },
    {
        "Id": 1,
        "name": "tti_Animation_Art",
        "input_parameters_with_datatype": [
            {
                "name": "prompt",
                "datatype": "string",
                "description": "The 'prompt' parameter is a user prompt in string data type. It is required for providing descriptive content or themes for the image generation process in the 'tti_Animation_Art' API. This parameter serves as the textual input that will be transformed into vibrant animation-style images by the API's pre-trained model."
            }
        ],
        "input_description": "The input parameter for this API is a user prompt in string data type.",
        "output_data_type": "binary_image_file",
        "output description": "Enhanced animated image of a high school boy as a binary_image_file",
        "description": "This API takes a user prompt and generates an image in animation style using a pre-trained model. The user needs to provide a prompt in string format and the API will return the generated animation image as a response in the form of a FileResponse.",
        "method": "POST",
        "url": null,
        "summary": "The 'tti_Animation_Art' API utilizes a POST method to transform user prompts into captivating animation images. By inputting a user prompt in string format, individuals can provide descriptive content or themes for the image generation process. The API employs a sophisticated pre-trained model to convert these textual inputs into vibrant animation-style images. Upon processing the input prompt, the API seamlessly delivers the resulting artwork as a binary_image_file, encapsulating the dynamically generated animation. This API empowers users to effortlessly merge textual creativity with visual artistry, enabling the creation of detailed animated images for various digital media applications and creative projects.",
        "source_code": "from fastapi import FastAPI, HTTPException\nfrom fastapi.responses import FileResponse\n\nfrom PIL import Image\nfrom diffusers import StableDiffusionPipeline, DPMSolverMultistepScheduler\nimport torch\nfrom pydantic import BaseModel\nfrom pathlib import Path\n\napp = FastAPI()\n\ndef load_model():\n    model_id = 'dreamlike-art/dreamlike-anime-1.0'\n    pipe = StableDiffusionPipeline.from_pretrained(model_id, torch_dtype=torch.float16)\n    pipe.scheduler = DPMSolverMultistepScheduler.from_config(pipe.scheduler.config)\n    pipe = pipe.to('cuda')\n    return pipe\n\ndef process_data(prompt, pipe):\n    response = pipe(prompt).images[0]\n    return response\n\n@app.post(\"/generate_anime_image/\")\nasync def generate_image(prompt:str):\n    try:\n\n        # Load the model (replace load_model() with your actual model loading logic)\n        pipe = load_model()\n\n        # Prompt Creation\n        prompt = \"Anime-style picture: \" + prompt\n\n        # Process the data (replace process_data() with your actual data processing logic)\n        response = process_data(prompt, pipe)\n\n        ## Save the image\n        response.save('generated_img.png')\n\n        image_path = Path('generated_img.png')\n        \n        if not image_path.is_file():\n            return {\"error\": \"Image not found on the server\"}\n\n        return FileResponse(image_path)\n    except Exception as e:\n        # Handle exceptions or errors here\n        raise HTTPException(status_code=500, detail=str(e))",
        "task_num": 3,
        "task_description": "Enhance the animated image of the high school boy.",
        "dependencies": [
            "t1",
            "t2"
        ],
        "dependency_output": {
            "t1": {
                "output_data_type": "binary_image_file",
                "output_description": "Generated animated image of a high school boy in Japan as a binary_image_file"
            },
            "t2": {
                "output_data_type": "binary_image_file",
                "output_description": "Generated animated image of a high school girl in Japan as a binary_image_file"
            }
        },
        "depended_params": []
    },
    {
        "Id": 1,
        "name": "tti_Animation_Art",
        "input_parameters_with_datatype": [
            {
                "name": "prompt",
                "datatype": "string",
                "description": "The 'prompt' parameter is a user prompt in string data type. It is required for providing descriptive content or themes for the image generation process in the 'tti_Animation_Art' API. This parameter serves as the textual input that will be transformed into vibrant animation-style images by the API's pre-trained model."
            }
        ],
        "input_description": "The input parameter for this API is a user prompt in string data type.",
        "output_data_type": "binary_image_file",
        "output description": "Enhanced animated image of a high school girl as a binary_image_file",
        "description": "This API takes a user prompt and generates an image in animation style using a pre-trained model. The user needs to provide a prompt in string format and the API will return the generated animation image as a response in the form of a FileResponse.",
        "method": "POST",
        "url": null,
        "summary": "The 'tti_Animation_Art' API utilizes a POST method to transform user prompts into captivating animation images. By inputting a user prompt in string format, individuals can provide descriptive content or themes for the image generation process. The API employs a sophisticated pre-trained model to convert these textual inputs into vibrant animation-style images. Upon processing the input prompt, the API seamlessly delivers the resulting artwork as a binary_image_file, encapsulating the dynamically generated animation. This API empowers users to effortlessly merge textual creativity with visual artistry, enabling the creation of detailed animated images for various digital media applications and creative projects.",
        "source_code": "from fastapi import FastAPI, HTTPException\nfrom fastapi.responses import FileResponse\n\nfrom PIL import Image\nfrom diffusers import StableDiffusionPipeline, DPMSolverMultistepScheduler\nimport torch\nfrom pydantic import BaseModel\nfrom pathlib import Path\n\napp = FastAPI()\n\ndef load_model():\n    model_id = 'dreamlike-art/dreamlike-anime-1.0'\n    pipe = StableDiffusionPipeline.from_pretrained(model_id, torch_dtype=torch.float16)\n    pipe.scheduler = DPMSolverMultistepScheduler.from_config(pipe.scheduler.config)\n    pipe = pipe.to('cuda')\n    return pipe\n\ndef process_data(prompt, pipe):\n    response = pipe(prompt).images[0]\n    return response\n\n@app.post(\"/generate_anime_image/\")\nasync def generate_image(prompt:str):\n    try:\n\n        # Load the model (replace load_model() with your actual model loading logic)\n        pipe = load_model()\n\n        # Prompt Creation\n        prompt = \"Anime-style picture: \" + prompt\n\n        # Process the data (replace process_data() with your actual data processing logic)\n        response = process_data(prompt, pipe)\n\n        ## Save the image\n        response.save('generated_img.png')\n\n        image_path = Path('generated_img.png')\n        \n        if not image_path.is_file():\n            return {\"error\": \"Image not found on the server\"}\n\n        return FileResponse(image_path)\n    except Exception as e:\n        # Handle exceptions or errors here\n        raise HTTPException(status_code=500, detail=str(e))",
        "task_num": 4,
        "task_description": "Enhance the animated image of the high school girl.",
        "dependencies": [
            "t1",
            "t2"
        ],
        "dependency_output": {
            "t1": {
                "output_data_type": "binary_image_file",
                "output_description": "Generated animated image of a high school boy in Japan as a binary_image_file"
            },
            "t2": {
                "output_data_type": "binary_image_file",
                "output_description": "Generated animated image of a high school girl in Japan as a binary_image_file"
            }
        },
        "depended_params": []
    },
    {
        "Id": 12,
        "name": "Image_Resizing",
        "input_parameters_with_datatype": [
            {
                "name": "width",
                "datatype": "int",
                "description": "The 'width' parameter specifies the desired width dimension for resizing the user-uploaded image file. This parameter is essential for determining the new width of the image during the resizing process. It plays a crucial role in adjusting the dimensions of the image according to user requirements, ensuring the output meets the specified width criteria for the resized image."
            },
            {
                "name": "height",
                "datatype": "int",
                "description": "The height parameter specifies the desired height dimension for resizing the user-uploaded image file. This parameter is essential for determining the final dimensions of the resized image, ensuring that the output meets the user's requirements for image size adjustments."
            },
            {
                "name": "file",
                "datatype": "binary_image_file",
                "description": "The 'file' parameter of datatype 'binary_image_file' is required for this API as it serves as the input containing the image file uploaded by the user. This parameter is essential for the 'Image_Resizing' API to receive the binary form of the image file, enabling the resizing process to be carried out on the user-provided visual content."
            }
        ],
        "input_description": "The input for this API is an image file uploaded by the user.",
        "output_data_type": "binary_image_file",
        "output description": "The output of this API will be a PDF file containing the enhanced image of the high school boy resized to 500x800 pixels.",
        "description": "This API takes an image file as input uploaded by the user and resizes it to the specified width and height. It then converts the resized image into a PDF file and returns the PDF file as output. The main objective of this API is to allow users to resize images and convert them into PDF format.",
        "method": "POST",
        "url": null,
        "summary": "The 'Image_Resizing' API employs a POST method to resize user-uploaded image files by the specified width and height dimensions. Users provide image files in binary form as input to the API, where the resizing process is carried out. Upon completion, the resized image is transformed into a PDF file, serving as the output in binary_image_file format. This API streamlines the task of image resizing and conversion to PDF, facilitating efficient handling of visual content for users seeking to adjust image dimensions and format for various purposes.",
        "source_code": "# FastAPI\nfrom fastapi import FastAPI, HTTPException, File, UploadFile\nfrom fastapi.responses import FileResponse\nfrom PIL import Image\nimport io\nimport os\n\napp = FastAPI()\n\n@app.post('/resize_image/')\nasync def resize_image(width: int, height: int, file: UploadFile):\n    try:\n        # Read the uploaded file contents\n        contents = await file.read()\n\n        image = Image.open(io.BytesIO(contents))\n        \n        # Resize the image\n        resized = image.resize((width, height))\n        \n        # Saving the resized image to a temporary file\n        filename = \"resized_image.png\"\n        resized.save(filename)\n\n        return FileResponse(filename, media_type=\"image/png\", filename=\"output.png\")\n    \n    except Exception as e:\n        # Handle exceptions or errors here\n        raise HTTPException(status_code=500, detail=str(e))",
        "task_num": 5,
        "task_description": "Resize the enhanced image of the high school boy to 500x800 pixels.",
        "dependencies": [
            "t3",
            "t4"
        ],
        "dependency_output": {
            "t3": {
                "output_data_type": "binary_image_file",
                "output_description": "Enhanced animated image of a high school boy as a binary_image_file"
            },
            "t4": {
                "output_data_type": "binary_image_file",
                "output_description": "Enhanced animated image of a high school girl as a binary_image_file"
            }
        },
        "depended_params": [
            {
                "file": "t3"
            }
        ]
    },
    {
        "Id": 12,
        "name": "Image_Resizing",
        "input_parameters_with_datatype": [
            {
                "name": "width",
                "datatype": "int",
                "description": "The 'width' parameter specifies the desired width dimension for resizing the user-uploaded image file. This parameter is essential for determining the new width of the image during the resizing process. It plays a crucial role in adjusting the dimensions of the image according to user requirements, ensuring the output meets the specified width criteria for the resized image."
            },
            {
                "name": "height",
                "datatype": "int",
                "description": "The height parameter specifies the desired height dimension for resizing the user-uploaded image file. This parameter is essential for determining the final dimensions of the resized image, ensuring that the output meets the user's requirements for image size adjustments."
            },
            {
                "name": "file",
                "datatype": "binary_image_file",
                "description": "The 'file' parameter of datatype 'binary_image_file' is required for this API as it serves as the input containing the image file uploaded by the user. This parameter is essential for the 'Image_Resizing' API to receive the binary form of the image file, enabling the resizing process to be carried out on the user-provided visual content."
            }
        ],
        "input_description": "The input for this API is an image file uploaded by the user.",
        "output_data_type": "binary_image_file",
        "output description": "The output of this API will be a PDF file containing the enhanced image of the high school girl resized to 500x800 pixels.",
        "description": "This API takes an image file as input uploaded by the user and resizes it to the specified width and height. It then converts the resized image into a PDF file and returns the PDF file as output. The main objective of this API is to allow users to resize images and convert them into PDF format.",
        "method": "POST",
        "url": null,
        "summary": "The 'Image_Resizing' API employs a POST method to resize user-uploaded image files by the specified width and height dimensions. Users provide image files in binary form as input to the API, where the resizing process is carried out. Upon completion, the resized image is transformed into a PDF file, serving as the output in binary_image_file format. This API streamlines the task of image resizing and conversion to PDF, facilitating efficient handling of visual content for users seeking to adjust image dimensions and format for various purposes.",
        "source_code": "# FastAPI\nfrom fastapi import FastAPI, HTTPException, File, UploadFile\nfrom fastapi.responses import FileResponse\nfrom PIL import Image\nimport io\nimport os\n\napp = FastAPI()\n\n@app.post('/resize_image/')\nasync def resize_image(width: int, height: int, file: UploadFile):\n    try:\n        # Read the uploaded file contents\n        contents = await file.read()\n\n        image = Image.open(io.BytesIO(contents))\n        \n        # Resize the image\n        resized = image.resize((width, height))\n        \n        # Saving the resized image to a temporary file\n        filename = \"resized_image.png\"\n        resized.save(filename)\n\n        return FileResponse(filename, media_type=\"image/png\", filename=\"output.png\")\n    \n    except Exception as e:\n        # Handle exceptions or errors here\n        raise HTTPException(status_code=500, detail=str(e))",
        "task_num": 6,
        "task_description": "Resize the enhanced image of the high school girl to 500x800 pixels.",
        "dependencies": [
            "t3",
            "t4"
        ],
        "dependency_output": {
            "t3": {
                "output_data_type": "binary_image_file",
                "output_description": "Enhanced animated image of a high school boy as a binary_image_file"
            },
            "t4": {
                "output_data_type": "binary_image_file",
                "output_description": "Enhanced animated image of a high school girl as a binary_image_file"
            }
        },
        "depended_params": [
            {
                "file": "t3"
            }
        ]
    },
    {
        "Id": 15,
        "name": "image_format_converter",
        "input_parameters_with_datatype": [
            {
                "name": "file",
                "datatype": "binary_image_file",
                "description": "The 'file' parameter is a binary_image_file that represents the image file to be uploaded and converted to a specified format. This parameter is required for the 'convert_image' function to receive the input image file for processing and conversion. The function reads the contents of the uploaded file, opens it using the PIL library, saves it in the desired format, and returns the converted image file as a response. The 'file' parameter plays a crucial role in the image conversion process within the 'image_format_converter' function."
            },
            {
                "name": "output_format",
                "datatype": "string",
                "description": "The 'output_format' parameter specifies the desired image format to which the uploaded image should be converted. It is a string datatype representing the file format such as JPEG, PNG, GIF, BMP, TIFF, PBM, PGM, PPM, or JPG. This parameter is essential for the 'image_format_converter' function to determine the output format for the converted image file."
            }
        ],
        "input_description": "The input for this API is a image and a desired image format name in string ",
        "output_data_type": "binary_image_file",
        "output description": "A PNG image file of the resized high school boy.",
        "description": "This API takes a image file and name of the desired image format type as input and converts it to the specified image file format. The main objective of this API is to allow users to convert one image format to another.",
        "method": "POST",
        "url": null,
        "summary": "The 'image_format_converter' allows users to upload an image file and convert it to a specified format. It imports necessary modules including FastAPI, File, UploadFile, HTTPException, Form, and others to handle HTTP requests, file uploads, and image processing. The script defines a list of supported image extensions, including JPEG, PNG, GIF, BMP, TIFF, PBM, PGM, PPM, and JPG. A helper function check_file_extension verifies if the file has a supported extension. The main functionality is provided by the /convert_image/ endpoint, which accepts a file upload and an output format. This endpoint reads the uploaded file, checks if the specified output format is supported, opens the uploaded image using the PIL library, saves the image in the desired format, and returns the converted image file as a response. Additionally, the endpoint includes error handling to raise HTTP 500 exceptions if something goes wrong during the process. The overall purpose of the application is to convert uploaded images to different formats specified by the user, supporting various common image file types.",
        "source_code": "from fastapi import FastAPI, File, UploadFile, HTTPException, Form\r\nfrom fastapi.responses import FileResponse\r\nfrom pathlib import Path\r\nfrom PIL import Image\r\n\r\napp = FastAPI()\r\n\r\n# Define the supported image extensions\r\nsupported_extensions = [\".JPEG\", \".PNG\", \".GIF\", \".BMP\", \".TIFF\", \".PBM\", \".PGM\", \".PPM\", \".JPG\"]\r\n\r\nimg_path = \"/home/cc/AutomaticWorkflowGeneration/FaaS_Searvices/functions/image_format_converter/app/converted.jpg\"\r\n\r\ndef check_file_extension(file_path):\r\n    file_extension = file_path.suffix.upper()\r\n    if file_extension not in supported_extensions:\r\n        return False\r\n    return True\r\n\r\n\r\n@app.post(\"/convert_image/\")\r\nasync def convert_image(file: UploadFile, output_format: str = Form(...)):\r\n    try:\r\n        file_path = Path(file.filename)\r\n        file_name = file_path.stem\r\n        output_format = output_format.upper()\r\n\r\n        # Validate the output format\r\n        if f\".{output_format}\" not in supported_extensions:\r\n            return {\"error\": \"Unsupported output format\"}\r\n\r\n        # Read the contents of the uploaded file\r\n        contents = await file.read()\r\n\r\n        # Open the image using PIL\r\n        input_image = Image.open(file_path)\r\n\r\n        # Define the output file path\r\n        output_file_path = f'{file_name}.{output_format.lower()}'\r\n\r\n        # Save the image in the desired format\r\n        input_image.save(output_file_path, format=output_format)\r\n\r\n        # Return the converted file\r\n        return FileResponse(output_file_path, media_type=f\"image/{output_format.lower()}\", filename=output_file_path)\r\n    except Exception as e:\r\n        # Handle exceptions or errors here\r\n        raise HTTPException(status_code=500, detail=str(e))",
        "task_num": 7,
        "task_description": "Convert the resized image of the high school boy to PNG format.",
        "dependencies": [
            "t5",
            "t6"
        ],
        "dependency_output": {
            "t5": {
                "output_data_type": "binary_image_file",
                "output_description": "The output of this API will be a PDF file containing the enhanced image of the high school boy resized to 500x800 pixels."
            },
            "t6": {
                "output_data_type": "binary_image_file",
                "output_description": "The output of this API will be a PDF file containing the enhanced image of the high school girl resized to 500x800 pixels."
            }
        },
        "depended_params": [
            {
                "file": "t1"
            }
        ]
    },
    {
        "Id": 15,
        "name": "image_format_converter",
        "input_parameters_with_datatype": [
            {
                "name": "file",
                "datatype": "binary_image_file",
                "description": "The 'file' parameter is a binary_image_file that represents the image file to be uploaded and converted to a specified format. This parameter is required for the 'convert_image' function to receive the input image file for processing and conversion. The function reads the contents of the uploaded file, opens it using the PIL library, saves it in the desired format, and returns the converted image file as a response. The 'file' parameter plays a crucial role in the image conversion process within the 'image_format_converter' function."
            },
            {
                "name": "output_format",
                "datatype": "string",
                "description": "The 'output_format' parameter specifies the desired image format to which the uploaded image should be converted. It is a string datatype representing the file format such as JPEG, PNG, GIF, BMP, TIFF, PBM, PGM, PPM, or JPG. This parameter is essential for the 'image_format_converter' function to determine the output format for the converted image file."
            }
        ],
        "input_description": "The input for this API is a image and a desired image format name in string ",
        "output_data_type": "binary_image_file",
        "output description": "A JPEG image file of the resized high school girl.",
        "description": "This API takes a image file and name of the desired image format type as input and converts it to the specified image file format. The main objective of this API is to allow users to convert one image format to another.",
        "method": "POST",
        "url": null,
        "summary": "The 'image_format_converter' allows users to upload an image file and convert it to a specified format. It imports necessary modules including FastAPI, File, UploadFile, HTTPException, Form, and others to handle HTTP requests, file uploads, and image processing. The script defines a list of supported image extensions, including JPEG, PNG, GIF, BMP, TIFF, PBM, PGM, PPM, and JPG. A helper function check_file_extension verifies if the file has a supported extension. The main functionality is provided by the /convert_image/ endpoint, which accepts a file upload and an output format. This endpoint reads the uploaded file, checks if the specified output format is supported, opens the uploaded image using the PIL library, saves the image in the desired format, and returns the converted image file as a response. Additionally, the endpoint includes error handling to raise HTTP 500 exceptions if something goes wrong during the process. The overall purpose of the application is to convert uploaded images to different formats specified by the user, supporting various common image file types.",
        "source_code": "from fastapi import FastAPI, File, UploadFile, HTTPException, Form\r\nfrom fastapi.responses import FileResponse\r\nfrom pathlib import Path\r\nfrom PIL import Image\r\n\r\napp = FastAPI()\r\n\r\n# Define the supported image extensions\r\nsupported_extensions = [\".JPEG\", \".PNG\", \".GIF\", \".BMP\", \".TIFF\", \".PBM\", \".PGM\", \".PPM\", \".JPG\"]\r\n\r\nimg_path = \"/home/cc/AutomaticWorkflowGeneration/FaaS_Searvices/functions/image_format_converter/app/converted.jpg\"\r\n\r\ndef check_file_extension(file_path):\r\n    file_extension = file_path.suffix.upper()\r\n    if file_extension not in supported_extensions:\r\n        return False\r\n    return True\r\n\r\n\r\n@app.post(\"/convert_image/\")\r\nasync def convert_image(file: UploadFile, output_format: str = Form(...)):\r\n    try:\r\n        file_path = Path(file.filename)\r\n        file_name = file_path.stem\r\n        output_format = output_format.upper()\r\n\r\n        # Validate the output format\r\n        if f\".{output_format}\" not in supported_extensions:\r\n            return {\"error\": \"Unsupported output format\"}\r\n\r\n        # Read the contents of the uploaded file\r\n        contents = await file.read()\r\n\r\n        # Open the image using PIL\r\n        input_image = Image.open(file_path)\r\n\r\n        # Define the output file path\r\n        output_file_path = f'{file_name}.{output_format.lower()}'\r\n\r\n        # Save the image in the desired format\r\n        input_image.save(output_file_path, format=output_format)\r\n\r\n        # Return the converted file\r\n        return FileResponse(output_file_path, media_type=f\"image/{output_format.lower()}\", filename=output_file_path)\r\n    except Exception as e:\r\n        # Handle exceptions or errors here\r\n        raise HTTPException(status_code=500, detail=str(e))",
        "task_num": 8,
        "task_description": "Convert the resized image of the high school girl to JPEG format.",
        "dependencies": [
            "t5",
            "t6"
        ],
        "dependency_output": {
            "t5": {
                "output_data_type": "binary_image_file",
                "output_description": "The output of this API will be a PDF file containing the enhanced image of the high school boy resized to 500x800 pixels."
            },
            "t6": {
                "output_data_type": "binary_image_file",
                "output_description": "The output of this API will be a PDF file containing the enhanced image of the high school girl resized to 500x800 pixels."
            }
        },
        "depended_params": [
            {
                "file": "t1"
            }
        ]
    }
]