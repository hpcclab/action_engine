"```yaml\napiVersion: argoproj.io/v1alpha1\nkind: Workflow\nmetadata:\n  generateName:
http-wf-\nspec:\n  arguments:\n    parameters:\n      - name: width\n      - name:
height\n  entrypoint: main\n  templates:\n    - name: main\n      inputs:\n      \
\  parameters:\n          - name: width\n          - name: height\n      dag:\n  \
\      tasks:\n          - name: t1\n            template: tti-mosaic-art\n      \
\      arguments:\n              parameters:\n                - name: prompt\n   \
\               value: \"Ancient Roman architecture\"\n            dependencies: []\n\
\          - name: t2\n            template: image-resizing\n            arguments:\n\
\              parameters:\n                - name: width\n                  value:
\"{{inputs.parameters.width}}\"\n                - name: height\n                \
\  value: \"{{inputs.parameters.height}}\"\n                - name: file\n       \
\           value: \"{{tasks.t1.outputs.parameters.image_file}}\"\n            dependencies:
[t1]\n    - name: tti-mosaic-art\n      inputs:\n        parameters:\n          -
name: prompt\n      outputs:\n        parameters:\n          - name: image_file\n\
\            valueFrom:\n              path: /tmp/generated_img.png\n      script:\n\
\        image: python:3.8\n        command: [python]\n        source: |\n       \
\   from fastapi import FastAPI, HTTPException\n          from fastapi.responses import
FileResponse\n          from PIL import Image\n          from diffusers import StableDiffusionPipeline,
DPMSolverMultistepScheduler\n          import torch\n          from pathlib import
Path\n          \n          app = FastAPI()\n\n          def load_model():\n     \
\         model_id = 'Guizmus/MosaicArt'\n              pipe = StableDiffusionPipeline.from_pretrained(model_id,
torch_dtype=torch.float16)\n              pipe.scheduler = DPMSolverMultistepScheduler.from_config(pipe.scheduler.config)\n\
\              pipe = pipe.to('cuda')\n              return pipe\n\n          def
process_data(prompt, pipe):\n              response = pipe(prompt).images[0]\n   \
\           return response\n\n          @app.post(\"/generate_mosaic_image/\")\n\
\          async def generate_image(prompt:str):\n              try:\n           \
\       pipe = load_model()\n                  prompt = \"Mosaic-style picture: \"\
\ + prompt\n                  response = process_data(prompt, pipe)\n            \
\      response.save('/tmp/generated_img.png')\n                  return FileResponse('/tmp/generated_img.png')\n\
\              except Exception as e:\n                  raise HTTPException(status_code=500,
detail=str(e))\n\n          if __name__ == \"__main__\":\n              import uvicorn\n\
\              uvicorn.run(app, host=\"0.0.0.0\", port=8000)\n  - name: image-resizing\n\
\      inputs:\n        parameters:\n          - name: width\n          - name: height\n\
\          - name: file\n      outputs:\n        parameters:\n          - name: resized_image\n\
\            valueFrom:\n              path: /tmp/resized_image.png\n      script:\n\
\        image: python:3.8\n        command: [python]\n        source: |\n       \
\   from fastapi import FastAPI, HTTPException, File, UploadFile\n          from fastapi.responses
import FileResponse\n          from PIL import Image\n          import io\n      \
\    import os\n\n          app = FastAPI()\n\n          @app.post('/resize_image/')\n\
\          async def resize_image(width: int, height: int, file: UploadFile):\n  \
\            try:\n                  contents = await file.read()\n              \
\    image = Image.open(io.BytesIO(contents))\n                  resized = image.resize((width,
height))\n                  filename = \"/tmp/resized_image.png\"\n              \
\    resized.save(filename)\n                  return filename\n              except
Exception as e:\n                  raise HTTPException(status_code=500, detail=str(e))\n\
\n          if __name__ == \"__main__\":\n              import uvicorn\n         \
\     uvicorn.run(app, host=\"0.0.0.0\", port=8000)\n```"
