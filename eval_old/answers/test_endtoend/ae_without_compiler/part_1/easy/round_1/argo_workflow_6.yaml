apiVersion: argoproj.io/v1alpha1
kind: Workflow
metadata:
  generateName: http-wf-
spec:
  entrypoint: main
  templates:
  - name: main
    dag:
      tasks:
      - name: t1
        template: tti-futuristic-art
        arguments:
          parameters:
          - name: prompt
            value: A futuristic cityscape at night
      - name: t2
        template: image-to-pdf-conversion
        arguments:
          parameters:
          - name: file
            value: '{{tasks.t1.outputs.artwork}}'
        dependencies: [t1]

  - name: tti-futuristic-art
    inputs:
      parameters:
      - name: prompt
    outputs:
      parameters:
      - name: artwork
        valueFrom:
          path: /tmp/generated_img.png
    script:
      image: python:3.8
      command: [python]
      source: |
        from PIL import Image
        from diffusers import StableDiffusionPipeline, DPMSolverMultistepScheduler
        import torch
        import sys

        def load_model():
            model_id = 'nitrosocke/Future-Diffusion'
            pipe = StableDiffusionPipeline.from_pretrained(model_id, torch_dtype=torch.float16)
            pipe.scheduler = DPMSolverMultistepScheduler.from_config(pipe.scheduler.config)
            pipe = pipe.to('cuda')
            return pipe

        def process_data(prompt, pipe):
            response = pipe(prompt).images[0]
            return response

        prompt = sys.argv[1]

        pipe = load_model()

        final_prompt = "Futuristic-style picture: " + prompt

        response = process_data(final_prompt, pipe)

        response.save('/tmp/generated_img.png')

        print("/tmp/generated_img.png")
    args:
    - '{{inputs.parameters.prompt}}'

  - name: image-to-pdf-conversion
    inputs:
      parameters:
      - name: file
    outputs:
      parameters:
      - name: pdf
        valueFrom:
          path: /tmp/output.pdf
    script:
      image: python:3.8
      command: [python]
      source: |
        from fastapi import File, UploadFile, HTTPException
        from pathlib import Path
        from PIL import Image
        import img2pdf
        import sys

        supported_extensions = [".JPEG", ".PNG", ".GIF", ".BMP", ".TIFF", ".PBM", ".PGM", ".PPM"]

        def check_file_extension(file_path):
            file_extension = file_path.suffix.upper()
            if file_extension not in supported_extensions:
                return False
            return True

        file_path = Path(sys.argv[1])
        file_name = file_path.stem
        with open(sys.argv[1], "rb") as file:
            contents = file.read()

        if not check_file_extension(file_path):
            raise HTTPException(status_code=400, detail="Unsupported format")

        pdf_bytes = img2pdf.convert(contents)

        pdf_file_path = f'/tmp/{file_name}.pdf'

        with open(pdf_file_path, 'wb') as pdf_file:
            pdf_file.write(pdf_bytes)

        print(pdf_file_path)
    args:
    - '{{inputs.parameters.file}}'
