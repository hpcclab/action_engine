apiVersion: argoproj.io/v1alpha1
kind: Workflow
metadata:
  generateName: http-wf-
spec:
  entrypoint: main
  templates:
  - name: main
    dag:
      tasks:
      - name: t1
        template: tti_Graffiti_Art
        arguments:
          parameters:
          - name: prompt
            value: Urban jungle   # Replace this with the actual input value at runtime if needed
      - name: t2
        template: Image_Resizing
        arguments:
          parameters:
          - name: width
            value: 800
          - name: height
            value: 600
          - name: file
            value: '{{tasks.t1.outputs.artifact.file}}'
        dependencies: [t1]

  - name: tti_Graffiti_Art
    inputs:
      parameters:
      - name: prompt
    outputs:
      artifacts:
      - name: file
        path: /tmp/graffiti_art.png
    script:
      image: python:3.8
      command: [python]
      source: |
        from fastapi import FastAPI, HTTPException
        from fastapi.responses import FileResponse

        from PIL import Image
        from diffusers import StableDiffusionPipeline, DPMSolverMultistepScheduler
        import torch
        import shutil

        app = FastAPI()

        def load_model():
            model_id = 'bakebrain/bergraffi-berlin-graffiti'
            pipe = StableDiffusionPipeline.from_pretrained(model_id, torch_dtype=torch.float16)
            pipe.scheduler = DPMSolverMultistepScheduler.from_config(pipe.scheduler.config)
            pipe = pipe.to('cuda')
            return pipe

        def process_data(prompt, pipe):
            response = pipe(prompt).images[0]
            return response

        prompt = "Urban jungle"
        pipe = load_model()
        response = process_data(prompt, pipe)
        response.save('/tmp/graffiti_art.png')

  - name: Image_Resizing
    inputs:
      parameters:
      - name: width
      - name: height
      - name: file
    script:
      image: python:3.8
      command: [python]
      source: |-
        from fastapi import FastAPI, HTTPException, File, UploadFile
        from fastapi.responses import FileResponse
        from PIL import Image
        import io
        import os
        import shutil

        app = FastAPI()

        async def resize_image(width: int, height: int, file_path: str):
            try:
                image = Image.open(file_path)

                # Resize the image
                resized = image.resize((width, height))

                # Saving the resized image to a temporary file
                output_path = '/tmp/resized_image.png'
                resized.save(output_path)

                # Copy the file to the output location
                shutil.copyfile(output_path, '/tmp/resized_output.png')

            except Exception as e:
                # Handle exceptions or errors here
                raise HTTPException(status_code=500, detail=str(e))

        width = 800
        height = 600
        file_path = '/tmp/graffiti_art.png' # This value is dynamically resolved based on the t1 task

        resize_image(width, height, file_path)
