apiVersion: argoproj.io/v1alpha1
kind: Workflow
metadata:
  generateName: http-wf-
spec:
  entrypoint: main
  templates:
  - name: main
    dag:
      tasks:
      - name: t1
        template: tti-Mosaic-Art
        arguments:
          parameters:
          - name: prompt
            value: Ancient Roman architecture
      - name: t2
        template: Image-Resizing
        arguments:
          parameters:
          - name: width
            value: 1024
          - name: height
            value: 768
          - name: file
            value: '{{{{ tasks.t1.outputs.parameters.result }}}}'
        dependencies: [t1]

  - name: tti-Mosaic-Art
    inputs:
      parameters:
      - name: prompt
    outputs:
      parameters:
      - name: result
        valueFrom:
          path: /tmp/response.png
    script:
      image: python:3.8
      command: [python]
      source: |
        from fastapi import FastAPI, HTTPException
        from fastapi.responses import FileResponse
        from PIL import Image
        from diffusers import StableDiffusionPipeline, DPMSolverMultistepScheduler
        import torch
        from pathlib import Path

        model_id = 'Guizmus/MosaicArt'
        pipe = StableDiffusionPipeline.from_pretrained(model_id, torch_dtype=torch.float16)
        pipe.scheduler = DPMSolverMultistepScheduler.from_config(pipe.scheduler.config)
        pipe = pipe.to('cuda')

        prompt = "Mosiac-style picture: {{inputs.parameters.prompt}}"
        response = pipe(prompt).images[0]
        response.save('/tmp/response.png')

  - name: Image-Resizing
    inputs:
      parameters:
      - name: width
      - name: height
      - name: file
    outputs:
      parameters:
      - name: result
        valueFrom:
          path: /tmp/output.png
    script:
      image: python:3.8
      command: [python]
      source: |-
        from fastapi import FastAPI, HTTPException, File, UploadFile
        from fastapi.responses import FileResponse
        from PIL import Image
        import io

        width = 1024
        height = 768
        image_file = '/tmp/response.png'

        image = Image.open(image_file)
        resized = image.resize((width, height))
        filename = '/tmp/output.png'
        resized.save(filename)
