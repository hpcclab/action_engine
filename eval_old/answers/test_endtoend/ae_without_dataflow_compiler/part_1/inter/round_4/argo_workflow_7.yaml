apiVersion: argoproj.io/v1alpha1
kind: Workflow
metadata:
  generateName: http-wf-
spec:
  entrypoint: main
  templates:
  - name: main
    dag:
      tasks:
      - name: t1
        template: tti_Pastel_Art
        arguments:
          parameters:
          - name: prompt
            value: Create a pastel art image of a sunset over the ocean.
      - name: t2
        template: tti_Pastel_Art
        arguments:
          parameters:
          - name: file
            value: '{{tasks.t1.outputs.parameters.image_file}}'
      - name: t3
        template: Image_Resizing
        dependencies: [t2]
        arguments:
          parameters:
          - name: file
            value: '{{tasks.t2.outputs.parameters.image_file}}'
          - name: width
            value: 1024
          - name: height
            value: 768
      - name: t4
        template: Image_Enhancement
        dependencies: [t3]
        arguments:
          parameters:
          - name: file
            value: '{{tasks.t3.outputs.parameters.image_file}}'
      - name: t5
        template: Send_Email
        dependencies: [t4]
        arguments:
          parameters:
          - name: file
            value: '{{tasks.t4.outputs.parameters.image_file}}'
          - name: email
            value: friend@example.com

  - name: tti_Pastel_Art
    inputs:
      parameters:
      - name: prompt
      - name: file
    outputs:
      parameters:
      - name: image_file
        valueFrom:
          path: /outputs/image_file
    script:
      image: python:3.8
      command: [python]
      source: |
        # Add the provided source code for "tti_Pastel_Art" API here

  - name: Image_Resizing
    inputs:
      parameters:
      - name: width
      - name: height
      - name: file
    outputs:
      parameters:
      - name: image_file
        valueFrom:
          path: /outputs/image_file
    script:
      image: python:3.8
      command: [python]
      source: |
        # Add the provided source code for "Image_Resizing" API here

  - name: Image_Enhancement
    inputs:
      parameters:
      - name: file
    outputs:
      parameters:
      - name: image_file
        valueFrom:
          path: /outputs/image_file
    script:
      image: python:3.8
      command: [python]
      source: |
        # Add the provided source code for "Image_Enhancement" API here

  - name: Send_Email
    inputs:
      parameters:
      - name: file
      - name: email
    script:
      image: python:3.8
      command: [python]
      source: |-
        import smtplib
        from email.mime.multipart import MIMEMultipart
        from email.mime.base import MIMEBase
        from email.encoders import encode_base64

        def send_email(file, email):
            msg = MIMEMultipart()
            msg["From"] = "you@example.com"
            msg["To"] = email
            msg["Subject"] = "Enhanced JPEG Image"
            
            part = MIMEBase("application", "octet-stream")
            part.set_payload(open(file, "rb").read())
            encode_base64(part)
            part.add_header("Content-Disposition", f"attachment; filename={file}")
            msg.attach(part)
            
            server = smtplib.SMTP("smtp.example.com", 587)
            server.starttls()
            server.login("you@example.com", "password")
            server.sendmail("you@example.com", email, msg.as_string())
            server.quit()

        if __name__ == "__main__":
            import sys
            send_email(sys.argv[1], sys.argv[2])
