apiVersion: argoproj.io/v1alpha1
kind: Workflow
metadata:
  generateName: http-wf-
spec:
  arguments:
    parameters:
    - name: width
      value: '1024'
  entrypoint: main
  templates:
  - name: main
    inputs:
      parameters:
      - name: width
    dag:
      tasks:
      - name: t1
        template: tti-sketching-art
        arguments:
          parameters:
          - name: prompt
            value: Generate a sketching art style image depicting technological advancements
              of computers in the early 1900s.
      - name: t2
        template: tti-sketching-art
        arguments:
          parameters:
          - name: prompt
            value: Generate a sketching art style image depicting technological advancements
              of computers in the 1950s.
        dependencies: [t1]
      - name: t3
        template: tti-sketching-art
        arguments:
          parameters:
          - name: prompt
            value: Generate a futuristic art style image depicting technological advancements
              of computers in the 2020s.
        dependencies: [t2]
      - name: t4
        template: tti-sketching-art
        arguments:
          parameters:
          - name: prompt
            value: Convert the sketching art style image of the early 1900s to PNG
              format.
        dependencies: [t3]
      - name: t5
        template: tti-sketching-art
        arguments:
          parameters:
          - name: prompt
            value: Convert the sketching art style image of the 1950s to PNG format.
        dependencies: [t4]
      - name: t6
        template: tti-futuristic-art
        arguments:
          parameters:
          - name: prompt
            value: Convert the futuristic art style image of the 2020s to PNG format.
        dependencies: [t5]
      - name: t7
        template: email-task
        arguments:
          parameters:
          - name: prompt
            value: Email the PNG format image of the 2020s to the project supervisor.
        dependencies: [t6]
  - name: tti-sketching-art
    inputs:
      parameters:
      - name: prompt
    http:
      method: POST
      url: http://example.com/generate_sketching_image/    # Replace with actual URL
      headers:
        Content-Type: application/json
      body: |
        {
          "prompt": "{{inputs.parameters.prompt}}"
        }
      successCondition: response.statusCode == 200
      output:
        resultMap: result
  - name: tti-futuristic-art
    inputs:
      parameters:
      - name: prompt
    http:
      method: POST
      url: http://example.com/generate_futuristic_image/    # Replace with actual URL
      headers:
        Content-Type: application/json
      body: |
        {
          "prompt": "{{inputs.parameters.prompt}}"
        }
      successCondition: response.statusCode == 200
      output:
        resultMap: result
  - name: email-task
    inputs:
      parameters:
      - name: prompt
    script:
      image: python:3.7
      command: [python]
      source: |-
        import smtplib
        from email.mime.multipart import MIMEMultipart
        from email.mime.text import MIMEText
        from email.mime.base import MIMEBase
        from email import encoders

        def send_email(to_address, subject, body, attachment_path):
            from_address = "your-email@example.com"
            msg = MIMEMultipart()
            msg['From'] = from_address
            msg['To'] = to_address
            msg['Subject'] = subject

            msg.attach(MIMEText(body, 'plain'))

            attachment = open(attachment_path, "rb")
            part = MIMEBase('application', 'octet-stream')
            part.set_payload((attachment).read())
            encoders.encode_base64(part)
            part.add_header('Content-Disposition', "attachment; filename= " + attachment_path)
            msg.attach(part)

            server = smtplib.SMTP('smtp.gmail.com', 587)
            server.starttls()
            server.login(from_address, "your-email-password")
            text = msg.as_string()
            server.sendmail(from_address, to_address, text)
            server.quit()

        send_email("project-supervisor@example.com", "Generated Art Image", "Please find attached the generated image.", "/path/to/generated_img.png")
