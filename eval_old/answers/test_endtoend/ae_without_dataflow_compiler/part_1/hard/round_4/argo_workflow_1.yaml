"```yaml\napiVersion: argoproj.io/v1alpha1\nkind: Workflow\nmetadata:\n  generateName:
http-wf-\nspec:\n  entrypoint: main\n  templates:\n  - name: main\n    dag:\n    \
\  tasks:\n      - name: t1\n        template: tti-mosaic-art\n        arguments:\n\
\          parameters:\n          - name: prompt\n            value: \"Create a digital
art image of a serene mountain landscape during sunrise.\"\n      - name: t2\n   \
\     template: tti-pastel-art\n        arguments:\n          parameters:\n      \
\    - name: prompt\n            value: \"Create a pastel art image of the same mountain
landscape during sunset.\"\n        dependencies: [t1]\n      - name: t3\n       \
\ template: tti-sketching-art\n        arguments:\n          parameters:\n       \
\   - name: prompt\n            value: \"Create a sketching art image of the mountain
landscape at night with a starry sky.\"\n        dependencies: [t2]\n      - name:
t4\n        template: image-resizing\n        arguments:\n          parameters:\n\
\          - name: width\n            value: 1920\n          - name: height\n    \
\        value: 1080\n          - name: file\n            value: \"{{tasks.t1.outputs.result}}\"\
\n        dependencies: [t1]\n      - name: t5\n        template: image-enhancement\n\
\        arguments:\n          parameters:\n          - name: file\n            value:
\"{{tasks.t4.outputs.result}}\"\n        dependencies: [t4]\n      - name: t6\n  \
\      template: tti-mosaic-art\n        arguments:\n          parameters:\n     \
\     - name: prompt\n            value: \"Email the final digital art image of the
serene mountain landscape during sunrise to the client for review.\"\n        dependencies:
[t5]\n\n  - name: tti-mosaic-art\n    inputs:\n      parameters:\n      - name: prompt\n\
\    container:\n      image: python:3.9\n      command: [python, -c]\n      args:
\n      - |\n        from fastapi import FastAPI, HTTPException\n        from fastapi.responses
import FileResponse\n        from PIL import Image\n        from diffusers import
StableDiffusionPipeline, DPMSolverMultistepScheduler\n        import torch\n     \
\   from pathlib import Path\n\n        app = FastAPI()\n\n        def load_model():\n\
\            model_id = 'Guizmus/MosaicArt'\n            pipe = StableDiffusionPipeline.from_pretrained(model_id,
torch_dtype=torch.float16)\n            pipe.scheduler = DPMSolverMultistepScheduler.from_config(pipe.scheduler.config)\n\
\            pipe = pipe.to('cuda')\n            return pipe\n\n        def process_data(prompt,
pipe):\n            response = pipe(prompt).images[0]\n            return response\n\
\n        @app.post(\"/generate_mosaic_image/\")\n        async def generate_image(prompt:str):\n\
\            try:\n                pipe = load_model()\n                prompt = \"\
Mosiac-style picture: \" + prompt\n                response = process_data(prompt,
pipe)\n                response.save('generated_img.png')\n\n                image_path
= Path('generated_img.png')\n                if not image_path.is_file():\n      \
\              return {\"error\": \"Image not found on the server\"}\n\n         \
\       return FileResponse(image_path)\n            except Exception as e:\n    \
\            raise HTTPException(status_code=500, detail=str(e))\n\n  - name: tti-pastel-art\n\
\    inputs:\n      parameters:\n      - name: prompt\n    container:\n      image:
python:3.9\n      command: [python, -c]\n      args: \n      - |\n        from fastapi
import FastAPI, HTTPException\n        from fastapi.responses import FileResponse\n\
\        from PIL import Image\n        from diffusers import StableDiffusionPipeline,
DPMSolverMultistepScheduler\n        import torch\n        from pathlib import Path\n\
\n        app = FastAPI()\n\n        def load_model():\n            model_id = 'JamesFlare/pastel-mix'\n\
\            pipe = StableDiffusionPipeline.from_pretrained(model_id, torch_dtype=torch.float16)\n\
\            pipe.scheduler = DPMSolverMultistepScheduler.from_config(pipe.scheduler.config)\n\
\            pipe = pipe.to('cuda')\n            return pipe\n\n        def process_data(prompt,
pipe):\n            response = pipe(prompt).images[0]\n            return response\n\
\n        @app.post(\"/generate_pastel_image/\")\n        async def generate_image(prompt:str):\n\
\            try:\n                pipe = load_model()\n                prompt = \"\
Pastel-style picture: \" + prompt\n                response = process_data(prompt,
pipe)\n                response.save('generated_img.png')\n\n                image_path
= Path('generated_img.png')\n                if not image_path.is_file():\n      \
\              return {\"error\": \"Image not found on the server\"}\n\n         \
\       return FileResponse(image_path)\n            except Exception as e:\n    \
\            raise HTTPException(status_code"
