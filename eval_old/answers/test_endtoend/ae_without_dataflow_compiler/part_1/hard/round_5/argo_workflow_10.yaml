"```yaml\napiVersion: argoproj.io/v1alpha1\nkind: Workflow\nmetadata:\n  generateName:
http-wf-\nspec:\n  entrypoint: main\n  templates:\n  - name: main\n    dag:\n    \
\  tasks:\n      - name: t1\n        template: tti_Sketching_Art\n        arguments:\n\
\          parameters:\n            - name: prompt\n              value: \"Labrador
Retriever\"\n        dependencies: []\n      - name: t2\n        template: tti_Sketching_Art\n\
\        arguments:\n          parameters:\n            - name: prompt\n         \
\     value: \"German Shepherd\"\n        dependencies: [t1]\n      - name: t3\n \
\       template: tti_Sketching_Art\n        arguments:\n          parameters:\n \
\           - name: prompt\n              value: \"Golden Retriever\"\n        dependencies:
[t2]\n      - name: t4\n        template: tti_Sketching_Art\n        arguments:\n\
\          parameters:\n            - name: prompt\n              value: \"Bulldog\"\
\n        dependencies: [t3]\n      - name: t5\n        template: tti_Sketching_Art\n\
\        arguments:\n          parameters:\n            - name: prompt\n         \
\     value: \"Poodle\"\n        dependencies: [t4]\n      - name: t6\n        template:
tti_Sketching_Art\n        arguments:\n          parameters:\n            - name:
prompt\n              value: \"Beagle\"\n        dependencies: [t5]\n      - name:
t7\n        template: tti_Sketching_Art\n        arguments:\n          parameters:\n\
\            - name: prompt\n              value: \"Rottweiler\"\n        dependencies:
[t6]\n      - name: t8\n        template: tti_Sketching_Art\n        arguments:\n\
\          parameters:\n            - name: prompt\n              value: \"Dachshund\"\
\n        dependencies: [t7]\n      - name: t9\n        template: tti_Sketching_Art\n\
\        arguments:\n          parameters:\n            - name: prompt\n         \
\     value: \"Siberian Husky\"\n        dependencies: [t8]\n      - name: t10\n \
\       template: tti_Sketching_Art\n        arguments:\n          parameters:\n \
\           - name: prompt\n              value: \"Shih Tzu\"\n        dependencies:
[t9]\n\n  - name: tti_Sketching_Art\n    inputs:\n      parameters:\n        - name:
prompt\n    script:\n      image: python:3.8\n      command: [python]\n      source:
|\n        from fastapi import FastAPI, HTTPException\n        from fastapi.responses
import FileResponse\n        from pydantic import BaseModel\n        from pathlib
import Path\n        import torch\n        from diffusers import (\n            StableDiffusionXLPipeline,
\n            EulerAncestralDiscreteScheduler,\n            AutoencoderKL\n      \
\  )\n        \n        app = FastAPI()\n\n        @app.post(\"/generate_sketching_image/\"\
)\n        async def generate_image(prompt: str):\n            try:\n            \
\    lora_model_id = \"Linaqruf/sketch-style-xl-lora\"\n                lora_filename
= \"sketch-style-xl.safetensors\"\n                vae = AutoencoderKL.from_pretrained(\n\
\                    \"madebyollin/sdxl-vae-fp16-fix\", \n                    torch_dtype=torch.float16\n\
\                )\n                \n                pipe = StableDiffusionXLPipeline.from_pretrained(\n\
\                    \"Linaqruf/animagine-xl-2.0\", \n                    vae=vae,\n\
\                    torch_dtype=torch.float16, \n                    use_safetensors=True,
\n                    variant=\"fp16\"\n                )\n                pipe.scheduler
= EulerAncestralDiscreteScheduler.from_config(pipe.scheduler.config)\n           \
\     pipe.to('cuda')\n\n                pipe.load_lora_weights(lora_model_id, weight_name=lora_filename)\n\
\                pipe.fuse_lora(lora_scale=0.6)\n\n                prompt = \"Monochrome,
Greyscale Sketch-style picture: \" + prompt\n                negative_prompt = (\"\
lowres, bad anatomy, bad hands, text, error, missing fingers, extra digit, \"\n  \
\                                 \"fewer digits, cropped, worst quality, low quality,
normal quality, jpeg artifacts, \"\n                                   \"signature,
watermark, username, blurry\")\n                image = pipe(\n                  \
\  prompt, \n                    negative_prompt=negative_prompt, \n             \
\       width=1024,\n                    height=1024,\n                    guidance_scale=12,\n\
\                    num_inference_steps=50\n                ).images[0]\n\n     \
\           pipe.unfuse_lora()\n                image.save(\"generated_img.png\")\n\
\n                image_path = Path('generated_img.png')\n                if not image_path.is_file():\n\
\                    return {\""
