apiVersion: argoproj.io/v1alpha1
kind: Workflow
metadata:
  generateName: http-wf-
spec:
  entrypoint: main
  templates:
  - name: main
    dag:
      tasks:
      - name: t1
        template: tti-graffiti-art
        arguments:
          parameters:
          - name: prompt
            value: Urban jungle
      - name: t2
        dependencies: [t1]
        template: image-resizing
        arguments:
          parameters:
          - name: width
            value: 800
          - name: height
            value: 600
          - name: file
            value: '{{tasks.t1.outputs.art}}'

  - name: tti-graffiti-art
    inputs:
      parameters:
      - name: prompt
    outputs:
      parameters:
      - name: art
        valueFrom:
          path: /tmp/art.png
    script:
      image: python:3.8
      command: [python]
      source: |
        from fastapi import FastAPI, HTTPException
        from fastapi.responses import FileResponse
        from PIL import Image
        from diffusers import StableDiffusionPipeline, DPMSolverMultistepScheduler
        import torch
        from pydantic import BaseModel
        from pathlib import Path

        app = FastAPI()

        def load_model():
            model_id = 'bakebrain/bergraffi-berlin-graffiti'
            pipe = StableDiffusionPipeline.from_pretrained(model_id, torch_dtype=torch.float16)
            pipe.scheduler = DPMSolverMultistepScheduler.from_config(pipe.scheduler.config)
            pipe = pipe.to('cuda')
            return pipe

        def process_data(prompt, pipe):
            response = pipe(prompt).images[0]
            return response

        @app.post("/generate_grafiti_image/")
        async def generate_image(prompt:str):
            try:
                pipe = load_model()
                prompt = "Grafiti-style picture: " + prompt
                response = process_data(prompt, pipe)
                response.save('/tmp/art.png')
                image_path = Path('/tmp/art.png')
                if not image_path.is_file():
                    raise HTTPException(status_code=404, detail="Image not found")
                return FileResponse(image_path)
            except Exception as e:
                raise HTTPException(status_code=500, detail=str(e))
        generate_image('{{inputs.parameters.prompt}}')

  - name: image-resizing
    inputs:
      parameters:
      - name: width
      - name: height
      - name: file
    script:
      image: python:3.8
      command: [python]
      source: |-
        from fastapi import FastAPI, HTTPException, File, UploadFile
        from fastapi.responses import FileResponse
        from PIL import Image
        import io
        import os

        app = FastAPI()

        @app.post('/resize_image/')
        async def resize_image(width: int, height: int, file: UploadFile):
            try:
                contents = await file.read()
                image = Image.open(io.BytesIO(contents))
                resized = image.resize((width, height))
                resized.save('/tmp/resized_image.png')
                return FileResponse('/tmp/resized_image.png', media_type="image/png", filename="output.png")
            except Exception as e:
                raise HTTPException(status_code=500, detail=str(e))
        file_content = open('{{inputs.parameters.file}}', 'rb').read()
        resize_image('{{inputs.parameters.width}}', '{{inputs.parameters.height}}', UploadFile(file=io.BytesIO(file_content)))
