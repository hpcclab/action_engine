apiVersion: argoproj.io/v1alpha1
kind: Workflow
metadata:
  generateName: http-wf-
spec:
  entrypoint: main
  templates:
  - name: main
    dag:
      tasks:
      - name: t1
        template: tti-mosaic-art
        arguments:
          parameters:
          - name: prompt
            value: Ancient Roman architecture
      - name: t2
        template: image-resizing
        arguments:
          parameters:
          - name: width
            value: 1024
          - name: height
            value: 768
          - name: file
            value: '{{tasks.t1.outputs.art}}'
        dependencies: [t1]
  - name: tti-mosaic-art
    inputs:
      parameters:
      - name: prompt
    outputs:
      parameters:
      - name: art
        valueFrom:
          path: /tmp/generated_img.png
    script:
      image: python:3.9
      command: [python]
      source: |
        from fastapi import FastAPI, HTTPException
        from fastapi.responses import FileResponse
        from PIL import Image
        from diffusers import StableDiffusionPipeline, DPMSolverMultistepScheduler
        import torch
        from pathlib import Path
        import os

        app = FastAPI()

        def load_model():
            model_id = 'Guizmus/MosaicArt'
            pipe = StableDiffusionPipeline.from_pretrained(model_id, torch_dtype=torch.float16)
            pipe.scheduler = DPMSolverMultistepScheduler.from_config(pipe.scheduler.config)
            pipe = pipe.to('cuda')
            return pipe

        def process_data(prompt, pipe):
            response = pipe(prompt).images[0]
            return response

        pipe = load_model()
        prompt_input = "Mosiac-style picture: " + "{{inputs.parameters.prompt}}"

        response = process_data(prompt_input, pipe)
        file_path = '/tmp/generated_img.png'
        response.save(file_path)

        if Path(file_path).is_file():
            print(f"art /tmp/{os.path.basename(file_path)}")

  - name: image-resizing
    inputs:
      parameters:
      - name: width
      - name: height
      - name: file
    outputs:
      parameters:
      - name: resized_image
        valueFrom:
          path: /tmp/updated_image.png
    script:
      image: python:3.9
      command: [python]
      source: |-
        from fastapi import FastAPI, HTTPException, File, UploadFile
        from fastapi.responses import FileResponse
        from PIL import Image
        import io
        import os

        app = FastAPI()

        @app.post('/resize_image/')
        async def resize_image(width: int, height: int, file: UploadFile):
            try:
                # Read the uploaded file contents
                contents = await file.read()
                image = Image.open(io.BytesIO(contents))
                
                # Resize the image
                resized = image.resize((width, height))
                
                # Saving the resized image to a temporary file
                filename = "/tmp/updated_image.png"
                resized.save(filename)
                
                return FileResponse(filename, media_type="image/png", filename="output.png")
                
            except Exception as e:
                # Handle exceptions or errors here
                raise HTTPException(status_code=500, detail=str(e))

        with open("{{inputs.parameters.file}}", "rb") as f:
            contents = f.read()

        image = Image.open(io.BytesIO(contents))
        resized = image.resize(({{inputs.parameters.width}}, {{inputs.parameters.height}}))
        file_path = "/tmp/updated_image.png"
        resized.save(file_path)

        if os.path.isfile(file_path):
            print(f"resized_image /tmp/updated_image.png")
