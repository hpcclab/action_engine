apiVersion: argoproj.io/v1alpha1
kind: Workflow
metadata:
  generateName: http-wf-
spec:
  entrypoint: main
  templates:
  - name: main
    dag:
      tasks:
      - name: t1
        template: tti-mosaic-art
        arguments:
          parameters:
          - name: prompt
            value: Ancient Roman architecture
      - name: t2
        template: image-resizing
        arguments:
          parameters:
          - name: width
            value: 1024
          - name: height
            value: 768
          - name: file
            value: '{{tasks.t1.outputs.parameters.image}}'
        dependencies: [t1]

  - name: tti-mosaic-art
    inputs:
      parameters:
      - name: prompt
    outputs:
      parameters:
      - name: image
        valueFrom:
          path: /tmp/generated_img.png
    script:
      image: python:3.8
      command: [python]
      source: |
        from PIL import Image
        from diffusers import StableDiffusionPipeline, DPMSolverMultistepScheduler
        import torch
        from pathlib import Path

        def load_model():
            model_id = 'Guizmus/MosaicArt'
            pipe = StableDiffusionPipeline.from_pretrained(model_id, torch_dtype=torch.float16)
            pipe.scheduler = DPMSolverMultistepScheduler.from_config(pipe.scheduler.config)
            pipe = pipe.to('cuda')
            return pipe

        def process_data(prompt, pipe):
            response = pipe(prompt).images[0]
            return response

        def main(prompt):
            try:
                # Load the model
                pipe = load_model()

                # Prompt Creation
                prompt = "Mosaic-style picture: " + prompt

                # Process the data
                response = process_data(prompt, pipe)

                # Save the image
                response.save('/tmp/generated_img.png')
                print(f'/tmp/generated_img.png')

            except Exception as e:
                print(f"Error: {str(e)}")
                exit(1)

        if __name__ == "__main__":
            import sys
            main(sys.argv[1])

  - name: image-resizing
    inputs:
      parameters:
      - name: width
      - name: height
      - name: file
    script:
      image: python:3.8
      command: [python]
      source: |-
        import io
        from PIL import Image
        from fastapi import UploadFile, File
        from fastapi.responses import FileResponse

        def resize_image(width: int, height: int, file_path: str) -> str:
            # Read the uploaded file contents
            with open(file_path, 'rb') as f:
                contents = f.read()

            image = Image.open(io.BytesIO(contents))

            # Resize the image
            resized = image.resize((width, height))

            # Saving the resized image to a temporary file
            filename = "/tmp/resized_image.png"
            resized.save(filename)

            return filename

        if __name__ == "__main__":
            import sys
            width = int(sys.argv[1])
            height = int(sys.argv[2])
            file_path = sys.argv[3]

            output_path = resize_image(width, height, file_path)
            print(output_path)
