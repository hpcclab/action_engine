apiVersion: argoproj.io/v1alpha1
kind: Workflow
metadata:
  generateName: http-wf-
spec:
  entrypoint: main
  templates:
  - name: main
    dag:
      tasks:
      - name: t1
        template: tti-Sketching-Art
        arguments:
          parameters:
          - name: prompt
            value: A bustling marketplace
      - name: t2
        template: image-to-pdf-conversion
        arguments:
          artifacts:
          - name: file
            from: '{{tasks.t1.outputs.artifacts.generated_image}}'
        dependencies: [t1]
  - name: tti-Sketching-Art
    inputs:
      parameters:
      - name: prompt
    outputs:
      artifacts:
      - name: generated_image
        path: /generated_img.png
    container:
      image: python:3.8
      command: [python, -c]
      args:
      - |
        from fastapi import FastAPI, HTTPException
        from fastapi.responses import FileResponse
        from pydantic import BaseModel
        from pathlib import Path
        import torch
        from diffusers import StableDiffusionXLPipeline, EulerAncestralDiscreteScheduler, AutoencoderKL
        app = FastAPI()

        @app.post("/generate_sketching_image/")
        async def generate_image(prompt:str):
            try:
                lora_model_id = "Linaqruf/sketch-style-xl-lora"
                lora_filename = "sketch-style-xl.safetensors"
                vae = AutoencoderKL.from_pretrained("madebyollin/sdxl-vae-fp16-fix", torch_dtype=torch.float16)
                pipe = StableDiffusionXLPipeline.from_pretrained("Linaqruf/animagine-xl-2.0", vae=vae, torch_dtype=torch.float16, use_safetensors=True, variant="fp16")
                pipe.scheduler = EulerAncestralDiscreteScheduler.from_config(pipe.scheduler.config)
                pipe.to('cuda')
                pipe.load_lora_weights(lora_model_id, weight_name=lora_filename)
                pipe.fuse_lora(lora_scale=0.6)
                prompt = "Monochrome, Greyscale Sketch-style picture: " + prompt
                negative_prompt = "lowres, bad anatomy, bad hands, text, error, missing fingers, extra digit, fewer digits, cropped, worst quality, low quality, normal quality, jpeg artifacts, signature, watermark, username, blurry"
                image = pipe(prompt, negative_prompt=negative_prompt, width=1024, height=1024, guidance_scale=12, num_inference_steps=50).images[0]
                pipe.unfuse_lora()
                image.save("/generated_img.png")
                
            except Exception as e:
                raise HTTPException(status_code=500, detail=str(e))
  - name: image-to-pdf-conversion
    inputs:
      artifacts:
      - name: file
        path: /tmp/input_image.png
    outputs:
      artifacts:
      - name: pdf_file
        path: /tmp/output.pdf
    container:
      image: python:3.8
      command: [python, -c]
      args:
      - |-
        from fastapi import FastAPI, File, UploadFile, HTTPException
        from fastapi.responses import FileResponse
        from pathlib import Path
        from PIL import Image
        import img2pdf
        app = FastAPI()

        supported_extensions = [".JPEG", ".PNG", ".GIF", ".BMP", ".TIFF", ".PBM", ".PGM", ".PPM"]

        def check_file_extension(file_path):
            file_extension = file_path.suffix.upper()
            if file_extension not in supported_extensions:
                return False
            return True

        @app.post("/convert_to_pdf/")
        async def image_to_pdf(file: UploadFile):
            try:
                file_path = Path(file.filename)
                file_name = file_path.stem
                
                if not check_file_extension(file_path):
                    return {"error": "Unsupported format"}
                
                contents = await file.read()
                
                pdf_bytes = img2pdf.convert(contents)
                
                pdf_file_path = f'/tmp/{file_name}.pdf'
                
                with open(pdf_file_path, 'wb') as pdf_file:
                    pdf_file.write(pdf_bytes)
                
                return FileResponse(pdf_file_path, media_type="application/pdf", filename="output.pdf")
                
            except Exception as e:
                raise HTTPException(status_code=500, detail=str(e))
