[
    {
        "Id": 5,
        "name": "tti_Graffiti_Art",
        "input_parameters_with_datatype": [
            {
                "name": "prompt",
                "datatype": "string",
                "description": "The 'prompt' parameter is a user-provided textual prompt in string data type. It serves as the input for the 'tti_Graffiti_Art' API, allowing users to input their creative ideas or prompts to generate graffiti-style images. This parameter is essential for the API to transform the user's textual input into visually appealing graffiti art."
            }
        ],
        "input_description": "The input parameter for this API is a user prompt in string data type.",
        "output_data_type": "binary_image_file",
        "output description": "An image in graffiti art style",
        "description": "This API takes a user prompt as input and generates an image in graffiti art style using a pre-trained model. The input is a string prompt provided by the user and the output is an image in graffiti art style",
        "method": "POST",
        "url": null,
        "summary": "The 'tti_Graffiti_Art' API utilizes a POST method to transform user-provided textual prompts into visually appealing graffiti-style images. By accepting a string input prompt from the user, this API leverages a pre-trained model to create unique artwork in the form of graffiti art. The output of this process is delivered as a binary_image_file, encapsulating the generated graffiti art image. This API serves as a creative tool, allowing users to seamlessly translate their ideas and prompts into vibrant graffiti-style visual representations, catering to artistic expression and design needs.",
        "source_code": "from fastapi import FastAPI, HTTPException\nfrom fastapi.responses import FileResponse\n\nfrom PIL import Image\nfrom diffusers import StableDiffusionPipeline, DPMSolverMultistepScheduler\nimport torch\nfrom pydantic import BaseModel\nfrom pathlib import Path\n\napp = FastAPI()\n\ndef load_model():\n    model_id = 'bakebrain/bergraffi-berlin-graffiti'\n    pipe = StableDiffusionPipeline.from_pretrained(model_id, torch_dtype=torch.float16)\n    pipe.scheduler = DPMSolverMultistepScheduler.from_config(pipe.scheduler.config)\n    pipe = pipe.to('cuda')\n    return pipe\n\ndef process_data(prompt, pipe):\n    response = pipe(prompt).images[0]\n    return response\n\n@app.post(\"/generate_grafiti_image/\")\nasync def generate_image(prompt:str):\n    try:\n\n        # Load the model (replace load_model() with your actual model loading logic)\n        pipe = load_model()\n\n        # Prompt Creation\n        prompt = \"Grafiti-style picture: \" + prompt\n\n        # Process the data (replace process_data() with your actual data processing logic)\n        response = process_data(prompt, pipe)\n\n        ## Save the image\n        response.save('generated_img.png')\n\n        image_path = Path('generated_img.png')\n        if not image_path.is_file():\n            return {\"error\": \"Image not found on the server\"}\n\n        return FileResponse(image_path)\n    except Exception as e:\n        # Handle exceptions or errors here\n        raise HTTPException(status_code=500, detail=str(e))",
        "task_num": 1,
        "task_description": "Create a graffiti-style image with the theme 'urban jungle'."
    }
]