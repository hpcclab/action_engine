[
    {
        "Id": 8,
        "name": "tti_Pastel_Art",
        "input_parameters_with_datatype": [
            {
                "name": "prompt",
                "datatype": "string",
                "description": "The prompt parameter is a string data type that serves as a user input to guide the generation of a unique pastel art piece using a pre-trained model specialized for the pastel art style. It is essential for users to provide a creative prompt that influences the artistic output of the API, allowing them to translate their ideas into visually appealing pastel art images."
            }
        ],
        "input_description": "The input parameter for this API is a user prompt in string data type.",
        "output_data_type": "binary_image_file",
        "output description": "Generated image in png file format",
        "description": "This API takes a user prompt and generates an image in pastel art style. It loads a pre-trained model for pastel art generation and processes the user prompt to create the image. The generated image is returned in the form of a PNG file.",
        "method": "POST",
        "url": null,
        "summary": "The 'tti_Pastel_Art' API allows users to create pastel art images through a POST method. By providing a prompt in string format, users can guide the generation of a unique pastel art piece using a pre-trained model specialized for this art style. The output of this API is delivered as a binary_image_file, presenting the final artwork in PNG file format. This API facilitates the seamless translation of text prompts into visually appealing pastel art, offering a creative tool for digital artists and enthusiasts to explore and express their artistic visions in a distinctive, soft-palette aesthetic.",
        "source_code": "from fastapi import FastAPI, HTTPException\nfrom fastapi.responses import FileResponse\n\nfrom PIL import Image\nfrom diffusers import StableDiffusionPipeline, DPMSolverMultistepScheduler\nimport torch\nfrom pydantic import BaseModel\nfrom pathlib import Path\n\napp = FastAPI()\n\ndef load_model():\n    model_id = 'JamesFlare/pastel-mix'\n    pipe = StableDiffusionPipeline.from_pretrained(model_id, torch_dtype=torch.float16)\n    pipe.scheduler = DPMSolverMultistepScheduler.from_config(pipe.scheduler.config)\n    pipe = pipe.to('cuda')\n    return pipe\n\ndef process_data(prompt, pipe):\n    response = pipe(prompt).images[0]\n    return response\n\n@app.post(\"/generate_pastel_image/\")\nasync def generate_image(prompt:str):\n    try:\n\n        # Load the model (replace load_model() with your actual model loading logic)\n        pipe = load_model()\n\n        # Prompt Creation\n        prompt = \"Pastel-style picture: \" + prompt\n\n        # Process the data (replace process_data() with your actual data processing logic)\n        response = process_data(prompt, pipe)\n\n        ## Save the image\n        response.save('generated_img.png')\n\n        image_path = Path('generated_img.png')\n        if not image_path.is_file():\n            return {\"error\": \"Image not found on the server\"}\n\n        return FileResponse(image_path)\n    except Exception as e:\n        # Handle exceptions or errors here\n        raise HTTPException(status_code=500, detail=str(e))",
        "task_num": 1,
        "task_description": "Create a pastel art image of a sunset over the ocean."
    }
]