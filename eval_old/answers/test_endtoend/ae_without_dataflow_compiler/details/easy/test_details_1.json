[
    {
        "Id": 4,
        "name": "tti_Futuristic_Art",
        "input_parameters_with_datatype": [
            {
                "name": "prompt",
                "datatype": "string",
                "description": "The 'prompt' parameter is a user prompt in string data type. It is required for the API to generate visually captivating images inspired by Futuristic art. The prompt serves as the input text that will be processed by a pre-trained model to create artwork embodying Futuristic art aesthetics. This parameter is essential for users to provide the specific textual content that will be transformed into a Futuristic art-themed visual representation."
            }
        ],
        "input_description": "The input parameter for this API is a user prompt in string data type.",
        "output_data_type": "binary_image_file",
        "output description": "Generated image in Futuristic art style (image file)",
        "description": "This API takes a user prompt as input and generates an image in Futuristic art style using a pre-trained model. The input is a user prompt in the form of a string and the output is the generated image in the Futuristic art style in the form of an image file.",
        "method": "POST",
        "url": null,
        "summary": "The 'tti_Futuristic_Art' API utilizes a POST method to transform user prompts into visually captivating images inspired by Futuristic art. By inputting a textual prompt in string format, users can trigger the API to process the information through a pre-trained model, resulting in the creation of an artwork embodying Futuristic art aesthetics. The output of the API is a binary_image_file containing the generated image, allowing users to seamlessly convert their ideas into Futuristic art-themed visual representations, ideal for creative projects and digital artistry.",
        "source_code": "from fastapi import FastAPI, HTTPException\nfrom fastapi.responses import FileResponse\n\nfrom PIL import Image\nfrom diffusers import StableDiffusionPipeline, DPMSolverMultistepScheduler\nimport torch\nfrom pydantic import BaseModel\nfrom pathlib import Path\n\napp = FastAPI()\n\ndef load_model():\n    model_id = 'nitrosocke/Future-Diffusion'\n    pipe = StableDiffusionPipeline.from_pretrained(model_id, torch_dtype=torch.float16)\n    pipe.scheduler = DPMSolverMultistepScheduler.from_config(pipe.scheduler.config)\n    pipe = pipe.to('cuda')\n    return pipe\n\ndef process_data(prompt, pipe):\n    response = pipe(prompt).images[0]\n    return response\n\n@app.post(\"/generate_futuristic_image/\")\nasync def generate_image(prompt:str):\n    try:\n\n        # Load the model (replace load_model() with your actual model loading logic)\n        pipe = load_model()\n\n        # Prompt Creation\n        prompt = \"Futuristic-style picture: \" + prompt\n\n        # Process the data (replace process_data() with your actual data processing logic)\n        response = process_data(prompt, pipe)\n\n        ## Save the image\n        response.save('generated_img.png')\n\n        image_path = Path('generated_img.png')\n        if not image_path.is_file():\n            return {\"error\": \"Image not found on the server\"}\n\n        return FileResponse(image_path)\n    except Exception as e:\n        # Handle exceptions or errors here\n        raise HTTPException(status_code=500, detail=str(e))",
        "task_num": 1,
        "task_description": "Create a digital art piece of a futuristic cityscape."
    }
]