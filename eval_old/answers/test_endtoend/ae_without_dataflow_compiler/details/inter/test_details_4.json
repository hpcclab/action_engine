[
    {
        "Id": 9,
        "name": "tti_Sketching_Art",
        "input_parameters_with_datatype": [
            {
                "name": "prompt",
                "datatype": "string",
                "description": "The 'prompt' parameter is a user-provided textual prompt in string format that serves as the input for generating artistic sketching images. It is essential for guiding the AI model to create visually striking sketching art style images based on the user's creative input."
            }
        ],
        "input_description": "The input parameter for this API is a user prompt in string data type.",
        "output_data_type": "binary_image_file",
        "output description": "Generated sketching art style image in PNG format",
        "description": "This API takes a user prompt as input and generates an image in sketching art style using the LoRA model and VAE component. The input prompt is combined with predefined negative prompts to guide the image generation process. The output is a high-quality sketching art style image saved in PNG format.",
        "method": "POST",
        "url": null,
        "summary": "The 'tti_Sketching_Art' API operates through a POST method to transform user prompts into artistic sketching images with the aid of the LoRA model and VAE component. Users provide a textual prompt in string format, which is then harmonized with pre-defined negative prompts to steer the generation of the artwork. The API proficiently processes this input, resulting in the creation of a visually striking sketching art style image. The final output is delivered in the form of a binary_image_file, encapsulating the generated art piece in PNG format. This API seamlessly merges user creativity with advanced AI techniques, empowering users to effortlessly convert simple prompts into sophisticated sketching art, enabling diverse applications in digital artistry and creative projects.",
        "source_code": "from fastapi import FastAPI, HTTPException\nfrom fastapi.responses import FileResponse\n\nfrom pydantic import BaseModel\nfrom pathlib import Path\n\n\nimport torch\nfrom diffusers import (\n    StableDiffusionXLPipeline, \n    EulerAncestralDiscreteScheduler,\n    AutoencoderKL\n)\napp = FastAPI()\n\n@app.post(\"/generate_sketching_image/\")\nasync def generate_image(prompt:str):\n    try:\n\n        # Initialize LoRA model and weights\n        lora_model_id = \"Linaqruf/sketch-style-xl-lora\"\n        lora_filename = \"sketch-style-xl.safetensors\"\n\n        # Load VAE component\n        vae = AutoencoderKL.from_pretrained(\n            \"madebyollin/sdxl-vae-fp16-fix\", \n            torch_dtype=torch.float16\n        )\n\n        # Configure the pipeline\n        pipe = StableDiffusionXLPipeline.from_pretrained(\n            \"Linaqruf/animagine-xl-2.0\", \n            vae=vae,\n            torch_dtype=torch.float16, \n            use_safetensors=True, \n            variant=\"fp16\"\n        )\n        pipe.scheduler = EulerAncestralDiscreteScheduler.from_config(pipe.scheduler.config)\n        pipe.to('cuda')\n\n        # Load and fuse LoRA weights\n        pipe.load_lora_weights(lora_model_id, weight_name=lora_filename)\n        pipe.fuse_lora(lora_scale=0.6)\n\n        # Define prompts and generate image\n        prompt = \"Monochrome, Greyscale Sketch-style picture: \" + prompt\n        \n\n        negative_prompt = \"lowres, bad anatomy, bad hands, text, error, missing fingers, extra digit, fewer digits, cropped, worst quality, low quality, normal quality, jpeg artifacts, signature, watermark, username, blurry\"\n\n        image = pipe(\n            prompt, \n            negative_prompt=negative_prompt, \n            width=1024,\n            height=1024,\n            guidance_scale=12,\n            num_inference_steps=50\n        ).images[0]\n\n        # Unfuse LoRA before saving the image\n        pipe.unfuse_lora()\n        image.save(\"generated_img.png\")\n\n        image_path = Path('generated_img.png')\n        if not image_path.is_file():\n            return {\"error\": \"Image not found on the server\"}\n        return FileResponse(image_path)\n    except Exception as e:\n        # Handle exceptions or errors here\n        raise HTTPException(status_code=500, detail=str(e))",
        "task_num": 1,
        "task_description": "Create a sketching art image of a bustling marketplace."
    },
    {
        "Id": 9,
        "name": "tti_Sketching_Art",
        "input_parameters_with_datatype": [
            {
                "name": "prompt",
                "datatype": "string",
                "description": "The 'prompt' parameter is a user-provided textual prompt in string format that serves as the input for generating artistic sketching images. It is essential for guiding the AI model to create visually striking sketching art style images based on the user's creative input."
            }
        ],
        "input_description": "The input parameter for this API is a user prompt in string data type.",
        "output_data_type": "binary_image_file",
        "output description": "Generated sketching art style image in PNG format",
        "description": "This API takes a user prompt as input and generates an image in sketching art style using the LoRA model and VAE component. The input prompt is combined with predefined negative prompts to guide the image generation process. The output is a high-quality sketching art style image saved in PNG format.",
        "method": "POST",
        "url": null,
        "summary": "The 'tti_Sketching_Art' API operates through a POST method to transform user prompts into artistic sketching images with the aid of the LoRA model and VAE component. Users provide a textual prompt in string format, which is then harmonized with pre-defined negative prompts to steer the generation of the artwork. The API proficiently processes this input, resulting in the creation of a visually striking sketching art style image. The final output is delivered in the form of a binary_image_file, encapsulating the generated art piece in PNG format. This API seamlessly merges user creativity with advanced AI techniques, empowering users to effortlessly convert simple prompts into sophisticated sketching art, enabling diverse applications in digital artistry and creative projects.",
        "source_code": "from fastapi import FastAPI, HTTPException\nfrom fastapi.responses import FileResponse\n\nfrom pydantic import BaseModel\nfrom pathlib import Path\n\n\nimport torch\nfrom diffusers import (\n    StableDiffusionXLPipeline, \n    EulerAncestralDiscreteScheduler,\n    AutoencoderKL\n)\napp = FastAPI()\n\n@app.post(\"/generate_sketching_image/\")\nasync def generate_image(prompt:str):\n    try:\n\n        # Initialize LoRA model and weights\n        lora_model_id = \"Linaqruf/sketch-style-xl-lora\"\n        lora_filename = \"sketch-style-xl.safetensors\"\n\n        # Load VAE component\n        vae = AutoencoderKL.from_pretrained(\n            \"madebyollin/sdxl-vae-fp16-fix\", \n            torch_dtype=torch.float16\n        )\n\n        # Configure the pipeline\n        pipe = StableDiffusionXLPipeline.from_pretrained(\n            \"Linaqruf/animagine-xl-2.0\", \n            vae=vae,\n            torch_dtype=torch.float16, \n            use_safetensors=True, \n            variant=\"fp16\"\n        )\n        pipe.scheduler = EulerAncestralDiscreteScheduler.from_config(pipe.scheduler.config)\n        pipe.to('cuda')\n\n        # Load and fuse LoRA weights\n        pipe.load_lora_weights(lora_model_id, weight_name=lora_filename)\n        pipe.fuse_lora(lora_scale=0.6)\n\n        # Define prompts and generate image\n        prompt = \"Monochrome, Greyscale Sketch-style picture: \" + prompt\n        \n\n        negative_prompt = \"lowres, bad anatomy, bad hands, text, error, missing fingers, extra digit, fewer digits, cropped, worst quality, low quality, normal quality, jpeg artifacts, signature, watermark, username, blurry\"\n\n        image = pipe(\n            prompt, \n            negative_prompt=negative_prompt, \n            width=1024,\n            height=1024,\n            guidance_scale=12,\n            num_inference_steps=50\n        ).images[0]\n\n        # Unfuse LoRA before saving the image\n        pipe.unfuse_lora()\n        image.save(\"generated_img.png\")\n\n        image_path = Path('generated_img.png')\n        if not image_path.is_file():\n            return {\"error\": \"Image not found on the server\"}\n        return FileResponse(image_path)\n    except Exception as e:\n        # Handle exceptions or errors here\n        raise HTTPException(status_code=500, detail=str(e))",
        "task_num": 2,
        "task_description": "Convert the sketching art image of the bustling marketplace to a PNG format."
    },
    {
        "Id": 12,
        "name": "Image_Resizing",
        "input_parameters_with_datatype": [
            {
                "name": "width",
                "datatype": "int",
                "description": "The 'width' parameter specifies the desired width dimension for resizing the user-uploaded image file. This parameter is essential for determining the new width of the image during the resizing process. It plays a crucial role in adjusting the dimensions of the image according to user requirements, ensuring the output meets the specified width criteria for the resized image."
            },
            {
                "name": "height",
                "datatype": "int",
                "description": "The height parameter specifies the desired height dimension for resizing the user-uploaded image file. This parameter is essential for determining the final dimensions of the resized image, ensuring that the output meets the user's requirements for image size adjustments."
            },
            {
                "name": "file",
                "datatype": "binary_image_file",
                "description": "The 'file' parameter of datatype 'binary_image_file' is required for this API as it serves as the input containing the image file uploaded by the user. This parameter is essential for the 'Image_Resizing' API to receive the binary form of the image file, enabling the resizing process to be carried out on the user-provided visual content."
            }
        ],
        "input_description": "The input for this API is an image file uploaded by the user.",
        "output_data_type": "binary_image_file",
        "output description": "The output of this API is a resized version of the input image in PDF format.",
        "description": "This API takes an image file as input uploaded by the user and resizes it to the specified width and height. It then converts the resized image into a PDF file and returns the PDF file as output. The main objective of this API is to allow users to resize images and convert them into PDF format.",
        "method": "POST",
        "url": null,
        "summary": "The 'Image_Resizing' API employs a POST method to resize user-uploaded image files by the specified width and height dimensions. Users provide image files in binary form as input to the API, where the resizing process is carried out. Upon completion, the resized image is transformed into a PDF file, serving as the output in binary_image_file format. This API streamlines the task of image resizing and conversion to PDF, facilitating efficient handling of visual content for users seeking to adjust image dimensions and format for various purposes.",
        "source_code": "# FastAPI\nfrom fastapi import FastAPI, HTTPException, File, UploadFile\nfrom fastapi.responses import FileResponse\nfrom PIL import Image\nimport io\nimport os\n\napp = FastAPI()\n\n@app.post('/resize_image/')\nasync def resize_image(width: int, height: int, file: UploadFile):\n    try:\n        # Read the uploaded file contents\n        contents = await file.read()\n\n        image = Image.open(io.BytesIO(contents))\n        \n        # Resize the image\n        resized = image.resize((width, height))\n        \n        # Saving the resized image to a temporary file\n        filename = \"resized_image.png\"\n        resized.save(filename)\n\n        return FileResponse(filename, media_type=\"image/png\", filename=\"output.png\")\n    \n    except Exception as e:\n        # Handle exceptions or errors here\n        raise HTTPException(status_code=500, detail=str(e))",
        "task_num": 3,
        "task_description": "Resize the sketching art image of the bustling marketplace to 800x600 pixels for a website."
    }
]