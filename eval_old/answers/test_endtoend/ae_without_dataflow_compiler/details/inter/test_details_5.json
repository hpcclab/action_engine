[
    {
        "Id": 4,
        "name": "tti_Futuristic_Art",
        "input_parameters_with_datatype": [
            {
                "name": "prompt",
                "datatype": "string",
                "description": "The 'prompt' parameter is a user prompt in string data type. It is required for the API to generate visually captivating images inspired by Futuristic art. The prompt serves as the input text that will be processed by a pre-trained model to create artwork embodying Futuristic art aesthetics. This parameter is essential for users to provide the specific textual content that will be transformed into a Futuristic art-themed visual representation."
            }
        ],
        "input_description": "The input parameter for this API is a user prompt in string data type.",
        "output_data_type": "binary_image_file",
        "output description": "Generated image in Futuristic art style (image file)",
        "description": "This API takes a user prompt as input and generates an image in Futuristic art style using a pre-trained model. The input is a user prompt in the form of a string and the output is the generated image in the Futuristic art style in the form of an image file.",
        "method": "POST",
        "url": null,
        "summary": "The 'tti_Futuristic_Art' API utilizes a POST method to transform user prompts into visually captivating images inspired by Futuristic art. By inputting a textual prompt in string format, users can trigger the API to process the information through a pre-trained model, resulting in the creation of an artwork embodying Futuristic art aesthetics. The output of the API is a binary_image_file containing the generated image, allowing users to seamlessly convert their ideas into Futuristic art-themed visual representations, ideal for creative projects and digital artistry.",
        "source_code": "from fastapi import FastAPI, HTTPException\nfrom fastapi.responses import FileResponse\n\nfrom PIL import Image\nfrom diffusers import StableDiffusionPipeline, DPMSolverMultistepScheduler\nimport torch\nfrom pydantic import BaseModel\nfrom pathlib import Path\n\napp = FastAPI()\n\ndef load_model():\n    model_id = 'nitrosocke/Future-Diffusion'\n    pipe = StableDiffusionPipeline.from_pretrained(model_id, torch_dtype=torch.float16)\n    pipe.scheduler = DPMSolverMultistepScheduler.from_config(pipe.scheduler.config)\n    pipe = pipe.to('cuda')\n    return pipe\n\ndef process_data(prompt, pipe):\n    response = pipe(prompt).images[0]\n    return response\n\n@app.post(\"/generate_futuristic_image/\")\nasync def generate_image(prompt:str):\n    try:\n\n        # Load the model (replace load_model() with your actual model loading logic)\n        pipe = load_model()\n\n        # Prompt Creation\n        prompt = \"Futuristic-style picture: \" + prompt\n\n        # Process the data (replace process_data() with your actual data processing logic)\n        response = process_data(prompt, pipe)\n\n        ## Save the image\n        response.save('generated_img.png')\n\n        image_path = Path('generated_img.png')\n        if not image_path.is_file():\n            return {\"error\": \"Image not found on the server\"}\n\n        return FileResponse(image_path)\n    except Exception as e:\n        # Handle exceptions or errors here\n        raise HTTPException(status_code=500, detail=str(e))",
        "task_num": 1,
        "task_description": "Create a digital art piece of a futuristic cityscape at night."
    },
    {
        "Id": 11,
        "name": "image_to_pdf_conversion",
        "input_parameters_with_datatype": [
            {
                "name": "file",
                "datatype": "binary_image_file",
                "description": "The 'file' parameter should be a binary image file in one of the supported formats: JPEG, PNG, GIF, BMP, TIFF, PBM, PGM, or PPM. This parameter is required for the 'image_to_pdf_conversion' API to receive the input image file that will be converted to a PDF document. The API processes the provided image file and generates a PDF output, enabling users to efficiently transform visual content into a universally accessible format for sharing, printing, or archiving purposes."
            }
        ],
        "input_description": "An image file in supported format (.JPEG .PNG .GIF .BMP .TIFF .PBM .PGM .PPM)",
        "output_data_type": "binary_image_file",
        "output description": "A PDF file",
        "description": "This API allows users to convert an image file to a PDF document. Users need to upload an image file with one of the supported formats and the API will process the image and generate a corresponding PDF file as output.",
        "method": "POST",
        "url": null,
        "summary": "The 'image_to_pdf_conversion' API offers a convenient solution for converting image files to PDF documents through a POST method. Users can upload an image file in formats such as JPEG, PNG, GIF, BMP, TIFF, PBM, PGM, or PPM as the input parameter. Once the image is provided, the API seamlessly processes it and produces a PDF file as the output, allowing for efficient transformation of visual content into a portable and universally accessible format. This functionality streamlines the conversion process, enabling users to effortlessly convert diverse image types into PDF documents to facilitate sharing, printing, or archiving purposes.",
        "source_code": "from fastapi import FastAPI, File, UploadFile, HTTPException\nfrom fastapi.responses import FileResponse\nfrom pathlib import Path\nfrom PIL import Image\nimport img2pdf\n\napp = FastAPI()\n\n# Define the supported image extensions\nsupported_extensions = [\".JPEG\", \".PNG\", \".GIF\", \".BMP\", \".TIFF\", \".PBM\", \".PGM\", \".PPM\"]\n\n\ndef check_file_extension(file_path):\n    file_extension = file_path.suffix.upper()\n    if file_extension not in supported_extensions:\n        return False\n    return True\n\n\n@app.post(\"/convert_to_pdf/\")\nasync def image_to_pdf(file: UploadFile):\n    try:\n        file_path = Path(file.filename)\n        file_name = file_path.stem\n        \n        \n        # # File format support check\n        if not check_file_extension(file_path):\n            return {\"error\": \"Unsupported format\"}\n\n        # Read the contents of the uploaded file\n        contents = await file.read()\n        \n        pdf_bytes = img2pdf.convert(contents)\n        \n        pdf_file_path = f'{file_name}.pdf'\n\n        with open(pdf_file_path, 'wb') as pdf_file:\n            pdf_file.write(pdf_bytes)\n\n        # Return the PDF file\n        return FileResponse(pdf_file_path, media_type=\"application/pdf\", filename=\"output.pdf\")\n    except Exception as e:\n        # Handle exceptions or errors here\n        raise HTTPException(status_code=500, detail=str(e))",
        "task_num": 2,
        "task_description": "Convert the digital art piece of a futuristic cityscape at night to a PDF format."
    },
    {
        "Id": 12,
        "name": "Image_Resizing",
        "input_parameters_with_datatype": [
            {
                "name": "width",
                "datatype": "int",
                "description": "The 'width' parameter specifies the desired width dimension for resizing the user-uploaded image file. This parameter is essential for determining the new width of the image during the resizing process. It plays a crucial role in adjusting the dimensions of the image according to user requirements, ensuring the output meets the specified width criteria for the resized image."
            },
            {
                "name": "height",
                "datatype": "int",
                "description": "The height parameter specifies the desired height dimension for resizing the user-uploaded image file. This parameter is essential for determining the final dimensions of the resized image, ensuring that the output meets the user's requirements for image size adjustments."
            },
            {
                "name": "file",
                "datatype": "binary_image_file",
                "description": "The 'file' parameter of datatype 'binary_image_file' is required for this API as it serves as the input containing the image file uploaded by the user. This parameter is essential for the 'Image_Resizing' API to receive the binary form of the image file, enabling the resizing process to be carried out on the user-provided visual content."
            }
        ],
        "input_description": "The input for this API is an image file uploaded by the user.",
        "output_data_type": "binary_image_file",
        "output description": "The output of this API is a resized version of the input image in PDF format.",
        "description": "This API takes an image file as input uploaded by the user and resizes it to the specified width and height. It then converts the resized image into a PDF file and returns the PDF file as output. The main objective of this API is to allow users to resize images and convert them into PDF format.",
        "method": "POST",
        "url": null,
        "summary": "The 'Image_Resizing' API employs a POST method to resize user-uploaded image files by the specified width and height dimensions. Users provide image files in binary form as input to the API, where the resizing process is carried out. Upon completion, the resized image is transformed into a PDF file, serving as the output in binary_image_file format. This API streamlines the task of image resizing and conversion to PDF, facilitating efficient handling of visual content for users seeking to adjust image dimensions and format for various purposes.",
        "source_code": "# FastAPI\nfrom fastapi import FastAPI, HTTPException, File, UploadFile\nfrom fastapi.responses import FileResponse\nfrom PIL import Image\nimport io\nimport os\n\napp = FastAPI()\n\n@app.post('/resize_image/')\nasync def resize_image(width: int, height: int, file: UploadFile):\n    try:\n        # Read the uploaded file contents\n        contents = await file.read()\n\n        image = Image.open(io.BytesIO(contents))\n        \n        # Resize the image\n        resized = image.resize((width, height))\n        \n        # Saving the resized image to a temporary file\n        filename = \"resized_image.png\"\n        resized.save(filename)\n\n        return FileResponse(filename, media_type=\"image/png\", filename=\"output.png\")\n    \n    except Exception as e:\n        # Handle exceptions or errors here\n        raise HTTPException(status_code=500, detail=str(e))",
        "task_num": 3,
        "task_description": "Resize the PDF of the futuristic cityscape at night to 1920x1080 pixels."
    },
    {
        "Id": 13,
        "name": "Image_Enhancement",
        "input_parameters_with_datatype": [
            {
                "name": "file",
                "datatype": "binary_image_file",
                "description": "A single image file in supported formats (.bmp .jpeg .png etc.) required for enhancing the quality of the image by applying denoising, contrast stretching, sharpening, brightness adjustment, and gamma correction techniques to improve its visual quality."
            }
        ],
        "input_description": "A single image file in supported formats (.bmp .jpeg .png etc.)",
        "output_data_type": "binary_image_file",
        "output description": "Enhanced image file in JPG format",
        "description": "API that takes an image as input enhances its quality by denoising contrast stretching sharpening adjusting brightness and gamma correction then returns the enhanced image in JPG format.",
        "method": "POST",
        "url": null,
        "summary": "The 'Image_Enhancement' API offers a POST method to enhance the quality of images provided by users. Users can upload a single image file in supported formats like .bmp, .jpeg, or .png. The API processes the image by applying denoising, contrast stretching, sharpening, brightness adjustment, and gamma correction techniques to improve its visual quality. Upon completion of enhancements, the API returns the enhanced image in JPG format, allowing users to obtain a higher-quality version of their input image effortlessly.",
        "source_code": "#FastAPI\nfrom fastapi import FastAPI, HTTPException, File, UploadFile\nfrom fastapi.responses import FileResponse\nfrom pathlib import Path\n\n#Image Enhancement\nimport cv2\nimport numpy as np\nfrom PIL import Image\n\nfile_path = Path(\"./flower.jpg\")\n\nSUPPORTED_FORMATS = [\n    \".bmp\", \".dib\",\n    \".jpeg\", \".jpg\", \".jpe\",\n    \".jp2\",\n    \".png\",\n    \".webp\",\n    \".avif\",\n    \".pbm\", \".pgm\", \".ppm\", \".pxm\", \".pnm\",\n    \".pfm\",\n    \".sr\", \".ras\",\n    \".tiff\", \".tif\",\n    \".exr\",\n    \".hdr\", \".pic\"\n]\n\n\napp = FastAPI()\n\ndef check_image_extension(img):\n    img_path = Path(img.filename)\n    return img_path.suffix\n\n@app.post('/image_enhance/')\nasync def enhance_image(file: UploadFile):\n    try:\n        #Saving original image\n        image_name = file.filename \n        image = Image.open(file.file) \n        image.save(image_name)\n\n        #Loading the image\n        img = cv2.imread(image_name)\n\n        #Denoising image\n        denoised_image = cv2.fastNlMeansDenoisingColored(img, None, 10, 10, 7, 21)\n\n        #Contrast Stretching(Normalizing)\n        contrast_stretched_image = cv2.normalize(denoised_image, None, 255, 0, cv2.NORM_MINMAX, cv2.CV_8UC1)\n\n        # Image Sharpening\n        kernel = np.array([[0, -1, 0], [-1, 5, -1], [0, -1, 0]], np.float32)\n        sharpened_image = cv2.filter2D(contrast_stretched_image, -1, kernel=kernel)\n\n        #Adjusting Brightness\n        brightness_image = cv2.convertScaleAbs(sharpened_image, alpha=1, beta=5)\n\n        # Gamma Correction\n        gamma = 1.5\n        lookup_table = np.array([((i / 255.0) ** gamma) * 255 for i in np.arange(0, 256)]).astype(\"uint8\")\n        gamma_corrected_image = cv2.LUT(brightness_image, lookup_table)\n\n        final_name = f'final_{image_name}'\n        # Save final image\n        cv2.imwrite(final_name, gamma_corrected_image)\n\n        return FileResponse(final_name, media_type='image/jpg', filename=final_name)\n    except Exception as e:\n        raise HTTPException(status_code=500, detail=str(e))",
        "task_num": 4,
        "task_description": "Enhance the image quality of the resized PDF of the futuristic cityscape at night."
    },
    {
        "Id": 14,
        "name": "send_email",
        "input_parameters_with_datatype": [
            {
                "name": "sender_address",
                "datatype": "string",
                "description": "The sender's email address is required to specify the email sender when using the 'send_email' API. This parameter ensures that the email is sent from the correct sender's address, allowing for proper identification and communication between the sender and the receiver."
            },
            {
                "name": "receiver_address",
                "datatype": "string",
                "description": "The receiver_address parameter is a string datatype that represents the email address of the recipient to whom the email will be sent. This parameter is required for the 'send_email' API to specify the destination of the email communication."
            },
            {
                "name": "message_text",
                "datatype": "string",
                "description": "The 'message_text' parameter is a string datatype that represents the content of the email message. It is a required input for the 'send_email' API as it contains the main body of the email that will be sent to the recipient. The message_text parameter allows users to input the text content of the email message, enabling effective communication and information sharing through the email service."
            },
            {
                "name": "message_subject",
                "datatype": "string",
                "description": "The 'message_subject' parameter is a string datatype that represents the subject line of the email message. It is a required input for the 'send_email' API function as it provides essential context and information about the content of the email being sent. Including a subject line helps recipients quickly understand the purpose or topic of the email, enhancing communication efficiency and clarity during email correspondence."
            },
            {
                "name": "file",
                "datatype": "binary_image_file",
                "description": "The 'file' parameter is required to attach an image, audio, or any generic file in binary format to the email message being sent. This parameter allows users to include additional files along with the email content, enhancing the communication experience and enabling file sharing through the 'send_email' API."
            }
        ],
        "input_description": "The input for this API is an sender email address, receiver email address, message, and subject in string, and image file in binary format ",
        "output_data_type": "string",
        "output description": "Message of success or failure of the email",
        "description": "The objective of this API endpoint is to send an email message. The endpoint accepts various parameters including the sender's email address, receiver's email address, optional message text, optional message subject, and an optional file attachment.",
        "method": "POST",
        "url": null,
        "summary": "The 'send_email' API provides a POST method for sending email messages seamlessly. Users can input the sender's email address, receiver's email address, message content, subject line in string format, and attach a file in binary format. This versatile API allows for efficient communication by handling the email sending process. Upon completion, the API returns a string message indicating the success or failure status of the email delivery, ensuring effective correspondence and file sharing through a unified endpoint.",
        "source_code": "#FastAPI\nfrom fastapi import FastAPI, HTTPException, File, UploadFile\nfrom typing import Optional\nfrom pathlib import Path\n\n#Email Sending\nimport smtplib\nfrom email.mime.multipart import MIMEMultipart\nfrom email.mime.text import MIMEText\nfrom email.mime.image import MIMEImage\nfrom email.mime.audio import MIMEAudio\nfrom email.mime.application import MIMEApplication\nimport magic\n\napp = FastAPI()\n\n\n#identify email server and validate email domains\ndef check_email_support(sender_email, receiver_email):\n    if sender_email.endswith(\"@gmail.com\") and receiver_email.endswith(\"@gmail.com\"):\n        return 'gmail'\n    elif sender_email.endswith(\"@outlook.com\") and receiver_email.endswith(\"@outlook.com\"):\n        return 'outlook'\n    else:\n        return 'unsupported'\n\ndef process_picture(contents, message):\n    image_file = MIMEImage(contents)\n    message.attach(image_file)\n    \ndef process_audio(contents, message, extension):\n    audio_file = MIMEAudio(contents, extension)\n    message.attach(audio_file)\n\ndef process_generic(contents, message):\n    application_file = MIMEApplication(contents, 'octet-stream')\n    message.attach(application_file)\n\n\n#send gmail email\ndef send_gmail(auth_email, auth_password, receiver_email, message):\n    # Establishing connection to Gmail's SMTP server\n    with smtplib.SMTP('smtp.gmail.com', 587) as server:\n        #Encrypting connection using TLS\n        server.starttls()\n        \n        #Accessing user's email accout\n        server.login(auth_email, auth_password)\n        \n        # Sending the email\n        try:\n            server.sendmail(auth_email, receiver_email, message.as_string())\n\n        except Exception as e:\n            return {\"Status\": \"Unable to send an email\"}\n\n#send outlook email\ndef send_outlook(auth_email, auth_password, receiver_email, message):\n    # Establishing connection to Outlook's SMTP server\n    with smtplib.SMTP('smtp-mail.outlook.com', 587) as server:\n        #Encrypting connection using TLS\n        server.starttls()\n        \n        #Accessing user's email accout\n        server.login(auth_email, auth_password)\n        \n        # Sending the email\n        try:\n            server.sendmail(auth_email, receiver_email, message.as_string())\n\n        except Exception as e:\n            return {\"Status\": \"Unable to send an email\"}\n\n@app.post(\"/send_email/\")\nasync def send_email(*, sender: str, receiver: str, msg_text: Optional[\"str\"] = None, msg_subject: Optional[\"str\"] = None, file: UploadFile = File(default=None, example=\"example.txt\")):\n    try:\n                \n        #check email type\n        EMAIL_TYPE = check_email_support(sender, receiver)\n        if EMAIL_TYPE == \"unsupported\" :\n            return {\"Error\": \"Email server is not supported\"}\n\n        # Email configuration\n        auth_email = sender\n        receiver_email = receiver\n        auth_password_gmail = \"jwsu wpkv srwg ovpv\"\n        auth_password_outlook = \"123456789Aa\"\n        \n\n        # Creating a multipart message\n        message = MIMEMultipart()\n        message['From'] = auth_email\n        message['To'] = receiver_email\n        #Setting subject if provided by the user\n        message['Subject'] = msg_subject if msg_subject is not None else None\n\n        #Handling text\n        if msg_text is not None:\n            # Creating MIMEtext object\n            plain_text = msg_text\n            plain_text_part = MIMEText(plain_text, 'plain')\n            # Attaching MIMEtext to MIMEmultipart object\n            message.attach(plain_text_part)\n\n        #Handling files\n        if file is not None:\n            #Saving file data\n            file_path = Path(file.filename)\n            contents = await file.read()\n            \n            #Checking file type\n            mime_type = magic.Magic(mime=True)\n            file_type = mime_type.from_buffer(contents)\n            \n            if file_type.startswith(\"image\"):\n                process_picture(contents, message)\n\n            elif file_type.startswith(\"audio\"):\n                process_audio(contents, message, file_path.suffix)\n                \n            else:\n                # The rest of files is treated as generic\n                process_generic(contents, message)\n\n            \n        if EMAIL_TYPE == \"gmail\":\n            send_gmail(auth_email, auth_password_gmail, receiver_email, message)\n        \n        elif EMAIL_TYPE == \"outlook\":\n            send_outlook(auth_email, auth_password_outlook, receiver_email, message)\n\n        return {\"Status\" : \"Email successfuly sent\"}\n\n    except Exception as e: \n        # Handle exceptions or errors here\n        raise HTTPException(status_code=500, detail=str(e))",
        "task_num": 5,
        "task_description": "Send the enhanced PDF of the futuristic cityscape at night via email."
    }
]