[
    {
        "Id": 1,
        "name": "tti_Animation_Art",
        "input_parameters_with_datatype": [
            {
                "name": "prompt",
                "datatype": "string",
                "description": "The 'prompt' parameter is a user prompt in string data type. It is required for providing descriptive content or themes for the image generation process in the 'tti_Animation_Art' API. This parameter serves as the textual input that will be transformed into vibrant animation-style images by the API's pre-trained model."
            }
        ],
        "input_description": "The input parameter for this API is a user prompt in string data type.",
        "output_data_type": "binary_image_file",
        "output description": "Generated animation image as a binary_image_file",
        "description": "This API takes a user prompt and generates an image in animation style using a pre-trained model. The user needs to provide a prompt in string format and the API will return the generated animation image as a response in the form of a FileResponse.",
        "method": "POST",
        "url": null,
        "summary": "The 'tti_Animation_Art' API utilizes a POST method to transform user prompts into captivating animation images. By inputting a user prompt in string format, individuals can provide descriptive content or themes for the image generation process. The API employs a sophisticated pre-trained model to convert these textual inputs into vibrant animation-style images. Upon processing the input prompt, the API seamlessly delivers the resulting artwork as a binary_image_file, encapsulating the dynamically generated animation. This API empowers users to effortlessly merge textual creativity with visual artistry, enabling the creation of detailed animated images for various digital media applications and creative projects.",
        "source_code": "from fastapi import FastAPI, HTTPException\nfrom fastapi.responses import FileResponse\n\nfrom PIL import Image\nfrom diffusers import StableDiffusionPipeline, DPMSolverMultistepScheduler\nimport torch\nfrom pydantic import BaseModel\nfrom pathlib import Path\n\napp = FastAPI()\n\ndef load_model():\n    model_id = 'dreamlike-art/dreamlike-anime-1.0'\n    pipe = StableDiffusionPipeline.from_pretrained(model_id, torch_dtype=torch.float16)\n    pipe.scheduler = DPMSolverMultistepScheduler.from_config(pipe.scheduler.config)\n    pipe = pipe.to('cuda')\n    return pipe\n\ndef process_data(prompt, pipe):\n    response = pipe(prompt).images[0]\n    return response\n\n@app.post(\"/generate_anime_image/\")\nasync def generate_image(prompt:str):\n    try:\n\n        # Load the model (replace load_model() with your actual model loading logic)\n        pipe = load_model()\n\n        # Prompt Creation\n        prompt = \"Anime-style picture: \" + prompt\n\n        # Process the data (replace process_data() with your actual data processing logic)\n        response = process_data(prompt, pipe)\n\n        ## Save the image\n        response.save('generated_img.png')\n\n        image_path = Path('generated_img.png')\n        \n        if not image_path.is_file():\n            return {\"error\": \"Image not found on the server\"}\n\n        return FileResponse(image_path)\n    except Exception as e:\n        # Handle exceptions or errors here\n        raise HTTPException(status_code=500, detail=str(e))",
        "task_num": 1,
        "task_description": "Create a digital art image of a modern cityscape in animation style."
    },
    {
        "Id": 2,
        "name": "tti_Charcoal_Art",
        "input_parameters_with_datatype": [
            {
                "name": "prompt",
                "datatype": "string",
                "description": "The 'prompt' parameter is a user prompt in string data type. It is required for the API to generate a visually engaging charcoal art style image based on the content or theme specified by the user. The prompt serves as the input text that will be transformed into a unique charcoal art representation by the API."
            }
        ],
        "input_description": "The input parameter for this API is a user prompt in string data type.",
        "output_data_type": "binary_image_file",
        "output description": "An image in a specific charcoal art style format",
        "description": "This API processes an input user prompt to generate an image in charcoal art style. It takes a text prompt from the user converts it into a charcoal art style image and returns the resulting image. The input parameter is a string containing the user prompt and the output is an image in the charcoal art style.",
        "method": "POST",
        "url": null,
        "summary": "The 'tti_Charcoal_Art' API utilizes a POST method to transform textual prompts into visually engaging charcoal art style images. Users supply a prompt in string format, specifying the content or theme for the artwork they desire. This input prompt is then processed by the API to generate a unique image in the distinctive charcoal art style. The output of the API is delivered as a binary_image_file, presenting the user with a creative representation of their original prompt transformed into a charcoal art format. This API seamlessly merges textual input with artistic expression, providing users with a simple yet powerful tool to create captivating charcoal art imagery.",
        "source_code": "from fastapi import FastAPI, HTTPException\nfrom fastapi.responses import FileResponse\n\nfrom PIL import Image\nfrom diffusers import StableDiffusionPipeline, DPMSolverMultistepScheduler\nimport torch\nfrom pydantic import BaseModel\nfrom pathlib import Path\n\napp = FastAPI()\n\ndef load_model():\n    model_id = 'Falah/charcoal-style'\n    pipe = StableDiffusionPipeline.from_pretrained(model_id, torch_dtype=torch.float16)\n    pipe.scheduler = DPMSolverMultistepScheduler.from_config(pipe.scheduler.config)\n    pipe = pipe.to('cuda')\n    return pipe\n\ndef process_data(prompt, pipe):\n    response = pipe(prompt).images[0]\n    return response\n\n@app.post(\"/generate_charcoal_image/\")\nasync def generate_image(prompt:str):\n    try:\n\n        # Load the model (replace load_model() with your actual model loading logic)\n        pipe = load_model()\n\n        # Prompt Creation\n        prompt = \"Charcoal-style picture: \" + prompt\n\n        # Process the data (replace process_data() with your actual data processing logic)\n        response = process_data(prompt, pipe)\n\n        ## Save the image\n        response.save('generated_img.png')\n\n        image_path = Path('generated_img.png')\n        if not image_path.is_file():\n            return {\"error\": \"Image not found on the server\"}\n\n        return FileResponse(image_path)\n    except Exception as e:\n        # Handle exceptions or errors here\n        raise HTTPException(status_code=500, detail=str(e))",
        "task_num": 2,
        "task_description": "Create a digital art image of a modern cityscape in charcoal style."
    },
    {
        "Id": 3,
        "name": "tti_Digital_Art",
        "input_parameters_with_datatype": [
            {
                "name": "prompt",
                "datatype": "string",
                "description": "The 'prompt' parameter is a user prompt in string data type, which serves as the input for this API. It describes the desired content or concept for the digital artwork generation process. The prompt is essential for guiding the model in creating visually striking digital art images based on the user's input, enabling users to convert their ideas into unique digital artworks."
            }
        ],
        "input_description": "The input parameter for this API is a user prompt in string data type.",
        "output_data_type": "binary_image_file",
        "output description": "Generated digital art image in file format",
        "description": "This API takes a user prompt as input and generates an image in digital art style using a pre-trained model for diffusion art generation. The user prompt is provided as a string and the output is a digital art image saved in a file format.",
        "method": "POST",
        "url": null,
        "summary": "The 'tti_Digital_Art' API utilizes a POST method to transform user prompts into visually striking digital art images through a pre-trained model specialized in diffusion art generation. Users supply a prompt in string format, describing the desired content or concept for the artwork. The API processes this input to create a unique digital art piece, which is then delivered to the user as a binary_image_file, encapsulating the generated masterpiece in a file format. This API seamlessly merges textual inspiration with artistic interpretation, empowering users to effortlessly convert their ideas into captivating digital artworks, enhancing creative projects and visual storytelling.",
        "source_code": "from fastapi import FastAPI, HTTPException\nfrom fastapi.responses import FileResponse\n\nfrom PIL import Image\nfrom diffusers import StableDiffusionPipeline, DPMSolverMultistepScheduler\nimport torch\nfrom pydantic import BaseModel\nfrom pathlib import Path\n\napp = FastAPI()\n\ndef load_model():\n    model_id = \"DGSpitzer/DGSpitzer-Art-Diffusion\"\n    pipe = StableDiffusionPipeline.from_pretrained(model_id, torch_dtype=torch.float16)\n    pipe.scheduler = DPMSolverMultistepScheduler.from_config(pipe.scheduler.config)\n    pipe = pipe.to('cuda')\n    return pipe\n\ndef process_data(prompt, pipe):\n    response = pipe(prompt).images[0]\n    return response\n\n@app.post(\"/generate_digital_image/\")\nasync def generate_image(prompt:str):\n    try:\n\n        # Load the model (replace load_model() with your actual model loading logic)\n        pipe = load_model()\n\n        # Prompt Creation\n        prompt = \"Digital-style picture: \" + prompt\n\n        # Process the data (replace process_data() with your actual data processing logic)\n        response = process_data(prompt, pipe)\n\n        ## Save the image\n        response.save('generated_img.png')\n\n        image_path = Path('generated_img.png')\n        if not image_path.is_file():\n            return {\"error\": \"Image not found on the server\"}\n\n        return FileResponse(image_path)\n    except Exception as e:\n        # Handle exceptions or errors here\n        raise HTTPException(status_code=500, detail=str(e))",
        "task_num": 3,
        "task_description": "Create a digital art image of a modern cityscape in digital art style."
    },
    {
        "Id": 4,
        "name": "tti_Futuristic_Art",
        "input_parameters_with_datatype": [
            {
                "name": "prompt",
                "datatype": "string",
                "description": "The 'prompt' parameter is a user prompt in string data type. It is required for the API to generate visually captivating images inspired by Futuristic art. The prompt serves as the input text that will be processed by a pre-trained model to create artwork embodying Futuristic art aesthetics. This parameter is essential for users to provide the specific textual content that will be transformed into a Futuristic art-themed visual representation."
            }
        ],
        "input_description": "The input parameter for this API is a user prompt in string data type.",
        "output_data_type": "binary_image_file",
        "output description": "Generated image in Futuristic art style (image file)",
        "description": "This API takes a user prompt as input and generates an image in Futuristic art style using a pre-trained model. The input is a user prompt in the form of a string and the output is the generated image in the Futuristic art style in the form of an image file.",
        "method": "POST",
        "url": null,
        "summary": "The 'tti_Futuristic_Art' API utilizes a POST method to transform user prompts into visually captivating images inspired by Futuristic art. By inputting a textual prompt in string format, users can trigger the API to process the information through a pre-trained model, resulting in the creation of an artwork embodying Futuristic art aesthetics. The output of the API is a binary_image_file containing the generated image, allowing users to seamlessly convert their ideas into Futuristic art-themed visual representations, ideal for creative projects and digital artistry.",
        "source_code": "from fastapi import FastAPI, HTTPException\nfrom fastapi.responses import FileResponse\n\nfrom PIL import Image\nfrom diffusers import StableDiffusionPipeline, DPMSolverMultistepScheduler\nimport torch\nfrom pydantic import BaseModel\nfrom pathlib import Path\n\napp = FastAPI()\n\ndef load_model():\n    model_id = 'nitrosocke/Future-Diffusion'\n    pipe = StableDiffusionPipeline.from_pretrained(model_id, torch_dtype=torch.float16)\n    pipe.scheduler = DPMSolverMultistepScheduler.from_config(pipe.scheduler.config)\n    pipe = pipe.to('cuda')\n    return pipe\n\ndef process_data(prompt, pipe):\n    response = pipe(prompt).images[0]\n    return response\n\n@app.post(\"/generate_futuristic_image/\")\nasync def generate_image(prompt:str):\n    try:\n\n        # Load the model (replace load_model() with your actual model loading logic)\n        pipe = load_model()\n\n        # Prompt Creation\n        prompt = \"Futuristic-style picture: \" + prompt\n\n        # Process the data (replace process_data() with your actual data processing logic)\n        response = process_data(prompt, pipe)\n\n        ## Save the image\n        response.save('generated_img.png')\n\n        image_path = Path('generated_img.png')\n        if not image_path.is_file():\n            return {\"error\": \"Image not found on the server\"}\n\n        return FileResponse(image_path)\n    except Exception as e:\n        # Handle exceptions or errors here\n        raise HTTPException(status_code=500, detail=str(e))",
        "task_num": 4,
        "task_description": "Create a digital art image of a modern cityscape in futuristic art style."
    },
    {
        "Id": 5,
        "name": "tti_Graffiti_Art",
        "input_parameters_with_datatype": [
            {
                "name": "prompt",
                "datatype": "string",
                "description": "The 'prompt' parameter is a user-provided textual prompt in string data type. It serves as the input for the 'tti_Graffiti_Art' API, allowing users to input their creative ideas or prompts to generate graffiti-style images. This parameter is essential for the API to transform the user's textual input into visually appealing graffiti art."
            }
        ],
        "input_description": "The input parameter for this API is a user prompt in string data type.",
        "output_data_type": "binary_image_file",
        "output description": "An image in graffiti art style",
        "description": "This API takes a user prompt as input and generates an image in graffiti art style using a pre-trained model. The input is a string prompt provided by the user and the output is an image in graffiti art style",
        "method": "POST",
        "url": null,
        "summary": "The 'tti_Graffiti_Art' API utilizes a POST method to transform user-provided textual prompts into visually appealing graffiti-style images. By accepting a string input prompt from the user, this API leverages a pre-trained model to create unique artwork in the form of graffiti art. The output of this process is delivered as a binary_image_file, encapsulating the generated graffiti art image. This API serves as a creative tool, allowing users to seamlessly translate their ideas and prompts into vibrant graffiti-style visual representations, catering to artistic expression and design needs.",
        "source_code": "from fastapi import FastAPI, HTTPException\nfrom fastapi.responses import FileResponse\n\nfrom PIL import Image\nfrom diffusers import StableDiffusionPipeline, DPMSolverMultistepScheduler\nimport torch\nfrom pydantic import BaseModel\nfrom pathlib import Path\n\napp = FastAPI()\n\ndef load_model():\n    model_id = 'bakebrain/bergraffi-berlin-graffiti'\n    pipe = StableDiffusionPipeline.from_pretrained(model_id, torch_dtype=torch.float16)\n    pipe.scheduler = DPMSolverMultistepScheduler.from_config(pipe.scheduler.config)\n    pipe = pipe.to('cuda')\n    return pipe\n\ndef process_data(prompt, pipe):\n    response = pipe(prompt).images[0]\n    return response\n\n@app.post(\"/generate_grafiti_image/\")\nasync def generate_image(prompt:str):\n    try:\n\n        # Load the model (replace load_model() with your actual model loading logic)\n        pipe = load_model()\n\n        # Prompt Creation\n        prompt = \"Grafiti-style picture: \" + prompt\n\n        # Process the data (replace process_data() with your actual data processing logic)\n        response = process_data(prompt, pipe)\n\n        ## Save the image\n        response.save('generated_img.png')\n\n        image_path = Path('generated_img.png')\n        if not image_path.is_file():\n            return {\"error\": \"Image not found on the server\"}\n\n        return FileResponse(image_path)\n    except Exception as e:\n        # Handle exceptions or errors here\n        raise HTTPException(status_code=500, detail=str(e))",
        "task_num": 5,
        "task_description": "Create a digital art image of a modern cityscape in graffiti art style."
    },
    {
        "Id": 1,
        "name": "tti_Animation_Art",
        "input_parameters_with_datatype": [
            {
                "name": "prompt",
                "datatype": "string",
                "description": "The 'prompt' parameter is a user prompt in string data type. It is required for providing descriptive content or themes for the image generation process in the 'tti_Animation_Art' API. This parameter serves as the textual input that will be transformed into vibrant animation-style images by the API's pre-trained model."
            }
        ],
        "input_description": "The input parameter for this API is a user prompt in string data type.",
        "output_data_type": "binary_image_file",
        "output description": "Generated animation image as a binary_image_file",
        "description": "This API takes a user prompt and generates an image in animation style using a pre-trained model. The user needs to provide a prompt in string format and the API will return the generated animation image as a response in the form of a FileResponse.",
        "method": "POST",
        "url": null,
        "summary": "The 'tti_Animation_Art' API utilizes a POST method to transform user prompts into captivating animation images. By inputting a user prompt in string format, individuals can provide descriptive content or themes for the image generation process. The API employs a sophisticated pre-trained model to convert these textual inputs into vibrant animation-style images. Upon processing the input prompt, the API seamlessly delivers the resulting artwork as a binary_image_file, encapsulating the dynamically generated animation. This API empowers users to effortlessly merge textual creativity with visual artistry, enabling the creation of detailed animated images for various digital media applications and creative projects.",
        "source_code": "from fastapi import FastAPI, HTTPException\nfrom fastapi.responses import FileResponse\n\nfrom PIL import Image\nfrom diffusers import StableDiffusionPipeline, DPMSolverMultistepScheduler\nimport torch\nfrom pydantic import BaseModel\nfrom pathlib import Path\n\napp = FastAPI()\n\ndef load_model():\n    model_id = 'dreamlike-art/dreamlike-anime-1.0'\n    pipe = StableDiffusionPipeline.from_pretrained(model_id, torch_dtype=torch.float16)\n    pipe.scheduler = DPMSolverMultistepScheduler.from_config(pipe.scheduler.config)\n    pipe = pipe.to('cuda')\n    return pipe\n\ndef process_data(prompt, pipe):\n    response = pipe(prompt).images[0]\n    return response\n\n@app.post(\"/generate_anime_image/\")\nasync def generate_image(prompt:str):\n    try:\n\n        # Load the model (replace load_model() with your actual model loading logic)\n        pipe = load_model()\n\n        # Prompt Creation\n        prompt = \"Anime-style picture: \" + prompt\n\n        # Process the data (replace process_data() with your actual data processing logic)\n        response = process_data(prompt, pipe)\n\n        ## Save the image\n        response.save('generated_img.png')\n\n        image_path = Path('generated_img.png')\n        \n        if not image_path.is_file():\n            return {\"error\": \"Image not found on the server\"}\n\n        return FileResponse(image_path)\n    except Exception as e:\n        # Handle exceptions or errors here\n        raise HTTPException(status_code=500, detail=str(e))",
        "task_num": 6,
        "task_description": "Enhance the animation style image of the modern cityscape."
    },
    {
        "Id": 12,
        "name": "Image_Resizing",
        "input_parameters_with_datatype": [
            {
                "name": "width",
                "datatype": "int",
                "description": "The 'width' parameter specifies the desired width dimension for resizing the user-uploaded image file. This parameter is essential for determining the new width of the image during the resizing process. It plays a crucial role in adjusting the dimensions of the image according to user requirements, ensuring the output meets the specified width criteria for the resized image."
            },
            {
                "name": "height",
                "datatype": "int",
                "description": "The height parameter specifies the desired height dimension for resizing the user-uploaded image file. This parameter is essential for determining the final dimensions of the resized image, ensuring that the output meets the user's requirements for image size adjustments."
            },
            {
                "name": "file",
                "datatype": "binary_image_file",
                "description": "The 'file' parameter of datatype 'binary_image_file' is required for this API as it serves as the input containing the image file uploaded by the user. This parameter is essential for the 'Image_Resizing' API to receive the binary form of the image file, enabling the resizing process to be carried out on the user-provided visual content."
            }
        ],
        "input_description": "The input for this API is an image file uploaded by the user.",
        "output_data_type": "binary_image_file",
        "output description": "The output of this API is a resized version of the input image in PDF format.",
        "description": "This API takes an image file as input uploaded by the user and resizes it to the specified width and height. It then converts the resized image into a PDF file and returns the PDF file as output. The main objective of this API is to allow users to resize images and convert them into PDF format.",
        "method": "POST",
        "url": null,
        "summary": "The 'Image_Resizing' API employs a POST method to resize user-uploaded image files by the specified width and height dimensions. Users provide image files in binary form as input to the API, where the resizing process is carried out. Upon completion, the resized image is transformed into a PDF file, serving as the output in binary_image_file format. This API streamlines the task of image resizing and conversion to PDF, facilitating efficient handling of visual content for users seeking to adjust image dimensions and format for various purposes.",
        "source_code": "# FastAPI\nfrom fastapi import FastAPI, HTTPException, File, UploadFile\nfrom fastapi.responses import FileResponse\nfrom PIL import Image\nimport io\nimport os\n\napp = FastAPI()\n\n@app.post('/resize_image/')\nasync def resize_image(width: int, height: int, file: UploadFile):\n    try:\n        # Read the uploaded file contents\n        contents = await file.read()\n\n        image = Image.open(io.BytesIO(contents))\n        \n        # Resize the image\n        resized = image.resize((width, height))\n        \n        # Saving the resized image to a temporary file\n        filename = \"resized_image.png\"\n        resized.save(filename)\n\n        return FileResponse(filename, media_type=\"image/png\", filename=\"output.png\")\n    \n    except Exception as e:\n        # Handle exceptions or errors here\n        raise HTTPException(status_code=500, detail=str(e))",
        "task_num": 7,
        "task_description": "Resize the enhanced animation style image of the modern cityscape to 500x500 pixels."
    },
    {
        "Id": 11,
        "name": "image_to_pdf_conversion",
        "input_parameters_with_datatype": [
            {
                "name": "file",
                "datatype": "binary_image_file",
                "description": "The 'file' parameter should be a binary image file in one of the supported formats: JPEG, PNG, GIF, BMP, TIFF, PBM, PGM, or PPM. This parameter is required for the 'image_to_pdf_conversion' API to receive the input image file that will be converted to a PDF document. The API processes the provided image file and generates a PDF output, enabling users to efficiently transform visual content into a universally accessible format for sharing, printing, or archiving purposes."
            }
        ],
        "input_description": "An image file in supported format (.JPEG .PNG .GIF .BMP .TIFF .PBM .PGM .PPM)",
        "output_data_type": "binary_image_file",
        "output description": "A PDF file",
        "description": "This API allows users to convert an image file to a PDF document. Users need to upload an image file with one of the supported formats and the API will process the image and generate a corresponding PDF file as output.",
        "method": "POST",
        "url": null,
        "summary": "The 'image_to_pdf_conversion' API offers a convenient solution for converting image files to PDF documents through a POST method. Users can upload an image file in formats such as JPEG, PNG, GIF, BMP, TIFF, PBM, PGM, or PPM as the input parameter. Once the image is provided, the API seamlessly processes it and produces a PDF file as the output, allowing for efficient transformation of visual content into a portable and universally accessible format. This functionality streamlines the conversion process, enabling users to effortlessly convert diverse image types into PDF documents to facilitate sharing, printing, or archiving purposes.",
        "source_code": "from fastapi import FastAPI, File, UploadFile, HTTPException\nfrom fastapi.responses import FileResponse\nfrom pathlib import Path\nfrom PIL import Image\nimport img2pdf\n\napp = FastAPI()\n\n# Define the supported image extensions\nsupported_extensions = [\".JPEG\", \".PNG\", \".GIF\", \".BMP\", \".TIFF\", \".PBM\", \".PGM\", \".PPM\"]\n\n\ndef check_file_extension(file_path):\n    file_extension = file_path.suffix.upper()\n    if file_extension not in supported_extensions:\n        return False\n    return True\n\n\n@app.post(\"/convert_to_pdf/\")\nasync def image_to_pdf(file: UploadFile):\n    try:\n        file_path = Path(file.filename)\n        file_name = file_path.stem\n        \n        \n        # # File format support check\n        if not check_file_extension(file_path):\n            return {\"error\": \"Unsupported format\"}\n\n        # Read the contents of the uploaded file\n        contents = await file.read()\n        \n        pdf_bytes = img2pdf.convert(contents)\n        \n        pdf_file_path = f'{file_name}.pdf'\n\n        with open(pdf_file_path, 'wb') as pdf_file:\n            pdf_file.write(pdf_bytes)\n\n        # Return the PDF file\n        return FileResponse(pdf_file_path, media_type=\"application/pdf\", filename=\"output.pdf\")\n    except Exception as e:\n        # Handle exceptions or errors here\n        raise HTTPException(status_code=500, detail=str(e))",
        "task_num": 8,
        "task_description": "Convert a format of the resized animation style image of the modern cityscape to JPEG."
    },
    {
        "Id": 13,
        "name": "Image_Enhancement",
        "input_parameters_with_datatype": [
            {
                "name": "file",
                "datatype": "binary_image_file",
                "description": "A single image file in supported formats (.bmp .jpeg .png etc.) required for enhancing the quality of the image by applying denoising, contrast stretching, sharpening, brightness adjustment, and gamma correction techniques to improve its visual quality."
            }
        ],
        "input_description": "A single image file in supported formats (.bmp .jpeg .png etc.)",
        "output_data_type": "binary_image_file",
        "output description": "Enhanced image file in JPG format",
        "description": "API that takes an image as input enhances its quality by denoising contrast stretching sharpening adjusting brightness and gamma correction then returns the enhanced image in JPG format.",
        "method": "POST",
        "url": null,
        "summary": "The 'Image_Enhancement' API offers a POST method to enhance the quality of images provided by users. Users can upload a single image file in supported formats like .bmp, .jpeg, or .png. The API processes the image by applying denoising, contrast stretching, sharpening, brightness adjustment, and gamma correction techniques to improve its visual quality. Upon completion of enhancements, the API returns the enhanced image in JPG format, allowing users to obtain a higher-quality version of their input image effortlessly.",
        "source_code": "#FastAPI\nfrom fastapi import FastAPI, HTTPException, File, UploadFile\nfrom fastapi.responses import FileResponse\nfrom pathlib import Path\n\n#Image Enhancement\nimport cv2\nimport numpy as np\nfrom PIL import Image\n\nfile_path = Path(\"./flower.jpg\")\n\nSUPPORTED_FORMATS = [\n    \".bmp\", \".dib\",\n    \".jpeg\", \".jpg\", \".jpe\",\n    \".jp2\",\n    \".png\",\n    \".webp\",\n    \".avif\",\n    \".pbm\", \".pgm\", \".ppm\", \".pxm\", \".pnm\",\n    \".pfm\",\n    \".sr\", \".ras\",\n    \".tiff\", \".tif\",\n    \".exr\",\n    \".hdr\", \".pic\"\n]\n\n\napp = FastAPI()\n\ndef check_image_extension(img):\n    img_path = Path(img.filename)\n    return img_path.suffix\n\n@app.post('/image_enhance/')\nasync def enhance_image(file: UploadFile):\n    try:\n        #Saving original image\n        image_name = file.filename \n        image = Image.open(file.file) \n        image.save(image_name)\n\n        #Loading the image\n        img = cv2.imread(image_name)\n\n        #Denoising image\n        denoised_image = cv2.fastNlMeansDenoisingColored(img, None, 10, 10, 7, 21)\n\n        #Contrast Stretching(Normalizing)\n        contrast_stretched_image = cv2.normalize(denoised_image, None, 255, 0, cv2.NORM_MINMAX, cv2.CV_8UC1)\n\n        # Image Sharpening\n        kernel = np.array([[0, -1, 0], [-1, 5, -1], [0, -1, 0]], np.float32)\n        sharpened_image = cv2.filter2D(contrast_stretched_image, -1, kernel=kernel)\n\n        #Adjusting Brightness\n        brightness_image = cv2.convertScaleAbs(sharpened_image, alpha=1, beta=5)\n\n        # Gamma Correction\n        gamma = 1.5\n        lookup_table = np.array([((i / 255.0) ** gamma) * 255 for i in np.arange(0, 256)]).astype(\"uint8\")\n        gamma_corrected_image = cv2.LUT(brightness_image, lookup_table)\n\n        final_name = f'final_{image_name}'\n        # Save final image\n        cv2.imwrite(final_name, gamma_corrected_image)\n\n        return FileResponse(final_name, media_type='image/jpg', filename=final_name)\n    except Exception as e:\n        raise HTTPException(status_code=500, detail=str(e))",
        "task_num": 9,
        "task_description": "Convert the resized animation style image of the modern cityscape to PNG format."
    },
    {
        "Id": 1,
        "name": "tti_Animation_Art",
        "input_parameters_with_datatype": [
            {
                "name": "prompt",
                "datatype": "string",
                "description": "The 'prompt' parameter is a user prompt in string data type. It is required for providing descriptive content or themes for the image generation process in the 'tti_Animation_Art' API. This parameter serves as the textual input that will be transformed into vibrant animation-style images by the API's pre-trained model."
            }
        ],
        "input_description": "The input parameter for this API is a user prompt in string data type.",
        "output_data_type": "binary_image_file",
        "output description": "Generated animation image as a binary_image_file",
        "description": "This API takes a user prompt and generates an image in animation style using a pre-trained model. The user needs to provide a prompt in string format and the API will return the generated animation image as a response in the form of a FileResponse.",
        "method": "POST",
        "url": null,
        "summary": "The 'tti_Animation_Art' API utilizes a POST method to transform user prompts into captivating animation images. By inputting a user prompt in string format, individuals can provide descriptive content or themes for the image generation process. The API employs a sophisticated pre-trained model to convert these textual inputs into vibrant animation-style images. Upon processing the input prompt, the API seamlessly delivers the resulting artwork as a binary_image_file, encapsulating the dynamically generated animation. This API empowers users to effortlessly merge textual creativity with visual artistry, enabling the creation of detailed animated images for various digital media applications and creative projects.",
        "source_code": "from fastapi import FastAPI, HTTPException\nfrom fastapi.responses import FileResponse\n\nfrom PIL import Image\nfrom diffusers import StableDiffusionPipeline, DPMSolverMultistepScheduler\nimport torch\nfrom pydantic import BaseModel\nfrom pathlib import Path\n\napp = FastAPI()\n\ndef load_model():\n    model_id = 'dreamlike-art/dreamlike-anime-1.0'\n    pipe = StableDiffusionPipeline.from_pretrained(model_id, torch_dtype=torch.float16)\n    pipe.scheduler = DPMSolverMultistepScheduler.from_config(pipe.scheduler.config)\n    pipe = pipe.to('cuda')\n    return pipe\n\ndef process_data(prompt, pipe):\n    response = pipe(prompt).images[0]\n    return response\n\n@app.post(\"/generate_anime_image/\")\nasync def generate_image(prompt:str):\n    try:\n\n        # Load the model (replace load_model() with your actual model loading logic)\n        pipe = load_model()\n\n        # Prompt Creation\n        prompt = \"Anime-style picture: \" + prompt\n\n        # Process the data (replace process_data() with your actual data processing logic)\n        response = process_data(prompt, pipe)\n\n        ## Save the image\n        response.save('generated_img.png')\n\n        image_path = Path('generated_img.png')\n        \n        if not image_path.is_file():\n            return {\"error\": \"Image not found on the server\"}\n\n        return FileResponse(image_path)\n    except Exception as e:\n        # Handle exceptions or errors here\n        raise HTTPException(status_code=500, detail=str(e))",
        "task_num": 10,
        "task_description": "Email the enhanced and resized animation style PNG of the modern cityscape to the art professor for feedback."
    }
]