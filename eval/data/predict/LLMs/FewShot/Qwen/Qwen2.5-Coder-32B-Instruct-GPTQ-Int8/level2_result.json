[
  {
    "Id": 2,
    "status": "Success",
    "workflow": "apiVersion: argoproj.io/v1alpha1\nkind: Workflow\nmetadata:\n  generateName: add-song-to-playlist-\nspec:\n  entrypoint: main\n  templates:\n  - name: main\n    dag:\n      tasks:\n      - name: getuserid\n        template: getuserid\n        arguments:\n          parameters:\n          - name: username\n            value: '{{{{ inputs.parameters.username }}}}'\n      - name: getplaylistid\n        template: getplaylistid\n        arguments:\n          parameters:\n          - name: user_id\n            value: '{{{{ tasks.getuserid.result }}}}'\n          - name: playlist_name\n            value: '{{{{ inputs.parameters.playlist_name }}}}'\n      - name: addsongtoplaylist\n        template: addsongtoplaylist\n        dependencies:\n        - getplaylistid\n        arguments:\n          parameters:\n          - name: user_ID\n            value: '{{{{ tasks.getuserid.result }}}}'\n          - name: playlist_ID\n            value: '{{{{ tasks.getplaylistid.result }}}}'\n          - name: song_name\n            value: '{{{{ inputs.parameters.song_name }}}}'\n  - name: getuserid\n    inputs:\n      parameters:\n      - name: username\n    container:\n      image: appropriate/curl:latest\n      command: [sh, -c]\n      args: [\"echo $((1 + RANDOM % 100))\"]  # Simulating getting a user ID\n  - name: getplaylistid\n    inputs:\n      parameters:\n      - name: user_id\n      - name: playlist_name\n    container:\n      image: appropriate/curl:latest\n      command: [sh, -c]\n      args: [\"echo $((1 + RANDOM % 100))\"]  # Simulating getting a playlist ID\n  - name: addsongtoplaylist\n    inputs:\n      parameters:\n      - name: user_ID\n      - name: playlist_ID\n      - name: song_name\n    container:\n      image: appropriate/curl:latest\n      command: [sh, -c]\n      args: [\"echo 'Song added to playlist'\"]  # Simulating adding a song to a playlist"
  },
  {
    "Id": 4,
    "status": "Success",
    "workflow": "apiVersion: argoproj.io/v1alpha1\nkind: Workflow\nmetadata:\n  generateName: dependency-workflow-music-\nspec:\n  entrypoint: main\n  templates:\n  - name: main\n    dag:\n      tasks:\n      - name: getuserid\n        template: getuserid\n        arguments:\n          parameters:\n          - name: username\n            value: '{{{{ inputs.parameters.username }}}}'\n      - name: getplaylistid\n        template: getplaylistid\n        dependencies:\n        - getuserid\n        arguments:\n          parameters:\n          - name: user_ID\n            value: '{{{{ tasks.getuserid.result }}}}'\n          - name: playlist_name\n            value: '{{{{ inputs.parameters.playlist_name }}}}'\n      - name: songtitletoid\n        template: songtitletoid\n        arguments:\n          parameters:\n          - name: song_title\n            value: '{{{{ inputs.parameters.song_title }}}}'\n      - name: addsongtoplaylist\n        template: addsongtoplaylist\n        dependencies:\n        - getplaylistid\n        - songtitletoid\n        arguments:\n          parameters:\n          - name: user_ID\n            value: '{{{{ tasks.getuserid.result }}}}'\n          - name: playlist_ID\n            value: '{{{{ tasks.getplaylistid.result }}}}'\n          - name: song_name\n            value: '{{{{ inputs.parameters.song_title }}}}'\n  - name: getuserid\n    inputs:\n      parameters:\n      - name: username\n    container:\n      image: busybox\n      command: [sh, -c]\n      args: [\"echo $((inputs.parameters.username))\"]\n  - name: getplaylistid\n    inputs:\n      parameters:\n      - name: user_ID\n      - name: playlist_name\n    container:\n      image: busybox\n      command: [sh, -c]\n      args: [\"echo $((inputs.parameters.user_ID))-$((inputs.parameters.playlist_name))\"]\n  - name: songtitletoid\n    inputs:\n      parameters:\n      - name: song_title\n    container:\n      image: busybox\n      command: [sh, -c]\n      args: [\"echo $((inputs.parameters.song_title))\"]\n  - name: addsongtoplaylist\n    inputs:\n      parameters:\n      - name: user_ID\n      - name: playlist_ID\n      - name: song_name\n    container:\n      image: busybox\n      command: [sh, -c]\n      args: [\"echo $((inputs.parameters.user_ID))-$((inputs.parameters.playlist_ID))-$((inputs.parameters.song_name))\"]"
  },
  {
    "Id": 6,
    "status": "Success",
    "workflow": "apiVersion: argoproj.io/v1alpha1\nkind: Workflow\nmetadata:\n  generateName: dependency-workflow-1542-\nspec:\n  entrypoint: main\n  templates:\n  - name: main\n    dag:\n      tasks:\n      - name: getuserid\n        template: getuserid\n        arguments:\n          parameters:\n          - name: username\n            value: '{{{{ inputs.parameters.username }}}}'\n      - name: fetchplaylistid\n        template: fetchplaylistid\n        dependencies:\n        - getuserid\n        arguments:\n          parameters:\n          - name: user_id\n            value: '{{{{ tasks.getuserid.result }}}}'\n          - name: playlist_name\n            value: '{{{{ inputs.parameters.playlist_name }}}}'\n      - name: musicsongidentifier\n        template: musicsongidentifier\n        arguments:\n          parameters:\n          - name: song_name\n            value: '{{{{ inputs.parameters.song_name }}}}'\n      - name: addsongtoplaylist\n        template: addsongtoplaylist\n        dependencies:\n        - fetchplaylistid\n        - musicsongidentifier\n        arguments:\n          parameters:\n          - name: user_ID\n            value: '{{{{ tasks.getuserid.result }}}}'\n          - name: playlist_ID\n            value: '{{{{ tasks.fetchplaylistid.result }}}}'\n          - name: song_name\n            value: '{{{{ tasks.musicsongidentifier.result }}}}'\n  - name: getuserid\n    container:\n      image: your-image-here\n      command: [sh, -c]\n      args: [\"your-command-here\"]\n      env:\n      - name: USERNAME\n        value: '{{{{ inputs.parameters.username }}}}'\n  - name: fetchplaylistid\n    container:\n      image: your-image-here\n      command: [sh, -c]\n      args: [\"your-command-here\"]\n      env:\n      - name: USER_ID\n        value: '{{{{ inputs.parameters.user_id }}}}'\n      - name: PLAYLIST_NAME\n        value: '{{{{ inputs.parameters.playlist_name }}}}'\n  - name: musicsongidentifier\n    container:\n      image: your-image-here\n      command: [sh, -c]\n      args: [\"your-command-here\"]\n      env:\n      - name: SONG_NAME\n        value: '{{{{ inputs.parameters.song_name }}}}'\n  - name: addsongtoplaylist\n    container:\n      image: your-image-here\n      command: [sh, -c]\n      args: [\"your-command-here\"]\n      env:\n      - name: USER_ID\n        value: '{{{{ inputs.parameters.user_ID }}}}'\n      - name: PLAYLIST_ID\n        value: '{{{{ inputs.parameters.playlist_ID }}}}'\n      - name: SONG_NAME\n        value: '{{{{ inputs.parameters.song_name }}}}'"
  },
  {
    "Id": 37,
    "status": "Success",
    "workflow": "apiVersion: argoproj.io/v1alpha1\nkind: Workflow\nmetadata:\n  generateName: movie-reservation-workflow-\nspec:\n  entrypoint: main\n  templates:\n  - name: main\n    dag:\n      tasks:\n      - name: find-showtime\n        template: find-showtime\n        arguments:\n          parameters:\n          - name: movie_name\n            value: 'drama'\n          - name: location\n            value: '{{{{ inputs.parameters.location }}}}'\n          - name: date\n            value: '{{{{ inputs.parameters.date }}}}'\n      - name: book-tickets\n        template: book-tickets\n        dependencies:\n        - find-showtime\n        arguments:\n          parameters:\n          - name: showtime\n            value: '{{{{ tasks.find-showtime.result }}}}'\n          - name: number_of_tickets\n            value: '{{{{ inputs.parameters.number_of_tickets }}}}'\n  - name: find-showtime\n    inputs:\n      parameters:\n      - name: movie_name\n      - name: location\n      - name: date\n    container:\n      image: your-api-image\n      command: [sh, -c]\n      args: [\"FindShowtime {{inputs.parameters.movie_name}} {{inputs.parameters.location}} {{inputs.parameters.date}}\"]\n  - name: book-tickets\n    inputs:\n      parameters:\n      - name: showtime\n      - name: number_of_tickets\n    container:\n      image: your-api-image\n      command: [sh, -c]\n      args: [\"BookTickets {{inputs.parameters.showtime}} {{inputs.parameters.number_of_tickets}}\"]"
  },
  {
    "Id": 138,
    "status": "Success",
    "workflow": "apiVersion: argoproj.io/v1alpha1\nkind: Workflow\nmetadata:\n  generateName: jennifer-book-purchase-\nspec:\n  entrypoint: main\n  templates:\n  - name: main\n    dag:\n      tasks:\n      - name: username2email\n        template: username2email\n        dependencies:\n        - title2isbn\n        arguments:\n          parameters:\n          - name: username\n            value: '{{{{ inputs.parameters.username }}}}'\n      - name: title2isbn\n        template: title2isbn\n        arguments:\n          parameters:\n          - name: title\n            value: '{{{{ inputs.parameters.title }}}}'\n      - name: checkavailability\n        template: checkavailability\n        dependencies:\n        - title2isbn\n        arguments:\n          parameters:\n          - name: ISBN\n            value: '{{{{ tasks.title2isbn.result }}}}'\n          - name: start_date\n            value: '{{{{ inputs.parameters.start_date }}}}'\n          - name: end_date\n            value: '{{{{ inputs.parameters.end_date }}}}'\n      - name: buybook\n        template: buybook\n        dependencies:\n        - username2email\n        - title2isbn\n        - checkavailability\n        arguments:\n          parameters:\n          - name: user_email\n            value: '{{{{ tasks.username2email.result }}}}'\n          - name: ISBN\n            value: '{{{{ tasks.title2isbn.result }}}}'\n  - name: username2email\n    container:\n      image: appropriate/curl:latest\n      command: [sh, -c]\n      args: [\"curl -X GET http://api.example.com/username2email?username={{ inputs.parameters.username }}\"]\n      inputs:\n        parameters:\n        - name: username\n  - name: title2isbn\n    container:\n      image: appropriate/curl:latest\n      command: [sh, -c]\n      args: [\"curl -X GET http://api.example.com/title2isbn?title={{ inputs.parameters.title }}\"]\n      inputs:\n        parameters:\n        - name: title\n  - name: checkavailability\n    container:\n      image: appropriate/curl:latest\n      command: [sh, -c]\n      args: [\"curl -X GET http://api.example.com/checkavailability?ISBN={{ inputs.parameters.ISBN }}&start_date={{ inputs.parameters.start_date }}&end_date={{ inputs.parameters.end_date }}\"]\n      inputs:\n        parameters:\n        - name: ISBN\n        - name: start_date\n        - name: end_date\n  - name: buybook\n    container:\n      image: appropriate/curl:latest\n      command: [sh, -c]\n      args: [\"curl -X POST http://api.example.com/buybook -d user_email={{ inputs.parameters.user_email }} -d ISBN={{ inputs.parameters.ISBN }}\"]\n      inputs:\n        parameters:\n        - name: user_email\n        - name: ISBN"
  },
  {
    "Id": 148,
    "status": "Success",
    "workflow": "apiVersion: argoproj.io/v1alpha1\nkind: Workflow\nmetadata:\n  generateName: dependency-workflow-enroll-course-\nspec:\n  entrypoint: main\n  templates:\n  - name: main\n    dag:\n      tasks:\n      - name: email2userid\n        template: email2userid\n        arguments:\n          parameters:\n          - name: email\n            value: '{{{{ inputs.parameters.email }}}}'\n      - name: coursename2id\n        template: coursename2id\n        arguments:\n          parameters:\n          - name: course_name\n            value: '{{{{ inputs.parameters.course_name }}}}'\n      - name: enrollcourse\n        template: enrollcourse\n        dependencies:\n        - email2userid\n        - coursename2id\n        arguments:\n          parameters:\n          - name: person_ID\n            value: '{{{{ tasks.email2userid.result }}}}'\n          - name: subject_ID\n            value: '{{{{ tasks.coursename2id.result }}}}'\n          - name: semester\n            value: '{{{{ inputs.parameters.semester }}}}'\n  - name: email2userid\n    inputs:\n      parameters:\n      - name: email\n    container:\n      image: your-image-here\n      command: [\"sh\", \"-c\"]\n      args: [\"Email2UserID(email='{{{{ inputs.parameters.email }}}}')\"]\n  - name: coursename2id\n    inputs:\n      parameters:\n      - name: course_name\n    container:\n      image: your-image-here\n      command: [\"sh\", \"-c\"]\n      args: [\"Coursename2ID(course_name='{{{{ inputs.parameters.course_name }}}}')\"]\n  - name: enrollcourse\n    inputs:\n      parameters:\n      - name: person_ID\n      - name: subject_ID\n      - name: semester\n    container:\n      image: your-image-here\n      command: [\"sh\", \"-c\"]\n      args: [\"EnrollCourse(person_ID='{{{{ inputs.parameters.person_ID }}}}', subject_ID='{{{{ inputs.parameters.subject_ID }}}}', semester='{{{{ inputs.parameters.semester }}}}')\"]"
  },
  {
    "Id": 150,
    "status": "Success",
    "workflow": "apiVersion: argoproj.io/v1alpha1\nkind: Workflow\nmetadata:\n  generateName: enrollment-workflow-\nspec:\n  entrypoint: main\n  templates:\n  - name: main\n    dag:\n      tasks:\n      - name: email2username\n        template: email2username\n        arguments:\n          parameters:\n          - name: email\n            value: '{{{{ inputs.parameters.email }}}}'\n      - name: studentname2id\n        template: studentname2id\n        dependencies:\n        - email2username\n        arguments:\n          parameters:\n          - name: student_name\n            value: '{{{{ tasks.email2username.result }}}}'\n      - name: coursename2id\n        template: coursename2id\n        arguments:\n          parameters:\n          - name: course_name\n            value: '{{{{ inputs.parameters.course_name }}}}'\n      - name: enrollcourse\n        template: enrollcourse\n        dependencies:\n        - studentname2id\n        - coursename2id\n        arguments:\n          parameters:\n          - name: person_ID\n            value: '{{{{ tasks.studentname2id.result }}}}'\n          - name: subject_ID\n            value: '{{{{ tasks.coursename2id.result }}}}'\n          - name: semester\n            value: '{{{{ inputs.parameters.semester }}}}'\n  - name: email2username\n    inputs:\n      parameters:\n      - name: email\n    outputs:\n      parameters:\n      - name: user_name\n        valueFrom:\n          path: /tmp/user_name.txt\n    container:\n      image: your-image-here\n      command: [\"sh\", \"-c\"]\n      args: [\"echo $(Email2Username {{inputs.parameters.email}}) > /tmp/user_name.txt\"]\n  - name: studentname2id\n    inputs:\n      parameters:\n      - name: student_name\n    outputs:\n      parameters:\n      - name: student_ID\n        valueFrom:\n          path: /tmp/student_ID.txt\n    container:\n      image: your-image-here\n      command: [\"sh\", \"-c\"]\n      args: [\"echo $(Studentname2ID {{inputs.parameters.student_name}}) > /tmp/student_ID.txt\"]\n  - name: coursename2id\n    inputs:\n      parameters:\n      - name: course_name\n    outputs:\n      parameters:\n      - name: course_ID\n        valueFrom:\n          path: /tmp/course_ID.txt\n    container:\n      image: your-image-here\n      command: [\"sh\", \"-c\"]\n      args: [\"echo $(Coursename2ID {{inputs.parameters.course_name}}) > /tmp/course_ID.txt\"]\n  - name: enrollcourse\n    inputs:\n      parameters:\n      - name: person_ID\n      - name: subject_ID\n      - name: semester\n    outputs:\n      parameters:\n      - name: enrollment_confirmation\n        valueFrom:\n          path: /tmp/enrollment_confirmation.txt\n    container:\n      image: your-image-here\n      command: [\"sh\", \"-c\"]\n      args: [\"echo $(EnrollCourse {{inputs.parameters.person_ID}} {{inputs.parameters.subject_ID}} {{inputs.parameters.semester}}) > /tmp/enrollment_confirmation.txt\"]"
  },
  {
    "Id": 166,
    "status": "Success",
    "workflow": "apiVersion: argoproj.io/v1alpha1\nkind: Workflow\nmetadata:\n  generateName: metal-concert-ticket-workflow-\nspec:\n  entrypoint: main\n  templates:\n  - name: main\n    dag:\n      tasks:\n      - name: get-concerts\n        template: MusicConcert\n        arguments:\n          parameters:\n          - name: venue\n            value: '{{{{ inputs.parameters.city }}}}'\n      - name: find-event-id\n        template: find-event-id\n        dependencies:\n        - get-concerts\n        arguments:\n          parameters:\n          - name: concerts\n            value: '{{{{ tasks.get-concerts.result }}}}'\n          - name: event_name\n            value: '{{{{ inputs.parameters.event_name }}}}'\n      - name: book-ticket\n        template: BookEventTicket\n        dependencies:\n        - find-event-id\n        arguments:\n          parameters:\n          - name: event_ID\n            value: '{{{{ tasks.find-event-id.result }}}}'\n          - name: venue_ID\n            value: '{{{{ inputs.parameters.venue_ID }}}}'\n          - name: date\n            value: '{{{{ inputs.parameters.date }}}}'\n  - name: MusicConcert\n    inputs:\n      parameters:\n      - name: venue\n    outputs:\n      parameters:\n      - name: concerts\n        valueFrom:\n          path: /tmp/concerts\n    script:\n      image: python:3.8\n      command: [python]\n      source: |\n        import json\n        import requests\n\n        venue = \"{{{{ inputs.parameters.venue }}}}\"\n        response = requests.get(f\"http://api.example.com/MusicConcert?venue={venue}\")\n        concerts = response.json()\n        with open('/tmp/concerts', 'w') as f:\n            f.write(json.dumps(concerts))\n  - name: find-event-id\n    inputs:\n      parameters:\n      - name: concerts\n      - name: event_name\n    outputs:\n      parameters:\n      - name: event_ID\n        valueFrom:\n          path: /tmp/event_ID\n    script:\n      image: python:3.8\n      command: [python]\n      source: |\n        import json\n\n        concerts = json.loads(\"{{{{ inputs.parameters.concerts }}}}\")\n        event_name = \"{{{{ inputs.parameters.event_name }}}}\"\n        for concert in concerts:\n            if concert['name'] == event_name:\n                event_ID = concert['ID']\n                break\n        with open('/tmp/event_ID', 'w') as f:\n            f.write(str(event_ID))\n  - name: BookEventTicket\n    inputs:\n      parameters:\n      - name: event_ID\n      - name: venue_ID\n      - name: date\n    outputs:\n      parameters:\n      - name: Booking_status\n        valueFrom:\n          path: /tmp/Booking_status\n    script:\n      image: python:3.8\n      command: [python]\n      source: |\n        import json\n        import requests\n\n        event_ID = \"{{{{ inputs.parameters.event_ID }}}}\"\n        venue_ID = \"{{{{ inputs.parameters.venue_ID }}}}\"\n        date = \"{{{{ inputs.parameters.date }}}}\"\n        response = requests.post(f\"http://api.example.com/BookEventTicket?event_ID={event_ID}&venue_ID={venue_ID}&date={date}\")\n        booking_status = response.json()['status']\n        with open('/tmp/Booking_status', 'w') as f:\n            f.write(booking_status)"
  },
  {
    "Id": 173,
    "status": "Success",
    "workflow": "apiVersion: argoproj.io/v1alpha1\nkind: Workflow\nmetadata:\n  generateName: film-festival-ticket-booking-\nspec:\n  entrypoint: main\n  templates:\n  - name: main\n    dag:\n      tasks:\n      - name: findeventdetails\n        template: findeventdetails\n        arguments:\n          parameters:\n          - name: event_name\n            value: '{{{{ inputs.parameters.event_name }}}}'\n          - name: location\n            value: '{{{{ inputs.parameters.location }}}}'\n          - name: date\n            value: '{{{{ inputs.parameters.date }}}}'\n      - name: bookeventticket\n        template: bookeventticket\n        dependencies:\n        - findeventdetails\n        arguments:\n          parameters:\n          - name: event_ID\n            value: '{{{{ tasks.findeventdetails.result.event_ID }}}}'\n          - name: venue_ID\n            value: '{{{{ tasks.findeventdetails.result.venue_ID }}}}'\n          - name: date\n            value: '{{{{ inputs.parameters.date }}}}'\n  inputs:\n    parameters:\n    - name: event_name\n      value: 'Film Festival'\n    - name: location\n      value: 'Los Angeles'\n    - name: date\n      value: '2023-10-22'"
  },
  {
    "Id": 227,
    "status": "Success",
    "workflow": "apiVersion: argoproj.io/v1alpha1\nkind: Workflow\nmetadata:\n  generateName: kitchenplus-order-workflow-\nspec:\n  entrypoint: main\n  templates:\n  - name: main\n    dag:\n      tasks:\n      - name: getproductid\n        template: getproductid\n        arguments:\n          parameters:\n          - name: product_name\n            value: '{{{{ inputs.parameters.product_name }}}}'\n      - name: getuserid\n        template: getuserid\n        arguments:\n          parameters:\n          - name: username\n            value: '{{{{ inputs.parameters.username }}}}'\n      - name: placeorder\n        template: placeorder\n        dependencies:\n        - getproductid\n        - getuserid\n        arguments:\n          parameters:\n          - name: product_ID\n            value: '{{{{ tasks.getproductid.result }}}}'\n          - name: user_ID\n            value: '{{{{ tasks.getuserid.result }}}}'\n          - name: quantity\n            value: '{{{{ inputs.parameters.quantity }}}}'\n  - name: getproductid\n    container:\n      image: busybox\n      command: [sh, -c]\n      args: [\"echo 123\"]  # Placeholder for actual API call to get product ID\n  - name: getuserid\n    container:\n      image: busybox\n      command: [sh, -c]\n      args: [\"echo 456\"]  # Placeholder for actual API call to get user ID\n  - name: placeorder\n    container:\n      image: busybox\n      command: [sh, -c]\n      args: [\"echo Order placed successfully\"]  # Placeholder for actual API call to place order"
  },
  {
    "Id": 242,
    "status": "Success",
    "workflow": "apiVersion: argoproj.io/v1alpha1\nkind: Workflow\nmetadata:\n  generateName: add-to-cart-workflow-\nspec:\n  entrypoint: main\n  templates:\n  - name: main\n    dag:\n      tasks:\n      - name: get-user-id\n        template: get-user-id\n        arguments:\n          parameters:\n          - name: username\n            value: '{{{{ inputs.parameters.username }}}}'\n      - name: get-product-id\n        template: get-product-id\n        arguments:\n          parameters:\n          - name: product-name\n            value: '{{{{ inputs.parameters.product-name }}}}'\n      - name: add-product-to-cart\n        template: add-product-to-cart\n        dependencies:\n        - get-user-id\n        - get-product-id\n        arguments:\n          parameters:\n          - name: product_ID\n            value: '{{{{ tasks.get-product-id.result }}}}'\n          - name: customer_ID\n            value: '{{{{ tasks.get-user-id.result }}}}'\n          - name: quantity\n            value: '{{{{ inputs.parameters.quantity }}}}'\n  - name: get-user-id\n    container:\n      image: busybox\n      command: [sh, -c]\n      args: [\"echo $USERNAME_ID\"]\n    inputs:\n      parameters:\n      - name: username\n  - name: get-product-id\n    container:\n      image: busybox\n      command: [sh, -c]\n      args: [\"echo $PRODUCT_ID\"]\n    inputs:\n      parameters:\n      - name: product-name\n  - name: add-product-to-cart\n    container:\n      image: busybox\n      command: [sh, -c]\n      args: [\"echo AddProductToCart({{inputs.parameters.product_ID}}, {{inputs.parameters.customer_ID}}, {{inputs.parameters.quantity}})\"]\n    inputs:\n      parameters:\n      - name: product_ID\n      - name: customer_ID\n      - name: quantity"
  },
  {
    "Id": 307,
    "status": "Success",
    "workflow": "apiVersion: argoproj.io/v1alpha1\nkind: Workflow\nmetadata:\n  generateName: trip-planning-workflow-\nspec:\n  entrypoint: main\n  templates:\n  - name: main\n    dag:\n      tasks:\n      - name: find-flights\n        template: find-flights\n        arguments:\n          parameters:\n          - name: cityDeparture\n            value: '{{{{ inputs.parameters.cityDeparture }}}}'\n          - name: cityArrival\n            value: '{{{{ inputs.parameters.cityArrival }}}}'\n          - name: date\n            value: '{{{{ inputs.parameters.date }}}}'\n      - name: find-hotels\n        template: find-hotels\n        arguments:\n          parameters:\n          - name: city\n            value: '{{{{ inputs.parameters.cityArrival }}}}'\n      - name: find-restaurants\n        template: find-restaurants\n        arguments:\n          parameters:\n          - name: city\n            value: '{{{{ inputs.parameters.cityArrival }}}}'\n      - name: plan-trip\n        template: plan-trip\n        dependencies:\n        - find-hotels\n        - find-restaurants\n        arguments:\n          parameters:\n          - name: hotel\n            value: '{{{{ tasks.find-hotels.result }}}}'\n          - name: restaurants\n            value: '{{{{ tasks.find-restaurants.result }}}}'\n      - name: create-travel-plan\n        template: create-travel-plan\n        dependencies:\n        - find-flights\n        - find-hotels\n        arguments:\n          parameters:\n          - name: flight\n            value: '{{{{ tasks.find-flights.result }}}}'\n          - name: accommodation\n            value: '{{{{ tasks.find-hotels.result }}}}'\n      - name: arrange-transportation\n        template: arrange-transportation\n        arguments:\n          parameters:\n          - name: city\n            value: '{{{{ inputs.parameters.cityArrival }}}}'\n          - name: date\n            value: '{{{{ inputs.parameters.date }}}}'\n      - name: book-trip\n        template: book-trip\n        dependencies:\n        - find-flights\n        - find-hotels\n        arguments:\n          parameters:\n          - name: flight\n            value: '{{{{ tasks.find-flights.result }}}}'\n          - name: hotel\n            value: '{{{{ tasks.find-hotels.result }}}}'\n      - name: plan-itinerary\n        template: plan-itinerary\n        dependencies:\n        - find-flights\n        - find-hotels\n        - find-restaurants\n        arguments:\n          parameters:\n          - name: location\n            value: '{{{{ inputs.parameters.cityArrival }}}}'\n          - name: interests\n            value: '{{{{ inputs.parameters.interests }}}}'\n          - name: flight\n            value: '{{{{ tasks.find-flights.result }}}}'\n          - name: hotel\n            value: '{{{{ tasks.find-hotels.result }}}}'\n  inputs:\n    parameters:\n    - name: cityDeparture\n      value: '{{{{ inputs.parameters.cityDeparture }}}}'\n    - name: cityArrival\n      value: 'Los Angeles'\n    - name: date\n      value: '{{{{ inputs.parameters.date }}}}'\n    - name: interests\n      value: '{{{{ inputs.parameters.interests }}}}'"
  },
  {
    "Id": 310,
    "status": "Success",
    "workflow": "apiVersion: argoproj.io/v1alpha1\nkind: Workflow\nmetadata:\n  generateName: dining-suggestions-workflow-\nspec:\n  entrypoint: main\n  templates:\n  - name: main\n    dag:\n      tasks:\n      - name: find-popular-dishes\n        template: find-popular-dishes\n        arguments:\n          parameters:\n          - name: city\n            value: '{{{{ inputs.parameters.city }}}}'\n      - name: top-restaurants\n        template: top-restaurants\n        dependencies:\n        - find-popular-dishes\n        arguments:\n          parameters:\n          - name: city\n            value: '{{{{ inputs.parameters.city }}}}'\n      - name: restaurant-price-range\n        template: restaurant-price-range\n        dependencies:\n        - top-restaurants\n        arguments:\n          parameters:\n          - name: city\n            value: '{{{{ inputs.parameters.city }}}}'\n          - name: restaurant\n            value: '{{{{ tasks.top-restaurants.result }}}}'\n      - name: suggest-dining-options\n        template: suggest-dining-options\n        dependencies:\n        - restaurant-price-range\n        arguments:\n          parameters:\n          - name: localBudget\n            value: '{{{{ inputs.parameters.localBudget }}}}'\n          - name: location\n            value: '{{{{ inputs.parameters.city }}}}'\n  inputs:\n    parameters:\n    - name: city\n      value: 'Paris'\n    - name: localBudget\n      value: '300'\n  templates:\n  - name: find-popular-dishes\n    container:\n      image: appropriate/curl:latest\n      command: [sh, -c]\n      args: [\"curl -X POST -H 'Content-Type: application/json' -d '{\\\"city\\\": \\\"${city}\\\"}' http://<find-popular-dishes-api-url>/FindPopularDishes\"]\n      env:\n      - name: city\n        value: '{{{{ inputs.parameters.city }}}}'\n  - name: top-restaurants\n    container:\n      image: appropriate/curl:latest\n      command: [sh, -c]\n      args: [\"curl -X POST -H 'Content-Type: application/json' -d '{\\\"city\\\": \\\"${city}\\\"}' http://<top-restaurants-api-url>/TopRestaurants\"]\n      env:\n      - name: city\n        value: '{{{{ inputs.parameters.city }}}}'\n  - name: restaurant-price-range\n    container:\n      image: appropriate/curl:latest\n      command: [sh, -c]\n      args: [\"curl -X POST -H 'Content-Type: application/json' -d '{\\\"city\\\": \\\"${city}\\\", \\\"restaurant\\\": \\\"${restaurant}\\\"}' http://<restaurant-price-range-api-url>/RestaurantPriceRange\"]\n      env:\n      - name: city\n        value: '{{{{ inputs.parameters.city }}}}'\n      - name: restaurant\n        value: '{{{{ inputs.parameters.restaurant }}}}'\n  - name: suggest-dining-options\n    container:\n      image: appropriate/curl:latest\n      command: [sh, -c]\n      args: [\"curl -X POST -H 'Content-Type: application/json' -d '{\\\"localBudget\\\": \\\"${localBudget}\\\", \\\"location\\\": \\\"${location}\\\"}' http://<suggest-dining-options-api-url>/SuggestDiningOptions\"]\n      env:\n      - name: localBudget\n        value: '{{{{ inputs.parameters.localBudget }}}}'\n      - name: location\n        value: '{{{{ inputs.parameters.city }}}}'"
  },
  {
    "Id": 429,
    "status": "Success",
    "workflow": "apiVersion: argoproj.io/v1alpha1\nkind: Workflow\nmetadata:\n  generateName: add-to-cart-workflow-\nspec:\n  entrypoint: main\n  templates:\n  - name: main\n    dag:\n      tasks:\n      - name: username2userid\n        template: username2userid\n        arguments:\n          parameters:\n          - name: username\n            value: '{{{{ inputs.parameters.username }}}}'\n      - name: productname2productid\n        template: productname2productid\n        arguments:\n          parameters:\n          - name: productname\n            value: '{{{{ inputs.parameters.productname }}}}'\n      - name: addproducttocart\n        template: addproducttocart\n        dependencies:\n        - username2userid\n        - productname2productid\n        arguments:\n          parameters:\n          - name: product_ID\n            value: '{{{{ tasks.productname2productid.result }}}}'\n          - name: customer_ID\n            value: '{{{{ tasks.username2userid.result }}}}'\n          - name: quantity\n            value: '{{{{ inputs.parameters.quantity }}}}'\n  - name: username2userid\n    container:\n      image: appropriate/curl:latest\n      command: [sh, -c]\n      args: [\"curl -X GET http://example.com/api/username2userid?username={{inputs.parameters.username}}\"]\n      inputs:\n        parameters:\n        - name: username\n  - name: productname2productid\n    container:\n      image: appropriate/curl:latest\n      command: [sh, -c]\n      args: [\"curl -X GET http://example.com/api/productname2productid?productname={{inputs.parameters.productname}}\"]\n      inputs:\n        parameters:\n        - name: productname\n  - name: addproducttocart\n    container:\n      image: appropriate/curl:latest\n      command: [sh, -c]\n      args: [\"curl -X POST http://example.com/api/addproducttocart -d 'product_ID={{inputs.parameters.product_ID}}&customer_ID={{inputs.parameters.customer_ID}}&quantity={{inputs.parameters.quantity}}'\"]\n      inputs:\n        parameters:\n        - name: product_ID\n        - name: customer_ID\n        - name: quantity"
  },
  {
    "Id": 431,
    "status": "Success",
    "workflow": "apiVersion: argoproj.io/v1alpha1\nkind: Workflow\nmetadata:\n  generateName: dependency-workflow-1542-\nspec:\n  entrypoint: main\n  templates:\n  - name: main\n    dag:\n      tasks:\n      - name: getuserid\n        template: getuserid\n        arguments:\n          parameters:\n          - name: username\n            value: '{{{{ inputs.parameters.username }}}}'\n      - name: movietitle2movieid\n        template: movietitle2movieid\n        arguments:\n          parameters:\n          - name: movie_title\n            value: '{{{{ inputs.parameters.movie_title }}}}'\n      - name: rentmovie\n        template: rentmovie\n        dependencies:\n        - getuserid\n        - movietitle2movieid\n        arguments:\n          parameters:\n          - name: user_ID\n            value: '{{{{ tasks.getuserid.result }}}}'\n          - name: movie_ID\n            value: '{{{{ tasks.movietitle2movieid.result }}}}'\n          - name: date\n            value: '{{{{ inputs.parameters.date }}}}'\n  - name: getuserid\n    container:\n      image: appropriate/curl:latest\n      command: [sh, -c]\n      args: [\"curl -X GET http://example.com/api/getuserid?username=${USERNAME}\"]\n      env:\n      - name: USERNAME\n        value: '{{{{ inputs.parameters.username }}}}'\n  - name: movietitle2movieid\n    container:\n      image: appropriate/curl:latest\n      command: [sh, -c]\n      args: [\"curl -X GET http://example.com/api/movietitle2movieid?title=${MOVIE_TITLE}\"]\n      env:\n      - name: MOVIE_TITLE\n        value: '{{{{ inputs.parameters.movie_title }}}}'\n  - name: rentmovie\n    container:\n      image: appropriate/curl:latest\n      command: [sh, -c]\n      args: [\"curl -X POST http://example.com/api/rentmovie -d user_ID=${USER_ID} -d movie_ID=${MOVIE_ID} -d date=${DATE}\"]\n      env:\n      - name: USER_ID\n        value: '{{{{ inputs.parameters.user_ID }}}}'\n      - name: MOVIE_ID\n        value: '{{{{ inputs.parameters.movie_ID }}}}'\n      - name: DATE\n        value: '{{{{ inputs.parameters.date }}}}'"
  },
  {
    "Id": 440,
    "status": "Success",
    "workflow": "apiVersion: argoproj.io/v1alpha1\nkind: Workflow\nmetadata:\n  generateName: play-song-workflow-\nspec:\n  entrypoint: main\n  templates:\n  - name: main\n    dag:\n      tasks:\n      - name: getuserid\n        template: getuserid\n        arguments:\n          parameters:\n          - name: username\n            value: '{{{{ inputs.parameters.username }}}}'\n      - name: songtitletoid\n        template: songtitletoid\n        arguments:\n          parameters:\n          - name: song_title\n            value: '{{{{ inputs.parameters.song_title }}}}'\n      - name: playsong\n        template: playsong\n        dependencies:\n        - getuserid\n        - songtitletoid\n        arguments:\n          parameters:\n          - name: user_ID\n            value: '{{{{ tasks.getuserid.result }}}}'\n          - name: song_ID\n            value: '{{{{ tasks.songtitletoid.result }}}}'\n  - name: getuserid\n    container:\n      image: your-image-here\n      command: [sh, -c]\n      args: [\"your-command-here getuserid {{inputs.parameters.username}}\"]\n    inputs:\n      parameters:\n      - name: username\n  - name: songtitletoid\n    container:\n      image: your-image-here\n      command: [sh, -c]\n      args: [\"your-command-here songtitletoid {{inputs.parameters.song_title}}\"]\n    inputs:\n      parameters:\n      - name: song_title\n  - name: playsong\n    container:\n      image: your-image-here\n      command: [sh, -c]\n      args: [\"your-command-here playsong {{inputs.parameters.user_ID}} {{inputs.parameters.song_ID}}\"]\n    inputs:\n      parameters:\n      - name: user_ID\n      - name: song_ID"
  },
  {
    "Id": 447,
    "status": "Success",
    "workflow": "apiVersion: argoproj.io/v1alpha1\nkind: Workflow\nmetadata:\n  generateName: dependency-workflow-indian-dish-chicago-\nspec:\n  entrypoint: main\n  templates:\n  - name: main\n    dag:\n      tasks:\n      - name: findpopulardishes\n        template: findpopulardishes\n        arguments:\n          parameters:\n          - name: city\n            value: '{{{{ inputs.parameters.city }}}}'\n      - name: getrestaurant\n        template: getrestaurant\n        dependencies:\n        - findpopulardishes\n        arguments:\n          parameters:\n          - name: city\n            value: '{{{{ inputs.parameters.city }}}}'\n          - name: cuisine\n            value: 'Indian'\n      - name: recommenditems\n        template: recommenditems\n        dependencies:\n        - getrestaurant\n        arguments:\n          parameters:\n          - name: restaurant_name\n            value: '{{{{ tasks.getrestaurant.result }}}}'\n      - name: menuselection\n        template: menuselection\n        dependencies:\n        - getrestaurant\n        - findpopulardishes\n        arguments:\n          parameters:\n          - name: restaurantInfo\n            value: '{{{{ tasks.getrestaurant.result }}}}'\n          - name: cuisineRec\n            value: '{{{{ tasks.findpopulardishes.result }}}}'\n      - name: recommenddish\n        template: recommenddish\n        dependencies:\n        - menuselection\n        arguments:\n          parameters:\n          - name: menu\n            value: '{{{{ tasks.menuselection.result }}}}'\n      - name: dishfinder\n        template: dishfinder\n        dependencies:\n        - getrestaurant\n        - recommenddish\n        arguments:\n          parameters:\n          - name: restaurant\n            value: '{{{{ tasks.getrestaurant.result }}}}'\n          - name: dish\n            value: '{{{{ tasks.recommenddish.result }}}}'\n      - name: foodreview\n        template: foodreview\n        dependencies:\n        - dishfinder\n        arguments:\n          parameters:\n          - name: dish_details\n            value: '{{{{ tasks.dishfinder.result }}}}'\n  inputs:\n    parameters:\n    - name: city\n      value: 'Chicago'"
  },
  {
    "Id": 448,
    "status": "Success",
    "workflow": "apiVersion: argoproj.io/v1alpha1\nkind: Workflow\nmetadata:\n  generateName: dependency-workflow-1234-\nspec:\n  entrypoint: main\n  templates:\n  - name: main\n    dag:\n      tasks:\n      - name: arrange-transportation\n        template: arrange-transportation\n        arguments:\n          parameters:\n          - name: city\n            value: '{{{{ inputs.parameters.city }}}}'\n          - name: date\n            value: '{{{{ inputs.parameters.date }}}}'\n      - name: plan-trip\n        template: plan-trip\n        dependencies:\n        - arrange-transportation\n        arguments:\n          parameters:\n          - name: hotel\n            value: '{{{{ inputs.parameters.hotel }}}}'\n          - name: restaurants\n            value: '{{{{ inputs.parameters.restaurants }}}}'\n      - name: book-trip\n        template: book-trip\n        dependencies:\n        - plan-trip\n        arguments:\n          parameters:\n          - name: flight\n            value: '{{{{ tasks.arrange-transportation.result }}}}'\n          - name: hotel\n            value: '{{{{ inputs.parameters.hotel }}}}'\n      - name: plan-itinerary\n        template: plan-itinerary\n        dependencies:\n        - book-trip\n        arguments:\n          parameters:\n          - name: location\n            value: '{{{{ inputs.parameters.city }}}}'\n          - name: interests\n            value: '{{{{ inputs.parameters.interests }}}}'\n          - name: flight\n            value: '{{{{ tasks.arrange-transportation.result }}}}'\n          - name: hotel\n            value: '{{{{ inputs.parameters.hotel }}}}'\n  - name: arrange-transportation\n    inputs:\n      parameters:\n      - name: city\n      - name: date\n    outputs:\n      parameters:\n      - name: transportation\n        valueFrom:\n          path: /tmp/transportation\n    container:\n      image: your-image-here\n      command: [sh, -c]\n      args: [\"ArrangeTransportation {{inputs.parameters.city}} {{inputs.parameters.date}} > /tmp/transportation\"]\n  - name: plan-trip\n    inputs:\n      parameters:\n      - name: hotel\n      - name: restaurants\n    outputs:\n      parameters:\n      - name: trip\n        valueFrom:\n          path: /tmp/trip\n    container:\n      image: your-image-here\n      command: [sh, -c]\n      args: [\"PlanTrip {{inputs.parameters.hotel}} {{inputs.parameters.restaurants}} > /tmp/trip\"]\n  - name: book-trip\n    inputs:\n      parameters:\n      - name: flight\n      - name: hotel\n    outputs:\n      parameters:\n      - name: booking-status\n        valueFrom:\n          path: /tmp/booking-status\n    container:\n      image: your-image-here\n      command: [sh, -c]\n      args: [\"BookTrip {{inputs.parameters.flight}} {{inputs.parameters.hotel}} > /tmp/booking-status\"]\n  - name: plan-itinerary\n    inputs:\n      parameters:\n      - name: location\n      - name: interests\n      - name: flight\n      - name: hotel\n    outputs:\n      parameters:\n      - name: itinerary\n        valueFrom:\n          path: /tmp/itinerary\n    container:\n      image: your-image-here\n      command: [sh, -c]\n      args: [\"PlanItinerary {{inputs.parameters.location}} {{inputs.parameters.interests}} {{inputs.parameters.flight}} {{inputs.parameters.hotel}} > /tmp/itinerary\"]"
  },
  {
    "Id": 455,
    "status": "Success",
    "workflow": "apiVersion: argoproj.io/v1alpha1\nkind: Workflow\nmetadata:\n  generateName: dependency-workflow-1542-\nspec:\n  entrypoint: main\n  templates:\n  - name: main\n    dag:\n      tasks:\n      - name: getbookreview\n        template: getbookreview\n        arguments:\n          parameters:\n          - name: bookname\n            value: '{{{{ inputs.parameters.bookname }}}}'\n      - name: sharereview\n        template: sharereview\n        dependencies:\n        - getbookreview\n        arguments:\n          parameters:\n          - name: review\n            value: '{{{{ tasks.getbookreview.result }}}}'\n          - name: social_media_platform\n            value: '{{{{ inputs.parameters.social_media_platform }}}}'\n  - name: getbookreview\n    inputs:\n      parameters:\n      - name: bookname\n    container:\n      image: your-image-here\n      command: [sh, -c]\n      args: [\"GetReview('{{{{ inputs.parameters.bookname }}}}')\"]\n  - name: sharereview\n    inputs:\n      parameters:\n      - name: review\n      - name: social_media_platform\n    container:\n      image: your-image-here\n      command: [sh, -c]\n      args: [\"ShareReview('{{{{ inputs.parameters.review }}}}', '{{{{ inputs.parameters.social_media_platform }}}}')\"]"
  },
  {
    "Id": 468,
    "status": "Success",
    "workflow": "apiVersion: argoproj.io/v1alpha1\nkind: Workflow\nmetadata:\n  generateName: confirm-cardiologist-appointment-\nspec:\n  entrypoint: main\n  templates:\n  - name: main\n    dag:\n      tasks:\n      - name: find-doctor\n        template: find-doctor\n        arguments:\n          parameters:\n          - name: specialty\n            value: '{{{{ inputs.parameters.specialty }}}}'\n          - name: location\n            value: '{{{{ inputs.parameters.location }}}}'\n      - name: create-appointment\n        template: create-appointment\n        dependencies:\n        - find-doctor\n        arguments:\n          parameters:\n          - name: doctorId\n            value: '{{{{ tasks.find-doctor.result.doctorId }}}}'\n          - name: patientId\n            value: '{{{{ inputs.parameters.patientId }}}}'\n          - name: date\n            value: '{{{{ inputs.parameters.date }}}}'\n          - name: time\n            value: '{{{{ inputs.parameters.time }}}}'\n      - name: get-appointment\n        template: get-appointment\n        dependencies:\n        - create-appointment\n        arguments:\n          parameters:\n          - name: doctor_id\n            value: '{{{{ tasks.create-appointment.result.doctorId }}}}'\n          - name: date\n            value: '{{{{ inputs.parameters.date }}}}'\n      - name: confirm-appointment\n        template: confirm-appointment\n        dependencies:\n        - get-appointment\n        arguments:\n          parameters:\n          - name: appointment_id\n            value: '{{{{ tasks.get-appointment.result.appointmentId }}}}'\n  - name: find-doctor\n    inputs:\n      parameters:\n      - name: specialty\n      - name: location\n    container:\n      image: your-image-here\n      command: [\"FindDoctor\"]\n      args: [\"{{{{ inputs.parameters.specialty }}}}\", \"{{{{ inputs.parameters.location }}}}\"]\n  - name: create-appointment\n    inputs:\n      parameters:\n      - name: doctorId\n      - name: patientId\n      - name: date\n      - name: time\n    container:\n      image: your-image-here\n      command: [\"CreateAppointment\"]\n      args: [\"{{{{ inputs.parameters.doctorId }}}}\", \"{{{{ inputs.parameters.patientId }}}}\", \"{{{{ inputs.parameters.date }}}}\", \"{{{{ inputs.parameters.time }}}}\")]\n  - name: get-appointment\n    inputs:\n      parameters:\n      - name: doctor_id\n      - name: date\n    container:\n      image: your-image-here\n      command: [\"GetAppointment\"]\n      args: [\"{{{{ inputs.parameters.doctor_id }}}}\", \"{{{{ inputs.parameters.date }}}}\")]\n  - name: confirm-appointment\n    inputs:\n      parameters:\n      - name: appointment_id\n    container:\n      image: your-image-here\n      command: [\"ConfirmAppointment\"]\n      args: [\"{{{{ inputs.parameters.appointment_id }}}}\""
  },
  {
    "Id": 512,
    "status": "Success",
    "workflow": "apiVersion: argoproj.io/v1alpha1\nkind: Workflow\nmetadata:\n  generateName: product-rating-workflow-\nspec:\n  entrypoint: main\n  templates:\n  - name: main\n    dag:\n      tasks:\n      - name: productrating\n        template: productrating\n        arguments:\n          parameters:\n          - name: purchase_info\n            value: '{}'\n          - name: number_of_ratings\n            value: '{{{{ inputs.parameters.number_of_ratings }}}}'\n  inputs:\n    parameters:\n    - name: number_of_ratings\n      value: '10'"
  },
  {
    "Id": 532,
    "status": "Success",
    "workflow": "apiVersion: argoproj.io/v1alpha1\nkind: Workflow\nmetadata:\n  generateName: nearest-cinema-workflow-\nspec:\n  entrypoint: main\n  templates:\n  - name: main\n    dag:\n      tasks:\n      - name: check-cinema-schedule\n        template: check-cinema-schedule\n        arguments:\n          parameters:\n          - name: movie_details\n            value: '{{{{ inputs.parameters.movie_name }}}}'\n      - name: find-nearest-cinema\n        template: find-nearest-cinema\n        dependencies:\n        - check-cinema-schedule\n        arguments:\n          parameters:\n          - name: movieDetails\n            value: '{{{{ inputs.parameters.movie_name }}}}'\n      - name: get-local-theater\n        template: get-local-theater\n        dependencies:\n        - find-nearest-cinema\n        arguments:\n          parameters:\n          - name: city\n            value: '{{{{ inputs.parameters.city }}}}'\n  - name: check-cinema-schedule\n    inputs:\n      parameters:\n      - name: movie_details\n    container:\n      image: your-api-image\n      command: [sh, -c]\n      args: [\"CheckCinemaSchedule({{inputs.parameters.movie_details}})\"]\n  - name: find-nearest-cinema\n    inputs:\n      parameters:\n      - name: movieDetails\n    container:\n      image: your-api-image\n      command: [sh, -c]\n      args: [\"FindNearestCinema({{inputs.parameters.movieDetails}})\"]\n  - name: get-local-theater\n    inputs:\n      parameters:\n      - name: city\n    container:\n      image: your-api-image\n      command: [sh, -c]\n      args: [\"GetLocalTheater({{inputs.parameters.city}})\"]"
  },
  {
    "Id": 537,
    "status": "Success",
    "workflow": "apiVersion: argoproj.io/v1alpha1\nkind: Workflow\nmetadata:\n  generateName: dependency-workflow-vegan-dining-\nspec:\n  entrypoint: main\n  templates:\n  - name: main\n    dag:\n      tasks:\n      - name: getrestaurantinfo\n        template: getrestaurantinfo\n        arguments:\n          parameters:\n          - name: restaurant_name\n            value: '{{{{ inputs.parameters.restaurant_name }}}}'\n      - name: cuisinerecommendations\n        template: cuisinerecommendations\n        arguments:\n          parameters:\n          - name: review_report\n            value: '{{{{ tasks.getrestaurantinfo.result.review_report }}}}'\n          - name: dietary_preferences\n            value: '{{{{ inputs.parameters.dietary_preferences }}}}'\n      - name: menuselection\n        template: menuselection\n        dependencies:\n        - getrestaurantinfo\n        - cuisinerecommendations\n        arguments:\n          parameters:\n          - name: restaurantInfo\n            value: '{{{{ tasks.getrestaurantinfo.result }}}}'\n          - name: cuisineRec\n            value: '{{{{ tasks.cuisinerecommendations.result }}}}'\n      - name: suggestfood\n        template: suggestfood\n        dependencies:\n        - menuselection\n        arguments:\n          parameters:\n          - name: menu\n            value: '{{{{ tasks.menuselection.result.selectedMenu }}}}'\n          - name: dietary_preferences\n            value: '{{{{ inputs.parameters.dietary_preferences }}}}'\n      - name: bestorder\n        template: bestorder\n        dependencies:\n        - getrestaurantinfo\n        - suggestfood\n        arguments:\n          parameters:\n          - name: restaurant_info\n            value: '{{{{ tasks.getrestaurantinfo.result }}}}'\n          - name: food_list\n            value: '{{{{ tasks.suggestfood.result }}}}'\n\n  - name: getrestaurantinfo\n    container:\n      image: appropriate/curl:latest\n      command: [sh, -c]\n      args: [\"curl -X GET http://example.com/api/restaurantinfo?name=${restaurant_name}\"]\n    inputs:\n      parameters:\n      - name: restaurant_name\n\n  - name: cuisinerecommendations\n    container:\n      image: appropriate/curl:latest\n      command: [sh, -c]\n      args: [\"curl -X GET http://example.com/api/cuisinerecommendations?review_report=${review_report}&dietary_preferences=${dietary_preferences}\"]\n    inputs:\n      parameters:\n      - name: review_report\n      - name: dietary_preferences\n\n  - name: menuselection\n    container:\n      image: appropriate/curl:latest\n      command: [sh, -c]\n      args: [\"curl -X GET http://example.com/api/menuselection?restaurantInfo=${restaurantInfo}&cuisineRec=${cuisineRec}\"]\n    inputs:\n      parameters:\n      - name: restaurantInfo\n      - name: cuisineRec\n\n  - name: suggestfood\n    container:\n      image: appropriate/curl:latest\n      command: [sh, -c]\n      args: [\"curl -X GET http://example.com/api/suggestfood?menu=${menu}&dietary_preferences=${dietary_preferences}\"]\n    inputs:\n      parameters:\n      - name: menu\n      - name: dietary_preferences\n\n  - name: bestorder\n    container:\n      image: appropriate/curl:latest\n      command: [sh, -c]\n      args: [\"curl -X GET http://example.com/api/bestorder?restaurant_info=${restaurant_info}&food_list=${food_list}\"]\n    inputs:\n      parameters:\n      - name: restaurant_info\n      - name: food_list"
  },
  {
    "Id": 540,
    "status": "Success",
    "workflow": "apiVersion: argoproj.io/v1alpha1\nkind: Workflow\nmetadata:\n  generateName: coachella-weather-forecast-\nspec:\n  entrypoint: main\n  templates:\n  - name: main\n    dag:\n      tasks:\n      - name: get-coachella-location\n        template: get-coachella-location\n      - name: predict-weather\n        template: predict-weather\n        dependencies:\n        - get-coachella-location\n        arguments:\n          parameters:\n          - name: coordinates\n            value: '{{{{ tasks.get-coachella-location.result }}}}'\n          - name: date\n            value: '{{{{ inputs.parameters.start_date }}}}'\n      - name: weather-code-to-forecast\n        template: weather-code-to-forecast\n        dependencies:\n        - predict-weather\n        arguments:\n          parameters:\n          - name: weather_code\n            value: '{{{{ tasks.predict-weather.result }}}}'\n          - name: date\n            value: '{{{{ inputs.parameters.start_date }}}}'\n  inputs:\n    parameters:\n    - name: start_date\n      value: '2023-04-21'  # Example date for the Coachella festival start"
  },
  {
    "Id": 560,
    "status": "Success",
    "workflow": "apiVersion: argoproj.io/v1alpha1\nkind: Workflow\nmetadata:\n  generateName: add-book-to-author-library-\nspec:\n  entrypoint: main\n  templates:\n  - name: main\n    dag:\n      tasks:\n      - name: getauthorid\n        template: getauthorid\n        arguments:\n          parameters:\n          - name: author_name\n            value: '{{{{ inputs.parameters.author_name }}}}'\n      - name: getbookid\n        template: getbookid\n        arguments:\n          parameters:\n          - name: book_title\n            value: '{{{{ inputs.parameters.book_title }}}}'\n      - name: addbooktoauthor\n        template: addbooktoauthor\n        dependencies:\n        - getauthorid\n        - getbookid\n        arguments:\n          parameters:\n          - name: author_ID\n            value: '{{{{ tasks.getauthorid.result }}}}'\n          - name: book_ID\n            value: '{{{{ tasks.getbookid.result }}}}'\n  - name: getauthorid\n    container:\n      image: your-image-here\n      command: [sh, -c]\n      args: [\"echo $((your-command-to-get-author-id))\"]\n      env:\n      - name: author_name\n        value: '{{{{ inputs.parameters.author_name }}}}'\n  - name: getbookid\n    container:\n      image: your-image-here\n      command: [sh, -c]\n      args: [\"echo $((your-command-to-get-book-id))\"]\n      env:\n      - name: book_title\n        value: '{{{{ inputs.parameters.book_title }}}}'\n  - name: addbooktoauthor\n    container:\n      image: your-image-here\n      command: [sh, -c]\n      args: [\"echo $((your-command-to-add-book-to-author))\"]\n      env:\n      - name: author_ID\n        value: '{{{{ inputs.parameters.author_ID }}}}'\n      - name: book_ID\n        value: '{{{{ inputs.parameters.book_ID }}}}'"
  },
  {
    "Id": 582,
    "status": "Success",
    "workflow": "apiVersion: argoproj.io/v1alpha1\nkind: Workflow\nmetadata:\n  generateName: flight-booking-workflow-\nspec:\n  entrypoint: main\n  templates:\n  - name: main\n    dag:\n      tasks:\n      - name: check-flight-availability\n        template: check-flight-availability\n        arguments:\n          parameters:\n          - name: flight_code\n            value: '{{{{ inputs.parameters.flight_code }}}}'\n          - name: date\n            value: '{{{{ inputs.parameters.date }}}}'\n      - name: book-flight\n        template: book-flight\n        dependencies:\n        - check-flight-availability\n        arguments:\n          parameters:\n          - name: flight_details\n            value: '{{{{ tasks.check-flight-availability.result }}}}'\n          - name: preferred_flight_class\n            value: '{{{{ inputs.parameters.preferred_flight_class }}}}'\n  inputs:\n    parameters:\n    - name: flight_code\n      value: 'LH 1112'\n    - name: date\n      value: 'July 15th'\n    - name: preferred_flight_class\n      value: 'Economy'\n  templates:\n  - name: check-flight-availability\n    container:\n      image: your-api-image\n      command: [sh, -c]\n      args: [\"CheckFlightAvailability {{inputs.parameters.flight_code}}, {{inputs.parameters.date}}\"]\n  - name: book-flight\n    container:\n      image: your-api-image\n      command: [sh, -c]\n      args: [\"BookFlight {{inputs.parameters.flight_details}}, {{inputs.parameters.preferred_flight_class}}\"]"
  },
  {
    "Id": 591,
    "status": "Success",
    "workflow": "apiVersion: argoproj.io/v1alpha1\nkind: Workflow\nmetadata:\n  generateName: chocolate-cake-recipe-\nspec:\n  entrypoint: main\n  templates:\n  - name: main\n    dag:\n      tasks:\n      - name: find-recipe\n        template: find-recipe\n        arguments:\n          parameters:\n          - name: dish\n            value: '{{{{ inputs.parameters.dish }}}}'\n      - name: get-recipe-id\n        template: get-recipe-id\n        dependencies:\n        - find-recipe\n        arguments:\n          parameters:\n          - name: recipe_name\n            value: '{{{{ tasks.find-recipe.result }}}}'\n      - name: get-ingredients-list\n        template: get-ingredients-list\n        dependencies:\n        - find-recipe\n        arguments:\n          parameters:\n          - name: Recipe\n            value: '{{{{ tasks.find-recipe.result }}}}'\n      - name: check-pantry\n        template: check-pantry\n        dependencies:\n        - find-recipe\n        arguments:\n          parameters:\n          - name: recipe\n            value: '{{{{ tasks.find-recipe.result }}}}'\n      - name: grocery-list\n        template: grocery-list\n        dependencies:\n        - check-pantry\n        - find-recipe\n        arguments:\n          parameters:\n          - name: available_ingredients\n            value: '{{{{ tasks.check-pantry.result }}}}'\n          - name: recipe\n            value: '{{{{ tasks.find-recipe.result }}}}'\n      - name: get-recipe-instructions\n        template: get-recipe-instructions\n        dependencies:\n        - find-recipe\n        arguments:\n          parameters:\n          - name: recipe_name\n            value: '{{{{ tasks.find-recipe.result }}}}'\n  inputs:\n    parameters:\n    - name: dish\n      value: 'Chocolate Cake'\n    - name: ingredient\n      value: 'Cocoa Powder'"
  },
  {
    "Id": 601,
    "status": "Success",
    "workflow": ""
  },
  {
    "Id": 605,
    "status": "Success",
    "workflow": "apiVersion: argoproj.io/v1alpha1\nkind: Workflow\nmetadata:\n  generateName: dependency-workflow-123-\nspec:\n  entrypoint: main\n  templates:\n  - name: main\n    dag:\n      tasks:\n      - name: email2userid\n        template: email2userid\n        arguments:\n          parameters:\n          - name: email\n            value: '{{{{ inputs.parameters.email }}}}'\n      - name: checkauthoravailability\n        template: checkauthoravailability\n        dependencies:\n        - email2userid\n        arguments:\n          parameters:\n          - name: user_ID\n            value: '{{{{ tasks.email2userid.result }}}}'\n          - name: author_name\n            value: '{{{{ inputs.parameters.author_name }}}}'\n      - name: schedulediscussion\n        template: schedulediscussion\n        dependencies:\n        - checkauthoravailability\n        arguments:\n          parameters:\n          - name: user_ID\n            value: '{{{{ tasks.email2userid.result }}}}'\n          - name: author_name\n            value: '{{{{ inputs.parameters.author_name }}}}'\n          - name: date_time\n            value: '{{{{ inputs.parameters.date_time }}}}'\n  inputs:\n    parameters:\n    - name: email\n      value: 'mike@gmail.com'\n    - name: author_name\n      value: 'J.D. Salinger'\n    - name: date_time\n      value: 'May 15th'"
  },
  {
    "Id": 625,
    "status": "Success",
    "workflow": "apiVersion: argoproj.io/v1alpha1\nkind: Workflow\nmetadata:\n  generateName: weather-report-Paris-\nspec:\n  entrypoint: main\n  templates:\n  - name: main\n    dag:\n      tasks:\n      - name: get-current-weather\n        template: get-current-weather\n        arguments:\n          parameters:\n          - name: city\n            value: '{{{{ inputs.parameters.city }}}}'\n      - name: generate-weather-report\n        template: generate-weather-report\n        dependencies:\n        - get-current-weather\n        arguments:\n          parameters:\n          - name: weather_data\n            value: '{{{{ tasks.get-current-weather.result }}}}'\n  - name: get-current-weather\n    container:\n      image: appropriate/curl:latest\n      command: [sh, -c]\n      args: [\"curl -X GET 'http://example.com/api/Weather?city=Paris'\"]\n      outputs:\n        parameters:\n        - name: result\n          valueFrom:\n            jsonPath: '{.condition}'\n  - name: generate-weather-report\n    container:\n      image: appropriate/curl:latest\n      command: [sh, -c]\n      args: [\"curl -X POST 'http://example.com/api/GenerateWeatherReport' -d 'weather_data=$(inputs.parameters.weather_data)'\"]\n      inputs:\n        parameters:\n        - name: weather_data"
  },
  {
    "Id": 641,
    "status": "Success",
    "workflow": "apiVersion: argoproj.io/v1alpha1\nkind: Workflow\nmetadata:\n  generateName: weather-guidance-workflow-\nspec:\n  entrypoint: main\n  templates:\n  - name: main\n    dag:\n      tasks:\n      - name: getuserlocation\n        template: getuserlocation\n        arguments:\n          parameters:\n          - name: username\n            value: '{{{{ inputs.parameters.username }}}}'\n      - name: checkweather\n        template: checkweather\n        dependencies:\n        - getuserlocation\n        arguments:\n          parameters:\n          - name: location\n            value: '{{{{ tasks.getuserlocation.result }}}}'\n      - name: Weather2Advice\n        template: Weather2Advice\n        dependencies:\n        - checkweather\n        arguments:\n          parameters:\n          - name: weather\n            value: '{{{{ tasks.checkweather.result }}}}'\n      - name: GetClothingAdvice\n        template: GetClothingAdvice\n        dependencies:\n        - checkweather\n        arguments:\n          parameters:\n          - name: weather\n            value: '{{{{ tasks.checkweather.result }}}}'\n      - name: GetRecommendedClothing\n        template: GetRecommendedClothing\n        dependencies:\n        - checkweather\n        arguments:\n          parameters:\n          - name: weather\n            value: '{{{{ tasks.checkweather.result }}}}'\n      - name: RecommendOutfit\n        template: RecommendOutfit\n        dependencies:\n        - checkweather\n        arguments:\n          parameters:\n          - name: weather\n            value: '{{{{ tasks.checkweather.result }}}}'\n      - name: RecommendAttire\n        template: RecommendAttire\n        dependencies:\n        - checkweather\n        arguments:\n          parameters:\n          - name: weather\n            value: '{{{{ tasks.checkweather.result }}}}'\n      - name: OutfitRecommender\n        template: OutfitRecommender\n        dependencies:\n        - checkweather\n        arguments:\n          parameters:\n          - name: weather_condition\n            value: '{{{{ tasks.checkweather.result }}}}'\n      - name: SuggestActivity\n        template: SuggestActivity\n        dependencies:\n        - checkweather\n        arguments:\n          parameters:\n          - name: weather\n            value: '{{{{ tasks.checkweather.result }}}}'\n      - name: ActivitySuggestion\n        template: ActivitySuggestion\n        dependencies:\n        - checkweather\n        arguments:\n          parameters:\n          - name: weather_condition\n            value: '{{{{ tasks.checkweather.result }}}}'\n      - name: FindClothing\n        template: FindClothing\n        dependencies:\n        - checkweather\n        arguments:\n          parameters:\n          - name: WeatherStatus\n            value: '{{{{ tasks.checkweather.result }}}}'\n  inputs:\n    parameters:\n    - name: username\n      value: 'Jack_Sparrow'"
  },
  {
    "Id": 670,
    "status": "Success",
    "workflow": "apiVersion: argoproj.io/v1alpha1\nkind: Workflow\nmetadata:\n  generateName: movie-reservation-workflow-\nspec:\n  entrypoint: main\n  templates:\n  - name: main\n    dag:\n      tasks:\n      - name: find-movie-id\n        template: find-movie-id\n        arguments:\n          parameters:\n          - name: movie-name\n            value: '{{{{ inputs.parameters.movie-name }}}}'\n      - name: find-showtimes\n        template: find-showtimes\n        dependencies:\n        - find-movie-id\n        arguments:\n          parameters:\n          - name: movie-id\n            value: '{{{{ tasks.find-movie-id.result }}}}'\n      - name: check-ticket-availability\n        template: check-ticket-availability\n        dependencies:\n        - find-showtimes\n        arguments:\n          parameters:\n          - name: cinema\n            value: '{{{{ inputs.parameters.cinema }}}}'\n          - name: showtimes\n            value: '{{{{ tasks.find-showtimes.result }}}}'\n      - name: book-movie-ticket\n        template: book-movie-ticket\n        dependencies:\n        - check-ticket-availability\n        arguments:\n          parameters:\n          - name: movie-name\n            value: '{{{{ inputs.parameters.movie-name }}}}'\n          - name: showtime\n            value: '{{{{ tasks.find-showtimes.result }}}}'\n          - name: number-of-tickets\n            value: '{{{{ inputs.parameters.number-of-tickets }}}}'\n  - name: find-movie-id\n    container:\n      image: your-image\n      command: [sh, -c]\n      args: [\"your-command-to-find-movie-id\"]\n      env:\n      - name: MOVIE_NAME\n        value: '{{{{ inputs.parameters.movie-name }}}}'\n  - name: find-showtimes\n    container:\n      image: your-image\n      command: [sh, -c]\n      args: [\"your-command-to-find-showtimes\"]\n      env:\n      - name: MOVIE_ID\n        value: '{{{{ inputs.parameters.movie-id }}}}'\n  - name: check-ticket-availability\n    container:\n      image: your-image\n      command: [sh, -c]\n      args: [\"your-command-to-check-ticket-availability\"]\n      env:\n      - name: CINEMA\n        value: '{{{{ inputs.parameters.cinema }}}}'\n      - name: SHOWTIMES\n        value: '{{{{ inputs.parameters.showtimes }}}}'\n  - name: book-movie-ticket\n    container:\n      image: your-image\n      command: [sh, -c]\n      args: [\"your-command-to-book-movie-ticket\"]\n      env:\n      - name: MOVIE_NAME\n        value: '{{{{ inputs.parameters.movie-name }}}}'\n      - name: SHOWTIME\n        value: '{{{{ inputs.parameters.showtime }}}}'\n      - name: NUMBER_OF_TICKETS\n        value: '{{{{ inputs.parameters.number-of-tickets }}}}'"
  },
  {
    "Id": 675,
    "status": "Success",
    "workflow": "apiVersion: argoproj.io/v1alpha1\nkind: Workflow\nmetadata:\n  generateName: mark-borrow-workflow-\nspec:\n  entrypoint: main\n  templates:\n  - name: main\n    dag:\n      tasks:\n      - name: get-user-id\n        template: get-user-id\n        arguments:\n          parameters:\n          - name: username\n            value: '{{{{ inputs.parameters.username }}}}'\n      - name: title-to-isbn\n        template: title-to-isbn\n        arguments:\n          parameters:\n          - name: title\n            value: '{{{{ inputs.parameters.title }}}}'\n      - name: check-availability\n        template: check-availability\n        dependencies:\n        - title-to-isbn\n        arguments:\n          parameters:\n          - name: ISBN\n            value: '{{{{ tasks.title-to-isbn.result }}}}'\n          - name: start_date\n            value: '{{{{ inputs.parameters.start_date }}}}'\n          - name: end_date\n            value: '{{{{ inputs.parameters.end_date }}}}'\n      - name: borrow-book\n        template: borrow-book\n        dependencies:\n        - check-availability\n        - get-user-id\n        arguments:\n          parameters:\n          - name: user_ID\n            value: '{{{{ tasks.get-user-id.result }}}}'\n          - name: book_ID\n            value: '{{{{ tasks.title-to-isbn.result }}}}'\n  - name: get-user-id\n    container:\n      image: busybox\n      command: [sh, -c]\n      args: [\"echo $USER_ID\"]\n      env:\n      - name: USER_ID\n        valueFrom:\n          secretKeyRef:\n            name: user-secrets\n            key: mark-id\n  - name: title-to-isbn\n    container:\n      image: busybox\n      command: [sh, -c]\n      args: [\"echo $ISBN\"]\n      env:\n      - name: ISBN\n        valueFrom:\n          configMapKeyRef:\n            name: book-config\n            key: to-kill-a-mockingbird-isbn\n  - name: check-availability\n    container:\n      image: busybox\n      command: [sh, -c]\n      args: [\"echo $AVAILABILITY_STATUS\"]\n      env:\n      - name: AVAILABILITY_STATUS\n        valueFrom:\n          configMapKeyRef:\n            name: book-config\n            key: availability-status\n  - name: borrow-book\n    container:\n      image: busybox\n      command: [sh, -c]\n      args: [\"echo $BORROW_STATUS\"]\n      env:\n      - name: BORROW_STATUS\n        valueFrom:\n          configMapKeyRef:\n            name: book-config\n            key: borrow-status"
  },
  {
    "Id": 676,
    "status": "Success",
    "workflow": "apiVersion: argoproj.io/v1alpha1\nkind: Workflow\nmetadata:\n  generateName: jessica-borrow-book-1984-\nspec:\n  entrypoint: main\n  templates:\n  - name: main\n    dag:\n      tasks:\n      - name: username2userid\n        template: username2userid\n        arguments:\n          parameters:\n          - name: username\n            value: '{{{{ inputs.parameters.username }}}}'\n      - name: bookname2isbn\n        template: bookname2isbn\n        arguments:\n          parameters:\n          - name: book_name\n            value: '{{{{ inputs.parameters.book_name }}}}'\n      - name: checkavailability\n        template: checkavailability\n        dependencies:\n        - bookname2isbn\n        arguments:\n          parameters:\n          - name: ISBN\n            value: '{{{{ tasks.bookname2isbn.result }}}}'\n          - name: start_date\n            value: '{{{{ inputs.parameters.start_date }}}}'\n          - name: end_date\n            value: '{{{{ inputs.parameters.end_date }}}}'\n      - name: reservebook\n        template: reservebook\n        dependencies:\n        - username2userid\n        - bookname2isbn\n        - checkavailability\n        arguments:\n          parameters:\n          - name: user_email\n            value: '{{{{ tasks.username2userid.result }}}}'\n          - name: ISBN\n            value: '{{{{ tasks.bookname2isbn.result }}}}'\n          - name: start_date\n            value: '{{{{ inputs.parameters.start_date }}}}'\n          - name: end_date\n            value: '{{{{ inputs.parameters.end_date }}}}'\n      - name: borrowbook\n        template: borrowbook\n        dependencies:\n        - reservebook\n        arguments:\n          parameters:\n          - name: user_ID\n            value: '{{{{ tasks.username2userid.result }}}}'\n          - name: book_ID\n            value: '{{{{ tasks.bookname2isbn.result }}}}'\n  inputs:\n    parameters:\n    - name: username\n      value: 'Jessica'\n    - name: book_name\n      value: '1984'\n    - name: start_date\n      value: '2023-12-01'\n    - name: end_date\n      value: '2023-12-31'"
  },
  {
    "Id": 696,
    "status": "Success",
    "workflow": "apiVersion: argoproj.io/v1alpha1\nkind: Workflow\nmetadata:\n  generateName: dependency-workflow-1001-\nspec:\n  entrypoint: main\n  templates:\n  - name: main\n    dag:\n      tasks:\n      - name: checkvacancy\n        template: checkvacancy\n        arguments:\n          parameters:\n          - name: hotelname\n            value: '{{{{ inputs.parameters.hotel_name }}}}'\n          - name: date\n            value: '{{{{ inputs.parameters.start_date }}}}'\n      - name: bookhotel\n        template: bookhotel\n        dependencies:\n        - checkvacancy\n        arguments:\n          parameters:\n          - name: hotel_name\n            value: '{{{{ inputs.parameters.hotel_name }}}}'\n          - name: date\n            value: '{{{{ inputs.parameters.start_date }}}}'\n      - name: hotelbooking\n        template: hotelbooking\n        dependencies:\n        - bookhotel\n        arguments:\n          parameters:\n          - name: destination\n            value: '{{{{ inputs.parameters.city }}}}'\n          - name: check_in_date\n            value: '{{{{ inputs.parameters.start_date }}}}'\n          - name: check_out_date\n            value: '{{{{ inputs.parameters.end_date }}}}'\n  - name: checkvacancy\n    inputs:\n      parameters:\n      - name: hotelname\n      - name: date\n    container:\n      image: your-image-here\n      command: [sh, -c]\n      args: [\"CheckVacancy({{inputs.parameters.hotelname}}, {{inputs.parameters.date}})\"]\n  - name: bookhotel\n    inputs:\n      parameters:\n      - name: hotel_name\n      - name: date\n    container:\n      image: your-image-here\n      command: [sh, -c]\n      args: [\"BookHotel({{inputs.parameters.hotel_name}}, {{inputs.parameters.date}})\"]\n  - name: hotelbooking\n    inputs:\n      parameters:\n      - name: destination\n      - name: check_in_date\n      - name: check_out_date\n    container:\n      image: your-image-here\n      command: [sh, -c]\n      args: [\"HotelBooking({{inputs.parameters.destination}}, {{inputs.parameters.check_in_date}}, {{inputs.parameters.check_out_date}})\"]"
  },
  {
    "Id": 711,
    "status": "Success",
    "workflow": "apiVersion: argoproj.io/v1alpha1\nkind: Workflow\nmetadata:\n  generateName: return-book-workflow-\nspec:\n  entrypoint: main\n  templates:\n  - name: main\n    dag:\n      tasks:\n      - name: email2userid\n        template: email2userid\n        arguments:\n          parameters:\n          - name: email\n            value: '{{{{ inputs.parameters.email }}}}'\n      - name: isbn2bookname\n        template: isbn2bookname\n        arguments:\n          parameters:\n          - name: ISBN\n            value: '{{{{ inputs.parameters.ISBN }}}}'\n      - name: returnbook\n        template: returnbook\n        dependencies:\n        - email2userid\n        - isbn2bookname\n        arguments:\n          parameters:\n          - name: user_ID\n            value: '{{{{ tasks.email2userid.result }}}}'\n          - name: book_name\n            value: '{{{{ tasks.isbn2bookname.result }}}}'\n  - name: email2userid\n    container:\n      image: your-email-to-userid-image\n      command: [sh, -c]\n      args: [\"your-command-to-get-user-id-from-email ${{{{ inputs.parameters.email }}}}\",]\n    inputs:\n      parameters:\n      - name: email\n  - name: isbn2bookname\n    container:\n      image: your-isbn-to-bookname-image\n      command: [sh, -c]\n      args: [\"your-command-to-get-book-name-from-isbn ${{{{ inputs.parameters.ISBN }}}}\",]\n    inputs:\n      parameters:\n      - name: ISBN\n  - name: returnbook\n    container:\n      image: your-return-book-image\n      command: [sh, -c]\n      args: [\"your-command-to-return-book ${{{{ inputs.parameters.user_ID }}}} ${{{{ inputs.parameters.book_name }}}}\",]\n    inputs:\n      parameters:\n      - name: user_ID\n      - name: book_name\n  inputs:\n    parameters:\n    - name: email\n      value: 'lisa.brown@example.com'\n    - name: ISBN\n      value: '978-2-34-567890-1'"
  },
  {
    "Id": 719,
    "status": "Success",
    "workflow": "apiVersion: argoproj.io/v1alpha1\nkind: Workflow\nmetadata:\n  generateName: dependency-workflow-345-\nspec:\n  entrypoint: main\n  templates:\n  - name: main\n    dag:\n      tasks:\n      - name: userEmail2ID\n        template: userEmail2ID\n        arguments:\n          parameters:\n          - name: user_email\n            value: '{{{{ inputs.parameters.user_email }}}}'\n      - name: getProductID\n        template: getProductID\n        arguments:\n          parameters:\n          - name: product_name\n            value: '{{{{ inputs.parameters.product_name }}}}'\n      - name: PurchaseItem\n        template: PurchaseItem\n        dependencies:\n        - userEmail2ID\n        - getProductID\n        arguments:\n          parameters:\n          - name: user_ID\n            value: '{{{{ tasks.userEmail2ID.result }}}}'\n          - name: product_ID\n            value: '{{{{ tasks.getProductID.result }}}}'\n          - name: quantity\n            value: '{{{{ inputs.parameters.quantity }}}}'\n  - name: userEmail2ID\n    container:\n      image: appropriate/curl:latest\n      command: [sh, -c]\n      args: [\"curl -X POST -d 'user_email={{ inputs.parameters.user_email }}' <API_URL>/UserEmail2ID\"]\n      outputs:\n        parameters:\n        - name: user_ID\n          valueFrom:\n            path: /tmp/user_ID\n  - name: getProductID\n    container:\n      image: appropriate/curl:latest\n      command: [sh, -c]\n      args: [\"curl -X POST -d 'product_name={{ inputs.parameters.product_name }}' <API_URL>/getProductID\"]\n      outputs:\n        parameters:\n        - name: product_ID\n          valueFrom:\n            path: /tmp/product_ID\n  - name: PurchaseItem\n    container:\n      image: appropriate/curl:latest\n      command: [sh, -c]\n      args: [\"curl -X POST -d 'user_ID={{ inputs.parameters.user_ID }}&product_ID={{ inputs.parameters.product_ID }}&quantity={{ inputs.parameters.quantity }}' <API_URL>/PurchaseItem\"]\n      outputs:\n        parameters:\n        - name: purchase_status\n          valueFrom:\n            path: /tmp/purchase_status"
  },
  {
    "Id": 727,
    "status": "Success",
    "workflow": "apiVersion: argoproj.io/v1alpha1\nkind: Workflow\nmetadata:\n  generateName: dependency-workflow-1542-\nspec:\n  entrypoint: main\n  templates:\n  - name: main\n    dag:\n      tasks:\n      - name: getuserid\n        template: getuserid\n        arguments:\n          parameters:\n          - name: username\n            value: '{{{{ inputs.parameters.username }}}}'\n      - name: getwatchlistid\n        template: getwatchlistid\n        arguments:\n          parameters:\n          - name: user_ID\n            value: '{{{{ tasks.getuserid.result }}}}'\n          - name: watchlist_name\n            value: '{{{{ inputs.parameters.watchlist_name }}}}'\n      - name: movietitle2id\n        template: movietitle2id\n        arguments:\n          parameters:\n          - name: movie_title\n            value: '{{{{ inputs.parameters.movie_title }}}}'\n      - name: addtomoviewatchlist\n        template: addtomoviewatchlist\n        dependencies:\n        - getwatchlistid\n        - movietitle2id\n        arguments:\n          parameters:\n          - name: watchlist_ID\n            value: '{{{{ tasks.getwatchlistid.result }}}}'\n          - name: movie_ID\n            value: '{{{{ tasks.movietitle2id.result }}}}'\n  inputs:\n    parameters:\n    - name: username\n      value: 'sarah_sci'\n    - name: movie_title\n      value: 'Interstellar'\n    - name: watchlist_name\n      value: 'Sci-fi Movies'"
  },
  {
    "Id": 734,
    "status": "Success",
    "workflow": "apiVersion: argoproj.io/v1alpha1\nkind: Workflow\nmetadata:\n  generateName: dependency-workflow-345-\nspec:\n  entrypoint: main\n  templates:\n  - name: main\n    dag:\n      tasks:\n      - name: username2userid\n        template: username2userid\n        arguments:\n          parameters:\n          - name: username\n            value: '{{{{ inputs.parameters.username }}}}'\n      - name: title2isbn\n        template: title2isbn\n        arguments:\n          parameters:\n          - name: title\n            value: '{{{{ inputs.parameters.book_title }}}}'\n      - name: addbooktoreadinglist\n        template: addbooktoreadinglist\n        dependencies:\n        - username2userid\n        - title2isbn\n        arguments:\n          parameters:\n          - name: user_name\n            value: '{{{{ tasks.username2userid.result }}}}'\n          - name: book_title\n            value: '{{{{ inputs.parameters.book_title }}}}'\n  - name: username2userid\n    container:\n      image: your-image-here\n      command: [sh, -c]\n      args: [\"echo $USERNAME\"]\n      env:\n      - name: USERNAME\n        value: '{{{{ inputs.parameters.username }}}}'\n  - name: title2isbn\n    container:\n      image: your-image-here\n      command: [sh, -c]\n      args: [\"echo $TITLE\"]\n      env:\n      - name: TITLE\n        value: '{{{{ inputs.parameters.title }}}}'\n  - name: addbooktoreadinglist\n    container:\n      image: your-image-here\n      command: [sh, -c]\n      args: [\"AddBookToReadingList $USER_NAME $BOOK_TITLE\"]\n      env:\n      - name: USER_NAME\n        value: '{{{{ inputs.parameters.user_name }}}}'\n      - name: BOOK_TITLE\n        value: '{{{{ inputs.parameters.book_title }}}}'"
  },
  {
    "Id": 748,
    "status": "Success",
    "workflow": "apiVersion: argoproj.io/v1alpha1\nkind: Workflow\nmetadata:\n  generateName: dependency-workflow-1542-\nspec:\n  entrypoint: main\n  templates:\n  - name: main\n    dag:\n      tasks:\n      - name: BookTable\n        template: BookTable\n        arguments:\n          parameters:\n          - name: restaurant_name\n            value: '{{{{ inputs.parameters.restaurant_name }}}}'\n          - name: date\n            value: '{{{{ inputs.parameters.date }}}}'\n          - name: time\n            value: '{{{{ inputs.parameters.time }}}}'\n  inputs:\n    parameters:\n    - name: restaurant_name\n      value: 'Red Lobster'\n    - name: date\n      value: 'May 5th'\n    - name: time\n      value: '6 pm'"
  },
  {
    "Id": 753,
    "status": "Success",
    "workflow": "apiVersion: argoproj.io/v1alpha1\nkind: Workflow\nmetadata:\n  generateName: book-discussion-schedule-\nspec:\n  entrypoint: main\n  templates:\n  - name: main\n    dag:\n      tasks:\n      - name: getuserid\n        template: getuserid\n        arguments:\n          parameters:\n          - name: username\n            value: '{{{{ inputs.parameters.username }}}}'\n      - name: isbn2booktitle\n        template: isbn2booktitle\n        arguments:\n          parameters:\n          - name: ISBN\n            value: '{{{{ inputs.parameters.ISBN }}}}'\n      - name: booktitle2author\n        template: booktitle2author\n        dependencies:\n        - isbn2booktitle\n        arguments:\n          parameters:\n          - name: book_title\n            value: '{{{{ tasks.isbn2booktitle.result }}}}'\n      - name: checkauthoravailability\n        template: checkauthoravailability\n        dependencies:\n        - getuserid\n        - booktitle2author\n        arguments:\n          parameters:\n          - name: user_ID\n            value: '{{{{ tasks.getuserid.result }}}}'\n          - name: author_name\n            value: '{{{{ tasks.booktitle2author.result }}}}'\n      - name: schedulediscussion\n        template: schedulediscussion\n        dependencies:\n        - checkauthoravailability\n        arguments:\n          parameters:\n          - name: user_ID\n            value: '{{{{ tasks.getuserid.result }}}}'\n          - name: author_name\n            value: '{{{{ tasks.booktitle2author.result }}}}'\n          - name: date_time\n            value: '{{{{ inputs.parameters.date_time }}}}'\n  - name: getuserid\n    container:\n      image: busybox\n      command: [sh, -c]\n      args: [\"echo $USER_ID\"]\n      env:\n      - name: USER_ID\n        valueFrom:\n          secretKeyRef:\n            name: user-secrets\n            key: user789-id\n  - name: isbn2booktitle\n    container:\n      image: busybox\n      command: [sh, -c]\n      args: [\"echo $BOOK_TITLE\"]\n      env:\n      - name: BOOK_TITLE\n        valueFrom:\n          configMapKeyRef:\n            name: book-config\n            key: \"{{{{ inputs.parameters.ISBN }}}}\"\n  - name: booktitle2author\n    container:\n      image: busybox\n      command: [sh, -c]\n      args: [\"echo $AUTHOR_NAME\"]\n      env:\n      - name: AUTHOR_NAME\n        valueFrom:\n          configMapKeyRef:\n            name: book-config\n            key: \"{{{{ inputs.parameters.book_title }}}}\"\n  - name: checkauthoravailability\n    container:\n      image: busybox\n      command: [sh, -c]\n      args: [\"echo $AVAILABILITY_STATUS\"]\n      env:\n      - name: AVAILABILITY_STATUS\n        valueFrom:\n          configMapKeyRef:\n            name: author-config\n            key: \"{{{{ inputs.parameters.author_name }}}}\"\n  - name: schedulediscussion\n    container:\n      image: busybox\n      command: [sh, -c]\n      args: [\"echo $SCHEDULE_STATUS\"]\n      env:\n      - name: SCHEDULE_STATUS\n        valueFrom:\n          configMapKeyRef:\n            name: schedule-config\n            key: \"{{{{ inputs.parameters.date_time }}}}\""
  },
  {
    "Id": 759,
    "status": "Success",
    "workflow": "apiVersion: argoproj.io/v1alpha1\nkind: Workflow\nmetadata:\n  generateName: dependency-workflow-ny-outfit-\nspec:\n  entrypoint: main\n  templates:\n  - name: main\n    dag:\n      tasks:\n      - name: checkweather\n        template: checkweather\n        arguments:\n          parameters:\n          - name: location\n            value: '{{{{ inputs.parameters.location }}}}'\n      - name: recommendclothing\n        template: recommendclothing\n        dependencies:\n        - checkweather\n        arguments:\n          parameters:\n          - name: weather\n            value: '{{{{ tasks.checkweather.result }}}}'\n      - name: suggestoutfit\n        template: suggestoutfit\n        dependencies:\n        - checkweather\n        arguments:\n          parameters:\n          - name: weather\n            value: '{{{{ tasks.checkweather.result }}}}'\n      - name: findclothes\n        template: findclothes\n        dependencies:\n        - checkweather\n        arguments:\n          parameters:\n          - name: weather\n            value: '{{{{ tasks.checkweather.result }}}}'\n      - name: planoutfit\n        template: planoutfit\n        dependencies:\n        - recommendclothing\n        - suggestoutfit\n        - findclothes\n        arguments:\n          parameters:\n          - name: event\n            value: '{{{{ inputs.parameters.event }}}}'\n          - name: outfit\n            value: '{{{{ tasks.recommendclothing.result }}}}'\n\n  - name: checkweather\n    container:\n      image: some-image-with-checkweather-api\n      command: [sh, -c]\n      args: [\"checkweather --location $LOCATION\"]\n    inputs:\n      parameters:\n      - name: location\n\n  - name: recommendclothing\n    container:\n      image: some-image-with-recommendclothing-api\n      command: [sh, -c]\n      args: [\"recommendclothing --weather $WEATHER\"]\n    inputs:\n      parameters:\n      - name: weather\n\n  - name: suggestoutfit\n    container:\n      image: some-image-with-suggestoutfit-api\n      command: [sh, -c]\n      args: [\"suggestoutfit --weather $WEATHER\"]\n    inputs:\n      parameters:\n      - name: weather\n\n  - name: findclothes\n    container:\n      image: some-image-with-findclothes-api\n      command: [sh, -c]\n      args: [\"findclothes --weather $WEATHER\"]\n    inputs:\n      parameters:\n      - name: weather\n\n  - name: planoutfit\n    container:\n      image: some-image-with-planoutfit-api\n      command: [sh, -c]\n      args: [\"planoutfit --event $EVENT --outfit $OUTFIT\"]\n    inputs:\n      parameters:\n      - name: event\n      - name: outfit"
  },
  {
    "Id": 774,
    "status": "Success",
    "workflow": "apiVersion: argoproj.io/v1alpha1\nkind: Workflow\nmetadata:\n  generateName: trip-planning-workflow-\nspec:\n  entrypoint: main\n  templates:\n  - name: main\n    dag:\n      tasks:\n      - name: arrange-transportation\n        template: arrange-transportation\n        arguments:\n          parameters:\n          - name: city\n            value: '{{{{ inputs.parameters.city }}}}'\n          - name: date\n            value: '{{{{ inputs.parameters.date }}}}'\n      - name: find-accommodation\n        template: find-accommodation\n        arguments:\n          parameters:\n          - name: city\n            value: '{{{{ inputs.parameters.city }}}}'\n      - name: book-trip\n        template: book-trip\n        dependencies:\n        - arrange-transportation\n        - find-accommodation\n        arguments:\n          parameters:\n          - name: flight\n            value: '{{{{ tasks.arrange-transportation.result }}}}'\n          - name: hotel\n            value: '{{{{ tasks.find-accommodation.result }}}}'\n      - name: plan-itinerary\n        template: plan-itinerary\n        dependencies:\n        - book-trip\n        arguments:\n          parameters:\n          - name: flight_details\n            value: '{{{{ tasks.arrange-transportation.result }}}}'\n          - name: hotel_booking\n            value: '{{{{ tasks.find-accommodation.result }}}}'\n          - name: location\n            value: '{{{{ inputs.parameters.city }}}}'\n          - name: interests\n            value: '{{{{ inputs.parameters.interests }}}}'\n  inputs:\n    parameters:\n    - name: city\n      value: 'Tokyo'\n    - name: date\n      value: 'September 15'\n    - name: interests\n      value: '{{{{ inputs.parameters.interests }}}}'"
  },
  {
    "Id": 805,
    "status": "Success",
    "workflow": "apiVersion: argoproj.io/v1alpha1\nkind: Workflow\nmetadata:\n  generateName: romance-movie-reservation-\nspec:\n  entrypoint: main\n  templates:\n  - name: main\n    dag:\n      tasks:\n      - name: find-romance-movie\n        template: find-romance-movie\n        arguments:\n          parameters:\n          - name: genre\n            value: '{{{{ inputs.parameters.genre }}}}'\n      - name: get-showtimes\n        template: get-showtimes\n        dependencies:\n        - find-romance-movie\n        arguments:\n          parameters:\n          - name: movie_name\n            value: '{{{{ tasks.find-romance-movie.result }}}}'\n          - name: city\n            value: '{{{{ inputs.parameters.city }}}}'\n      - name: book-tickets\n        template: book-tickets\n        dependencies:\n        - get-showtimes\n        arguments:\n          parameters:\n          - name: showtime\n            value: '{{{{ tasks.get-showtimes.result }}}}'\n          - name: number_of_tickets\n            value: '{{{{ inputs.parameters.number_of_tickets }}}}'\n  - name: find-romance-movie\n    inputs:\n      parameters:\n      - name: genre\n    container:\n      image: your-image-with-api-calls\n      command: [sh, -c]\n      args: [\"your-command-to-find-romance-movie {{inputs.parameters.genre}}\"]\n  - name: get-showtimes\n    inputs:\n      parameters:\n      - name: movie_name\n      - name: city\n    container:\n      image: your-image-with-api-calls\n      command: [sh, -c]\n      args: [\"your-command-to-get-showtimes {{inputs.parameters.movie_name}} {{inputs.parameters.city}}\"]\n  - name: book-tickets\n    inputs:\n      parameters:\n      - name: showtime\n      - name: number_of_tickets\n    container:\n      image: your-image-with-api-calls\n      command: [sh, -c]\n      args: [\"your-command-to-book-tickets {{inputs.parameters.showtime}} {{inputs.parameters.number_of_tickets}}\"]"
  },
  {
    "Id": 821,
    "status": "Success",
    "workflow": "apiVersion: argoproj.io/v1alpha1\nkind: Workflow\nmetadata:\n  generateName: verify-book-stock-\nspec:\n  entrypoint: main\n  templates:\n  - name: main\n    dag:\n      tasks:\n      - name: find-nearest-bookstore\n        template: find-nearest-bookstore\n        arguments:\n          parameters:\n          - name: city\n            value: '{{{{ inputs.parameters.city }}}}'\n      - name: find-bookstores\n        template: find-bookstores\n        dependencies:\n        - find-nearest-bookstore\n        arguments:\n          parameters:\n          - name: location\n            value: '{{{{ tasks.find-nearest-bookstore.result }}}}'\n      - name: find-book-store\n        template: find-book-store\n        dependencies:\n        - find-bookstores\n        arguments:\n          parameters:\n          - name: book_information\n            value: '{{{{ inputs.parameters.book_information }}}}'\n      - name: book-store-availability\n        template: book-store-availability\n        dependencies:\n        - find-book-store\n        arguments:\n          parameters:\n          - name: book_id\n            value: '{{{{ tasks.find-book-store.result }}}}'\n      - name: book-store\n        template: book-store\n        dependencies:\n        - book-store-availability\n        arguments:\n          parameters:\n          - name: book_id\n            value: '{{{{ tasks.find-book-store.result }}}}'\n  - name: find-nearest-bookstore\n    inputs:\n      parameters:\n      - name: city\n    container:\n      image: your-image-here\n      command: [sh, -c]\n      args: [\"FindNearestBookStore({{inputs.parameters.city}})\"]\n  - name: find-bookstores\n    inputs:\n      parameters:\n      - name: location\n    container:\n      image: your-image-here\n      command: [sh, -c]\n      args: [\"FindBookStores({{inputs.parameters.location}})\"]\n  - name: find-book-store\n    inputs:\n      parameters:\n      - name: book_information\n    container:\n      image: your-image-here\n      command: [sh, -c]\n      args: [\"FindBookStore({{inputs.parameters.book_information}})\"]\n  - name: book-store-availability\n    inputs:\n      parameters:\n      - name: book_id\n    container:\n      image: your-image-here\n      command: [sh, -c]\n      args: [\"BookStoreAvailability({{inputs.parameters.book_id}})\"]\n  - name: book-store\n    inputs:\n      parameters:\n      - name: book_id\n    container:\n      image: your-image-here\n      command: [sh, -c]\n      args: [\"BookStore({{inputs.parameters.book_id}})\"]"
  },
  {
    "Id": 823,
    "status": "Success",
    "workflow": "apiVersion: argoproj.io/v1alpha1\nkind: Workflow\nmetadata:\n  generateName: dependency-workflow-plays-\nspec:\n  entrypoint: main\n  templates:\n  - name: main\n    dag:\n      tasks:\n      - name: get-local-theater\n        template: get-local-theater\n        arguments:\n          parameters:\n          - name: city\n            value: '{{{{ inputs.parameters.city }}}}'\n      - name: get-current-plays\n        template: get-current-plays\n        dependencies:\n        - get-local-theater\n        arguments:\n          parameters:\n          - name: theater_name\n            value: '{{{{ tasks.get-local-theater.result }}}}'\n      - name: get-play-reviews\n        template: get-play-reviews\n        dependencies:\n        - get-current-plays\n        arguments:\n          parameters:\n          - name: play_name\n            value: '{{{{ tasks.get-current-plays.result }}}}'\n  - name: get-local-theater\n    inputs:\n      parameters:\n      - name: city\n    outputs:\n      parameters:\n      - name: theater_name\n        valueFrom:\n          path: /tmp/theater_name.txt\n    script:\n      image: python:3.8\n      command: [python]\n      source: |\n        import json\n        import requests\n\n        city = \"{{{{ inputs.parameters.city }}}}\"\n        response = requests.get(f\"http://example.com/api/GetLocalTheater?city={city}\")\n        data = response.json()\n        theater_name = data[\"theater_name\"]\n\n        with open(\"/tmp/theater_name.txt\", \"w\") as f:\n            f.write(theater_name)\n  - name: get-current-plays\n    inputs:\n      parameters:\n      - name: theater_name\n    outputs:\n      parameters:\n      - name: play_name\n        valueFrom:\n          path: /tmp/play_name.txt\n    script:\n      image: python:3.8\n      command: [python]\n      source: |\n        import json\n        import requests\n\n        theater_name = \"{{{{ inputs.parameters.theater_name }}}}\"\n        response = requests.get(f\"http://example.com/api/GetCurrentPlays?theater_name={theater_name}\")\n        data = response.json()\n        play_name = data[\"play_name\"]\n\n        with open(\"/tmp/play_name.txt\", \"w\") as f:\n            f.write(play_name)\n  - name: get-play-reviews\n    inputs:\n      parameters:\n      - name: play_name\n    outputs:\n      parameters:\n      - name: reviews\n        valueFrom:\n          path: /tmp/reviews.txt\n    script:\n      image: python:3.8\n      command: [python]\n      source: |\n        import json\n        import requests\n\n        play_name = \"{{{{ inputs.parameters.play_name }}}}\"\n        response = requests.get(f\"http://example.com/api/GetPlayReviews?play_name={play_name}\")\n        data = response.json()\n        reviews = data[\"reviews\"]\n\n        with open(\"/tmp/reviews.txt\", \"w\") as f:\n            f.write(json.dumps(reviews))"
  },
  {
    "Id": 824,
    "status": "Success",
    "workflow": "apiVersion: argoproj.io/v1alpha1\nkind: Workflow\nmetadata:\n  generateName: music-store-reviews-\nspec:\n  entrypoint: main\n  templates:\n  - name: main\n    dag:\n      tasks:\n      - name: getlocalmusicstore\n        template: getlocalmusicstore\n        arguments:\n          parameters:\n          - name: city\n            value: '{{{{ inputs.parameters.city }}}}'\n      - name: getcurrentalbums\n        template: getcurrentalbums\n        dependencies:\n        - getlocalmusicstore\n        arguments:\n          parameters:\n          - name: store_name\n            value: '{{{{ tasks.getlocalmusicstore.result }}}}'\n      - name: getalbumreviews\n        template: getalbumreviews\n        dependencies:\n        - getcurrentalbums\n        arguments:\n          parameters:\n          - name: album_name\n            value: '{{{{ tasks.getcurrentalbums.result }}}}'\n  inputs:\n    parameters:\n    - name: city\n      value: 'Toronto'"
  },
  {
    "Id": 830,
    "status": "Success",
    "workflow": "apiVersion: argoproj.io/v1alpha1\nkind: Workflow\nmetadata:\n  generateName: dependency-workflow-1542-\nspec:\n  entrypoint: main\n  templates:\n  - name: main\n    dag:\n      tasks:\n      - name: findbestrestaurant\n        template: findbestrestaurant\n        arguments:\n          parameters:\n          - name: city\n            value: '{{{{ inputs.parameters.city }}}}'\n      - name: findpopulardishes\n        template: findpopulardishes\n        dependencies:\n        - findbestrestaurant\n        arguments:\n          parameters:\n          - name: city\n            value: '{{{{ inputs.parameters.city }}}}'\n      - name: recommenditems\n        template: recommenditems\n        dependencies:\n        - findbestrestaurant\n        arguments:\n          parameters:\n          - name: restaurant_name\n            value: '{{{{ tasks.findbestrestaurant.result }}}}'\n      - name: recommenddish\n        template: recommenddish\n        dependencies:\n        - recommenditems\n        arguments:\n          parameters:\n          - name: menu\n            value: '{{{{ tasks.recommenditems.result }}}}'\n      - name: orderfood\n        template: orderfood\n        dependencies:\n        - recommenddish\n        - findbestrestaurant\n        arguments:\n          parameters:\n          - name: dish_name\n            value: '{{{{ tasks.recommenddish.result }}}}'\n          - name: restaurant_name\n            value: '{{{{ tasks.findbestrestaurant.result }}}}'\n  - name: findbestrestaurant\n    container:\n      image: appropriate/curl:latest\n      command: [sh, -c]\n      args: [\"curl -X GET http://example.com/RestaurantLocation?city=Seattle -H 'Content-Type: application/json'\"]\n      env:\n      - name: city\n        value: \"{{{{ inputs.parameters.city }}}}\"\n  - name: findpopulardishes\n    container:\n      image: appropriate/curl:latest\n      command: [sh, -c]\n      args: [\"curl -X GET http://example.com/FindPopularDishes?city=Seattle -H 'Content-Type: application/json'\"]\n      env:\n      - name: city\n        value: \"{{{{ inputs.parameters.city }}}}\"\n  - name: recommenditems\n    container:\n      image: appropriate/curl:latest\n      command: [sh, -c]\n      args: [\"curl -X GET http://example.com/RecommendItems?restaurant_name={{{{ inputs.parameters.restaurant_name }}}}' -H 'Content-Type: application/json'\"]\n      env:\n      - name: restaurant_name\n        value: \"{{{{ inputs.parameters.restaurant_name }}}}\"\n  - name: recommenddish\n    container:\n      image: appropriate/curl:latest\n      command: [sh, -c]\n      args: [\"curl -X GET http://example.com/RecommendDish?menu={{{{ inputs.parameters.menu }}}}' -H 'Content-Type: application/json'\"]\n      env:\n      - name: menu\n        value: \"{{{{ inputs.parameters.menu }}}}\"\n  - name: orderfood\n    container:\n      image: appropriate/curl:latest\n      command: [sh, -c]\n      args: [\"curl -X GET http://example.com/OrderFood?dish_name={{{{ inputs.parameters.dish_name }}}}&restaurant_name={{{{ inputs.parameters.restaurant_name }}}}' -H 'Content-Type: application/json'\"]\n      env:\n      - name: dish_name\n        value: \"{{{{ inputs.parameters.dish_name }}}}\"\n      - name: restaurant_name\n        value: \"{{{{ inputs.parameters.restaurant_name }}}}\""
  },
  {
    "Id": 898,
    "status": "Success",
    "workflow": "apiVersion: argoproj.io/v1alpha1\nkind: Workflow\nmetadata:\n  generateName: stock-investment-workflow-\nspec:\n  entrypoint: main\n  templates:\n  - name: main\n    dag:\n      tasks:\n      - name: get-stock-id\n        template: get-stock-id\n        arguments:\n          parameters:\n          - name: stockname\n            value: '{{{{ inputs.parameters.stockname }}}}'\n      - name: get-current-price\n        template: get-current-price\n        dependencies:\n        - get-stock-id\n        arguments:\n          parameters:\n          - name: stockId\n            value: '{{{{ tasks.get-stock-id.result }}}}'\n      - name: predict-future-price\n        template: predict-future-price\n        dependencies:\n        - get-current-price\n        arguments:\n          parameters:\n          - name: stockId\n            value: '{{{{ tasks.get-stock-id.result }}}}'\n          - name: currentPrice\n            value: '{{{{ tasks.get-current-price.result }}}}'\n      - name: suggest-stock-action\n        template: suggest-stock-action\n        dependencies:\n        - get-current-price\n        - predict-future-price\n        arguments:\n          parameters:\n          - name: stockId\n            value: '{{{{ tasks.get-stock-id.result }}}}'\n          - name: currentPrice\n            value: '{{{{ tasks.get-current-price.result }}}}'\n          - name: futurePrice\n            value: '{{{{ tasks.predict-future-price.result }}}}'\n      - name: fetch-news\n        template: fetch-news\n        arguments:\n          parameters:\n          - name: stockname\n            value: '{{{{ inputs.parameters.stockname }}}}'\n      - name: investment-strategy\n        template: investment-strategy\n        dependencies:\n        - get-current-price\n        - fetch-news\n        arguments:\n          parameters:\n          - name: stockPrice\n            value: '{{{{ tasks.get-current-price.result }}}}'\n          - name: news\n            value: '{{{{ tasks.fetch-news.result }}}}'\n  inputs:\n    parameters:\n    - name: stockname\n      value: 'Netflix'"
  },
  {
    "Id": 910,
    "status": "Success",
    "workflow": "apiVersion: argoproj.io/v1alpha1\nkind: Workflow\nmetadata:\n  generateName: investment-suggestion-workflow-\nspec:\n  entrypoint: main\n  templates:\n  - name: main\n    dag:\n      tasks:\n      - name: trackspending\n        template: trackspending\n        arguments:\n          parameters:\n          - name: Username\n            value: '{{{{ inputs.parameters.Username }}}}'\n      - name: calculatesavings\n        template: calculatesavings\n        dependencies:\n        - trackspending\n        arguments:\n          parameters:\n          - name: SpendingReport\n            value: '{{{{ tasks.trackspending.result }}}}'\n      - name: suggestinvestment\n        template: suggestinvestment\n        dependencies:\n        - calculatesavings\n        arguments:\n          parameters:\n          - name: Savings\n            value: '{{{{ tasks.calculatesavings.result }}}}'\n  - name: trackspending\n    inputs:\n      parameters:\n      - name: Username\n    container:\n      image: your-image-here\n      command: [\"your-command-here\"]\n      args: [\"TrackSpending\", \"{{{{ inputs.parameters.Username }}}}\", \"--output\", \"/tmp/trackspending-result\"]\n      volumeMounts:\n      - name: result-volume\n        mountPath: /tmp\n    outputs:\n      parameters:\n      - name: result\n        valueFrom:\n          path: /tmp/trackspending-result\n  - name: calculatesavings\n    inputs:\n      parameters:\n      - name: SpendingReport\n    container:\n      image: your-image-here\n      command: [\"your-command-here\"]\n      args: [\"CalculateSavings\", \"{{{{ inputs.parameters.SpendingReport }}}}\", \"--output\", \"/tmp/calculatesavings-result\"]\n      volumeMounts:\n      - name: result-volume\n        mountPath: /tmp\n    outputs:\n      parameters:\n      - name: result\n        valueFrom:\n          path: /tmp/calculatesavings-result\n  - name: suggestinvestment\n    inputs:\n      parameters:\n      - name: Savings\n    container:\n      image: your-image-here\n      command: [\"your-command-here\"]\n      args: [\"SuggestInvestment\", \"{{{{ inputs.parameters.Savings }}}}\", \"--output\", \"/tmp/suggestinvestment-result\"]\n      volumeMounts:\n      - name: result-volume\n        mountPath: /tmp\n    outputs:\n      parameters:\n      - name: result\n        valueFrom:\n          path: /tmp/suggestinvestment-result\n  volumes:\n  - name: result-volume\n    emptyDir: {}"
  },
  {
    "Id": 920,
    "status": "Success",
    "workflow": "apiVersion: argoproj.io/v1alpha1\nkind: Workflow\nmetadata:\n  generateName: chinese-food-suggestion-\nspec:\n  entrypoint: main\n  templates:\n  - name: main\n    dag:\n      tasks:\n      - name: find-popular-dishes\n        template: find-popular-dishes\n        arguments:\n          parameters:\n          - name: city\n            value: '{{{{ inputs.parameters.city }}}}'\n      - name: filter-restaurants-by-dietary-restrictions\n        template: filter-restaurants-by-dietary-restrictions\n        dependencies:\n        - find-popular-dishes\n        arguments:\n          parameters:\n          - name: restaurant\n            value: '{{{{ tasks.find-popular-dishes.result }}}}'\n          - name: restrictions\n            value: '{{{{ inputs.parameters.dietary_restrictions }}}}'\n      - name: recommend-dish\n        template: recommend-dish\n        dependencies:\n        - filter-restaurants-by-dietary-restrictions\n        arguments:\n          parameters:\n          - name: menu\n            value: '{{{{ tasks.filter-restaurants-by-dietary-restrictions.result }}}}'\n      - name: meal-suggestion\n        template: meal-suggestion\n        dependencies:\n        - recommend-dish\n        arguments:\n          parameters:\n          - name: calorie\n            value: '{{{{ inputs.parameters.calorie }}}}'\n          - name: dietary_restrictions\n            value: '{{{{ inputs.parameters.dietary_restrictions }}}}'\n      - name: best-order\n        template: best-order\n        dependencies:\n        - meal-suggestion\n        - filter-restaurants-by-dietary-restrictions\n        arguments:\n          parameters:\n          - name: restaurant_info\n            value: '{{{{ tasks.filter-restaurants-by-dietary-restrictions.result }}}}'\n          - name: food_list\n            value: '{{{{ tasks.meal-suggestion.result }}}}'\n  - name: find-popular-dishes\n    inputs:\n      parameters:\n      - name: city\n    container:\n      image: your-image-here\n      command: [sh, -c]\n      args: [\"FindPopularDishes(city='{{{{ inputs.parameters.city }}}}')\"]\n  - name: filter-restaurants-by-dietary-restrictions\n    inputs:\n      parameters:\n      - name: restaurant\n      - name: restrictions\n    container:\n      image: your-image-here\n      command: [sh, -c]\n      args: [\"FilterRestaurantByDietaryRestrictions(restaurant='{{{{ inputs.parameters.restaurant }}}}', restrictions='{{{{ inputs.parameters.restrictions }}}}')\"]\n  - name: recommend-dish\n    inputs:\n      parameters:\n      - name: menu\n    container:\n      image: your-image-here\n      command: [sh, -c]\n      args: [\"RecommendDish(menu='{{{{ inputs.parameters.menu }}}}')\"]\n  - name: meal-suggestion\n    inputs:\n      parameters:\n      - name: calorie\n      - name: dietary_restrictions\n    container:\n      image: your-image-here\n      command: [sh, -c]\n      args: [\"MealSuggestion(calorie='{{{{ inputs.parameters.calorie }}}}', dietary_restrictions='{{{{ inputs.parameters.dietary_restrictions }}}}')\"]\n  - name: best-order\n    inputs:\n      parameters:\n      - name: restaurant_info\n      - name: food_list\n    container:\n      image: your-image-here\n      command: [sh, -c]\n      args: [\"BestOrder(restaurant_info='{{{{ inputs.parameters.restaurant_info }}}}', food_list='{{{{ inputs.parameters.food_list }}}}')\"]"
  },
  {
    "Id": 933,
    "status": "Success",
    "workflow": "apiVersion: argoproj.io/v1alpha1\nkind: Workflow\nmetadata:\n  generateName: lactose-free-dish-chinese-houston-\nspec:\n  entrypoint: main\n  templates:\n  - name: main\n    dag:\n      tasks:\n      - name: find-popular-dishes\n        template: find-popular-dishes\n        arguments:\n          parameters:\n          - name: city\n            value: '{{{{ inputs.parameters.city }}}}'\n      - name: filter-restaurants-by-dietary-restrictions\n        template: filter-restaurants-by-dietary-restrictions\n        arguments:\n          parameters:\n          - name: restaurant\n            value: '{{{{ inputs.parameters.restaurant }}}}'\n          - name: restrictions\n            value: '{{{{ inputs.parameters.restrictions }}}}'\n      - name: cuisine-by-restaurant\n        template: cuisine-by-restaurant\n        dependencies:\n        - filter-restaurants-by-dietary-restrictions\n        arguments:\n          parameters:\n          - name: restaurantData\n            value: '{{{{ tasks.filter-restaurants-by-dietary-restrictions.result }}}}'\n      - name: cuisine-recommendations\n        template: cuisine-recommendations\n        dependencies:\n        - cuisine-by-restaurant\n        arguments:\n          parameters:\n          - name: review_report\n            value: '{{{{ inputs.parameters.review_report }}}}'\n          - name: dietary_preferences\n            value: '{{{{ inputs.parameters.dietary_preferences }}}}'\n      - name: food-finder\n        template: food-finder\n        dependencies:\n        - cuisine-recommendations\n        arguments:\n          parameters:\n          - name: cuisine\n            value: '{{{{ tasks.cuisine-recommendations.result }}}}'\n          - name: location\n            value: '{{{{ inputs.parameters.location }}}}'\n      - name: suggest-food\n        template: suggest-food\n        dependencies:\n        - food-finder\n        arguments:\n          parameters:\n          - name: menu\n            value: '{{{{ tasks.food-finder.result }}}}'\n          - name: dietary_preferences\n            value: '{{{{ inputs.parameters.dietary_preferences }}}}'\n      - name: find-recipe\n        template: find-recipe\n        dependencies:\n        - suggest-food\n        arguments:\n          parameters:\n          - name: dish\n            value: '{{{{ tasks.suggest-food.result }}}}'\n  - name: find-popular-dishes\n    inputs:\n      parameters:\n      - name: city\n    container:\n      image: appropriate/curl:latest\n      command: [sh, -c]\n      args: [\"curl -X GET 'http://example.com/FindPopularDishes?city=$(city)'\"]\n  - name: filter-restaurants-by-dietary-restrictions\n    inputs:\n      parameters:\n      - name: restaurant\n      - name: restrictions\n    container:\n      image: appropriate/curl:latest\n      command: [sh, -c]\n      args: [\"curl -X GET 'http://example.com/FilterRestaurantByDietaryRestrictions?restaurant=$(restaurant)&restrictions=$(restrictions)'\"]\n  - name: cuisine-by-restaurant\n    inputs:\n      parameters:\n      - name: restaurantData\n    container:\n      image: appropriate/curl:latest\n      command: [sh, -c]\n      args: [\"curl -X POST 'http://example.com/CuisineByRestaurant' -H 'Content-Type: application/json' -d '$(restaurantData)'\"]\n  - name: cuisine-recommendations\n    inputs:\n      parameters:\n      - name: review_report\n      - name: dietary_preferences\n    container:\n      image: appropriate/curl:latest\n      command: [sh, -c]\n      args: [\"curl -X GET 'http://example.com/CuisineRecommendations?review_report=$(review_report)&dietary_preferences=$(dietary_preferences)'\"]\n  - name: food-finder\n    inputs:\n      parameters:\n      - name: cuisine\n      - name: location\n    container:\n      image: appropriate/curl:latest\n      command: [sh, -c]\n      args: [\"curl -X GET 'http://example.com/FoodFinder?cuisine=$(cuisine)&location=$(location)'\"]\n  - name: suggest-food\n    inputs:\n      parameters:\n      - name: menu\n      - name: dietary_preferences\n    container:\n      image: appropriate/curl:latest\n      command: [sh, -c]\n      args: [\"curl -X GET 'http://example.com/SuggestFood?menu=$(menu)&dietary_preferences=$(dietary_preferences)'\"]\n  - name: find-recipe\n    inputs:\n      parameters:\n      - name: dish\n    container:\n      image: appropriate/curl:latest\n      command: [sh, -c]\n      args: [\"curl -X GET 'http://example.com/FindRecipe?dish=$(dish)'\"]"
  },
  {
    "Id": 945,
    "status": "Success",
    "workflow": "apiVersion: argoproj.io/v1alpha1\nkind: Workflow\nmetadata:\n  generateName: dark-knight-average-rating-\nspec:\n  entrypoint: main\n  templates:\n  - name: main\n    dag:\n      tasks:\n      - name: get-movie-ratings\n        template: get-movie-ratings\n        arguments:\n          parameters:\n          - name: movie\n            value: '{{{{ inputs.parameters.movie_name }}}}'\n      - name: calculate-average-rating\n        template: calculate-average-rating\n        dependencies:\n        - get-movie-ratings\n        arguments:\n          parameters:\n          - name: ratingScores\n            value: '{{{{ tasks.get-movie-ratings.result }}}}'\n  - name: get-movie-ratings\n    inputs:\n      parameters:\n      - name: movie\n    container:\n      image: your-image-here\n      command: [sh, -c]\n      args: [\"GetMovieRatings('{{{{ inputs.parameters.movie }}}}')\"]\n  - name: calculate-average-rating\n    inputs:\n      parameters:\n      - name: ratingScores\n    container:\n      image: your-image-here\n      command: [sh, -c]\n      args: [\"AverageRating('{{{{ inputs.parameters.ratingScores }}}}')\"]"
  },
  {
    "Id": 952,
    "status": "Success",
    "workflow": "apiVersion: argoproj.io/v1alpha1\nkind: Workflow\nmetadata:\n  generateName: highest-rating-workflow-\nspec:\n  entrypoint: main\n  templates:\n  - name: main\n    dag:\n      tasks:\n      - name: get-movie-id\n        template: get-movie-id\n        arguments:\n          parameters:\n          - name: movie\n            value: '{{{{ inputs.parameters.movie_name }}}}'\n      - name: get-movie-ratings\n        template: get-movie-ratings\n        dependencies:\n        - get-movie-id\n        arguments:\n          parameters:\n          - name: movie_id\n            value: '{{{{ tasks.get-movie-id.result }}}}'\n      - name: highest-rating\n        template: highest-rating\n        dependencies:\n        - get-movie-ratings\n        arguments:\n          parameters:\n          - name: rating_scores\n            value: '{{{{ tasks.get-movie-ratings.result }}}}'\n  - name: get-movie-id\n    inputs:\n      parameters:\n      - name: movie\n    script:\n      image: python:3.8\n      command: [python]\n      source: |\n        import json\n        import requests\n\n        def get_movie_id(movie_name):\n            # This is a placeholder URL and should be replaced with the actual API endpoint\n            url = f\"https://api.example.com/movies?name={movie_name}\"\n            response = requests.get(url)\n            data = response.json()\n            return data['id']\n\n        movie_id = get_movie_id(\"{{{{ inputs.parameters.movie }}}}\")\n        print(movie_id)\n  - name: get-movie-ratings\n    inputs:\n      parameters:\n      - name: movie_id\n    script:\n      image: python:3.8\n      command: [python]\n      source: |\n        import json\n        import requests\n\n        def get_movie_ratings(movie_id):\n            # This is a placeholder URL and should be replaced with the actual API endpoint\n            url = f\"https://api.example.com/ratings?movie_id={movie_id}\"\n            response = requests.get(url)\n            data = response.json()\n            return data['ratings']\n\n        rating_scores = get_movie_ratings(\"{{{{ inputs.parameters.movie_id }}}}\")\n        print(json.dumps(rating_scores))\n  - name: highest-rating\n    inputs:\n      parameters:\n      - name: rating_scores\n    script:\n      image: python:3.8\n      command: [python]\n      source: |\n        import json\n\n        def highest_rating(rating_scores):\n            return max(rating_scores)\n\n        rating_scores = json.loads(\"{{{{ inputs.parameters.rating_scores }}}}\")\n        highest_rating_score = highest_rating(rating_scores)\n        print(highest_rating_score)"
  },
  {
    "Id": 959,
    "status": "Success",
    "workflow": "apiVersion: argoproj.io/v1alpha1\nkind: Workflow\nmetadata:\n  generateName: seat-upgrade-workflow-\nspec:\n  entrypoint: main\n  templates:\n  - name: main\n    dag:\n      tasks:\n      - name: getuserid\n        template: getuserid\n        arguments:\n          parameters:\n          - name: username\n            value: '{{{{ inputs.parameters.username }}}}'\n      - name: getflightnumber\n        template: getflightnumber\n        dependencies:\n        - getuserid\n        arguments:\n          parameters:\n          - name: person_ID\n            value: '{{{{ tasks.getuserid.result }}}}'\n      - name: seatclassavailability\n        template: seatclassavailability\n        dependencies:\n        - getflightnumber\n        arguments:\n          parameters:\n          - name: flight_id\n            value: '{{{{ tasks.getflightnumber.result }}}}'\n      - name: bestseatclass\n        template: bestseatclass\n        dependencies:\n        - seatclassavailability\n        arguments:\n          parameters:\n          - name: seat_classes\n            value: '{{{{ tasks.seatclassavailability.result }}}}'\n      - name: seatselection\n        template: seatselection\n        dependencies:\n        - getflightnumber\n        arguments:\n          parameters:\n          - name: flight_id\n            value: '{{{{ tasks.getflightnumber.result }}}}'\n      - name: upgradeavailability\n        template: upgradeavailability\n        dependencies:\n        - seatselection\n        arguments:\n          parameters:\n          - name: seats\n            value: '{{{{ tasks.seatselection.result }}}}'\n  - name: getuserid\n    inputs:\n      parameters:\n      - name: username\n    container:\n      image: busybox\n      command: [sh, -c]\n      args: [\"echo $USERNAME\"]\n  - name: getflightnumber\n    inputs:\n      parameters:\n      - name: person_ID\n    container:\n      image: busybox\n      command: [sh, -c]\n      args: [\"echo $PERSON_ID\"]\n  - name: seatclassavailability\n    inputs:\n      parameters:\n      - name: flight_id\n    container:\n      image: busybox\n      command: [sh, -c]\n      args: [\"echo $FLIGHT_ID\"]\n  - name: bestseatclass\n    inputs:\n      parameters:\n      - name: seat_classes\n    container:\n      image: busybox\n      command: [sh, -c]\n      args: [\"echo $SEAT_CLASSES\"]\n  - name: seatselection\n    inputs:\n      parameters:\n      - name: flight_id\n    container:\n      image: busybox\n      command: [sh, -c]\n      args: [\"echo $FLIGHT_ID\"]\n  - name: upgradeavailability\n    inputs:\n      parameters:\n      - name: seats\n    container:\n      image: busybox\n      command: [sh, -c]\n      args: [\"echo $SEATS\"]"
  },
  {
    "Id": 961,
    "status": "Success",
    "workflow": "apiVersion: argoproj.io/v1alpha1\nkind: Workflow\nmetadata:\n  generateName: premium-seat-class-workflow-\nspec:\n  entrypoint: main\n  templates:\n  - name: main\n    dag:\n      tasks:\n      - name: getuserid\n        template: getuserid\n        arguments:\n          parameters:\n          - name: username\n            value: '{{{{ inputs.parameters.username }}}}'\n      - name: checkflights\n        template: checkflights\n        arguments:\n          parameters:\n          - name: source\n            value: '{{{{ inputs.parameters.source }}}}'\n          - name: destination\n            value: '{{{{ inputs.parameters.destination }}}}'\n      - name: findcheapestflight\n        template: findcheapestflight\n        dependencies:\n        - checkflights\n        arguments:\n          parameters:\n          - name: flights\n            value: '{{{{ tasks.checkflights.result }}}}'\n      - name: flightsearch\n        template: flightsearch\n        dependencies:\n        - findcheapestflight\n        arguments:\n          parameters:\n          - name: destination\n            value: '{{{{ inputs.parameters.destination }}}}'\n          - name: date\n            value: '{{{{ inputs.parameters.date }}}}'\n      - name: seatclassavailability\n        template: seatclassavailability\n        dependencies:\n        - flightsearch\n        arguments:\n          parameters:\n          - name: flight_id\n            value: '{{{{ tasks.flightsearch.result }}}}'\n      - name: bestseatclass\n        template: bestseatclass\n        dependencies:\n        - seatclassavailability\n        arguments:\n          parameters:\n          - name: seat_classes\n            value: '{{{{ tasks.seatclassavailability.result }}}}'\n      - name: getuserpreference\n        template: getuserpreference\n        dependencies:\n        - getuserid\n        arguments:\n          parameters:\n          - name: user_ID\n            value: '{{{{ tasks.getuserid.result }}}}'\n      - name: upgradeavailability\n        template: upgradeavailability\n        dependencies:\n        - bestseatclass\n        arguments:\n          parameters:\n          - name: seats\n            value: '{{{{ tasks.bestseatclass.result }}}}'\n      - name: bookflight\n        template: bookflight\n        dependencies:\n        - findcheapestflight\n        - getuserpreference\n        arguments:\n          parameters:\n          - name: flight_details\n            value: '{{{{ tasks.findcheapestflight.result }}}}'\n          - name: preferred_flight_class\n            value: '{{{{ tasks.getuserpreference.result }}}}'"
  },
  {
    "Id": 967,
    "status": "Success",
    "workflow": "apiVersion: argoproj.io/v1alpha1\nkind: Workflow\nmetadata:\n  generateName: locate-bookstore-workflow-\nspec:\n  entrypoint: main\n  templates:\n  - name: main\n    dag:\n      tasks:\n      - name: find-nearest-bookstore\n        template: find-nearest-bookstore\n        arguments:\n          parameters:\n          - name: city\n            value: '{{{{ inputs.parameters.city }}}}'\n      - name: find-bookstore\n        template: find-bookstore\n        dependencies:\n        - find-nearest-bookstore\n        arguments:\n          parameters:\n          - name: book_information\n            value: '{{{{ inputs.parameters.book_information }}}}'\n      - name: book-store-locator\n        template: book-store-locator\n        dependencies:\n        - find-nearest-bookstore\n        arguments:\n          parameters:\n          - name: city\n            value: '{{{{ inputs.parameters.city }}}}'\n      - name: book-store-availability\n        template: book-store-availability\n        dependencies:\n        - find-bookstore\n        arguments:\n          parameters:\n          - name: book_id\n            value: '{{{{ tasks.find-bookstore.result }}}}'\n  inputs:\n    parameters:\n    - name: city\n      value: 'New York'\n    - name: book_information\n      value: 'To Kill a Mockingbird by Harper Lee'"
  },
  {
    "Id": 971,
    "status": "Success",
    "workflow": "apiVersion: argoproj.io/v1alpha1\nkind: Workflow\nmetadata:\n  generateName: currency-conversion-workflow-\nspec:\n  entrypoint: main\n  templates:\n  - name: main\n    dag:\n      tasks:\n      - name: item-price\n        template: item-price\n        arguments:\n          parameters:\n          - name: item_id\n            value: '{{{{ inputs.parameters.item_id }}}}'\n      - name: conversion-rate\n        template: conversion-rate\n        arguments:\n          parameters:\n          - name: source_currency\n            value: 'EUR'\n          - name: target_currency\n            value: 'JPY'\n      - name: calculate-cost\n        template: calculate-cost\n        dependencies:\n        - item-price\n        - conversion-rate\n        arguments:\n          parameters:\n          - name: price\n            value: '{{{{ tasks.item-price.result }}}}'\n          - name: exchange_rate\n            value: '{{{{ tasks.conversion-rate.result }}}}'\n  - name: item-price\n    inputs:\n      parameters:\n      - name: item_id\n    container:\n      image: busybox\n      command: [sh, -c]\n      args: [\"echo $(ItemPrice {{inputs.parameters.item_id}})\"]\n  - name: conversion-rate\n    inputs:\n      parameters:\n      - name: source_currency\n      - name: target_currency\n    container:\n      image: busybox\n      command: [sh, -c]\n      args: [\"echo $(ConvertToCurrency 1 {{inputs.parameters.target_currency}})\"]\n  - name: calculate-cost\n    inputs:\n      parameters:\n      - name: price\n      - name: exchange_rate\n    container:\n      image: busybox\n      command: [sh, -c]\n      args: [\"echo $(CalculateCost {{inputs.parameters.price}} {{inputs.parameters.exchange_rate}})\"]"
  },
  {
    "Id": 1011,
    "status": "Success",
    "workflow": "apiVersion: argoproj.io/v1alpha1\nkind: Workflow\nmetadata:\n  generateName: generate-review-workflow-\nspec:\n  entrypoint: main\n  templates:\n  - name: main\n    dag:\n      tasks:\n      - name: bookdetails\n        template: bookdetails\n        arguments:\n          parameters:\n          - name: title\n            value: '{{{{ inputs.parameters.bookname }}}}'\n      - name: booksummary\n        template: booksummary\n        arguments:\n          parameters:\n          - name: book_name\n            value: '{{{{ inputs.parameters.bookname }}}}'\n      - name: authordetails\n        template: authordetails\n        dependencies:\n        - bookdetails\n        arguments:\n          parameters:\n          - name: title\n            value: '{{{{ inputs.parameters.bookname }}}}'\n      - name: reviewgenerator\n        template: reviewgenerator\n        dependencies:\n        - bookdetails\n        - authordetails\n        arguments:\n          parameters:\n          - name: bookdetails\n            value: '{{{{ tasks.bookdetails.result }}}}'\n          - name: authorData\n            value: '{{{{ tasks.authordetails.result }}}}'\n  inputs:\n    parameters:\n    - name: bookname\n      value: 'Pride and Prejudice'"
  },
  {
    "Id": 1037,
    "status": "Success",
    "workflow": "apiVersion: argoproj.io/v1alpha1\nkind: Workflow\nmetadata:\n  generateName: harry-potter-dinner-reservation-\nspec:\n  entrypoint: main\n  templates:\n  - name: main\n    dag:\n      tasks:\n      - name: recommend-restaurant\n        template: recommend-restaurant\n        arguments:\n          parameters:\n          - name: occasion\n            value: '{{{{ inputs.parameters.occasion }}}}'\n      - name: book-table\n        template: book-table\n        dependencies:\n        - recommend-restaurant\n        arguments:\n          parameters:\n          - name: restaurant_name\n            value: '{{{{ tasks.recommend-restaurant.result }}}}'\n          - name: partySize\n            value: '{{{{ inputs.parameters.partySize }}}}'\n          - name: time\n            value: '{{{{ inputs.parameters.time }}}}'\n  - name: recommend-restaurant\n    container:\n      image: python:3.8\n      command: [python, -c]\n      args:\n      - |\n        import json\n        import requests\n\n        # Simulate an API call to recommend a restaurant\n        response = {\n            \"restaurant_name\": \"Leaky Cauldron\"\n        }\n        print(json.dumps(response))\n      outputs:\n        parameters:\n        - name: result\n          valueFrom:\n            path: /tmp/result.json\n  - name: book-table\n    container:\n      image: python:3.8\n      command: [python, -c]\n      args:\n      - |\n        import json\n        import requests\n\n        # Simulate an API call to book a table\n        response = {\n            \"reservationStatus\": \"success\"\n        }\n        print(json.dumps(response))\n      outputs:\n        parameters:\n        - name: result\n          valueFrom:\n            path: /tmp/result.json"
  },
  {
    "Id": 1044,
    "status": "Success",
    "workflow": "apiVersion: argoproj.io/v1alpha1\nkind: Workflow\nmetadata:\n  generateName: audi-q7-tax-calculation-\nspec:\n  entrypoint: main\n  templates:\n  - name: main\n    dag:\n      tasks:\n      - name: get-car-info\n        template: get-car-info\n        arguments:\n          parameters:\n          - name: car_name\n            value: '{{{{ inputs.parameters.car_name }}}}'\n          - name: country\n            value: '{{{{ inputs.parameters.country }}}}'\n      - name: get-country-tax-rate\n        template: get-country-tax-rate\n        arguments:\n          parameters:\n          - name: country\n            value: '{{{{ inputs.parameters.country }}}}'\n      - name: calculate-tax-cost\n        template: calculate-tax-cost\n        dependencies:\n        - get-car-info\n        - get-country-tax-rate\n        arguments:\n          parameters:\n          - name: price\n            value: '{{{{ tasks.get-car-info.result.price }}}}'\n          - name: tax_rate\n            value: '{{{{ tasks.get-country-tax-rate.result.taxRate }}}}'\n  - name: get-car-info\n    inputs:\n      parameters:\n      - name: car_name\n      - name: country\n    outputs:\n      parameters:\n      - name: price\n        valueFrom:\n          jqFilter: .carDetails.price\n      - name: carDetails\n        valueFrom:\n          jqFilter: .\n    container:\n      image: curlimages/curl:7.73.0\n      command: [sh, -c]\n      args: [\"curl -s https://api.example.com/carinfo?car_name=$CAR_NAME&country=$COUNTRY | jq .\"]\n      env:\n      - name: CAR_NAME\n        value: '{{{{ inputs.parameters.car_name }}}}'\n      - name: COUNTRY\n        value: '{{{{ inputs.parameters.country }}}}'\n  - name: get-country-tax-rate\n    inputs:\n      parameters:\n      - name: country\n    outputs:\n      parameters:\n      - name: taxRate\n        valueFrom:\n          jqFilter: .taxRate\n    container:\n      image: curlimages/curl:7.73.0\n      command: [sh, -c]\n      args: [\"curl -s https://api.example.com/countrytaxrate?country=$COUNTRY | jq .\"]\n      env:\n      - name: COUNTRY\n        value: '{{{{ inputs.parameters.country }}}}'\n  - name: calculate-tax-cost\n    inputs:\n      parameters:\n      - name: price\n      - name: tax_rate\n    outputs:\n      parameters:\n      - name: taxCost\n        valueFrom:\n          jqFilter: .taxCost\n    container:\n      image: curlimages/curl:7.73.0\n      command: [sh, -c]\n      args: [\"curl -s https://api.example.com/taxcostcalculator?price=$PRICE&tax_rate=$TAX_RATE | jq .\"]\n      env:\n      - name: PRICE\n        value: '{{{{ inputs.parameters.price }}}}'\n      - name: TAX_RATE\n        value: '{{{{ inputs.parameters.tax_rate }}}}'"
  },
  {
    "Id": 1061,
    "status": "Success",
    "workflow": "apiVersion: argoproj.io/v1alpha1\nkind: Workflow\nmetadata:\n  generateName: dubai-dining-workflow-\nspec:\n  entrypoint: main\n  templates:\n  - name: main\n    dag:\n      tasks:\n      - name: find-popular-dishes\n        template: find-popular-dishes\n        arguments:\n          parameters:\n          - name: city\n            value: '{{{{ inputs.parameters.city }}}}'\n      - name: filter-restaurant-by-dietary-restrictions\n        template: filter-restaurant-by-dietary-restrictions\n        dependencies:\n        - find-popular-dishes\n        arguments:\n          parameters:\n          - name: restaurant\n            value: '{{{{ tasks.find-popular-dishes.result }}}}'\n          - name: restrictions\n            value: '{{{{ inputs.parameters.restrictions }}}}'\n      - name: cuisine-by-restaurant\n        template: cuisine-by-restaurant\n        dependencies:\n        - filter-restaurant-by-dietary-restrictions\n        arguments:\n          parameters:\n          - name: restaurantData\n            value: '{{{{ tasks.filter-restaurant-by-dietary-restrictions.result }}}}'\n      - name: cuisine-recommendations\n        template: cuisine-recommendations\n        dependencies:\n        - cuisine-by-restaurant\n        arguments:\n          parameters:\n          - name: review_report\n            value: '{{{{ tasks.cuisine-by-restaurant.result }}}}'\n          - name: dietary_preferences\n            value: '{{{{ inputs.parameters.dietary_preferences }}}}'\n      - name: menu-selection\n        template: menu-selection\n        dependencies:\n        - cuisine-recommendations\n        arguments:\n          parameters:\n          - name: restaurantInfo\n            value: '{{{{ tasks.filter-restaurant-by-dietary-restrictions.result }}}}'\n          - name: cuisineRec\n            value: '{{{{ tasks.cuisine-recommendations.result }}}}'\n      - name: recommend-items\n        template: recommend-items\n        dependencies:\n        - menu-selection\n        arguments:\n          parameters:\n          - name: restaurant_name\n            value: '{{{{ tasks.menu-selection.result }}}}'\n      - name: suggest-food\n        template: suggest-food\n        dependencies:\n        - recommend-items\n        arguments:\n          parameters:\n          - name: menu\n            value: '{{{{ tasks.recommend-items.result }}}}'\n          - name: dietary_preferences\n            value: '{{{{ inputs.parameters.dietary_preferences }}}}'\n      - name: recommend-dish\n        template: recommend-dish\n        dependencies:\n        - suggest-food\n        arguments:\n          parameters:\n          - name: menu\n            value: '{{{{ tasks.suggest-food.result }}}}'\n  - name: find-popular-dishes\n    inputs:\n      parameters:\n      - name: city\n    container:\n      image: argoproj/argosay:v2\n      command: [sh, -c]\n      args: [\"echo {{inputs.parameters.city}}\"]\n  - name: filter-restaurant-by-dietary-restrictions\n    inputs:\n      parameters:\n      - name: restaurant\n      - name: restrictions\n    container:\n      image: argoproj/argosay:v2\n      command: [sh, -c]\n      args: [\"echo {{inputs.parameters.restaurant}} {{inputs.parameters.restrictions}}\"]\n  - name: cuisine-by-restaurant\n    inputs:\n      parameters:\n      - name: restaurantData\n    container:\n      image: argoproj/argosay:v2\n      command: [sh, -c]\n      args: [\"echo {{inputs.parameters.restaurantData}}\"]\n  - name: cuisine-recommendations\n    inputs:\n      parameters:\n      - name: review_report\n      - name: dietary_preferences\n    container:\n      image: argoproj/argosay:v2\n      command: [sh, -c]\n      args: [\"echo {{inputs.parameters.review_report}} {{inputs.parameters.dietary_preferences}}\"]\n  - name: menu-selection\n    inputs:\n      parameters:\n      - name: restaurantInfo\n      - name: cuisineRec\n    container:\n      image: argoproj/argosay:v2\n      command: [sh, -c]\n      args: [\"echo {{inputs.parameters.restaurantInfo}} {{inputs.parameters.cuisineRec}}\"]\n  - name: recommend-items\n    inputs:\n      parameters:\n      - name: restaurant_name\n    container:\n      image: argoproj/argosay:v2\n      command: [sh, -c]\n      args: [\"echo {{inputs.parameters.restaurant_name}}\"]\n  - name: suggest-food\n    inputs:\n      parameters:\n      - name: menu\n      - name: dietary_preferences\n    container:\n      image: argoproj/argosay:v2\n      command: [sh, -c]\n      args: [\"echo {{inputs.parameters.menu}} {{inputs.parameters.dietary_preferences}}\"]\n  - name: recommend-dish"
  },
  {
    "Id": 1067,
    "status": "Success",
    "workflow": "apiVersion: argoproj.io/v1alpha1\nkind: Workflow\nmetadata:\n  generateName: movie-ticket-workflow-\nspec:\n  entrypoint: main\n  templates:\n  - name: main\n    dag:\n      tasks:\n      - name: book-movie-ticket\n        template: book-movie-ticket\n        arguments:\n          parameters:\n          - name: movie_name\n            value: '{{{{ inputs.parameters.movie_name }}}}'\n          - name: showtime\n            value: '{{{{ inputs.parameters.showtime }}}}'\n          - name: number_of_tickets\n            value: '{{{{ inputs.parameters.number_of_tickets }}}}'\n  - name: book-movie-ticket\n    inputs:\n      parameters:\n      - name: movie_name\n      - name: showtime\n      - name: number_of_tickets\n    script:\n      image: python:3.8\n      command: [python]\n      source: |\n        import json\n        import requests\n\n        def book_movie_ticket(movie_name, showtime, number_of_tickets):\n            url = \"http://your-api-endpoint.com/BookMovieTicket\"\n            payload = {\n                \"movie_name\": movie_name,\n                \"showtime\": showtime,\n                \"number_of_tickets\": number_of_tickets\n            }\n            response = requests.post(url, json=payload)\n            return response.json()\n\n        result = book_movie_ticket(\"{{{{ inputs.parameters.movie_name }}}}\", \"{{{{ inputs.parameters.showtime }}}}\", int(\"{{{{ inputs.parameters.number_of_tickets }}}}}\"))\n        print(json.dumps(result))"
  },
  {
    "Id": 1075,
    "status": "Success",
    "workflow": "apiVersion: argoproj.io/v1alpha1\nkind: Workflow\nmetadata:\n  generateName: hotel-booking-workflow-\nspec:\n  entrypoint: main\n  templates:\n  - name: main\n    dag:\n      tasks:\n      - name: checkvacancy\n        template: checkvacancy\n        arguments:\n          parameters:\n          - name: hotelname\n            value: '{{{{ inputs.parameters.hotelname }}}}'\n          - name: date\n            value: '{{{{ inputs.parameters.check_in_date }}}}'\n      - name: findroomtype\n        template: findroomtype\n        dependencies:\n        - checkvacancy\n        arguments:\n          parameters:\n          - name: hotelname\n            value: '{{{{ inputs.parameters.hotelname }}}}'\n          - name: guestNumber\n            value: '{{{{ inputs.parameters.num_of_people }}}}'\n      - name: hotelbooking\n        template: hotelbooking\n        dependencies:\n        - findroomtype\n        arguments:\n          parameters:\n          - name: destination\n            value: '{{{{ inputs.parameters.destination }}}}'\n          - name: check_in_date\n            value: '{{{{ inputs.parameters.check_in_date }}}}'\n          - name: check_out_date\n            value: '{{{{ inputs.parameters.check_out_date }}}}'\n  - name: checkvacancy\n    inputs:\n      parameters:\n      - name: hotelname\n      - name: date\n    container:\n      image: your-image-here\n      command: [sh, -c]\n      args: [\"CheckVacancy('{{{{ inputs.parameters.hotelname }}}}', '{{{{ inputs.parameters.date }}}}')\"]\n  - name: findroomtype\n    inputs:\n      parameters:\n      - name: hotelname\n      - name: guestNumber\n    container:\n      image: your-image-here\n      command: [sh, -c]\n      args: [\"FindRoomType('{{{{ inputs.parameters.hotelname }}}}', '{{{{ inputs.parameters.guestNumber }}}}')\"]\n  - name: hotelbooking\n    inputs:\n      parameters:\n      - name: destination\n      - name: check_in_date\n      - name: check_out_date\n    container:\n      image: your-image-here\n      command: [sh, -c]\n      args: [\"HotelBooking('{{{{ inputs.parameters.destination }}}}', '{{{{ inputs.parameters.check_in_date }}}}', '{{{{ inputs.parameters.check_out_date }}}}')\"]"
  },
  {
    "Id": 1080,
    "status": "Success",
    "workflow": "apiVersion: argoproj.io/v1alpha1\nkind: Workflow\nmetadata:\n  generateName: ophthalmologist-appointment-workflow-\nspec:\n  entrypoint: main\n  templates:\n  - name: main\n    dag:\n      tasks:\n      - name: find-doctor\n        template: find-doctor\n        arguments:\n          parameters:\n          - name: specialty\n            value: '{{{{ inputs.parameters.specialty }}}}'\n          - name: location\n            value: '{{{{ inputs.parameters.location }}}}'\n      - name: get-appointment\n        template: get-appointment\n        dependencies:\n        - find-doctor\n        arguments:\n          parameters:\n          - name: doctor_id\n            value: '{{{{ tasks.find-doctor.result.doctor_id }}}}'\n          - name: date\n            value: '{{{{ inputs.parameters.date }}}}'\n      - name: create-appointment\n        template: create-appointment\n        dependencies:\n        - get-appointment\n        arguments:\n          parameters:\n          - name: doctorId\n            value: '{{{{ tasks.find-doctor.result.doctor_id }}}}'\n          - name: patientId\n            value: '{{{{ inputs.parameters.patientId }}}}'\n          - name: date\n            value: '{{{{ inputs.parameters.date }}}}'\n          - name: time\n            value: '{{{{ inputs.parameters.time }}}}'\n      - name: confirm-appointment\n        template: confirm-appointment\n        dependencies:\n        - create-appointment\n        arguments:\n          parameters:\n          - name: appointment_id\n            value: '{{{{ tasks.create-appointment.result.appointment_id }}}}'\n  - name: find-doctor\n    inputs:\n      parameters:\n      - name: specialty\n      - name: location\n    outputs:\n      parameters:\n      - name: doctor_id\n        valueFrom:\n          path: /tmp/doctor_id.txt\n    script:\n      image: python:3.7\n      command: [python]\n      source: |\n        import json\n        import requests\n\n        response = requests.get(f\"http://example.com/api/FindDoctor?specialty={{{{ inputs.parameters.specialty }}}}&location={{{{ inputs.parameters.location }}}}\")\n        doctor_info = response.json()\n        with open('/tmp/doctor_id.txt', 'w') as f:\n            f.write(str(doctor_info['doctor_id']))\n  - name: get-appointment\n    inputs:\n      parameters:\n      - name: doctor_id\n      - name: date\n    outputs:\n      parameters:\n      - name: appointment\n        valueFrom:\n          path: /tmp/appointment.txt\n    script:\n      image: python:3.7\n      command: [python]\n      source: |\n        import json\n        import requests\n\n        response = requests.get(f\"http://example.com/api/GetAppointment?doctor_id={{{{ inputs.parameters.doctor_id }}}}&date={{{{ inputs.parameters.date }}}}\")\n        appointment_info = response.json()\n        with open('/tmp/appointment.txt', 'w') as f:\n            f.write(json.dumps(appointment_info))\n  - name: create-appointment\n    inputs:\n      parameters:\n      - name: doctorId\n      - name: patientId\n      - name: date\n      - name: time\n    outputs:\n      parameters:\n      - name: appointment_id\n        valueFrom:\n          path: /tmp/appointment_id.txt\n    script:\n      image: python:3.7\n      command: [python]\n      source: |\n        import json\n        import requests\n\n        response = requests.post(\"http://example.com/api/CreateAppointment\", data={\n            \"doctorId\": \"{{{{ inputs.parameters.doctorId }}}}\",\n            \"patientId\": \"{{{{ inputs.parameters.patientId }}}}\",\n            \"date\": \"{{{{ inputs.parameters.date }}}}\",\n            \"time\": \"{{{{ inputs.parameters.time }}}} \"\n        })\n        appointment_status = response.json()\n        with open('/tmp/appointment_id.txt', 'w') as f:\n            f.write(str(appointment_status['appointment_id']))\n  - name: confirm-appointment\n    inputs:\n      parameters:\n      - name: appointment_id\n    outputs:\n      parameters:\n      - name: confirmation\n        valueFrom:\n          path: /tmp/confirmation.txt\n    script:\n      image: python:3.7\n      command: [python]\n      source: |\n        import json\n        import requests\n\n        response = requests.post(\"http://example.com/api/ConfirmAppointment\", data={\n            \"appointment_id\": \"{{{{ inputs.parameters.appointment_id }}}}\"\n        })\n        confirmation_status = response.json()\n        with open('/tmp/confirmation.txt', 'w') as f:\n            f.write(str(confirmation_status['confirmation']))"
  },
  {
    "Id": 1088,
    "status": "Success",
    "workflow": "apiVersion: argoproj.io/v1alpha1\nkind: Workflow\nmetadata:\n  generateName: movie-booking-workflow-\nspec:\n  entrypoint: main\n  templates:\n  - name: main\n    dag:\n      tasks:\n      - name: find-showtime\n        template: find-showtime\n        arguments:\n          parameters:\n          - name: movie_name\n            value: '{{{{ inputs.parameters.movie_name }}}}'\n          - name: location\n            value: '{{{{ inputs.parameters.location }}}}'\n          - name: date\n            value: '{{{{ inputs.parameters.date }}}}'\n      - name: book-tickets\n        template: book-tickets\n        dependencies:\n        - find-showtime\n        arguments:\n          parameters:\n          - name: showtime\n            value: '{{{{ tasks.find-showtime.result }}}}'\n          - name: number_of_tickets\n            value: '{{{{ inputs.parameters.number_of_tickets }}}}'\n  - name: find-showtime\n    container:\n      image: your-image-with-find-showtime-api\n      command: [\"FindShowtime\"]\n      args: [\"{{{{ inputs.parameters.movie_name }}}}\", \"{{{{ inputs.parameters.location }}}}\", \"{{{{ inputs.parameters.date }}}}\" ]\n      env:\n      - name: MOVIE_NAME\n        value: \"{{{{ inputs.parameters.movie_name }}}}\"\n      - name: LOCATION\n        value: \"{{{{ inputs.parameters.location }}}}\"\n      - name: DATE\n        value: \"{{{{ inputs.parameters.date }}}}\"\n    outputs:\n      parameters:\n      - name: showtime\n        valueFrom:\n          path: /tmp/showtime.txt\n  - name: book-tickets\n    container:\n      image: your-image-with-book-tickets-api\n      command: [\"BookTickets\"]\n      args: [\"{{{{ inputs.parameters.movie_name }}}}\", \"{{{{ inputs.parameters.showtime }}}}\", \"{{{{ inputs.parameters.number_of_tickets }}}}\" ]\n      env:\n      - name: MOVIE_NAME\n        value: \"{{{{ inputs.parameters.movie_name }}}}\"\n      - name: SHOWTIME\n        value: \"{{{{ inputs.parameters.showtime }}}}\"\n      - name: NUMBER_OF_TICKETS\n        value: \"{{{{ inputs.parameters.number_of_tickets }}}}\"\n    outputs:\n      parameters:\n      - name: booking_status\n        valueFrom:\n          path: /tmp/booking_status.txt\n  inputs:\n    parameters:\n    - name: movie_name\n      value: \"drama\"\n    - name: location\n      value: \"Seattle\"\n    - name: date\n      value: \"December 25th\"\n    - name: number_of_tickets\n      value: \"6\""
  },
  {
    "Id": 1093,
    "status": "Success",
    "workflow": "apiVersion: argoproj.io/v1alpha1\nkind: Workflow\nmetadata:\n  generateName: movie-ticket-workflow-\nspec:\n  entrypoint: main\n  templates:\n  - name: main\n    dag:\n      tasks:\n      - name: recommend-movie\n        template: recommend-movie\n        arguments:\n          parameters:\n          - name: genre\n            value: '{{{{ inputs.parameters.genre }}}}'\n      - name: book-movie-ticket\n        template: book-movie-ticket\n        dependencies:\n        - recommend-movie\n        arguments:\n          parameters:\n          - name: movie_name\n            value: '{{{{ tasks.recommend-movie.result }}}}'\n          - name: showtime\n            value: '{{{{ inputs.parameters.showtime }}}}'\n          - name: number_of_tickets\n            value: '{{{{ inputs.parameters.number_of_tickets }}}}'\n  - name: recommend-movie\n    container:\n      image: appropriate/curl:latest\n      command: [sh, -c]\n      args: [\"curl -X POST -d 'genre={{inputs.parameters.genre}}' http://example.com/MovieRecommender\"]\n      inputs:\n        parameters:\n        - name: genre\n  - name: book-movie-ticket\n    container:\n      image: appropriate/curl:latest\n      command: [sh, -c]\n      args: [\"curl -X POST -d 'movie_name={{inputs.parameters.movie_name}}&showtime={{inputs.parameters.showtime}}&number_of_tickets={{inputs.parameters.number_of_tickets}}' http://example.com/BookMovieTickets\"]\n      inputs:\n        parameters:\n        - name: movie_name\n        - name: showtime\n        - name: number_of_tickets"
  },
  {
    "Id": 1097,
    "status": "Success",
    "workflow": "apiVersion: argoproj.io/v1alpha1\nkind: Workflow\nmetadata:\n  generateName: john-flight-status-\nspec:\n  entrypoint: main\n  templates:\n  - name: main\n    dag:\n      tasks:\n      - name: get-person-id\n        template: get-person-id\n        arguments:\n          parameters:\n          - name: person-name\n            value: '{{{{ inputs.parameters.person-name }}}}'\n      - name: get-flight-number\n        template: get-flight-number\n        dependencies:\n        - get-person-id\n        arguments:\n          parameters:\n          - name: person-id\n            value: '{{{{ tasks.get-person-id.result }}}}'\n      - name: check-flight-status\n        template: check-flight-status\n        dependencies:\n        - get-flight-number\n        arguments:\n          parameters:\n          - name: flight-number\n            value: '{{{{ tasks.get-flight-number.result }}}}'\n  - name: get-person-id\n    inputs:\n      parameters:\n      - name: person-name\n    container:\n      image: your-image-here\n      command: [sh, -c]\n      args: [\"your-command-to-get-person-id {{inputs.parameters.person-name}}\"]\n  - name: get-flight-number\n    inputs:\n      parameters:\n      - name: person-id\n    container:\n      image: your-image-here\n      command: [sh, -c]\n      args: [\"your-command-to-get-flight-number {{inputs.parameters.person-id}}\"]\n  - name: check-flight-status\n    inputs:\n      parameters:\n      - name: flight-number\n    container:\n      image: your-image-here\n      command: [sh, -c]\n      args: [\"your-command-to-check-flight-status {{inputs.parameters.flight-number}}\"]"
  },
  {
    "Id": 1112,
    "status": "Success",
    "workflow": "apiVersion: argoproj.io/v1alpha1\nkind: Workflow\nmetadata:\n  generateName: find-restaurant-and-book-reservation-\nspec:\n  entrypoint: main\n  templates:\n  - name: main\n    dag:\n      tasks:\n      - name: get-movie-theater\n        template: get-movie-theater\n        arguments:\n          parameters:\n          - name: movie_name\n            value: '{{{{ inputs.parameters.movie_name }}}}'\n      - name: resturant-near-cinema\n        template: resturant-near-cinema\n        dependencies:\n        - get-movie-theater\n        arguments:\n          parameters:\n          - name: city\n            value: '{{{{ inputs.parameters.city }}}}'\n          - name: cinema_name\n            value: '{{{{ tasks.get-movie-theater.result }}}}'\n      - name: book-reservation\n        template: book-reservation\n        dependencies:\n        - resturant-near-cinema\n        arguments:\n          parameters:\n          - name: restaurant\n            value: '{{{{ tasks.resturant-near-cinema.result }}}}'\n          - name: reservation_time\n            value: '{{{{ inputs.parameters.reservation_time }}}}'\n  - name: get-movie-theater\n    inputs:\n      parameters:\n      - name: movie_name\n    container:\n      image: busybox\n      command: [sh, -c]\n      args: [\"echo GetMovieTheater('{{{{ inputs.parameters.movie_name }}}}')\"]\n  - name: resturant-near-cinema\n    inputs:\n      parameters:\n      - name: city\n      - name: cinema_name\n    container:\n      image: busybox\n      command: [sh, -c]\n      args: [\"echo ResturantNearCinema('{{{{ inputs.parameters.city }}}}', '{{{{ inputs.parameters.cinema_name }}}}')\"]\n  - name: book-reservation\n    inputs:\n      parameters:\n      - name: restaurant\n      - name: reservation_time\n    container:\n      image: busybox\n      command: [sh, -c]\n      args: [\"echo BookReservation('{{{{ inputs.parameters.restaurant }}}}', '{{{{ inputs.parameters.reservation_time }}}}')\"]"
  },
  {
    "Id": 1117,
    "status": "Success",
    "workflow": "apiVersion: argoproj.io/v1alpha1\nkind: Workflow\nmetadata:\n  generateName: reading-time-workflow-\nspec:\n  entrypoint: main\n  templates:\n  - name: main\n    dag:\n      tasks:\n      - name: bookname\n        template: bookname\n        arguments:\n          parameters:\n          - name: ISBN\n            value: '{{{{ inputs.parameters.ISBN }}}}'\n      - name: pagecount\n        template: pagecount\n        dependencies:\n        - bookname\n        arguments:\n          parameters:\n          - name: Title\n            value: '{{{{ tasks.bookname.result }}}}'\n      - name: readingtime\n        template: readingtime\n        dependencies:\n        - pagecount\n        arguments:\n          parameters:\n          - name: Pages\n            value: '{{{{ tasks.pagecount.result }}}}'\n  - name: bookname\n    inputs:\n      parameters:\n      - name: ISBN\n    outputs:\n      parameters:\n      - name: title\n        valueFrom:\n          path: /tmp/title\n    container:\n      image: your-image-with-api-calls\n      command: [sh, -c]\n      args: [\"your-command-to-call-api Bookname({{inputs.parameters.ISBN}}) > /tmp/title\"]\n  - name: pagecount\n    inputs:\n      parameters:\n      - name: Title\n    outputs:\n      parameters:\n      - name: Pages\n        valueFrom:\n          path: /tmp/pages\n    container:\n      image: your-image-with-api-calls\n      command: [sh, -c]\n      args: [\"your-command-to-call-api PageCount({{inputs.parameters.Title}}) > /tmp/pages\"]\n  - name: readingtime\n    inputs:\n      parameters:\n      - name: Pages\n    outputs:\n      parameters:\n      - name: Time\n        valueFrom:\n          path: /tmp/time\n    container:\n      image: your-image-with-api-calls\n      command: [sh, -c]\n      args: [\"your-command-to-call-api ReadingTime({{inputs.parameters.Pages}}) > /tmp/time\"]"
  },
  {
    "Id": 1118,
    "status": "Success",
    "workflow": "apiVersion: argoproj.io/v1alpha1\nkind: Workflow\nmetadata:\n  generateName: outfit-recommendation-workflow-\nspec:\n  entrypoint: main\n  templates:\n  - name: main\n    dag:\n      tasks:\n      - name: checkweather\n        template: checkweather\n        arguments:\n          parameters:\n          - name: location\n            value: '{{{{ inputs.parameters.location }}}}'\n      - name: recommendoutfit\n        template: recommendoutfit\n        dependencies:\n        - checkweather\n        arguments:\n          parameters:\n          - name: weather\n            value: '{{{{ tasks.checkweather.result }}}}'\n      - name: suggeststore\n        template: suggeststore\n        dependencies:\n        - recommendoutfit\n        arguments:\n          parameters:\n          - name: outfit\n            value: '{{{{ tasks.recommendoutfit.result }}}}'\n          - name: location\n            value: '{{{{ inputs.parameters.location }}}}'\n  - name: checkweather\n    inputs:\n      parameters:\n      - name: location\n    container:\n      image: your-weather-api-image\n      command: [\"sh\", \"-c\"]\n      args: [\"checkweather --location ${{{{ inputs.parameters.location }}}}\", \"--output=json\"]\n  - name: recommendoutfit\n    inputs:\n      parameters:\n      - name: weather\n    container:\n      image: your-outfit-recommendation-image\n      command: [\"sh\", \"-c\"]\n      args: [\"recommendoutfit --weather ${{{{ inputs.parameters.weather }}}}\", \"--output=json\"]\n  - name: suggeststore\n    inputs:\n      parameters:\n      - name: outfit\n      - name: location\n    container:\n      image: your-store-suggestion-image\n      command: [\"sh\", \"-c\"]\n      args: [\"suggeststore --outfit ${{{{ inputs.parameters.outfit }}}}\", \"--location ${{{{ inputs.parameters.location }}}}\", \"--output=json\"]"
  },
  {
    "Id": 1132,
    "status": "Success",
    "workflow": "apiVersion: argoproj.io/v1alpha1\nkind: Workflow\nmetadata:\n  generateName: driving-route-workflow-\nspec:\n  entrypoint: main\n  templates:\n  - name: main\n    dag:\n      tasks:\n      - name: get-driving-distance\n        template: get-driving-distance\n        arguments:\n          parameters:\n          - name: startPoint\n            value: '{{{{ inputs.parameters.startPoint }}}}'\n          - name: endPoint\n            value: '{{{{ inputs.parameters.endPoint }}}}'\n      - name: traffic-estimator\n        template: traffic-estimator\n        dependencies:\n        - get-driving-distance\n        arguments:\n          parameters:\n          - name: distance\n            value: '{{{{ tasks.get-driving-distance.result }}}}'\n      - name: calculate-time\n        template: calculate-time\n        dependencies:\n        - get-driving-distance\n        arguments:\n          parameters:\n          - name: distance\n            value: '{{{{ tasks.get-driving-distance.result }}}}'\n          - name: speed\n            value: '{{{{ inputs.parameters.speed }}}}'\n      - name: get-route\n        template: get-route\n        arguments:\n          parameters:\n          - name: origin_location\n            value: '{{{{ inputs.parameters.origin_location }}}}'\n          - name: destination_location\n            value: '{{{{ inputs.parameters.destination_location }}}}'\n  inputs:\n    parameters:\n    - name: startPoint\n      value: \"New York\"\n    - name: endPoint\n      value: \"Washington D.C.\"\n    - name: origin_location\n      value: \"(40.7128, -74.0060)\"\n    - name: destination_location\n      value: \"(38.9056, -77.0369)\"\n    - name: speed\n      value: \"60\""
  },
  {
    "Id": 1165,
    "status": "Success",
    "workflow": "apiVersion: argoproj.io/v1alpha1\nkind: Workflow\nmetadata:\n  generateName: stock-analysis-workflow-\nspec:\n  entrypoint: main\n  templates:\n  - name: main\n    dag:\n      tasks:\n      - name: fetchstockdata\n        template: fetchstockdata\n        arguments:\n          parameters:\n          - name: stock_symbol\n            value: '{{{{ inputs.parameters.stock_symbol }}}}'\n      - name: basicdataanalysis\n        template: basicdataanalysis\n        dependencies:\n        - fetchstockdata\n        arguments:\n          parameters:\n          - name: stock_data\n            value: '{{{{ tasks.fetchstockdata.result }}}}'\n      - name: generatereport\n        template: generatereport\n        dependencies:\n        - basicdataanalysis\n        arguments:\n          parameters:\n          - name: analyzed_data\n            value: '{{{{ tasks.basicdataanalysis.result }}}}'\n          - name: template\n            value: '{{{{ inputs.parameters.template }}}}'\n  inputs:\n    parameters:\n    - name: stock_symbol\n      value: 'AAPL'\n    - name: template\n      value: 'basic_analysis'"
  },
  {
    "Id": 1176,
    "status": "Success",
    "workflow": "apiVersion: argoproj.io/v1alpha1\nkind: Workflow\nmetadata:\n  generateName: dependency-workflow-john-purchase-\nspec:\n  entrypoint: main\n  templates:\n  - name: main\n    dag:\n      tasks:\n      - name: getuserid\n        template: getuserid\n        arguments:\n          parameters:\n          - name: email\n            value: '{{{{ inputs.parameters.email }}}}'\n      - name: purchaseitem\n        template: purchaseitem\n        dependencies:\n        - getuserid\n        arguments:\n          parameters:\n          - name: user_ID\n            value: '{{{{ tasks.getuserid.result }}}}'\n          - name: product_ID\n            value: '{{{{ inputs.parameters.product_ID }}}}'\n          - name: quantity\n            value: '{{{{ inputs.parameters.quantity }}}}'\n      - name: sendemail\n        template: sendemail\n        dependencies:\n        - purchaseitem\n        arguments:\n          parameters:\n          - name: email\n            value: '{{{{ inputs.parameters.email }}}}'\n          - name: message\n            value: 'Your purchase of {{ inputs.parameters.quantity }} units of product ID {{ inputs.parameters.product_ID }} has been successfully processed.'\n  - name: getuserid\n    container:\n      image: busybox\n      command: [sh, -c]\n      args: [\"echo 123\"]  # This is a placeholder. Replace with actual API call to get user ID.\n    inputs:\n      parameters:\n      - name: email\n  - name: purchaseitem\n    container:\n      image: busybox\n      command: [sh, -c]\n      args: [\"echo Purchase successful\"]  # This is a placeholder. Replace with actual API call to purchase item.\n    inputs:\n      parameters:\n      - name: user_ID\n      - name: product_ID\n      - name: quantity\n  - name: sendemail\n    container:\n      image: busybox\n      command: [sh, -c]\n      args: [\"echo Email sent\"]  # This is a placeholder. Replace with actual API call to send email.\n    inputs:\n      parameters:\n      - name: email\n      - name: message"
  },
  {
    "Id": 1190,
    "status": "Success",
    "workflow": "apiVersion: argoproj.io/v1alpha1\nkind: Workflow\nmetadata:\n  generateName: weather-clothing-workflow-\nspec:\n  entrypoint: main\n  templates:\n  - name: main\n    dag:\n      tasks:\n      - name: checkweather\n        template: checkweather\n        arguments:\n          parameters:\n          - name: city\n            value: '{{{{ inputs.parameters.city }}}}'\n      - name: GetRecommendedClothing\n        template: GetRecommendedClothing\n        dependencies:\n        - checkweather\n        arguments:\n          parameters:\n          - name: weather\n            value: '{{{{ tasks.checkweather.result }}}}'\n      - name: RecommendClothing\n        template: RecommendClothing\n        dependencies:\n        - checkweather\n        arguments:\n          parameters:\n          - name: weather\n            value: '{{{{ tasks.checkweather.result }}}}'\n      - name: ClothingSuggestion\n        template: ClothingSuggestion\n        dependencies:\n        - checkweather\n        arguments:\n          parameters:\n          - name: weather\n            value: '{{{{ tasks.checkweather.result }}}}'\n      - name: FindClothing\n        template: FindClothing\n        dependencies:\n        - checkweather\n        arguments:\n          parameters:\n          - name: WeatherStatus\n            value: '{{{{ tasks.checkweather.result }}}}'\n      - name: RecommendOutfit\n        template: RecommendOutfit\n        dependencies:\n        - checkweather\n        arguments:\n          parameters:\n          - name: weather\n            value: '{{{{ tasks.checkweather.result }}}}'\n      - name: GetClothingAdvice\n        template: GetClothingAdvice\n        dependencies:\n        - checkweather\n        arguments:\n          parameters:\n          - name: weather\n            value: '{{{{ tasks.checkweather.result }}}}'\n      - name: OutfitRecommender\n        template: OutfitRecommender\n        dependencies:\n        - checkweather\n        arguments:\n          parameters:\n          - name: weather_condition\n            value: '{{{{ tasks.checkweather.result }}}}'\n      - name: GetClothing\n        template: GetClothing\n        dependencies:\n        - checkweather\n        arguments:\n          parameters:\n          - name: weather_status\n            value: '{{{{ tasks.checkweather.result }}}}'\n      - name: RecommendAttire\n        template: RecommendAttire\n        dependencies:\n        - checkweather\n        arguments:\n          parameters:\n          - name: weather\n            value: '{{{{ tasks.checkweather.result }}}}'\n  - name: checkweather\n    inputs:\n      parameters:\n      - name: city\n    container:\n      image: alpine:latest\n      command: [\"sh\", \"-c\"]\n      args: [\"echo 'Sunny'\"]  # This is a placeholder for the actual weather API call\n  - name: GetRecommendedClothing\n    inputs:\n      parameters:\n      - name: weather\n    container:\n      image: alpine:latest\n      command: [\"sh\", \"-c\"]\n      args: [\"echo 'Casual Wear'\"]  # This is a placeholder for the actual API call\n  - name: RecommendClothing\n    inputs:\n      parameters:\n      - name: weather\n    container:\n      image: alpine:latest\n      command: [\"sh\", \"-c\"]\n      args: [\"echo 'Jeans and T-shirt'\"]  # This is a placeholder for the actual API call\n  - name: ClothingSuggestion\n    inputs:\n      parameters:\n      - name: weather\n    container:\n      image: alpine:latest\n      command: [\"sh\", \"-c\"]\n      args: [\"echo 'Light Jacket'\"]  # This is a placeholder for the actual API call\n  - name: FindClothing\n    inputs:\n      parameters:\n      - name: WeatherStatus\n    container:\n      image: alpine:latest\n      command: [\"sh\", \"-c\"]\n      args: [\"echo 'Shorts and Tank Top'\"]  # This is a placeholder for the actual API call\n  - name: RecommendOutfit\n    inputs:\n      parameters:\n      - name: weather\n    container:\n      image: alpine:latest\n      command: [\"sh\", \"-c\"]\n      args: [\"echo 'Sneakers and Sweatpants'\"]  # This is a placeholder for the actual API call\n  - name: GetClothingAdvice\n    inputs:\n      parameters:\n      - name: weather\n    container:\n      image: alpine:latest\n      command: [\"sh\", \"-c\"]\n      args: [\"echo 'Raincoat if needed'\"]  # This is a placeholder for the actual API call\n  - name: OutfitRecommender\n    inputs:\n      parameters:\n      - name: weather_condition\n    container:\n      image: alpine:latest\n      command: [\"sh\", \"-c\"]\n      args: [\"echo 'Formal Shirt and Pants'\"]  # This"
  },
  {
    "Id": 1209,
    "status": "Success",
    "workflow": "apiVersion: argoproj.io/v1alpha1\nkind: Workflow\nmetadata:\n  generateName: currency-conversion-workflow-\nspec:\n  entrypoint: main\n  templates:\n  - name: main\n    dag:\n      tasks:\n      - name: get-product-price\n        template: get-product-price\n        arguments:\n          parameters:\n          - name: product_id\n            value: '{{{{ inputs.parameters.product_id }}}}'\n      - name: convert-to-currency\n        template: convert-to-currency\n        dependencies:\n        - get-product-price\n        arguments:\n          parameters:\n          - name: Price\n            value: '{{{{ tasks.get-product-price.result }}}}'\n          - name: Currency\n            value: '{{{{ inputs.parameters.target_currency }}}}'\n  - name: get-product-price\n    inputs:\n      parameters:\n      - name: product_id\n    container:\n      image: your-image-here\n      command: [sh, -c]\n      args: [\"ProductId2Cost {{inputs.parameters.product_id}}\"]\n  - name: convert-to-currency\n    inputs:\n      parameters:\n      - name: Price\n      - name: Currency\n    container:\n      image: your-image-here\n      command: [sh, -c]\n      args: [\"ConvertToCurrency {{inputs.parameters.Price}} {{inputs.parameters.Currency}}\"]"
  },
  {
    "Id": 1225,
    "status": "Success",
    "workflow": "apiVersion: argoproj.io/v1alpha1\nkind: Workflow\nmetadata:\n  generateName: reserve-flight-to-tokyo-\nspec:\n  entrypoint: main\n  templates:\n  - name: main\n    dag:\n      tasks:\n      - name: flight-booking\n        template: FlightBooking\n        arguments:\n          parameters:\n          - name: origin\n            value: '{{{{ inputs.parameters.origin }}}}'\n          - name: destination\n            value: '{{{{ inputs.parameters.destination }}}}'\n          - name: departure_date\n            value: '{{{{ inputs.parameters.departure_date }}}}'\n          - name: return_date\n            value: '{{{{ inputs.parameters.return_date }}}}'\n      - name: check-luggage-allowance\n        template: CheckLuggageAllowance\n        dependencies:\n        - flight-booking\n        arguments:\n          parameters:\n          - name: flight\n            value: '{{{{ tasks.flight-booking.result }}}}'\n      - name: calculate-luggage-weight\n        template: CalculateLuggageWeight\n        arguments:\n          parameters:\n          - name: luggage_items\n            value: '{{{{ inputs.parameters.luggage_items }}}}'\n      - name: can-carry-luggage\n        template: CanCarryLuggage\n        dependencies:\n        - check-luggage-allowance\n        - calculate-luggage-weight\n        arguments:\n          parameters:\n          - name: luggage_weight\n            value: '{{{{ tasks.calculate-luggage-weight.result }}}}'\n          - name: luggage_allowance\n            value: '{{{{ tasks.check-luggage-allowance.result }}}}'\n      - name: get-luggage-fee\n        template: GetLuggageFee\n        dependencies:\n        - check-luggage-allowance\n        - calculate-luggage-weight\n        arguments:\n          parameters:\n          - name: luggage\n            value: '{{{{ tasks.check-luggage-allowance.result }}}}'\n          - name: weight\n            value: '{{{{ tasks.calculate-luggage-weight.result }}}}'\n      - name: book-trip\n        template: BookTrip\n        dependencies:\n        - flight-booking\n        arguments:\n          parameters:\n          - name: flight\n            value: '{{{{ tasks.flight-booking.result }}}}'\n          - name: hotel\n            value: '{{{{ inputs.parameters.hotel }}}}'\n  inputs:\n    parameters:\n    - name: origin\n      value: '{{{{ inputs.parameters.origin }}}}'\n    - name: destination\n      value: 'Tokyo'\n    - name: departure_date\n      value: '{{{{ inputs.parameters.departure_date }}}}'\n    - name: return_date\n      value: '{{{{ inputs.parameters.return_date }}}}'\n    - name: luggage_items\n      value: '{{{{ inputs.parameters.luggage_items }}}}'\n    - name: hotel\n      value: '{{{{ inputs.parameters.hotel }}}}'"
  },
  {
    "Id": 1227,
    "status": "Success",
    "workflow": ""
  },
  {
    "Id": 1236,
    "status": "Success",
    "workflow": "apiVersion: argoproj.io/v1alpha1\nkind: Workflow\nmetadata:\n  generateName: dependency-workflow-1984-\nspec:\n  entrypoint: main\n  templates:\n  - name: main\n    dag:\n      tasks:\n      - name: bookfinder\n        template: bookfinder\n        arguments:\n          parameters:\n          - name: genre\n            value: '{{{{ inputs.parameters.genre }}}}'\n          - name: author\n            value: '{{{{ inputs.parameters.author }}}}'\n          - name: year\n            value: '{{{{ inputs.parameters.year }}}}'\n      - name: checklibraryavailability\n        template: checklibraryavailability\n        dependencies:\n        - bookfinder\n        arguments:\n          parameters:\n          - name: bookDetails\n            value: '{{{{ tasks.bookfinder.result }}}}'\n      - name: locatebook\n        template: locatebook\n        dependencies:\n        - checklibraryavailability\n        arguments:\n          parameters:\n          - name: book_ID\n            value: '{{{{ tasks.checklibraryavailability.result.book_id }}}}'\n          - name: author_ID\n            value: '{{{{ tasks.checklibraryavailability.result.author_id }}}}'\n  inputs:\n    parameters:\n    - name: genre\n      value: 'Dystopian'\n    - name: author\n      value: 'George Orwell'\n    - name: year\n      value: '1949'"
  },
  {
    "Id": 1250,
    "status": "Success",
    "workflow": "apiVersion: argoproj.io/v1alpha1\nkind: Workflow\nmetadata:\n  generateName: dependency-workflow-123-\nspec:\n  entrypoint: main\n  templates:\n  - name: main\n    dag:\n      tasks:\n      - name: checkweather\n        template: checkweather\n        arguments:\n          parameters:\n          - name: city\n            value: '{{{{ inputs.parameters.city }}}}'\n          - name: date\n            value: '{{{{ inputs.parameters.date }}}}'\n      - name: findevents\n        template: findevents\n        dependencies:\n        - checkweather\n        arguments:\n          parameters:\n          - name: city\n            value: '{{{{ inputs.parameters.city }}}}'\n          - name: date\n            value: '{{{{ inputs.parameters.date }}}}'\n      - name: eventsearch\n        template: eventsearch\n        dependencies:\n        - findevents\n        arguments:\n          parameters:\n          - name: city\n            value: '{{{{ inputs.parameters.city }}}}'\n          - name: date\n            value: '{{{{ inputs.parameters.date }}}}'\n      - name: bookevent\n        template: bookevent\n        dependencies:\n        - eventsearch\n        arguments:\n          parameters:\n          - name: event_details\n            value: '{{{{ tasks.eventsearch.result }}}}'\n          - name: number_of_tickets\n            value: '{{{{ inputs.parameters.number_of_tickets }}}}'\n  - name: checkweather\n    inputs:\n      parameters:\n      - name: city\n      - name: date\n    container:\n      image: your-weather-api-image\n      command: [\"sh\", \"-c\"]\n      args: [\"checkweather --city ${{{{ inputs.parameters.city }}}} --date ${{{{ inputs.parameters.date }}}}\", \"--output=result\"]\n  - name: findevents\n    inputs:\n      parameters:\n      - name: city\n      - name: date\n    container:\n      image: your-event-finder-image\n      command: [\"sh\", \"-c\"]\n      args: [\"findevents --city ${{{{ inputs.parameters.city }}}} --date ${{{{ inputs.parameters.date }}}}\", \"--output=result\"]\n  - name: eventsearch\n    inputs:\n      parameters:\n      - name: city\n      - name: date\n    container:\n      image: your-event-search-image\n      command: [\"sh\", \"-c\"]\n      args: [\"eventsearch --city ${{{{ inputs.parameters.city }}}} --date ${{{{ inputs.parameters.date }}}}\", \"--output=result\"]\n  - name: bookevent\n    inputs:\n      parameters:\n      - name: event_details\n      - name: number_of_tickets\n    container:\n      image: your-event-booking-image\n      command: [\"sh\", \"-c\"]\n      args: [\"bookevent --event-details ${{{{ inputs.parameters.event_details }}}} --number-of-tickets ${{{{ inputs.parameters.number_of_tickets }}}}\", \"--output=result\"]"
  },
  {
    "Id": 1255,
    "status": "Success",
    "workflow": "apiVersion: argoproj.io/v1alpha1\nkind: Workflow\nmetadata:\n  generateName: movie-showtimes-workflow-\nspec:\n  entrypoint: main\n  templates:\n  - name: main\n    dag:\n      tasks:\n      - name: movie-details\n        template: movie-details\n        arguments:\n          parameters:\n          - name: movie_name\n            value: '{{{{ inputs.parameters.movie_name }}}}'\n          - name: director\n            value: '{{{{ inputs.parameters.director }}}}'\n      - name: cinema-finder\n        template: cinema-finder\n        dependencies:\n        - movie-details\n        arguments:\n          parameters:\n          - name: movieDetails\n            value: '{{{{ tasks.movie-details.result }}}}'\n      - name: showtime-check\n        template: showtime-check\n        dependencies:\n        - cinema-finder\n        - movie-details\n        arguments:\n          parameters:\n          - name: cinemaLocations\n            value: '{{{{ tasks.cinema-finder.result }}}}'\n          - name: movieDetails\n            value: '{{{{ tasks.movie-details.result }}}}'\n  - name: movie-details\n    container:\n      image: appropriate/curl:latest\n      command: [sh, -c]\n      args: [\"echo '{\\\"movie_name\\\": \\\"{{{{ inputs.parameters.movie_name }}}}\\\", \\\"director\\\": \\\"{{{{ inputs.parameters.director }}}}\\\"}'\"]\n      outputs:\n        parameters:\n        - name: movieDetails\n          valueFrom:\n            path: /tmp/movieDetails.json\n  - name: cinema-finder\n    container:\n      image: appropriate/curl:latest\n      command: [sh, -c]\n      args: [\"curl -X POST -H 'Content-Type: application/json' -d '{{{{ inputs.parameters.movieDetails }}}}' http://example.com/CinemaFinder -o /tmp/cinemaLocations.json\"]\n      outputs:\n        parameters:\n        - name: cinemaLocations\n          valueFrom:\n            path: /tmp/cinemaLocations.json\n  - name: showtime-check\n    container:\n      image: appropriate/curl:latest\n      command: [sh, -c]\n      args: [\"curl -X POST -H 'Content-Type: application/json' -d '{{{{ inputs.parameters.cinemaLocations }}}}' -d '{{{{ inputs.parameters.movieDetails }}}}' http://example.com/ShowtimeCheck -o /tmp/showTimes.json\"]\n      outputs:\n        parameters:\n        - name: showTimes\n          valueFrom:\n            path: /tmp/showTimes.json"
  },
  {
    "Id": 1259,
    "status": "Success",
    "workflow": "apiVersion: argoproj.io/v1alpha1\nkind: Workflow\nmetadata:\n  generateName: dependency-workflow-miami-trip-\nspec:\n  entrypoint: main\n  templates:\n  - name: main\n    dag:\n      tasks:\n      - name: checkweather\n        template: checkweather\n        arguments:\n          parameters:\n          - name: city\n            value: '{{{{ inputs.parameters.city }}}}'\n          - name: date\n            value: '{{{{ inputs.parameters.date }}}}'\n      - name: reservehotel\n        template: reservehotel\n        dependencies:\n        - checkweather\n        arguments:\n          parameters:\n          - name: city\n            value: '{{{{ inputs.parameters.city }}}}'\n          - name: date\n            value: '{{{{ inputs.parameters.date }}}}'\n          - name: weather_status\n            value: '{{{{ tasks.checkweather.result }}}}'\n      - name: bookhotel\n        template: bookhotel\n        dependencies:\n        - reservehotel\n        arguments:\n          parameters:\n          - name: hotel_name\n            value: '{{{{ tasks.reservehotel.result.hotel_name }}}}'\n          - name: date\n            value: '{{{{ inputs.parameters.date }}}}'\n      - name: findrestaurants\n        template: findrestaurants\n        arguments:\n          parameters:\n          - name: city\n            value: '{{{{ inputs.parameters.city }}}}'\n      - name: bookrestaurant\n        template: bookrestaurant\n        dependencies:\n        - findrestaurants\n        arguments:\n          parameters:\n          - name: restaurant_name\n            value: '{{{{ tasks.findrestaurants.result.restaurant_name }}}}'\n          - name: date\n            value: '{{{{ inputs.parameters.date }}}}'\n          - name: time\n            value: '{{{{ inputs.parameters.time }}}}'\n      - name: reservationbooking\n        template: reservationbooking\n        dependencies:\n        - bookhotel\n        - bookrestaurant\n        arguments:\n          parameters:\n          - name: hotelDetails\n            value: '{{{{ tasks.bookhotel.result }}}}'\n          - name: restaurantLocations\n            value: '{{{{ tasks.bookrestaurant.result }}}}'\n\n  - name: checkweather\n    script:\n      image: python:3.8\n      command: [python]\n      source: |\n        import json\n        import sys\n\n        city = sys.argv[1]\n        date = sys.argv[2]\n\n        # Dummy function to simulate API call\n        def check_weather(city, date):\n            return \"Sunny\"\n\n        weather_status = check_weather(city, date)\n        print(weather_status)\n\n    inputs:\n      parameters:\n      - name: city\n      - name: date\n\n  - name: reservehotel\n    script:\n      image: python:3.8\n      command: [python]\n      source: |\n        import json\n        import sys\n\n        city = sys.argv[1]\n        date = sys.argv[2]\n        weather_status = sys.argv[3]\n\n        # Dummy function to simulate API call\n        def reserve_hotel(city, date, weather_status):\n            return {\"hotel_name\": \"Miami Beach Hotel\", \"reservation_status\": \"Reserved\"}\n\n        reservation_details = reserve_hotel(city, date, weather_status)\n        print(json.dumps(reservation_details))\n\n    inputs:\n      parameters:\n      - name: city\n      - name: date\n      - name: weather_status\n\n  - name: bookhotel\n    script:\n      image: python:3.8\n      command: [python]\n      source: |\n        import json\n        import sys\n\n        hotel_name = sys.argv[1]\n        date = sys.argv[2]\n\n        # Dummy function to simulate API call\n        def book_hotel(hotel_name, date):\n            return {\"booking_status\": \"Success\", \"hotel_name\": hotel_name}\n\n        booking_details = book_hotel(hotel_name, date)\n        print(json.dumps(booking_details))\n\n    inputs:\n      parameters:\n      - name: hotel_name\n      - name: date\n\n  - name: findrestaurants\n    script:\n      image: python:3.8\n      command: [python]\n      source: |\n        import json\n        import sys\n\n        city = sys.argv[1]\n\n        # Dummy function to simulate API call\n        def find_restaurants(city):\n            return {\"restaurant_name\": \"Ocean Breeze Restaurant\"}\n\n        restaurant_details = find_restaurants(city)\n        print(json.dumps(restaurant_details))\n\n    inputs:\n      parameters:\n      - name: city\n\n  - name: bookrestaurant\n    script:\n      image: python:3.8\n      command: [python]\n      source: |\n        import json\n        import sys\n\n        restaurant_name = sys.argv[1]\n        date = sys.argv[2]\n        time = sys.argv[3]\n\n        # Dummy function to simulate API call\n        def book_restaurant(restaurant_name,"
  },
  {
    "Id": 1267,
    "status": "Success",
    "workflow": "apiVersion: argoproj.io/v1alpha1\nkind: Workflow\nmetadata:\n  generateName: miami-dress-outfit-workflow-\nspec:\n  entrypoint: main\n  templates:\n  - name: main\n    dag:\n      tasks:\n      - name: checkweather\n        template: checkweather\n        arguments:\n          parameters:\n          - name: location\n            value: '{{{{ inputs.parameters.location }}}}'\n      - name: DressSuggestion\n        template: DressSuggestion\n        dependencies:\n        - checkweather\n        arguments:\n          parameters:\n          - name: weather\n            value: '{{{{ tasks.checkweather.result }}}}'\n      - name: FindClothes\n        template: FindClothes\n        dependencies:\n        - checkweather\n        arguments:\n          parameters:\n          - name: weather\n            value: '{{{{ tasks.checkweather.result }}}}'\n      - name: RecommendOutfit\n        template: RecommendOutfit\n        dependencies:\n        - checkweather\n        arguments:\n          parameters:\n          - name: weather\n            value: '{{{{ tasks.checkweather.result }}}}'\n      - name: OutfitRecommender\n        template: OutfitRecommender\n        dependencies:\n        - checkweather\n        arguments:\n          parameters:\n          - name: weather_condition\n            value: '{{{{ tasks.checkweather.result }}}}'\n      - name: SuggestOutfit\n        template: SuggestOutfit\n        dependencies:\n        - checkweather\n        arguments:\n          parameters:\n          - name: weather\n            value: '{{{{ tasks.checkweather.result }}}}'\n      - name: SuggestApparel\n        template: SuggestApparel\n        dependencies:\n        - checkweather\n        arguments:\n          parameters:\n          - name: weather_status\n            value: '{{{{ tasks.checkweather.result }}}}'\n      - name: GetClothingAdvice\n        template: GetClothingAdvice\n        dependencies:\n        - checkweather\n        arguments:\n          parameters:\n          - name: weather\n            value: '{{{{ tasks.checkweather.result }}}}'\n      - name: GetClothing\n        template: GetClothing\n        dependencies:\n        - checkweather\n        arguments:\n          parameters:\n          - name: weather_status\n            value: '{{{{ tasks.checkweather.result }}}}'\n      - name: PlanOutfit\n        template: PlanOutfit\n        dependencies:\n        - DressSuggestion\n        - FindClothes\n        - RecommendOutfit\n        - OutfitRecommender\n        - SuggestOutfit\n        - SuggestApparel\n        - GetClothingAdvice\n        - GetClothing\n        arguments:\n          parameters:\n          - name: event\n            value: '{{{{ inputs.parameters.event }}}}'\n          - name: outfit\n            value: '{{{{ tasks.DressSuggestion.result }}}} {{ tasks.FindClothes.result }}}} {{ tasks.RecommendOutfit.result }}}} {{ tasks.OutfitRecommender.result }}}} {{ tasks.SuggestOutfit.result }}}} {{ tasks.SuggestApparel.result }}}} {{ tasks.GetClothingAdvice.result }}}} {{ tasks.GetClothing.result }}}}'\n  inputs:\n    parameters:\n    - name: location\n      value: 'Miami'\n    - name: event\n      value: 'casual'"
  },
  {
    "Id": 1294,
    "status": "Success",
    "workflow": "apiVersion: argoproj.io/v1alpha1\nkind: Workflow\nmetadata:\n  generateName: dependency-workflow-723-\nspec:\n  entrypoint: main\n  templates:\n  - name: main\n    dag:\n      tasks:\n      - name: getlocationfromip\n        template: getlocationfromip\n        arguments:\n          parameters:\n          - name: ip\n            value: '{{{{ inputs.parameters.ip }}}}'\n      - name: weatherverification\n        template: weatherverification\n        dependencies:\n        - getlocationfromip\n        arguments:\n          parameters:\n          - name: location\n            value: '{{{{ tasks.getlocationfromip.result }}}}'\n          - name: date\n            value: '{{{{ inputs.parameters.date }}}}'\n      - name: findoutdooractivities\n        template: findoutdooractivities\n        dependencies:\n        - weatherverification\n        - getlocationfromip\n        arguments:\n          parameters:\n          - name: city\n            value: '{{{{ tasks.getlocationfromip.result }}}}'\n          - name: weatherForecast\n            value: '{{{{ tasks.weatherverification.result }}}}'\n      - name: activityrecommend\n        template: activityrecommend\n        dependencies:\n        - weatherverification\n        - getlocationfromip\n        arguments:\n          parameters:\n          - name: city_name\n            value: '{{{{ tasks.getlocationfromip.result }}}}'\n          - name: weather\n            value: '{{{{ tasks.weatherverification.result }}}}'\n  - name: getlocationfromip\n    inputs:\n      parameters:\n      - name: ip\n    container:\n      image: your-getlocation-image\n      command: [sh, -c]\n      args: [\"your-command-to-get-location-from-ip {{inputs.parameters.ip}}\"]\n  - name: weatherverification\n    inputs:\n      parameters:\n      - name: location\n      - name: date\n    container:\n      image: your-weatherverification-image\n      command: [sh, -c]\n      args: [\"your-command-to-verify-weather {{inputs.parameters.location}} {{inputs.parameters.date}}\"]\n  - name: findoutdooractivities\n    inputs:\n      parameters:\n      - name: city\n      - name: weatherForecast\n    container:\n      image: your-findoutdooractivities-image\n      command: [sh, -c]\n      args: [\"your-command-to-find-outdoor-activities {{inputs.parameters.city}} {{inputs.parameters.weatherForecast}}\"]\n  - name: activityrecommend\n    inputs:\n      parameters:\n      - name: city_name\n      - name: weather\n    container:\n      image: your-activityrecommend-image\n      command: [sh, -c]\n      args: [\"your-command-to-recommend-activity {{inputs.parameters.city_name}} {{inputs.parameters.weather}}\"]"
  },
  {
    "Id": 1298,
    "status": "Success",
    "workflow": "apiVersion: argoproj.io/v1alpha1\nkind: Workflow\nmetadata:\n  generateName: weather-comparison-workflow-\nspec:\n  entrypoint: main\n  templates:\n  - name: main\n    dag:\n      tasks:\n      - name: get-current-weather\n        template: City2Weather\n        arguments:\n          parameters:\n          - name: city\n            value: '{{{{ inputs.parameters.city }}}}'\n      - name: get-weekly-forecast\n        template: GetWeatherForecast\n        arguments:\n          parameters:\n          - name: city\n            value: '{{{{ inputs.parameters.city }}}}'\n          - name: date\n            value: '{{{{ inputs.parameters.date }}}}'\n      - name: compare-weather\n        template: CompareWeather\n        dependencies:\n        - get-current-weather\n        - get-weekly-forecast\n        arguments:\n          parameters:\n          - name: current_weather\n            value: '{{{{ tasks.get-current-weather.result }}}}'\n          - name: weather_forecast\n            value: '{{{{ tasks.get-weekly-forecast.result }}}}'\n  inputs:\n    parameters:\n    - name: city\n      value: 'New York'\n    - name: date\n      value: '2023-10-01'  # Example date for the forecast"
  },
  {
    "Id": 1300,
    "status": "Success",
    "workflow": "apiVersion: argoproj.io/v1alpha1\nkind: Workflow\nmetadata:\n  generateName: weather-workflow-\nspec:\n  entrypoint: main\n  templates:\n  - name: main\n    dag:\n      tasks:\n      - name: get-current-weather\n        template: Weather\n        arguments:\n          parameters:\n          - name: city\n            value: '{{{{ inputs.parameters.city }}}}'\n      - name: get-weekly-forecast\n        template: GetWeatherForecast\n        arguments:\n          parameters:\n          - name: city\n            value: '{{{{ inputs.parameters.city }}}}'\n          - name: date\n            value: '{{{{ inputs.parameters.date }}}}'\n      - name: compare-weather\n        template: CompareWeather\n        dependencies:\n        - get-current-weather\n        - get-weekly-forecast\n        arguments:\n          parameters:\n          - name: current_weather\n            value: '{{{{ tasks.get-current-weather.result }}}}'\n          - name: weather_forecast\n            value: '{{{{ tasks.get-weekly-forecast.result }}}}'\n      - name: recommend-clothing-current\n        template: GetRecommendedClothing\n        dependencies:\n        - get-current-weather\n        arguments:\n          parameters:\n          - name: weather\n            value: '{{{{ tasks.get-current-weather.result }}}}'\n      - name: recommend-clothing-forecast\n        template: GetSuitableClothing\n        dependencies:\n        - get-weekly-forecast\n        arguments:\n          parameters:\n          - name: weatherForecast\n            value: '{{{{ tasks.get-weekly-forecast.result }}}}'\n      - name: suggest-outdoor-activities\n        template: OutdoorActivities\n        dependencies:\n        - get-weekly-forecast\n        arguments:\n          parameters:\n          - name: city\n            value: '{{{{ inputs.parameters.city }}}}'\n          - name: weather_forecast\n            value: '{{{{ tasks.get-weekly-forecast.result }}}}'\n  inputs:\n    parameters:\n    - name: city\n      value: 'Tokyo'\n    - name: date\n      value: '2023-10-01'  # Example date for the weekly forecast"
  },
  {
    "Id": 1304,
    "status": "Success",
    "workflow": "apiVersion: argoproj.io/v1alpha1\nkind: Workflow\nmetadata:\n  generateName: dependency-workflow-1542-\nspec:\n  entrypoint: main\n  templates:\n  - name: main\n    dag:\n      tasks:\n      - name: checkweather\n        template: checkweather\n        arguments:\n          parameters:\n          - name: city\n            value: '{{{{ inputs.parameters.city }}}}'\n          - name: date\n            value: '{{{{ inputs.parameters.date }}}}'\n      - name: eventsuggestions\n        template: eventsuggestions\n        arguments:\n          parameters:\n          - name: city\n            value: '{{{{ inputs.parameters.city }}}}'\n          - name: date\n            value: '{{{{ inputs.parameters.date }}}}'\n      - name: restauranteventrecommendation\n        template: restauranteventrecommendation\n        dependencies:\n        - checkweather\n        arguments:\n          parameters:\n          - name: city\n            value: '{{{{ inputs.parameters.city }}}}'\n          - name: cuisine\n            value: '{{{{ inputs.parameters.cuisine }}}}'\n          - name: weather\n            value: '{{{{ tasks.checkweather.result }}}}'\n      - name: suggestdiningoptions\n        template: suggestdiningoptions\n        dependencies:\n        - restauranteventrecommendation\n        arguments:\n          parameters:\n          - name: localBudget\n            value: '{{{{ inputs.parameters.localBudget }}}}'\n          - name: location\n            value: '{{{{ tasks.restauranteventrecommendation.result }}}}'\n      - name: bookrestaurant\n        template: bookrestaurant\n        dependencies:\n        - restauranteventrecommendation\n        arguments:\n          parameters:\n          - name: restaurant_name\n            value: '{{{{ tasks.restauranteventrecommendation.result }}}}'\n          - name: date\n            value: '{{{{ inputs.parameters.date }}}}'\n          - name: time\n            value: '{{{{ inputs.parameters.time }}}}'\n  inputs:\n    parameters:\n    - name: city\n      value: 'New York'\n    - name: date\n      value: 'April 15'\n    - name: cuisine\n      value: 'French'\n    - name: localBudget\n      value: '100.0'\n    - name: time\n      value: '19:00'"
  },
  {
    "Id": 1319,
    "status": "Success",
    "workflow": "apiVersion: argoproj.io/v1alpha1\nkind: Workflow\nmetadata:\n  generateName: clothing-advice-workflow-\nspec:\n  entrypoint: main\n  templates:\n  - name: main\n    dag:\n      tasks:\n      - name: checkweather\n        template: checkweather\n        arguments:\n          parameters:\n          - name: city\n            value: '{{{{ inputs.parameters.city }}}}'\n      - name: getclothingadvice\n        template: getclothingadvice\n        dependencies:\n        - checkweather\n        arguments:\n          parameters:\n          - name: weather\n            value: '{{{{ tasks.checkweather.result }}}}'\n      - name: recommendoutfit\n        template: recommendoutfit\n        dependencies:\n        - checkweather\n        arguments:\n          parameters:\n          - name: weather\n            value: '{{{{ tasks.checkweather.result }}}}'\n      - name: recommendclothing\n        template: recommendclothing\n        dependencies:\n        - checkweather\n        arguments:\n          parameters:\n          - name: weather\n            value: '{{{{ tasks.checkweather.result }}}}'\n      - name: planday\n        template: planday\n        dependencies:\n        - checkweather\n        - recommendclothing\n        arguments:\n          parameters:\n          - name: weatherForecast\n            value: '{{{{ tasks.checkweather.result }}}}'\n          - name: clothingRecommendation\n            value: '{{{{ tasks.recommendclothing.result }}}}'\n      - name: outfitrecommender\n        template: outfitrecommender\n        dependencies:\n        - checkweather\n        arguments:\n          parameters:\n          - name: weather_condition\n            value: '{{{{ tasks.checkweather.result }}}}'\n      - name: findclothes\n        template: findclothes\n        dependencies:\n        - checkweather\n        arguments:\n          parameters:\n          - name: weather\n            value: '{{{{ tasks.checkweather.result }}}}'\n      - name: findclothing\n        template: findclothing\n        dependencies:\n        - checkweather\n        arguments:\n          parameters:\n          - name: WeatherStatus\n            value: '{{{{ tasks.checkweather.result }}}}'\n      - name: getdestinationtraveladvice\n        template: getdestinationtraveladvice\n        dependencies:\n        - checkweather\n        - findclothing\n        arguments:\n          parameters:\n          - name: city\n            value: '{{{{ inputs.parameters.city }}}}'\n          - name: clothing\n            value: '{{{{ tasks.findclothing.result }}}}'\n      - name: weatherandtimezonetoclothingadvice\n        template: weatherandtimezonetoclothingadvice\n        dependencies:\n        - checkweather\n        arguments:\n          parameters:\n          - name: weather\n            value: '{{{{ tasks.checkweather.result }}}}'\n          - name: timezone\n            value: '{{{{ inputs.parameters.timezone }}}}'\n      - name: clothingsuggestion\n        template: clothingsuggestion\n        dependencies:\n        - checkweather\n        arguments:\n          parameters:\n          - name: weather\n            value: '{{{{ tasks.checkweather.result }}}}'\n  - name: checkweather\n    inputs:\n      parameters:\n      - name: city\n    container:\n      image: your-weather-api-image\n      command: [\"sh\", \"-c\"]\n      args: [\"your-command-to-get-weather {{inputs.parameters.city}}\"]\n  - name: getclothingadvice\n    inputs:\n      parameters:\n      - name: weather\n    container:\n      image: your-getclothingadvice-api-image\n      command: [\"sh\", \"-c\"]\n      args: [\"your-command-to-get-clothing-advice {{inputs.parameters.weather}}\"]\n  - name: recommendoutfit\n    inputs:\n      parameters:\n      - name: weather\n    container:\n      image: your-recommendoutfit-api-image\n      command: [\"sh\", \"-c\"]\n      args: [\"your-command-to-recommend-outfit {{inputs.parameters.weather}}\"]\n  - name: recommendclothing\n    inputs:\n      parameters:\n      - name: weather\n    container:\n      image: your-recommendclothing-api-image\n      command: [\"sh\", \"-c\"]\n      args: [\"your-command-to-recommend-clothing {{inputs.parameters.weather}}\"]\n  - name: planday\n    inputs:\n      parameters:\n      - name: weatherForecast\n      - name: clothingRecommendation\n    container:\n      image: your-planday-api-image\n      command: [\"sh\", \"-c\"]\n      args: [\"your-command-to-plan-day {{inputs.parameters.weatherForecast}} {{inputs.parameters.clothingRecommendation}}\"]\n  - name: outfitrecommender\n    inputs:\n      parameters:\n      - name: weather_condition\n    container:\n      image: your-outfitrecommender-api-image\n      command: [\"sh\", \"-c\"]\n      args: [\"your-command-to-outfit-recommender {{inputs.parameters.weather_condition}}"
  },
  {
    "Id": 1322,
    "status": "Success",
    "workflow": "apiVersion: argoproj.io/v1alpha1\nkind: Workflow\nmetadata:\n  generateName: drive-route-time-\nspec:\n  entrypoint: main\n  templates:\n  - name: main\n    dag:\n      tasks:\n      - name: getroute\n        template: getroute\n        arguments:\n          parameters:\n          - name: origin_location\n            value: 'San Francisco'\n          - name: destination_location\n            value: 'Los Angeles'\n      - name: calculatetime\n        template: calculatetime\n        dependencies:\n        - getroute\n        arguments:\n          parameters:\n          - name: distance\n            value: '{{{{ tasks.getroute.result.distance }}}}'\n          - name: speed\n            value: '{{{{ inputs.parameters.speed }}}}'\n  inputs:\n    parameters:\n    - name: speed\n      value: '55'\n  templates:\n  - name: getroute\n    container:\n      image: appropriate/curl:latest\n      command: [sh, -c]\n      args: [\"curl -X GET 'http://your-api-endpoint/GetRoute?origin_location={{inputs.parameters.origin_location}}&destination_location={{inputs.parameters.destination_location}}'\"]\n    outputs:\n      parameters:\n      - name: route\n        valueFrom:\n          jsonPath: '{.result.route}'\n  - name: calculatetime\n    container:\n      image: appropriate/curl:latest\n      command: [sh, -c]\n      args: [\"curl -X GET 'http://your-api-endpoint/CalculateTime?distance={{inputs.parameters.distance}}&speed={{inputs.parameters.speed}}'\"]\n    outputs:\n      parameters:\n      - name: time\n        valueFrom:\n          jsonPath: '{.result.time}'"
  },
  {
    "Id": 1351,
    "status": "Success",
    "workflow": "apiVersion: argoproj.io/v1alpha1\nkind: Workflow\nmetadata:\n  generateName: steak-dining-nyc-\nspec:\n  entrypoint: main\n  templates:\n  - name: main\n    dag:\n      tasks:\n      - name: findamericanrestaurants\n        template: findamericanrestaurants\n        arguments:\n          parameters:\n          - name: city\n            value: '{{{{ inputs.parameters.city }}}}'\n          - name: cuisineType\n            value: '{{{{ inputs.parameters.cuisineType }}}}'\n      - name: restaurantfinder\n        template: restaurantfinder\n        dependencies:\n        - findamericanrestaurants\n        arguments:\n          parameters:\n          - name: Cityname\n            value: '{{{{ inputs.parameters.city }}}}'\n          - name: CuisineType\n            value: '{{{{ inputs.parameters.cuisineType }}}}'\n  - name: findamericanrestaurants\n    inputs:\n      parameters:\n      - name: city\n      - name: cuisineType\n    container:\n      image: appropriate/curl:latest\n      command: [sh, -c]\n      args: [\"curl -X GET http://example.com/FindRestaurants?city=$city&cuisineType=$cuisineType\"]\n  - name: restaurantfinder\n    inputs:\n      parameters:\n      - name: Cityname\n      - name: CuisineType\n    container:\n      image: appropriate/curl:latest\n      command: [sh, -c]\n      args: [\"curl -X GET http://example.com/RestaurantFinder?Cityname=$Cityname&CuisineType=$CuisineType\"]"
  },
  {
    "Id": 1354,
    "status": "Success",
    "workflow": "apiVersion: argoproj.io/v1alpha1\nkind: Workflow\nmetadata:\n  generateName: dependency-workflow-1542-\nspec:\n  entrypoint: main\n  templates:\n  - name: main\n    dag:\n      tasks:\n      - name: footballteaminfo\n        template: footballteaminfo\n        arguments:\n          parameters:\n          - name: team_name\n            value: '{{{{ inputs.parameters.team_name }}}}'\n      - name: gameschedule\n        template: gameschedule\n        dependencies:\n        - footballteaminfo\n        arguments:\n          parameters:\n          - name: team_info\n            value: '{{{{ tasks.footballteaminfo.result }}}}'\n      - name: ticketprice\n        template: ticketprice\n        dependencies:\n        - gameschedule\n        arguments:\n          parameters:\n          - name: game_schedule\n            value: '{{{{ tasks.gameschedule.result }}}}'\n      - name: getsightseeingcost\n        template: getsightseeingcost\n        arguments:\n          parameters:\n          - name: city\n            value: '{{{{ inputs.parameters.city }}}}'\n      - name: getmealcost\n        template: getmealcost\n        arguments:\n          parameters:\n          - name: city\n            value: '{{{{ inputs.parameters.city }}}}'\n      - name: calculatevacationcost\n        template: calculatevacationcost\n        dependencies:\n        - ticketprice\n        - getsightseeingcost\n        - getmealcost\n        arguments:\n          parameters:\n          - name: roomRate\n            value: '{{{{ inputs.parameters.roomRate }}}}'\n          - name: mealCost\n            value: '{{{{ tasks.getmealcost.result }}}}'\n          - name: sightSeeingCost\n            value: '{{{{ tasks.getsightseeingcost.result }}}}'\n  - name: footballteaminfo\n    inputs:\n      parameters:\n      - name: team_name\n    container:\n      image: appropriate/curl:latest\n      command: [sh, -c]\n      args: [\"curl -X GET 'http://example.com/FootballTeamInfo?team_name=$(team_name)'\"]\n  - name: gameschedule\n    inputs:\n      parameters:\n      - name: team_info\n    container:\n      image: appropriate/curl:latest\n      command: [sh, -c]\n      args: [\"curl -X GET 'http://example.com/GameSchedule?team_info=$(team_info)'\"]\n  - name: ticketprice\n    inputs:\n      parameters:\n      - name: game_schedule\n    container:\n      image: appropriate/curl:latest\n      command: [sh, -c]\n      args: [\"curl -X GET 'http://example.com/TicketPrice?game_schedule=$(game_schedule)'\"]\n  - name: getsightseeingcost\n    inputs:\n      parameters:\n      - name: city\n    container:\n      image: appropriate/curl:latest\n      command: [sh, -c]\n      args: [\"curl -X GET 'http://example.com/GetSightSeeingCost?city=$(city)'\"]\n  - name: getmealcost\n    inputs:\n      parameters:\n      - name: city\n    container:\n      image: appropriate/curl:latest\n      command: [sh, -c]\n      args: [\"curl -X GET 'http://example.com/GetMealCost?city=$(city)'\"]\n  - name: calculatevacationcost\n    inputs:\n      parameters:\n      - name: roomRate\n      - name: mealCost\n      - name: sightSeeingCost\n    container:\n      image: appropriate/curl:latest\n      command: [sh, -c]\n      args: [\"curl -X GET 'http://example.com/CalculateVacationCost?roomRate=$(roomRate)&mealCost=$(mealCost)&sightSeeingCost=$(sightSeeingCost)'\"]"
  },
  {
    "Id": 1359,
    "status": "Success",
    "workflow": "apiVersion: argoproj.io/v1alpha1\nkind: Workflow\nmetadata:\n  generateName: travel-planning-workflow-\nspec:\n  entrypoint: main\n  templates:\n  - name: main\n    dag:\n      tasks:\n      - name: findflight\n        template: findflight\n        arguments:\n          parameters:\n          - name: cityDeparture\n            value: '{{{{ inputs.parameters.cityDeparture }}}}'\n          - name: cityArrival\n            value: '{{{{ inputs.parameters.cityArrival }}}}'\n          - name: date\n            value: '{{{{ inputs.parameters.date }}}}'\n      - name: findhotel\n        template: findhotel\n        arguments:\n          parameters:\n          - name: city\n            value: '{{{{ inputs.parameters.cityArrival }}}}'\n      - name: findrestaurants\n        template: findrestaurants\n        arguments:\n          parameters:\n          - name: city\n            value: '{{{{ inputs.parameters.cityArrival }}}}'\n      - name: activityplanning\n        template: activityplanning\n        dependencies:\n        - findhotel\n        arguments:\n          parameters:\n          - name: hotel_reservation\n            value: '{{{{ tasks.findhotel.result }}}}'\n          - name: destination\n            value: '{{{{ inputs.parameters.cityArrival }}}}'\n      - name: createitinerary\n        template: createitinerary\n        dependencies:\n        - findflight\n        - findhotel\n        - activityplanning\n        arguments:\n          parameters:\n          - name: flight\n            value: '{{{{ tasks.findflight.result }}}}'\n          - name: hotel\n            value: '{{{{ tasks.findhotel.result }}}}'\n          - name: activities\n            value: '{{{{ tasks.activityplanning.result }}}}'\n      - name: createtravelplan\n        template: createtravelplan\n        dependencies:\n        - findflight\n        - findhotel\n        arguments:\n          parameters:\n          - name: flight\n            value: '{{{{ tasks.findflight.result }}}}'\n          - name: accommodation\n            value: '{{{{ tasks.findhotel.result }}}}'\n  - name: findflight\n    container:\n      image: appropriate/curl:latest\n      command: [sh, -c]\n      args: [\"curl -X POST -d '{\\\"cityDeparture\\\": \\\"${cityDeparture}\\\", \\\"cityArrival\\\": \\\"${cityArrival}\\\", \\\"date\\\": \\\"${date}\\\"}' http://example.com/findflight\"]\n    inputs:\n      parameters:\n      - name: cityDeparture\n      - name: cityArrival\n      - name: date\n  - name: findhotel\n    container:\n      image: appropriate/curl:latest\n      command: [sh, -c]\n      args: [\"curl -X POST -d '{\\\"city\\\": \\\"${city}\\\"}' http://example.com/findhotel\"]\n    inputs:\n      parameters:\n      - name: city\n  - name: findrestaurants\n    container:\n      image: appropriate/curl:latest\n      command: [sh, -c]\n      args: [\"curl -X POST -d '{\\\"city\\\": \\\"${city}\\\"}' http://example.com/findrestaurants\"]\n    inputs:\n      parameters:\n      - name: city\n  - name: activityplanning\n    container:\n      image: appropriate/curl:latest\n      command: [sh, -c]\n      args: [\"curl -X POST -d '{\\\"hotel_reservation\\\": \\\"${hotel_reservation}\\\", \\\"destination\\\": \\\"${destination}\\\"}' http://example.com/activityplanning\"]\n    inputs:\n      parameters:\n      - name: hotel_reservation\n      - name: destination\n  - name: createitinerary\n    container:\n      image: appropriate/curl:latest\n      command: [sh, -c]\n      args: [\"curl -X POST -d '{\\\"flight\\\": \\\"${flight}\\\", \\\"hotel\\\": \\\"${hotel}\\\", \\\"activities\\\": \\\"${activities}\\\"}' http://example.com/createitinerary\"]\n    inputs:\n      parameters:\n      - name: flight\n      - name: hotel\n      - name: activities\n  - name: createtravelplan\n    container:\n      image: appropriate/curl:latest\n      command: [sh, -c]\n      args: [\"curl -X POST -d '{\\\"flight\\\": \\\"${flight}\\\", \\\"accommodation\\\": \\\"${accommodation}\\\"}' http://example.com/createtravelplan\"]\n    inputs:\n      parameters:\n      - name: flight\n      - name: accommodation"
  },
  {
    "Id": 1367,
    "status": "Success",
    "workflow": "apiVersion: argoproj.io/v1alpha1\nkind: Workflow\nmetadata:\n  generateName: dependency-workflow-1542-\nspec:\n  entrypoint: main\n  templates:\n  - name: main\n    dag:\n      tasks:\n      - name: findsumoplaces\n        template: PlacesRecommender\n        arguments:\n          parameters:\n          - name: city\n            value: '{{{{ inputs.parameters.city }}}}'\n          - name: activity_type\n            value: '{{{{ inputs.parameters.activity_type }}}}'\n      - name: recommenddishes\n        template: FindPopularDishes\n        dependencies:\n        - findsumoplaces\n        arguments:\n          parameters:\n          - name: city\n            value: '{{{{ inputs.parameters.city }}}}'\n      - name: getrestaurant\n        template: GetRestaurant\n        dependencies:\n        - recommenddishes\n        arguments:\n          parameters:\n          - name: city\n            value: '{{{{ inputs.parameters.city }}}}'\n          - name: cuisine\n            value: '{{{{ tasks.recommenddishes.result }}}}'\n      - name: restaurantrecommendation\n        template: RestaurantRecommendation\n        dependencies:\n        - getrestaurant\n        arguments:\n          parameters:\n          - name: venue\n            value: '{{{{ tasks.getrestaurant.result }}}}'\n      - name: restaurantlocation\n        template: RestaurantLocation\n        dependencies:\n        - restaurantrecommendation\n        arguments:\n          parameters:\n          - name: city\n            value: '{{{{ inputs.parameters.city }}}}'\n      - name: menuselection\n        template: MenuSelection\n        dependencies:\n        - restaurantrecommendation\n        - recommenddishes\n        arguments:\n          parameters:\n          - name: restaurantInfo\n            value: '{{{{ tasks.restaurantrecommendation.result }}}}'\n          - name: cuisineRec\n            value: '{{{{ tasks.recommenddishes.result }}}}'\n      - name: recommenddish\n        template: RecommendDish\n        dependencies:\n        - menuselection\n        arguments:\n          parameters:\n          - name: menu\n            value: '{{{{ tasks.menuselection.result }}}}'\n  inputs:\n    parameters:\n    - name: city\n      value: \"Tokyo\"\n    - name: activity_type\n      value: \"sumo match\""
  },
  {
    "Id": 1380,
    "status": "Success",
    "workflow": "apiVersion: argoproj.io/v1alpha1\nkind: Workflow\nmetadata:\n  generateName: weather-impact-workflow-\nspec:\n  entrypoint: main\n  templates:\n  - name: main\n    dag:\n      tasks:\n      - name: checkweather\n        template: checkweather\n        arguments:\n          parameters:\n          - name: city\n            value: '{{{{ inputs.parameters.city }}}}'\n      - name: getpopulation\n        template: getpopulation\n        arguments:\n          parameters:\n          - name: city\n            value: '{{{{ inputs.parameters.city }}}}'\n      - name: weatherimpactonpopulation\n        template: weatherimpactonpopulation\n        dependencies:\n        - checkweather\n        - getpopulation\n        arguments:\n          parameters:\n          - name: weather\n            value: '{{{{ tasks.checkweather.result }}}}'\n          - name: population\n            value: '{{{{ tasks.getpopulation.result }}}}'\n      - name: recommendactivity\n        template: recommendactivity\n        dependencies:\n        - checkweather\n        - getpopulation\n        arguments:\n          parameters:\n          - name: temperature\n            value: '{{{{ tasks.checkweather.result }}}}'\n          - name: population\n            value: '{{{{ tasks.getpopulation.result }}}}'\n      - name: weather2advice\n        template: weather2advice\n        dependencies:\n        - checkweather\n        arguments:\n          parameters:\n          - name: weather\n            value: '{{{{ tasks.checkweather.result }}}}'\n      - name: outdooractivities\n        template: outdooractivities\n        dependencies:\n        - checkweather\n        arguments:\n          parameters:\n          - name: city\n            value: '{{{{ inputs.parameters.city }}}}'\n          - name: weather_forecast\n            value: '{{{{ tasks.checkweather.result }}}}'\n      - name: activityrecommend\n        template: activityrecommend\n        dependencies:\n        - checkweather\n        arguments:\n          parameters:\n          - name: city_name\n            value: '{{{{ inputs.parameters.city }}}}'\n          - name: weather\n            value: '{{{{ tasks.checkweather.result }}}}'\n      - name: suggestactivity\n        template: suggestactivity\n        dependencies:\n        - checkweather\n        arguments:\n          parameters:\n          - name: weather\n            value: '{{{{ tasks.checkweather.result }}}}'\n      - name: outdooractivityrecommend\n        template: outdooractivityrecommend\n        dependencies:\n        - checkweather\n        arguments:\n          parameters:\n          - name: city\n            value: '{{{{ inputs.parameters.city }}}}'\n          - name: weather\n            value: '{{{{ tasks.checkweather.result }}}}'\n      - name: getclothing\n        template: getclothing\n        dependencies:\n        - checkweather\n        arguments:\n          parameters:\n          - name: weather_status\n            value: '{{{{ tasks.checkweather.result }}}}'\n      - name: recommendattire\n        template: recommendattire\n        dependencies:\n        - checkweather\n        arguments:\n          parameters:\n          - name: weather\n            value: '{{{{ tasks.checkweather.result }}}}'\n  inputs:\n    parameters:\n    - name: city\n      value: 'Tokyo'"
  },
  {
    "Id": 1410,
    "status": "Success",
    "workflow": "apiVersion: argoproj.io/v1alpha1\nkind: Workflow\nmetadata:\n  generateName: dependency-workflow-books-by-author-\nspec:\n  entrypoint: main\n  templates:\n  - name: main\n    dag:\n      tasks:\n      - name: get-author-id\n        template: get-author-id\n        arguments:\n          parameters:\n          - name: book_title\n            value: '{{{{ inputs.parameters.book_title }}}}'\n      - name: books-by-author\n        template: books-by-author\n        dependencies:\n        - get-author-id\n        arguments:\n          parameters:\n          - name: author_id\n            value: '{{{{ tasks.get-author-id.result }}}}'\n  - name: get-author-id\n    container:\n      image: your-api-image\n      command: [sh, -c]\n      args: [\"GetAuthorDetails({{inputs.parameters.book_title}})\"]\n      env:\n      - name: book_title\n        value: '{{inputs.parameters.book_title}}'\n  - name: books-by-author\n    container:\n      image: your-api-image\n      command: [sh, -c]\n      args: [\"BooksByAuthor({{inputs.parameters.author_id}})\"]\n      env:\n      - name: author_id\n        value: '{{inputs.parameters.author_id}}'"
  },
  {
    "Id": 1425,
    "status": "Success",
    "workflow": "apiVersion: argoproj.io/v1alpha1\nkind: Workflow\nmetadata:\n  generateName: travel-discount-workflow-\nspec:\n  entrypoint: main\n  templates:\n  - name: main\n    dag:\n      tasks:\n      - name: search-fare\n        template: search-fare\n        arguments:\n          parameters:\n          - name: src\n            value: '{{{{ inputs.parameters.src }}}}'\n          - name: dest\n            value: '{{{{ inputs.parameters.dest }}}}'\n          - name: date\n            value: '{{{{ inputs.parameters.date }}}}'\n      - name: check-discount\n        template: check-discount\n        dependencies:\n        - search-fare\n        arguments:\n          parameters:\n          - name: coupon\n            value: '{{{{ inputs.parameters.coupon }}}}'\n          - name: fare_id\n            value: '{{{{ tasks.search-fare.result }}}}'\n      - name: calculate-final-fare\n        template: calculate-final-fare\n        dependencies:\n        - search-fare\n        - check-discount\n        arguments:\n          parameters:\n          - name: fare_id\n            value: '{{{{ tasks.search-fare.result }}}}'\n          - name: discount_amount\n            value: '{{{{ tasks.check-discount.result }}}}'\n  inputs:\n    parameters:\n    - name: src\n      value: 'New York'\n    - name: dest\n      value: 'Los Angeles'\n    - name: date\n      value: '13th June'\n    - name: coupon\n      value: 'SUMMER50'\n\n  templates:\n  - name: search-fare\n    script:\n      image: python:3.7\n      command: [python]\n      source: |\n        import json\n        import sys\n\n        def search_fare(src, dest, date):\n            # This function should call the SearchFare API\n            # For demonstration, we'll just return a dummy fare_id\n            return 12345\n\n        src = sys.argv[1]\n        dest = sys.argv[2]\n        date = sys.argv[3]\n        result = search_fare(src, dest, date)\n        print(result)\n\n  - name: check-discount\n    script:\n      image: python:3.7\n      command: [python]\n      source: |\n        import json\n        import sys\n\n        def check_discount(coupon, fare_id):\n            # This function should call the CheckDiscount API\n            # For demonstration, we'll just return a dummy discount_amount\n            return 50.0\n\n        coupon = sys.argv[1]\n        fare_id = int(sys.argv[2])\n        result = check_discount(coupon, fare_id)\n        print(result)\n\n  - name: calculate-final-fare\n    script:\n      image: python:3.7\n      command: [python]\n      source: |\n        import json\n        import sys\n\n        def calculate_final_fare(fare_id, discount_amount):\n            # This function should call the CalculateFinalFare API\n            # For demonstration, we'll just return a dummy final_fare\n            return 200.0\n\n        fare_id = int(sys.argv[1])\n        discount_amount = float(sys.argv[2])\n        result = calculate_final_fare(fare_id, discount_amount)\n        print(result)"
  },
  {
    "Id": 1459,
    "status": "Success",
    "workflow": "apiVersion: argoproj.io/v1alpha1\nkind: Workflow\nmetadata:\n  generateName: travel-planning-workflow-\nspec:\n  entrypoint: main\n  templates:\n  - name: main\n    dag:\n      tasks:\n      - name: findflight\n        template: findflight\n        arguments:\n          parameters:\n          - name: cityDeparture\n            value: '{{{{ inputs.parameters.cityDeparture }}}}'\n          - name: cityArrival\n            value: '{{{{ inputs.parameters.cityArrival }}}}'\n          - name: date\n            value: '{{{{ inputs.parameters.date }}}}'\n      - name: bookflight\n        template: bookflight\n        dependencies:\n        - findflight\n        arguments:\n          parameters:\n          - name: flight_ID\n            value: '{{{{ tasks.findflight.result }}}}'\n      - name: findhotel\n        template: findhotel\n        arguments:\n          parameters:\n          - name: city\n            value: '{{{{ inputs.parameters.cityArrival }}}}'\n      - name: bookhotel\n        template: bookhotel\n        dependencies:\n        - findhotel\n        arguments:\n          parameters:\n          - name: hotel_ID\n            value: '{{{{ tasks.findhotel.result }}}}'\n      - name: create-travel-plan\n        template: create-travel-plan\n        dependencies:\n        - bookflight\n        - bookhotel\n        arguments:\n          parameters:\n          - name: flight\n            value: '{{{{ tasks.bookflight.result }}}}'\n          - name: accommodation\n            value: '{{{{ tasks.bookhotel.result }}}}'\n      - name: plan-itinerary\n        template: plan-itinerary\n        dependencies:\n        - create-travel-plan\n        arguments:\n          parameters:\n          - name: location\n            value: '{{{{ inputs.parameters.cityArrival }}}}'\n          - name: interests\n            value: '{{{{ inputs.parameters.interests }}}}'\n          - name: flight\n            value: '{{{{ tasks.create-travel-plan.result }}}}'\n          - name: hotel\n            value: '{{{{ tasks.bookhotel.result }}}}'\n      - name: book-trip\n        template: book-trip\n        dependencies:\n        - create-travel-plan\n        arguments:\n          parameters:\n          - name: flight\n            value: '{{{{ tasks.create-travel-plan.result }}}}'\n          - name: hotel\n            value: '{{{{ tasks.bookhotel.result }}}}'\n  - name: findflight\n    inputs:\n      parameters:\n      - name: cityDeparture\n      - name: cityArrival\n      - name: date\n    container:\n      image: your-image-here\n      command: [\"sh\", \"-c\"]\n      args: [\"findflight --departure {{inputs.parameters.cityDeparture}} --arrival {{inputs.parameters.cityArrival}} --date {{inputs.parameters.date}}\"]\n  - name: bookflight\n    inputs:\n      parameters:\n      - name: flight_ID\n    container:\n      image: your-image-here\n      command: [\"sh\", \"-c\"]\n      args: [\"bookflight --flight-id {{inputs.parameters.flight_ID}}\"]\n  - name: findhotel\n    inputs:\n      parameters:\n      - name: city\n    container:\n      image: your-image-here\n      command: [\"sh\", \"-c\"]\n      args: [\"findhotel --city {{inputs.parameters.city}}\"]\n  - name: bookhotel\n    inputs:\n      parameters:\n      - name: hotel_ID\n    container:\n      image: your-image-here\n      command: [\"sh\", \"-c\"]\n      args: [\"bookhotel --hotel-id {{inputs.parameters.hotel_ID}}\"]\n  - name: create-travel-plan\n    inputs:\n      parameters:\n      - name: flight\n      - name: accommodation\n    container:\n      image: your-image-here\n      command: [\"sh\", \"-c\"]\n      args: [\"create-travel-plan --flight {{inputs.parameters.flight}} --accommodation {{inputs.parameters.accommodation}}\"]\n  - name: plan-itinerary\n    inputs:\n      parameters:\n      - name: location\n      - name: interests\n      - name: flight\n      - name: hotel\n    container:\n      image: your-image-here\n      command: [\"sh\", \"-c\"]\n      args: [\"plan-itinerary --location {{inputs.parameters.location}} --interests {{inputs.parameters.interests}} --flight {{inputs.parameters.flight}} --hotel {{inputs.parameters.hotel}}\"]\n  - name: book-trip\n    inputs:\n      parameters:\n      - name: flight\n      - name: hotel\n    container:\n      image: your-image-here\n      command: [\"sh\", \"-c\"]\n      args: [\"book-trip --flight {{inputs.parameters.flight}} --hotel {{inputs.parameters.hotel}}\"]"
  },
  {
    "Id": 1509,
    "status": "Success",
    "workflow": "apiVersion: argoproj.io/v1alpha1\nkind: Workflow\nmetadata:\n  generateName: italian-dinner-workflow-\nspec:\n  entrypoint: main\n  templates:\n  - name: main\n    dag:\n      tasks:\n      - name: searchrestaurant\n        template: searchrestaurant\n        arguments:\n          parameters:\n          - name: city\n            value: '{{{{ inputs.parameters.city }}}}'\n          - name: cuisine\n            value: '{{{{ inputs.parameters.cuisine }}}}'\n      - name: restaurantlocation\n        template: restaurantlocation\n        dependencies:\n        - searchrestaurant\n        arguments:\n          parameters:\n          - name: city\n            value: '{{{{ inputs.parameters.city }}}}'\n      - name: dinnerreservation\n        template: dinnerreservation\n        dependencies:\n        - searchrestaurant\n        arguments:\n          parameters:\n          - name: restaurant\n            value: '{{{{ tasks.searchrestaurant.result }}}}'\n          - name: time\n            value: '{{{{ inputs.parameters.time }}}}'\n      - name: menuselection\n        template: menuselection\n        dependencies:\n        - searchrestaurant\n        arguments:\n          parameters:\n          - name: restaurantInfo\n            value: '{{{{ tasks.searchrestaurant.result }}}}'\n          - name: cuisineRec\n            value: '{{{{ inputs.parameters.cuisine }}}}'\n  inputs:\n    parameters:\n    - name: city\n      value: 'New York'\n    - name: cuisine\n      value: 'Italian'\n    - name: time\n      value: '8 pm'"
  },
  {
    "Id": 1532,
    "status": "Success",
    "workflow": "apiVersion: argoproj.io/v1alpha1\nkind: Workflow\nmetadata:\n  generateName: dependency-workflow-bus-\nspec:\n  entrypoint: main\n  templates:\n  - name: main\n    dag:\n      tasks:\n      - name: get-traffic-update\n        template: get-traffic-update\n        arguments:\n          parameters:\n          - name: location\n            value: 'Times Square'\n      - name: time-calculator\n        template: time-calculator\n        dependencies:\n        - get-traffic-update\n        arguments:\n          parameters:\n          - name: traffic\n            value: '{{{{ tasks.get-traffic-update.result }}}}'\n          - name: modeOfTransport\n            value: 'bus'\n      - name: fetch-next-bus\n        template: fetch-next-bus\n        dependencies:\n        - time-calculator\n        arguments:\n          parameters:\n          - name: travel_time\n            value: '{{{{ tasks.time-calculator.result }}}}'\n          - name: bus_route\n            value: 'Times Square to Wall Street'\n  templates:\n  - name: get-traffic-update\n    container:\n      image: your-image-name\n      command: [sh, -c]\n      args: [\"GetTrafficUpdate(location={{inputs.parameters.location}})\"]\n  - name: time-calculator\n    container:\n      image: your-image-name\n      command: [sh, -c]\n      args: [\"TimeCalculator(traffic={{inputs.parameters.traffic}}, modeOfTransport={{inputs.parameters.modeOfTransport}})\"]\n  - name: fetch-next-bus\n    container:\n      image: your-image-name\n      command: [sh, -c]\n      args: [\"FetchNextBus(travel_time={{inputs.parameters.travel_time}}, bus_route={{inputs.parameters.bus_route}})\"]"
  },
  {
    "Id": 1535,
    "status": "Success",
    "workflow": "apiVersion: argoproj.io/v1alpha1\nkind: Workflow\nmetadata:\n  generateName: traffic-check-workflow-\nspec:\n  entrypoint: main\n  templates:\n  - name: main\n    dag:\n      tasks:\n      - name: getappointmentdetails\n        template: getappointmentdetails\n        arguments:\n          parameters:\n          - name: username\n            value: '{{{{ inputs.parameters.username }}}}'\n      - name: getdestination\n        template: getdestination\n        dependencies:\n        - getappointmentdetails\n        arguments:\n          parameters:\n          - name: appointment_details\n            value: '{{{{ tasks.getappointmentdetails.result }}}}'\n      - name: checktraffic\n        template: checktraffic\n        dependencies:\n        - getdestination\n        arguments:\n          parameters:\n          - name: destination\n            value: '{{{{ tasks.getdestination.result }}}}'\n      - name: gettrafficupdate\n        template: gettrafficupdate\n        dependencies:\n        - checktraffic\n        arguments:\n          parameters:\n          - name: location\n            value: '{{{{ tasks.getdestination.result }}}}'\n      - name: trafficstatus\n        template: trafficstatus\n        dependencies:\n        - getdestination\n        arguments:\n          parameters:\n          - name: city_name\n            value: '{{{{ tasks.getdestination.result }}}}'\n      - name: retrievelocaltrafficinfo\n        template: retrievelocaltrafficinfo\n        dependencies:\n        - getdestination\n        arguments:\n          parameters:\n          - name: city\n            value: '{{{{ tasks.getdestination.result }}}}'\n      - name: gettraveltime\n        template: gettraveltime\n        dependencies:\n        - getdestination\n        arguments:\n          parameters:\n          - name: source\n            value: '{{{{ tasks.getappointmentdetails.result }}}}'\n          - name: destination\n            value: '{{{{ tasks.getdestination.result }}}}'\n      - name: timecalculator\n        template: timecalculator\n        dependencies:\n        - checktraffic\n        - getappointmentdetails\n        arguments:\n          parameters:\n          - name: traffic\n            value: '{{{{ tasks.checktraffic.result }}}}'\n          - name: modeOfTransport\n            value: '{{{{ inputs.parameters.modeOfTransport }}}}'\n      - name: trafficestimator\n        template: trafficestimator\n        dependencies:\n        - gettraveltime\n        arguments:\n          parameters:\n          - name: distance\n            value: '{{{{ tasks.gettraveltime.result }}}}'\n  inputs:\n    parameters:\n    - name: username\n      value: '{{{{ inputs.parameters.username }}}}'\n    - name: modeOfTransport\n      value: '{{{{ inputs.parameters.modeOfTransport }}}}'"
  }
]