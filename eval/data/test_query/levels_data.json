[{"level1": [{"APIs": [{"name": "CheckWeather", "Description": "This API checks the weather of a specific location.", "input_params": {"location": {"description": "the specific location", "type": "String"}}, "output_params": {"weather": {"description": "the weather at the specific location", "type": "String"}}, "format": "CheckWeather(location) -> weather"}, {"name": "SelectOutfit", "Description": "This API selects an appropriate outfit based on the weather and occasion.", "input_params": {"weather": {"description": "the weather condition", "type": "String"}, "occasion": {"description": "the occasion", "type": "String"}}, "output_params": {"outfit": {"description": "the recommended outfit", "type": "String"}}, "format": "SelectOutfit(weather, occasion) -> outfit"}], "Query": "Could you help me select what to wear for a date in Chicago tonight?", "Label": "SelectOutfit(weather=CheckWeather(location='Chicago'), occasion='date')", "Index": 42}, {"APIs": [{"name": "CheckWeather", "Description": "This API checks the weather of a specific location.", "input_params": {"location": {"description": "the specific location", "type": "String"}}, "output_params": {"weather": {"description": "the weather at the specific location", "type": "String"}}, "format": "CheckWeather(location) -> weather"}, {"name": "SelectOutfit", "Description": "This API selects an appropriate outfit based on the weather and occasion.", "input_params": {"weather": {"description": "the weather condition", "type": "String"}, "occasion": {"description": "the occasion", "type": "String"}}, "output_params": {"outfit": {"description": "the recommended outfit", "type": "String"}}, "format": "SelectOutfit(weather, occasion) -> outfit"}], "Query": "I'm going to a concert in Sydney, what should I dress?", "Label": "SelectOutfit(weather=CheckWeather(location='Sydney'), occasion='concert')", "Index": 45}, {"APIs": [{"name": "FindRestaurant", "Description": "This API is to find a restaurant based on location, type and rating.", "input_params": {"location": {"description": "the location of the restaurant", "type": "String"}, "type": {"description": "the type of the restaurant", "type": "String"}, "rating": {"description": "the rating of the restaurant", "type": "String"}}, "output_params": {"restaurant": {"description": "the restaurant found", "type": "Object"}}, "format": "FindRestaurant(location, type, rating) -> restaurant"}, {"name": "GetMenu", "Description": "This API is to get the menu of a specific restaurant.", "input_params": {"restaurant_id": {"description": "the ID of the restaurant", "type": "String"}}, "output_params": {"menu": {"description": "the menu of the restaurant", "type": "Object"}}, "format": "GetMenu(restaurant_id) -> menu"}], "Query": "Please give me the menu at the finest burger joint in Seattle?", "Label": "GetMenu(restaurant_id=FindRestaurant(location='Seattle', type='burger', rating='finest'))", "Index": 51}, {"APIs": [{"name": "FindRestaurant", "Description": "This API is to find a restaurant based on location, type and rating.", "input_params": {"location": {"description": "the location of the restaurant", "type": "String"}, "type": {"description": "the type of the restaurant", "type": "String"}, "rating": {"description": "the rating of the restaurant", "type": "String"}}, "output_params": {"restaurant": {"description": "the restaurant found", "type": "Object"}}, "format": "FindRestaurant(location, type, rating) -> restaurant"}, {"name": "GetMenu", "Description": "This API is to get the menu of a specific restaurant.", "input_params": {"restaurant_id": {"description": "the ID of the restaurant", "type": "String"}}, "output_params": {"menu": {"description": "the menu of the restaurant", "type": "Object"}}, "format": "GetMenu(restaurant_id) -> menu"}], "Query": "What's the menu for the most popular Chinese restaurant in San Francisco?", "Label": "GetMenu(restaurant_id=FindRestaurant(location='San Francisco', type='Chinese', rating='most popular'))", "Index": 52}, {"APIs": [{"name": "FindRestaurant", "Description": "This API is to find a restaurant based on location, type and rating.", "input_params": {"location": {"description": "the location of the restaurant", "type": "String"}, "type": {"description": "the type of the restaurant", "type": "String"}, "rating": {"description": "the rating of the restaurant", "type": "String"}}, "output_params": {"restaurant": {"description": "the restaurant found", "type": "Object"}}, "format": "FindRestaurant(location, type, rating) -> restaurant"}, {"name": "GetMenu", "Description": "This API is to get the menu of a specific restaurant.", "input_params": {"restaurant_id": {"description": "the ID of the restaurant", "type": "String"}}, "output_params": {"menu": {"description": "the menu of the restaurant", "type": "Object"}}, "format": "GetMenu(restaurant_id) -> menu"}], "Query": "Can I get the menu of the top Chinese restaurant in San Francisco?", "Label": "GetMenu(restaurant_id=FindRestaurant(location='San Francisco', type='Chinese', rating='top'))", "Index": 54}, {"APIs": [{"name": "BuyMovieTicket", "Description": "This API allows the user to purchase a movie ticket for a specific movie, theater, date, and time.", "input_params": {"movie_name": {"description": "the name of the movie", "type": "String"}, "theater_name": {"description": "the name of the theater", "type": "String"}, "date": {"description": "the date of the movie showing", "type": "Date"}, "time": {"description": "the time of the movie showing", "type": "Time"}}, "output_params": {"booking_status": {"description": "Booking success or failure information", "type": "String"}}, "format": "BuyMovieTicket(movie_name, theater_name, date, time) -> booking status"}, {"name": "GetMovieTheaters", "Description": "This API returns a recommended movie theaters in a given city.", "input_params": {"city": {"description": "city name", "type": "String"}}, "output_params": {"theater_name": {"description": "the name of the movie theaters", "type": "String"}}, "format": "GetMovieTheaters(city) -> theater_name"}], "Query": "I'm in New York City today, and I want to book a ticket for the movie 'Inception' at 8pm.", "Label": "BuyMovieTicket(movie_name='Inception', theater_name=GetMovieTheaters(city='New York City'), date='today', time='8pm')", "Index": 74}, {"APIs": [{"name": "BuyMovieTicket", "Description": "This API allows the user to purchase a movie ticket for a specific movie, theater, date, and time.", "input_params": {"movie_name": {"description": "the name of the movie", "type": "String"}, "theater_name": {"description": "the name of the theater", "type": "String"}, "date": {"description": "the date of the movie showing", "type": "Date"}, "time": {"description": "the time of the movie showing", "type": "Time"}}, "output_params": {"booking_status": {"description": "Booking success or failure information", "type": "String"}}, "format": "BuyMovieTicket(movie_name, theater_name, date, time) -> booking status"}, {"name": "GetMovieTheaters", "Description": "This API returns a recommended movie theaters in a given city.", "input_params": {"city": {"description": "city name", "type": "String"}}, "output_params": {"theater_name": {"description": "the name of the movie theaters", "type": "String"}}, "format": "GetMovieTheaters(city) -> theater_name"}], "Query": "Could you buy a ticket of movie 'The Dark Knight' in Chicago this Sunday at 11am.", "Label": "BuyMovieTicket(movie_name='The Dark Knight', theater_name=GetMovieTheaters(city='Chicago'), date='this Sunday', time='11am')", "Index": 75}, {"APIs": [{"name": "BuyMovieTicket", "Description": "This API allows the user to purchase a movie ticket for a specific movie, theater, date, and time.", "input_params": {"movie_name": {"description": "the name of the movie", "type": "String"}, "theater_name": {"description": "the name of the theater", "type": "String"}, "date": {"description": "the date of the movie showing", "type": "Date"}, "time": {"description": "the time of the movie showing", "type": "Time"}}, "output_params": {"booking_status": {"description": "Booking success or failure information", "type": "String"}}, "format": "BuyMovieTicket(movie_name, theater_name, date, time) -> booking status"}, {"name": "GetMovieTheaters", "Description": "This API returns a recommended movie theaters in a given city.", "input_params": {"city": {"description": "city name", "type": "String"}}, "output_params": {"theater_name": {"description": "the name of the movie theaters", "type": "String"}}, "format": "GetMovieTheaters(city) -> theater_name"}], "Query": "Could you help me reserve a ticket for the movie 'The Lion King' in Miami today at 3 pm?", "Label": "BuyMovieTicket(movie_name='The Lion King', theater_name=GetMovieTheaters(city='Miami'), date='today', time='3pm')", "Index": 79}, {"APIs": [{"name": "SearchHotel", "Description": "This API searches a hotel in a given city based on user preferences.", "input_params": {"city": {"description": "the city name", "type": "String"}, "hotel_preferences": {"description": "the user preferences for the hotel", "type": "String"}}, "output_params": {"hotel_name": {"description": "the name of the hotel", "type": "String"}}, "format": "SearchHotel(city, hotel_preferences) -> hotel_name"}, {"name": "BookHotel", "Description": "This API books a preferred hotel with the given check-in and check-out dates.", "input_params": {"hotel_name": {"description": "the name of the hotel", "type": "String"}, "check_in_date": {"description": "the check-in date", "type": "String"}, "check_out_date": {"description": "the check-out date", "type": "String"}}, "output_params": {"booking_status": {"description": "the status of the booking", "type": "String"}}, "format": "BookHotel(hotel_name, check_in_date, check_out_date) -> booking_status"}], "Query": "I want to travel to London from 5th July to 10th July. Find me a flight and a hotel with gym facilities and book for me. Also, suggest me the best time for sightseeing as per the weather condition.", "Label": "BookHotel(hotel_name=SearchHotel(city='London', hotel_preferences='gym facilities'), check_in_date='5th July', check_out_date='10th July')", "Index": 95}, {"APIs": [{"name": "SearchHotel", "Description": "This API searches a hotel in a given city based on user preferences.", "input_params": {"city": {"description": "the city name", "type": "String"}, "hotel_preferences": {"description": "the user preferences for the hotel", "type": "String"}}, "output_params": {"hotel_name": {"description": "the name of the hotel", "type": "String"}}, "format": "SearchHotel(city, hotel_preferences) -> hotel_name"}, {"name": "BookHotel", "Description": "This API books a preferred hotel with the given check-in and check-out dates.", "input_params": {"hotel_name": {"description": "the name of the hotel", "type": "String"}, "check_in_date": {"description": "the check-in date", "type": "String"}, "check_out_date": {"description": "the check-out date", "type": "String"}}, "output_params": {"booking_status": {"description": "the status of the booking", "type": "String"}}, "format": "BookHotel(hotel_name, check_in_date, check_out_date) -> booking_status"}], "Query": "I want to go to Berlin from 20th November to 25th November. Reserve me a hotel with free Wi-Fi.", "Label": "BookHotel(hotel_name=SearchHotel(city='Berlin', hotel_preferences='free Wi-Fi'), check_in_date='20th November', check_out_date='25th November')", "Index": 102}, {"APIs": [{"name": "FindNearestStore", "Description": "This API is to find the nearest store based on user location and the preferred product type.", "input_params": {"city": {"description": "the city where the user is located", "type": "String"}, "store_type": {"description": "the preferred store type", "type": "String"}}, "output_params": {"store_name": {"description": "the name of the nearest store", "type": "String"}}, "format": "FindNearestStore(city, store_type) -> store_name"}, {"name": "GetProductPrice", "Description": "This API is to get the price of a specific product in a given store.", "input_params": {"store_name": {"description": "the name of the store", "type": "String"}, "product_name": {"description": "the name of the product", "type": "String"}}, "output_params": {"price": {"description": "the price of the product", "type": "Float"}}, "format": "GetProductPrice(store_name, product_name) -> price"}], "Query": "Can you help me find the price for fresh apples at the closest grocery store in Boston?", "Label": "GetProductPrice(store_name=FindNearestStore(city='Boston', store_type='grocery'), product_name='fresh apples')", "Index": 132}, {"APIs": [{"name": "FindNearestStore", "Description": "This API is to find the nearest store based on user location and the preferred product type.", "input_params": {"city": {"description": "the city where the user is located", "type": "String"}, "store_type": {"description": "the preferred store type", "type": "String"}}, "output_params": {"store_name": {"description": "the name of the nearest store", "type": "String"}}, "format": "FindNearestStore(city, store_type) -> store_name"}, {"name": "GetProductPrice", "Description": "This API is to get the price of a specific product in a given store.", "input_params": {"store_name": {"description": "the name of the store", "type": "String"}, "product_name": {"description": "the name of the product", "type": "String"}}, "output_params": {"price": {"description": "the price of the product", "type": "Float"}}, "format": "GetProductPrice(store_name, product_name) -> price"}], "Query": "I want to know the cost of French wine at the nearest liquor store in Los Angeles", "Label": "GetProductPrice(store_name=FindNearestStore(city='Los Angeles', store_type='liquor'), product_name='French wine')", "Index": 134}, {"APIs": [{"name": "Productname2Id", "Description": "This API is to convert product name to its Id.", "input_params": {"product_name": {"description": "the name of the product", "type": "String"}}, "output_params": {"Product_Id": {"description": "the Id of the product", "type": "Integer"}}, "format": "Productname2Id(product_name) -> Product_Id"}, {"name": "ProductAvailability", "Description": "API to check the availability of a product.", "input_params": {"product_id": {"description": "the Id of the product", "type": "Integer"}}, "output_params": {"availability": {"description": "the availability of the product", "type": "Boolean"}}, "format": "ProductAvailability(product_id) -> availability"}], "Query": "Can you check if the game Cyberpunk 2077 is available in the store?", "Label": "ProductAvailability(product_id=Productname2Id(product_name='Cyberpunk 2077'))", "Index": 193}, {"APIs": [{"name": "Productname2Id", "Description": "This API is to convert product name to its Id.", "input_params": {"product_name": {"description": "the name of the product", "type": "String"}}, "output_params": {"Product_Id": {"description": "the Id of the product", "type": "Integer"}}, "format": "Productname2Id(product_name) -> Product_Id"}, {"name": "ProductAvailability", "Description": "API to check the availability of a product.", "input_params": {"product_id": {"description": "the Id of the product", "type": "Integer"}}, "output_params": {"availability": {"description": "the availability of the product", "type": "Boolean"}}, "format": "ProductAvailability(product_id) -> availability"}], "Query": "Is the iPhone 13 Pro Max available for purchase?", "Label": "ProductAvailability(product_id=Productname2Id(product_name='iPhone 13 Pro Max'))", "Index": 194}, {"APIs": [{"name": "Productname2Id", "Description": "This API is to convert product name to its Id.", "input_params": {"product_name": {"description": "the name of the product", "type": "String"}}, "output_params": {"Product_Id": {"description": "the Id of the product", "type": "Integer"}}, "format": "Productname2Id(product_name) -> Product_Id"}, {"name": "ProductAvailability", "Description": "API to check the availability of a product.", "input_params": {"product_id": {"description": "the Id of the product", "type": "Integer"}}, "output_params": {"availability": {"description": "the availability of the product", "type": "Boolean"}}, "format": "ProductAvailability(product_id) -> availability"}], "Query": "Do you have the Samsung Galaxy S21 in stock?", "Label": "ProductAvailability(product_id=Productname2Id(product_name='Samsung Galaxy S21'))", "Index": 196}, {"APIs": [{"name": "Productname2Id", "Description": "This API is to convert product name to its Id.", "input_params": {"product_name": {"description": "the name of the product", "type": "String"}}, "output_params": {"Product_Id": {"description": "the Id of the product", "type": "Integer"}}, "format": "Productname2Id(product_name) -> Product_Id"}, {"name": "ProductAvailability", "Description": "API to check the availability of a product.", "input_params": {"product_id": {"description": "the Id of the product", "type": "Integer"}}, "output_params": {"availability": {"description": "the availability of the product", "type": "Boolean"}}, "format": "ProductAvailability(product_id) -> availability"}], "Query": "I want to buy the MacBook Pro, is it available?", "Label": "ProductAvailability(product_id=Productname2Id(product_name='MacBook Pro'))", "Index": 198}, {"APIs": [{"name": "Productname2Id", "Description": "This API is to convert product name to its Id.", "input_params": {"product_name": {"description": "the name of the product", "type": "String"}}, "output_params": {"Product_Id": {"description": "the Id of the product", "type": "Integer"}}, "format": "Productname2Id(product_name) -> Product_Id"}, {"name": "ProductAvailability", "Description": "API to check the availability of a product.", "input_params": {"product_id": {"description": "the Id of the product", "type": "Integer"}}, "output_params": {"availability": {"description": "the availability of the product", "type": "Boolean"}}, "format": "ProductAvailability(product_id) -> availability"}], "Query": "Is the iPhone 13 Pro Max available for purchase?", "Label": "ProductAvailability(product_id=Productname2Id(product_name='iPhone 13 Pro Max'))", "Index": 199}, {"APIs": [{"name": "Productname2Id", "Description": "This API is to convert product name to its Id.", "input_params": {"product_name": {"description": "the name of the product", "type": "String"}}, "output_params": {"Product_Id": {"description": "the Id of the product", "type": "Integer"}}, "format": "Productname2Id(product_name) -> Product_Id"}, {"name": "ProductAvailability", "Description": "API to check the availability of a product.", "input_params": {"product_id": {"description": "the Id of the product", "type": "Integer"}}, "output_params": {"availability": {"description": "the availability of the product", "type": "Boolean"}}, "format": "ProductAvailability(product_id) -> availability"}], "Query": "Can I buy the book 'The Alchemist' right now?", "Label": "ProductAvailability(product_id=Productname2Id(product_name='The Alchemist'))", "Index": 200}, {"APIs": [{"name": "Productname2Id", "Description": "This API is to convert product name to its Id.", "input_params": {"product_name": {"description": "the name of the product", "type": "String"}}, "output_params": {"Product_Id": {"description": "the Id of the product", "type": "Integer"}}, "format": "Productname2Id(product_name) -> Product_Id"}, {"name": "ProductAvailability", "Description": "API to check the availability of a product.", "input_params": {"product_id": {"description": "the Id of the product", "type": "Integer"}}, "output_params": {"availability": {"description": "the availability of the product", "type": "Boolean"}}, "format": "ProductAvailability(product_id) -> availability"}], "Query": "Can you check the availability of the PlayStation 5?", "Label": "ProductAvailability(product_id=Productname2Id(product_name='PlayStation 5'))", "Index": 202}, {"APIs": [{"name": "Productname2Id", "Description": "This API is to convert product name to its Id.", "input_params": {"product_name": {"description": "the name of the product", "type": "String"}}, "output_params": {"Product_Id": {"description": "the Id of the product", "type": "Integer"}}, "format": "Productname2Id(product_name) -> Product_Id"}, {"name": "ProductAvailability", "Description": "API to check the availability of a product.", "input_params": {"product_id": {"description": "the Id of the product", "type": "Integer"}}, "output_params": {"availability": {"description": "the availability of the product", "type": "Boolean"}}, "format": "ProductAvailability(product_id) -> availability"}], "Query": "Is the movie 'Avengers: Endgame' available for purchase?", "Label": "ProductAvailability(product_id=Productname2Id(product_name='Avengers: Endgame'))", "Index": 205}, {"APIs": [{"name": "Productname2Id", "Description": "This API is to convert product name to its Id.", "input_params": {"product_name": {"description": "the name of the product", "type": "String"}}, "output_params": {"Product_Id": {"description": "the Id of the product", "type": "Integer"}}, "format": "Productname2Id(product_name) -> Product_Id"}, {"name": "ProductAvailability", "Description": "API to check the availability of a product.", "input_params": {"product_id": {"description": "the Id of the product", "type": "Integer"}}, "output_params": {"availability": {"description": "the availability of the product", "type": "Boolean"}}, "format": "ProductAvailability(product_id) -> availability"}], "Query": "Can I currently buy the phone 'iPhone 12' in the store?", "Label": "ProductAvailability(product_id=Productname2Id(product_name='iPhone 12'))", "Index": 206}, {"APIs": [{"name": "FindHotel", "Description": "This API returns a recommended hotel in a given city.", "input_params": {"city": {"description": "the name of the city", "type": "String"}}, "output_params": {"hotel_name": {"description": "the name of the recommended hotel", "type": "String"}}, "format": "FindHotel(city) -> hotel_name"}, {"name": "BookRoom", "Description": "This API allows the user to book a room at a specific hotel for a specific number of nights and date.", "input_params": {"hotel_name": {"description": "the name of the hotel", "type": "String"}, "date": {"description": "the starting date of the booking", "type": "Date"}, "number_of_nights": {"description": "the number of nights for the booking", "type": "Integer"}}, "output_params": {"booking status": {"description": "the status of the booking", "type": "String"}}, "format": "BookRoom(hotel_name, date, number_of_nights) -> booking status"}], "Query": "I'm in Chicago and I need to book a room for 3 nights starting from tomorrow.", "Label": "BookRoom(hotel_name=FindHotel(city='Chicago'), date='tomorrow', number_of_nights=3)", "Index": 251}, {"APIs": [{"name": "FindHotel", "Description": "This API returns a recommended hotel in a given city.", "input_params": {"city": {"description": "the name of the city", "type": "String"}}, "output_params": {"hotel_name": {"description": "the name of the recommended hotel", "type": "String"}}, "format": "FindHotel(city) -> hotel_name"}, {"name": "BookRoom", "Description": "This API allows the user to book a room at a specific hotel for a specific number of nights and date.", "input_params": {"hotel_name": {"description": "the name of the hotel", "type": "String"}, "date": {"description": "the starting date of the booking", "type": "Date"}, "number_of_nights": {"description": "the number of nights for the booking", "type": "Integer"}}, "output_params": {"booking status": {"description": "the status of the booking", "type": "String"}}, "format": "BookRoom(hotel_name, date, number_of_nights) -> booking status"}], "Query": "I want to book a hotel in Miami for 4 nights starting from the day after tomorrow.", "Label": "BookRoom(hotel_name=FindHotel(city='Miami'), date='the day after tomorrow', number_of_nights=4)", "Index": 253}, {"APIs": [{"name": "FindHotel", "Description": "This API returns a recommended hotel in a given city.", "input_params": {"city": {"description": "the name of the city", "type": "String"}}, "output_params": {"hotel_name": {"description": "the name of the recommended hotel", "type": "String"}}, "format": "FindHotel(city) -> hotel_name"}, {"name": "BookRoom", "Description": "This API allows the user to book a room at a specific hotel for a specific number of nights and date.", "input_params": {"hotel_name": {"description": "the name of the hotel", "type": "String"}, "date": {"description": "the starting date of the booking", "type": "Date"}, "number_of_nights": {"description": "the number of nights for the booking", "type": "Integer"}}, "output_params": {"booking status": {"description": "the status of the booking", "type": "String"}}, "format": "BookRoom(hotel_name, date, number_of_nights) -> booking status"}], "Query": "I will be in New York next week, can you book a room for 5 nights?", "Label": "BookRoom(hotel_name=FindHotel(city='New York'), date='next week', number_of_nights=5)", "Index": 255}, {"APIs": [{"name": "GetWeatherForecast", "Description": "This API returns the weather forecast of a specified city on a specific date.", "input_params": {"city": {"description": "the name of the city", "type": "String"}, "date": {"description": "the specific date", "type": "Date"}}, "output_params": {"weather report": {"description": "the weather forecast", "type": "String"}}, "format": "GetWeatherForecast(city, date) -> weather report"}, {"name": "RecommendOutfit", "Description": "This API recommends an outfit based on the weather conditions.", "input_params": {"weather": {"description": "the weather condition", "type": "String"}}, "output_params": {"outfit details": {"description": "the recommended outfit", "type": "String"}}, "format": "RecommendOutfit(weather) -> outfit details"}], "Query": "What do you suggest to wear in Paris on May 15th?", "Label": "RecommendOutfit(weather=GetWeatherForecast(city='Paris', date='May 15th'))", "Index": 263}, {"APIs": [{"name": "GetWeatherForecast", "Description": "This API returns the weather forecast of a specified city on a specific date.", "input_params": {"city": {"description": "the name of the city", "type": "String"}, "date": {"description": "the specific date", "type": "Date"}}, "output_params": {"weather report": {"description": "the weather forecast", "type": "String"}}, "format": "GetWeatherForecast(city, date) -> weather report"}, {"name": "RecommendOutfit", "Description": "This API recommends an outfit based on the weather conditions.", "input_params": {"weather": {"description": "the weather condition", "type": "String"}}, "output_params": {"outfit details": {"description": "the recommended outfit", "type": "String"}}, "format": "RecommendOutfit(weather) -> outfit details"}], "Query": "What should I dress in Sydney on March 20th?", "Label": "RecommendOutfit(weather=GetWeatherForecast(city='Sydney', date='March 20th'))", "Index": 264}, {"APIs": [{"name": "BookFinder", "Description": "This API is to find a specific book by genre, author, and year.", "input_params": {"genre": {"description": "the genre of the book", "type": "String"}, "author": {"description": "the author of the book", "type": "String"}, "year": {"description": "the year the book was published", "type": "String"}}, "output_params": {"book": {"description": "the specific book matching the given criteria", "type": "String"}}, "format": "BookFinder(genre, author, year) -> book"}, {"name": "BookSummary", "Description": "This API is to get a summary of a particular book.", "input_params": {"book_name": {"description": "the name of the book", "type": "String"}}, "output_params": {"summary": {"description": "the summary of the book", "type": "String"}}, "format": "BookSummary(book_name) -> summary"}], "Query": "I'm looking for a summary of a science fiction book written by Arthur C. Clarke, published in 2001.", "Label": "BookSummary(book_name=BookFinder(genre='science fiction', author='Arthur C. Clarke', year='2001'))", "Index": 265}, {"APIs": [{"name": "BookFinder", "Description": "This API is to find a specific book by genre, author, and year.", "input_params": {"genre": {"description": "the genre of the book", "type": "String"}, "author": {"description": "the author of the book", "type": "String"}, "year": {"description": "the year the book was published", "type": "String"}}, "output_params": {"book": {"description": "the specific book matching the given criteria", "type": "String"}}, "format": "BookFinder(genre, author, year) -> book"}, {"name": "BookSummary", "Description": "This API is to get a summary of a particular book.", "input_params": {"book_name": {"description": "the name of the book", "type": "String"}}, "output_params": {"summary": {"description": "the summary of the book", "type": "String"}}, "format": "BookSummary(book_name) -> summary"}], "Query": "Give me a summary of a romance novel by Nicholas Sparks from 1996.", "Label": "BookSummary(book_name=BookFinder(genre='romance', author='Nicholas Sparks', year='1996'))", "Index": 267}, {"APIs": [{"name": "BookFinder", "Description": "This API is to find a specific book by genre, author, and year.", "input_params": {"genre": {"description": "the genre of the book", "type": "String"}, "author": {"description": "the author of the book", "type": "String"}, "year": {"description": "the year the book was published", "type": "String"}}, "output_params": {"book": {"description": "the specific book matching the given criteria", "type": "String"}}, "format": "BookFinder(genre, author, year) -> book"}, {"name": "BookSummary", "Description": "This API is to get a summary of a particular book.", "input_params": {"book_name": {"description": "the name of the book", "type": "String"}}, "output_params": {"summary": {"description": "the summary of the book", "type": "String"}}, "format": "BookSummary(book_name) -> summary"}], "Query": "Can you provide a summary of a mystery novel by Agatha Christie from 1934?", "Label": "BookSummary(book_name=BookFinder(genre='mystery', author='Agatha Christie', year='1934'))", "Index": 269}, {"APIs": [{"name": "BookFinder", "Description": "This API is to find a specific book by genre, author, and year.", "input_params": {"genre": {"description": "the genre of the book", "type": "String"}, "author": {"description": "the author of the book", "type": "String"}, "year": {"description": "the year the book was published", "type": "String"}}, "output_params": {"book": {"description": "the specific book matching the given criteria", "type": "String"}}, "format": "BookFinder(genre, author, year) -> book"}, {"name": "BookSummary", "Description": "This API is to get a summary of a particular book.", "input_params": {"book_name": {"description": "the name of the book", "type": "String"}}, "output_params": {"summary": {"description": "the summary of the book", "type": "String"}}, "format": "BookSummary(book_name) -> summary"}], "Query": "I want a summary of a mystery book by Agatha Christie that came out in 1920.", "Label": "BookSummary(book_name=BookFinder(genre='mystery', author='Agatha Christie', year='1920'))", "Index": 271}, {"APIs": [{"name": "BookFinder", "Description": "This API is to find a specific book by genre, author, and year.", "input_params": {"genre": {"description": "the genre of the book", "type": "String"}, "author": {"description": "the author of the book", "type": "String"}, "year": {"description": "the year the book was published", "type": "String"}}, "output_params": {"book": {"description": "the specific book matching the given criteria", "type": "String"}}, "format": "BookFinder(genre, author, year) -> book"}, {"name": "BookSummary", "Description": "This API is to get a summary of a particular book.", "input_params": {"book_name": {"description": "the name of the book", "type": "String"}}, "output_params": {"summary": {"description": "the summary of the book", "type": "String"}}, "format": "BookSummary(book_name) -> summary"}], "Query": "I wish to know the summary of a romance book by Nora Roberts which was published in 2001.", "Label": "BookSummary(book_name=BookFinder(genre='romance', author='Nora Roberts', year='2001'))", "Index": 273}, {"APIs": [{"name": "BookFinder", "Description": "This API is to find a specific book by genre, author, and year.", "input_params": {"genre": {"description": "the genre of the book", "type": "String"}, "author": {"description": "the author of the book", "type": "String"}, "year": {"description": "the year the book was published", "type": "String"}}, "output_params": {"book": {"description": "the specific book matching the given criteria", "type": "String"}}, "format": "BookFinder(genre, author, year) -> book"}, {"name": "BookSummary", "Description": "This API is to get a summary of a particular book.", "input_params": {"book_name": {"description": "the name of the book", "type": "String"}}, "output_params": {"summary": {"description": "the summary of the book", "type": "String"}}, "format": "BookSummary(book_name) -> summary"}], "Query": "Could you tell me the summary of a horror book by Stephen King that was published in 1983?", "Label": "BookSummary(book_name=BookFinder(genre='horror', author='Stephen King', year='1983'))", "Index": 274}, {"APIs": [{"name": "MovieSuggestion", "Description": "This API suggests a movie based on the genre, director, and the year.", "input_params": {"genre": {"description": "the genre of the movie", "type": "String"}, "director": {"description": "the director of the movie", "type": "String"}, "year": {"description": "the year of the movie", "type": "Integer"}}, "output_params": {"movie": {"description": "the suggested movie", "type": "String"}}, "format": "MovieSuggestion(genre, director, year) -> movie"}, {"name": "MovieReview", "Description": "This API provides a review of a particular movie.", "input_params": {"movie_name": {"description": "the name of the movie", "type": "String"}}, "output_params": {"review": {"description": "the review of the movie", "type": "String"}}, "format": "MovieReview(movie_name) -> review"}], "Query": "I wonder if I could see the review of a romance movie by Woody Allen in 2011?", "Label": "MovieReview(movie_name=MovieSuggestion(genre='romance', director='Woody Allen', year='2011'))", "Index": 282}, {"APIs": [{"name": "MovieSuggestion", "Description": "This API suggests a movie based on the genre, director, and the year.", "input_params": {"genre": {"description": "the genre of the movie", "type": "String"}, "director": {"description": "the director of the movie", "type": "String"}, "year": {"description": "the year of the movie", "type": "Integer"}}, "output_params": {"movie": {"description": "the suggested movie", "type": "String"}}, "format": "MovieSuggestion(genre, director, year) -> movie"}, {"name": "MovieReview", "Description": "This API provides a review of a particular movie.", "input_params": {"movie_name": {"description": "the name of the movie", "type": "String"}}, "output_params": {"review": {"description": "the review of the movie", "type": "String"}}, "format": "MovieReview(movie_name) -> review"}], "Query": "Will you show me the review of a drama movie directed by Quentin Tarantino, which was released in 2012?", "Label": "MovieReview(movie_name=MovieSuggestion(genre='drama', director='Quentin Tarantino', year='2012'))", "Index": 284}, {"APIs": [{"name": "MovieSuggestion", "Description": "This API suggests a movie based on the genre, director, and the year.", "input_params": {"genre": {"description": "the genre of the movie", "type": "String"}, "director": {"description": "the director of the movie", "type": "String"}, "year": {"description": "the year of the movie", "type": "Integer"}}, "output_params": {"movie": {"description": "the suggested movie", "type": "String"}}, "format": "MovieSuggestion(genre, director, year) -> movie"}, {"name": "MovieReview", "Description": "This API provides a review of a particular movie.", "input_params": {"movie_name": {"description": "the name of the movie", "type": "String"}}, "output_params": {"review": {"description": "the review of the movie", "type": "String"}}, "format": "MovieReview(movie_name) -> review"}], "Query": "Could you show me the review of a romance movie directed by Richard Linklater released in 1995?", "Label": "MovieReview(movie_name=MovieSuggestion(genre='romance', director='Richard Linklater', year='1995'))", "Index": 287}, {"APIs": [{"name": "SearchFlight", "Description": "This API is to search for flights based on user's departure, destination, and date.", "input_params": {"city_from": {"description": "the departure city", "type": "String"}, "city_to": {"description": "the destination city", "type": "String"}, "date": {"description": "the date of the flight", "type": "String"}}, "output_params": {"flight_id": {"description": "the ID of the flight", "type": "Integer"}}, "format": "SearchFlight(city_from, city_to, date) -> flight_id"}, {"name": "GetFlightDetails", "Description": "This API is to get detailed information about a specific flight.", "input_params": {"flight_id": {"description": "the ID of the flight", "type": "Integer"}}, "output_params": {"details": {"description": "detailed information about the flight", "type": "String"}}, "format": "GetFlightDetails(flight_id) -> details"}], "Query": "I need details for the earliest flight from Boston to Miami on 20th August.", "Label": "GetFlightDetails(flight_id=SearchFlight(city_from='Boston', city_to='Miami', date='20th August'))", "Index": 291}, {"APIs": [{"name": "SearchFlight", "Description": "This API is to search for flights based on user's departure, destination, and date.", "input_params": {"city_from": {"description": "the departure city", "type": "String"}, "city_to": {"description": "the destination city", "type": "String"}, "date": {"description": "the date of the flight", "type": "String"}}, "output_params": {"flight_id": {"description": "the ID of the flight", "type": "Integer"}}, "format": "SearchFlight(city_from, city_to, date) -> flight_id"}, {"name": "GetFlightDetails", "Description": "This API is to get detailed information about a specific flight.", "input_params": {"flight_id": {"description": "the ID of the flight", "type": "Integer"}}, "output_params": {"details": {"description": "detailed information about the flight", "type": "String"}}, "format": "GetFlightDetails(flight_id) -> details"}], "Query": "What are the details for the flight from Toronto to Vancouver on 10th September?", "Label": "GetFlightDetails(flight_id=SearchFlight(city_from='Toronto', city_to='Vancouver', date='10th September'))", "Index": 292}, {"APIs": [{"name": "SearchFlight", "Description": "This API is to search for flights based on user's departure, destination, and date.", "input_params": {"city_from": {"description": "the departure city", "type": "String"}, "city_to": {"description": "the destination city", "type": "String"}, "date": {"description": "the date of the flight", "type": "String"}}, "output_params": {"flight_id": {"description": "the ID of the flight", "type": "Integer"}}, "format": "SearchFlight(city_from, city_to, date) -> flight_id"}, {"name": "GetFlightDetails", "Description": "This API is to get detailed information about a specific flight.", "input_params": {"flight_id": {"description": "the ID of the flight", "type": "Integer"}}, "output_params": {"details": {"description": "detailed information about the flight", "type": "String"}}, "format": "GetFlightDetails(flight_id) -> details"}], "Query": "Can I get the details for the flight from Tokyo to Beijing on 30th January?", "Label": "GetFlightDetails(flight_id=SearchFlight(city_from='Tokyo', city_to='Beijing', date='30th January'))", "Index": 294}, {"APIs": [{"name": "GetWeatherForecast", "Description": "This API is to get the weather forecast of a specific location on a specific date.", "input_params": {"location": {"description": "the location for weather forecast", "type": "String"}, "date": {"description": "the specific date for weather forecast", "type": "String"}}, "output_params": {"weather_info": {"description": "the weather forecast information", "type": "String"}}, "format": "GetWeatherForecast(location, date) -> weather_info"}, {"name": "GetClothingRecommendation", "Description": "This API is to get clothing recommendation based on the weather forecast.", "input_params": {"weather_info": {"description": "the weather forecast information", "type": "String"}}, "output_params": {"clothing_recommendation": {"description": "the recommended clothing based on the weather forecast", "type": "String"}}, "format": "GetClothingRecommendation(weather_info) -> clothing_recommendation"}], "Query": "What should I wear in Paris on 15th March?", "Label": "GetClothingRecommendation(weather_info=GetWeatherForecast(location='Paris', date='15th March'))", "Index": 296}, {"APIs": [{"name": "GetWeatherForecast", "Description": "This API is to get the weather forecast of a specific location on a specific date.", "input_params": {"location": {"description": "the location for weather forecast", "type": "String"}, "date": {"description": "the specific date for weather forecast", "type": "String"}}, "output_params": {"weather_info": {"description": "the weather forecast information", "type": "String"}}, "format": "GetWeatherForecast(location, date) -> weather_info"}, {"name": "GetClothingRecommendation", "Description": "This API is to get clothing recommendation based on the weather forecast.", "input_params": {"weather_info": {"description": "the weather forecast information", "type": "String"}}, "output_params": {"clothing_recommendation": {"description": "the recommended clothing based on the weather forecast", "type": "String"}}, "format": "GetClothingRecommendation(weather_info) -> clothing_recommendation"}], "Query": "What is the clothing recommendation for Sydney on April 21st?", "Label": "GetClothingRecommendation(weather_info=GetWeatherForecast(location='Sydney', date='April 21st'))", "Index": 297}, {"APIs": [{"name": "GetWeatherForecast", "Description": "This API is to get the weather forecast of a specific location on a specific date.", "input_params": {"location": {"description": "the location for weather forecast", "type": "String"}, "date": {"description": "the specific date for weather forecast", "type": "String"}}, "output_params": {"weather_info": {"description": "the weather forecast information", "type": "String"}}, "format": "GetWeatherForecast(location, date) -> weather_info"}, {"name": "GetClothingRecommendation", "Description": "This API is to get clothing recommendation based on the weather forecast.", "input_params": {"weather_info": {"description": "the weather forecast information", "type": "String"}}, "output_params": {"clothing_recommendation": {"description": "the recommended clothing based on the weather forecast", "type": "String"}}, "format": "GetClothingRecommendation(weather_info) -> clothing_recommendation"}], "Query": "What clothes should I wear in London on 1st May?", "Label": "GetClothingRecommendation(weather_info=GetWeatherForecast(location='London', date='1st May'))", "Index": 298}, {"APIs": [{"name": "GetWeatherForecast", "Description": "This API is to get the weather forecast of a specific location on a specific date.", "input_params": {"location": {"description": "the location for weather forecast", "type": "String"}, "date": {"description": "the specific date for weather forecast", "type": "String"}}, "output_params": {"weather_info": {"description": "the weather forecast information", "type": "String"}}, "format": "GetWeatherForecast(location, date) -> weather_info"}, {"name": "GetClothingRecommendation", "Description": "This API is to get clothing recommendation based on the weather forecast.", "input_params": {"weather_info": {"description": "the weather forecast information", "type": "String"}}, "output_params": {"clothing_recommendation": {"description": "the recommended clothing based on the weather forecast", "type": "String"}}, "format": "GetClothingRecommendation(weather_info) -> clothing_recommendation"}], "Query": "What should I wear in Tokyo on June 30th?", "Label": "GetClothingRecommendation(weather_info=GetWeatherForecast(location='Tokyo', date='June 30th'))", "Index": 299}, {"APIs": [{"name": "GetWeatherForecast", "Description": "This API is to get the weather forecast of a specific location on a specific date.", "input_params": {"location": {"description": "the location for weather forecast", "type": "String"}, "date": {"description": "the specific date for weather forecast", "type": "String"}}, "output_params": {"weather_info": {"description": "the weather forecast information", "type": "String"}}, "format": "GetWeatherForecast(location, date) -> weather_info"}, {"name": "GetClothingRecommendation", "Description": "This API is to get clothing recommendation based on the weather forecast.", "input_params": {"weather_info": {"description": "the weather forecast information", "type": "String"}}, "output_params": {"clothing_recommendation": {"description": "the recommended clothing based on the weather forecast", "type": "String"}}, "format": "GetClothingRecommendation(weather_info) -> clothing_recommendation"}], "Query": "What is the clothing suggestion for New York City on July 4th?", "Label": "GetClothingRecommendation(weather_info=GetWeatherForecast(location='New York City', date='July 4th'))", "Index": 300}, {"APIs": [{"name": "GetWeatherForecast", "Description": "This API is to get the weather forecast of a specific location on a specific date.", "input_params": {"location": {"description": "the location for weather forecast", "type": "String"}, "date": {"description": "the specific date for weather forecast", "type": "String"}}, "output_params": {"weather_info": {"description": "the weather forecast information", "type": "String"}}, "format": "GetWeatherForecast(location, date) -> weather_info"}, {"name": "GetClothingRecommendation", "Description": "This API is to get clothing recommendation based on the weather forecast.", "input_params": {"weather_info": {"description": "the weather forecast information", "type": "String"}}, "output_params": {"clothing_recommendation": {"description": "the recommended clothing based on the weather forecast", "type": "String"}}, "format": "GetClothingRecommendation(weather_info) -> clothing_recommendation"}], "Query": "What attire should I put on in New York on 4th July?", "Label": "GetClothingRecommendation(weather_info=GetWeatherForecast(location='New York', date='4th July'))", "Index": 303}, {"APIs": [{"name": "GetWeatherForecast", "Description": "This API is to get the weather forecast of a specific location on a specific date.", "input_params": {"location": {"description": "the location for weather forecast", "type": "String"}, "date": {"description": "the specific date for weather forecast", "type": "String"}}, "output_params": {"weather_info": {"description": "the weather forecast information", "type": "String"}}, "format": "GetWeatherForecast(location, date) -> weather_info"}, {"name": "GetClothingRecommendation", "Description": "This API is to get clothing recommendation based on the weather forecast.", "input_params": {"weather_info": {"description": "the weather forecast information", "type": "String"}}, "output_params": {"clothing_recommendation": {"description": "the recommended clothing based on the weather forecast", "type": "String"}}, "format": "GetClothingRecommendation(weather_info) -> clothing_recommendation"}], "Query": "What's the recommended clothing in Sydney on 25th December?", "Label": "GetClothingRecommendation(weather_info=GetWeatherForecast(location='Sydney', date='25th December'))", "Index": 305}, {"APIs": [{"name": "BookTable", "Description": "This API allows the user to book a table at a specific restaurant for a given date and time.", "input_params": {"restaurant_name": {"description": "the name of the restaurant", "type": "String"}, "date": {"description": "the date of the booking", "type": "Date"}, "time": {"description": "the time of the booking", "type": "Time"}}, "output_params": {"booking status": {"description": "the status of the booking", "type": "String"}}, "format": "BookTable(restaurant_name, date, time) -> booking status"}, {"name": "GetRestaurant", "Description": "This API the name of the restaurant recommended based on city and cuisine.", "input_params": {"city": {"description": "the city to search for restaurants", "type": "String"}, "cuisine": {"description": "the cuisine to search for restaurants", "type": "String"}}, "output_params": {"restaurant_name": {"description": "the name of the recommended restaurant", "type": "String"}}, "format": "GetRestaurant(city,cuisine) -> restaurant_name"}], "Query": "Please help me make a reservation for a good Italian restaurant in San Francisco tomorrow evening?", "Label": "BookTable(restaurant_name=GetRestaurant(city='San Francisco', cuisine='Italian'), date='tomorrow', time='evening')", "Index": 339}, {"APIs": [{"name": "BookTable", "Description": "This API allows the user to book a table at a specific restaurant for a given date and time.", "input_params": {"restaurant_name": {"description": "the name of the restaurant", "type": "String"}, "date": {"description": "the date of the booking", "type": "Date"}, "time": {"description": "the time of the booking", "type": "Time"}}, "output_params": {"booking status": {"description": "the status of the booking", "type": "String"}}, "format": "BookTable(restaurant_name, date, time) -> booking status"}, {"name": "GetRestaurant", "Description": "This API the name of the restaurant recommended based on city and cuisine.", "input_params": {"city": {"description": "the city to search for restaurants", "type": "String"}, "cuisine": {"description": "the cuisine to search for restaurants", "type": "String"}}, "output_params": {"restaurant_name": {"description": "the name of the recommended restaurant", "type": "String"}}, "format": "GetRestaurant(city,cuisine) -> restaurant_name"}], "Query": "Can you make a reservation for an Indian restaurant in Delhi for me on next Thursday at 8 pm?", "Label": "BookTable(restaurant_name=GetRestaurant(city='Delhi', cuisine='Indian'), date='next Thursday', time='8 pm')", "Index": 344}, {"APIs": [{"name": "BookTable", "Description": "This API allows the user to book a table at a specific restaurant for a given date and time.", "input_params": {"restaurant_name": {"description": "the name of the restaurant", "type": "String"}, "date": {"description": "the date of the booking", "type": "Date"}, "time": {"description": "the time of the booking", "type": "Time"}}, "output_params": {"booking status": {"description": "the status of the booking", "type": "String"}}, "format": "BookTable(restaurant_name, date, time) -> booking status"}, {"name": "GetRestaurant", "Description": "This API the name of the restaurant recommended based on city and cuisine.", "input_params": {"city": {"description": "the city to search for restaurants", "type": "String"}, "cuisine": {"description": "the cuisine to search for restaurants", "type": "String"}}, "output_params": {"restaurant_name": {"description": "the name of the recommended restaurant", "type": "String"}}, "format": "GetRestaurant(city,cuisine) -> restaurant_name"}], "Query": "I need to book a table for a Chinese restaurant in New York City for lunch tomorrow.", "Label": "BookTable(restaurant_name=GetRestaurant(city='New York City', cuisine='Chinese'), date='tomorrow', time='lunch')", "Index": 345}, {"APIs": [{"name": "BookTable", "Description": "This API allows the user to book a table at a specific restaurant for a given date and time.", "input_params": {"restaurant_name": {"description": "the name of the restaurant", "type": "String"}, "date": {"description": "the date of the booking", "type": "Date"}, "time": {"description": "the time of the booking", "type": "Time"}}, "output_params": {"booking status": {"description": "the status of the booking", "type": "String"}}, "format": "BookTable(restaurant_name, date, time) -> booking status"}, {"name": "GetRestaurant", "Description": "This API the name of the restaurant recommended based on city and cuisine.", "input_params": {"city": {"description": "the city to search for restaurants", "type": "String"}, "cuisine": {"description": "the cuisine to search for restaurants", "type": "String"}}, "output_params": {"restaurant_name": {"description": "the name of the recommended restaurant", "type": "String"}}, "format": "GetRestaurant(city,cuisine) -> restaurant_name"}], "Query": "Can you assist in reserving a table at a French restaurant in Paris for dinner tonight?", "Label": "BookTable(restaurant_name=GetRestaurant(city='Paris', cuisine='French'), date='today', time='dinner')", "Index": 346}, {"APIs": [{"name": "BookTable", "Description": "This API allows the user to book a table at a specific restaurant for a given date and time.", "input_params": {"restaurant_name": {"description": "the name of the restaurant", "type": "String"}, "date": {"description": "the date of the booking", "type": "Date"}, "time": {"description": "the time of the booking", "type": "Time"}}, "output_params": {"booking status": {"description": "the status of the booking", "type": "String"}}, "format": "BookTable(restaurant_name, date, time) -> booking status"}, {"name": "GetRestaurant", "Description": "This API the name of the restaurant recommended based on city and cuisine.", "input_params": {"city": {"description": "the city to search for restaurants", "type": "String"}, "cuisine": {"description": "the cuisine to search for restaurants", "type": "String"}}, "output_params": {"restaurant_name": {"description": "the name of the recommended restaurant", "type": "String"}}, "format": "GetRestaurant(city,cuisine) -> restaurant_name"}], "Query": "I'm looking to book a table for lunch at an Indian restaurant in London tomorrow.", "Label": "BookTable(restaurant_name=GetRestaurant(city='London', cuisine='Indian'), date='tomorrow', time='lunch')", "Index": 347}, {"APIs": [{"name": "BookTable", "Description": "This API allows the user to book a table at a specific restaurant for a given date and time.", "input_params": {"restaurant_name": {"description": "the name of the restaurant", "type": "String"}, "date": {"description": "the date of the booking", "type": "Date"}, "time": {"description": "the time of the booking", "type": "Time"}}, "output_params": {"booking status": {"description": "the status of the booking", "type": "String"}}, "format": "BookTable(restaurant_name, date, time) -> booking status"}, {"name": "GetRestaurant", "Description": "This API the name of the restaurant recommended based on city and cuisine.", "input_params": {"city": {"description": "the city to search for restaurants", "type": "String"}, "cuisine": {"description": "the cuisine to search for restaurants", "type": "String"}}, "output_params": {"restaurant_name": {"description": "the name of the recommended restaurant", "type": "String"}}, "format": "GetRestaurant(city,cuisine) -> restaurant_name"}], "Query": "Help me reserve a table for dinner at a Japanese restaurant in Tokyo tonight.", "Label": "BookTable(restaurant_name=GetRestaurant(city='Tokyo', cuisine='Japanese'), date='today', time='dinner')", "Index": 348}, {"APIs": [{"name": "BookTable", "Description": "This API allows the user to book a table at a specific restaurant for a given date and time.", "input_params": {"restaurant_name": {"description": "the name of the restaurant", "type": "String"}, "date": {"description": "the date of the booking", "type": "Date"}, "time": {"description": "the time of the booking", "type": "Time"}}, "output_params": {"booking status": {"description": "the status of the booking", "type": "String"}}, "format": "BookTable(restaurant_name, date, time) -> booking status"}, {"name": "GetRestaurant", "Description": "This API the name of the restaurant recommended based on city and cuisine.", "input_params": {"city": {"description": "the city to search for restaurants", "type": "String"}, "cuisine": {"description": "the cuisine to search for restaurants", "type": "String"}}, "output_params": {"restaurant_name": {"description": "the name of the recommended restaurant", "type": "String"}}, "format": "GetRestaurant(city,cuisine) -> restaurant_name"}], "Query": "Can I make a reservation for a Mexican restaurant in Los Angeles for breakfast tomorrow?", "Label": "BookTable(restaurant_name=GetRestaurant(city='Los Angeles', cuisine='Mexican'), date='tomorrow', time='breakfast')", "Index": 349}, {"APIs": [{"name": "SearchRecipe", "Description": "This API is to search for recipe based on user preferences.", "input_params": {"cuisine": {"description": "the cuisine preference", "type": "String"}, "diet": {"description": "the diet preference", "type": "String"}, "ingredients": {"description": "the list of ingredients", "type": "List"}}, "output_params": {"recipe": {"description": "the searched recipe", "type": "String"}}, "format": "SearchRecipe(cuisine, diet, ingredients) -> recipe"}, {"name": "GetRecipeInstructions", "Description": "This API is to get the instructions to prepare a specific recipe.", "input_params": {"recipe_name": {"description": "the name of the recipe", "type": "String"}}, "output_params": {"instructions": {"description": "the instructions for the recipe", "type": "String"}}, "format": "GetRecipeInstructions(recipe_name) -> instructions"}], "Query": "I need to know how to prepare a vegan Japanese meal with tofu and vegetables.", "Label": "GetRecipeInstructions(recipe_name=SearchRecipe(cuisine='Japanese', diet='vegan', ingredients=['tofu', 'vegetables']))", "Index": 351}, {"APIs": [{"name": "SearchRecipe", "Description": "This API is to search for recipe based on user preferences.", "input_params": {"cuisine": {"description": "the cuisine preference", "type": "String"}, "diet": {"description": "the diet preference", "type": "String"}, "ingredients": {"description": "the list of ingredients", "type": "List"}}, "output_params": {"recipe": {"description": "the searched recipe", "type": "String"}}, "format": "SearchRecipe(cuisine, diet, ingredients) -> recipe"}, {"name": "GetRecipeInstructions", "Description": "This API is to get the instructions to prepare a specific recipe.", "input_params": {"recipe_name": {"description": "the name of the recipe", "type": "String"}}, "output_params": {"instructions": {"description": "the instructions for the recipe", "type": "String"}}, "format": "GetRecipeInstructions(recipe_name) -> instructions"}], "Query": "Show me the method to cook a healthy Chinese dish with chicken and broccoli.", "Label": "GetRecipeInstructions(recipe_name=SearchRecipe(cuisine='Chinese', diet='healthy', ingredients=['chicken', 'broccoli']))", "Index": 352}, {"APIs": [{"name": "SearchRecipe", "Description": "This API is to search for recipe based on user preferences.", "input_params": {"cuisine": {"description": "the cuisine preference", "type": "String"}, "diet": {"description": "the diet preference", "type": "String"}, "ingredients": {"description": "the list of ingredients", "type": "List"}}, "output_params": {"recipe": {"description": "the searched recipe", "type": "String"}}, "format": "SearchRecipe(cuisine, diet, ingredients) -> recipe"}, {"name": "GetRecipeInstructions", "Description": "This API is to get the instructions to prepare a specific recipe.", "input_params": {"recipe_name": {"description": "the name of the recipe", "type": "String"}}, "output_params": {"instructions": {"description": "the instructions for the recipe", "type": "String"}}, "format": "GetRecipeInstructions(recipe_name) -> instructions"}], "Query": "What are the instructions for preparing a gluten-free French dish with duck and potatoes?", "Label": "GetRecipeInstructions(recipe_name=SearchRecipe(cuisine='French', diet='gluten-free', ingredients=['duck', 'potatoes']))", "Index": 355}, {"APIs": [{"name": "SearchRecipe", "Description": "This API is to search for recipe based on user preferences.", "input_params": {"cuisine": {"description": "the cuisine preference", "type": "String"}, "diet": {"description": "the diet preference", "type": "String"}, "ingredients": {"description": "the list of ingredients", "type": "List"}}, "output_params": {"recipe": {"description": "the searched recipe", "type": "String"}}, "format": "SearchRecipe(cuisine, diet, ingredients) -> recipe"}, {"name": "GetRecipeInstructions", "Description": "This API is to get the instructions to prepare a specific recipe.", "input_params": {"recipe_name": {"description": "the name of the recipe", "type": "String"}}, "output_params": {"instructions": {"description": "the instructions for the recipe", "type": "String"}}, "format": "GetRecipeInstructions(recipe_name) -> instructions"}], "Query": "How do I prepare a vegan Chinese meal with tofu and broccoli?", "Label": "GetRecipeInstructions(recipe_name=SearchRecipe(cuisine='Chinese', diet='vegan', ingredients=['tofu', 'broccoli']))", "Index": 356}, {"APIs": [{"name": "GetWeatherForecast", "Description": "This API returns the weather forecast of a specified city on a specific date.", "input_params": {"city": {"description": "the name of the city", "type": "String"}, "date": {"description": "the specific date", "type": "String"}}, "output_params": {"weather report": {"description": "the weather forecast", "type": "String"}}, "format": "GetWeatherForecast(city, date) -> weather report"}, {"name": "RecommendOutfit", "Description": "This API recommends an outfit based on the weather conditions.", "input_params": {"weather": {"description": "the weather condition", "type": "String"}}, "output_params": {"outfit details": {"description": "the recommended outfit", "type": "String"}}, "format": "RecommendOutfit(weather) -> outfit details"}], "Query": "Any suggestions on what to put on for January 22nd in San Antonio?", "Label": "RecommendOutfit(weather=GetWeatherForecast(city='San Antonio', date='January 22nd'))", "Index": 387}, {"APIs": [{"name": "GetWeatherForecast", "Description": "This API returns the weather forecast of a specified city on a specific date.", "input_params": {"city": {"description": "the name of the city", "type": "String"}, "date": {"description": "the specific date", "type": "String"}}, "output_params": {"weather report": {"description": "the weather forecast", "type": "String"}}, "format": "GetWeatherForecast(city, date) -> weather report"}, {"name": "RecommendOutfit", "Description": "This API recommends an outfit based on the weather conditions.", "input_params": {"weather": {"description": "the weather condition", "type": "String"}}, "output_params": {"outfit details": {"description": "the recommended outfit", "type": "String"}}, "format": "RecommendOutfit(weather) -> outfit details"}], "Query": "What is the appropriate attire for Tucson on October 22nd?", "Label": "RecommendOutfit(weather=GetWeatherForecast(city='Tucson', date='October 22nd'))", "Index": 389}, {"APIs": [{"name": "BookTitle2ISBN", "Description": "This API is to convert book title to book ISBN.", "input_params": {"book_title": {"description": "the title of the book", "type": "String"}}, "output_params": {"ISBN": {"description": "the ISBN of the book", "type": "String"}}, "format": "BookTitle2ISBN(book_title) -> ISBN"}, {"name": "BuyBook", "Description": "This API is to acquire a book for a user.", "input_params": {"user_ID": {"description": "the ID of the user", "type": "String"}, "ISBN": {"description": "the ISBN of the book", "type": "String"}}, "output_params": {"acquisition_status": {"description": "the status of the book acquisition", "type": "String"}}, "format": "BuyBook(user_ID, ISBN) -> acquisition_status"}], "Query": "Can you acquire the book 'Pride and Prejudice' for user789?", "Label": "BuyBook(user_ID='user789', ISBN=BookTitle2ISBN(book_title='Pride and Prejudice'))", "Index": 572}, {"APIs": [{"name": "BookTitle2ISBN", "Description": "This API is to convert book title to book ISBN.", "input_params": {"book_title": {"description": "the title of the book", "type": "String"}}, "output_params": {"ISBN": {"description": "the ISBN of the book", "type": "String"}}, "format": "BookTitle2ISBN(book_title) -> ISBN"}, {"name": "BuyBook", "Description": "This API is to buy a book for a user.", "input_params": {"user_ID": {"description": "the ID of the user", "type": "String"}, "ISBN": {"description": "the ISBN of the book", "type": "String"}}, "output_params": {"purchase_status": {"description": "the status of the purchase", "type": "String"}}, "format": "BuyBook(user_ID, ISBN) -> purchase_status"}], "Query": "Can you obtain the book '1984' for user112?", "Label": "BuyBook(user_ID='user112', ISBN=BookTitle2ISBN(book_title='1984'))", "Index": 573}, {"APIs": [{"name": "BookFlight", "Description": "This API is to book a flight.", "input_params": {"user_ID": {"description": "the ID of the user", "type": "String"}, "flight_code": {"description": "the code of the flight destination", "type": "String"}, "date": {"description": "the date of the flight", "type": "Date"}}, "output_params": {"booking status": {"description": "the status of the booking", "type": "String"}}, "format": "BookFlight(user_ID, flight_code, date) -> booking status"}, {"name": "FlightDestination2Code", "Description": "This API is to convert flight destination name to flight code.", "input_params": {"destination": {"description": "the name of the flight destination", "type": "String"}}, "output_params": {"flight_code": {"description": "the code of the flight destination", "type": "String"}}, "format": "FlightDestination2Code(destination) -> flight_code"}], "Query": "Can you book a flight to London for user789 on July 7th, 2022?", "Label": "BookFlight(user_ID='user789', flight_code=FlightDestination2Code(destination='London'), date='July 7th, 2022')", "Index": 577}, {"APIs": [{"name": "BookFlight", "Description": "This API is to book a flight.", "input_params": {"user_ID": {"description": "the ID of the user", "type": "String"}, "flight_code": {"description": "the code of the flight destination", "type": "String"}, "date": {"description": "the date of the flight", "type": "Date"}}, "output_params": {"booking status": {"description": "the status of the booking", "type": "String"}}, "format": "BookFlight(user_ID,flight_code,date) -> booking status"}, {"name": "FlightDestination2Code", "Description": "This API is to convert flight destination to flight code.", "input_params": {"destination": {"description": "the name of the flight destination", "type": "String"}}, "output_params": {"flight_code": {"description": "the code of the flight destination", "type": "String"}}, "format": "FlightDestination2Code(destination) -> flight_code"}], "Query": "Can you book a flight to Tokyo for user321 on September 9th, 2022?", "Label": "BookFlight(user_ID='user321',flight_code=FlightDestination2Code(destination='Tokyo'), date='September 9th, 2022')", "Index": 578}, {"APIs": [{"name": "Productname2ProductID", "Description": "This API is to convert product name to product ID.", "input_params": {"product_name": {"description": "the name of the product", "type": "String"}}, "output_params": {"product_id": {"description": "the ID of the product", "type": "Integer"}}, "format": "Productname2ProductID(product_name) -> product_id"}, {"name": "AddToCart", "Description": "This API is to add a product to the user's cart.", "input_params": {"product_id": {"description": "the ID of the product", "type": "Integer"}, "user_id": {"description": "the ID of the user", "type": "String"}}, "output_params": {"cart_status": {"description": "the status of the cart", "type": "String"}}, "format": "AddToCart(product_id, user_id) -> cart_status"}], "Query": "I would like to add the product 'MacBook Pro' to my cart. My user id is '98765'.", "Label": "AddToCart(product_id=Productname2ProductID(product_name='MacBook Pro'), user_id='98765')", "Index": 621}, {"APIs": [{"name": "Productname2ProductID", "Description": "This API is to convert product name to product ID.", "input_params": {"product_name": {"description": "the name of the product", "type": "String"}}, "output_params": {"product_id": {"description": "the ID of the product", "type": "Integer"}}, "format": "Productname2ProductID(product_name) -> product_id"}, {"name": "AddToCart", "Description": "This API is to add a product to the user's cart.", "input_params": {"product_id": {"description": "the ID of the product", "type": "Integer"}, "user_id": {"description": "the ID of the user", "type": "String"}}, "output_params": {"cart_status": {"description": "the status of the cart", "type": "String"}}, "format": "AddToCart(product_id, user_id) -> cart_status"}], "Query": "Can I add the product 'iPad Pro' to my cart? My user id is '45678'.", "Label": "AddToCart(product_id=Productname2ProductID(product_name='iPad Pro'), user_id='45678')", "Index": 622}, {"APIs": [{"name": "CustomernameToID", "Description": "This API is to convert customer name to customer ID.", "input_params": {"customer_name": {"description": "the name of the customer", "type": "String"}}, "output_params": {"customer_ID": {"description": "the ID of the customer", "type": "Integer"}}, "format": "CustomernameToID(customer_name) -> customer_ID"}, {"name": "AddToCart", "Description": "This API is to add products to a customer's shopping cart.", "input_params": {"customer_ID": {"description": "the ID of the customer", "type": "Integer"}, "product_ID": {"description": "the ID of the product", "type": "String"}, "quantity": {"description": "the quantity of the product to add", "type": "Integer"}}, "output_params": {"status": {"description": "the status of the operation", "type": "String"}}, "format": "AddToCart(customer_ID, product_ID, quantity) -> status"}], "Query": "Can you add 2 of product 654 to Emily Thompson's shopping cart?", "Label": "AddToCart(customer_ID=CustomernameToID(customer_name='Emily Thompson'), product_ID='654', quantity='2')", "Index": 692}, {"APIs": [{"name": "FindIndoorActivities", "Description": "This API is to find indoor activities in a specific city.", "input_params": {"city": {"description": "the name of the city", "type": "String"}}, "output_params": {"activity_name": {"description": "the name of the activity", "type": "String"}}, "format": "FindIndoorActivities(city) -> activity_name"}, {"name": "BookActivity", "Description": "This API is to book an indoor activity.", "input_params": {"activity_name": {"description": "the name of the activity", "type": "String"}, "city": {"description": "the name of the city", "type": "String"}}, "output_params": {"booking_status": {"description": "the status of the booking", "type": "String"}}, "format": "BookActivity(activity_name, city) -> booking_status"}], "Query": "It looks like it's going to be really hot in Dubai today. I can't stand the heat. Can you suggest and book an indoor activity for me?", "Label": "BookActivity(activity_name=FindIndoorActivities(city='Dubai'), city='Dubai')", "Index": 785}, {"APIs": [{"name": "FindNearbyHotels", "Description": "This API is to find nearby hotels in a specific city.", "input_params": {"city": {"description": "the name of the city", "type": "String"}}, "output_params": {"hotel_name": {"description": "the name of the hotel", "type": "String"}}, "format": "FindNearbyHotels(city) -> hotel_name"}, {"name": "BookHotel", "Description": "This API is to book a hotel.", "input_params": {"hotel_name": {"description": "the name of the hotel", "type": "String"}, "city": {"description": "the name of the city", "type": "String"}}, "output_params": {"booking status": {"description": "the status of the booking", "type": "String"}}, "format": "BookHotel(hotel_name, city) -> booking status"}], "Query": "My bus to Chicago is running late. Could you search and book a close hotel for me?", "Label": "BookHotel(hotel_name=FindNearbyHotels(city='Chicago'), city='Chicago')", "Index": 787}, {"APIs": [{"name": "FindNearbyHotels", "Description": "This API is to find nearby hotels in a specific city.", "input_params": {"city": {"description": "the name of the city", "type": "String"}}, "output_params": {"hotel_name": {"description": "the name of the hotel", "type": "String"}}, "format": "FindNearbyHotels(city) -> hotel_name"}, {"name": "BookHotel", "Description": "This API is to book a hotel.", "input_params": {"hotel_name": {"description": "the name of the hotel", "type": "String"}, "city": {"description": "the name of the city", "type": "String"}}, "output_params": {"booking status": {"description": "the status of the booking", "type": "String"}}, "format": "BookHotel(hotel_name, city) -> booking status"}], "Query": "My cruise to Miami has been rescheduled. Can you find and reserve a hotel nearby for me?", "Label": "BookHotel(hotel_name=FindNearbyHotels(city='Miami'), city='Miami')", "Index": 790}, {"APIs": [{"name": "FoodIngredients", "Description": "This API is to get the ingredients of a dish from a specific restaurant.", "input_params": {"dish_name": {"description": "the name of the dish", "type": "String"}, "restaurant_name": {"description": "the name of the restaurant", "type": "String"}}, "output_params": {"ingredients": {"description": "the list of ingredients in the dish", "type": "List"}}, "format": "FoodIngredients(dish_name, restaurant_name) -> ingredients"}, {"name": "FoodFinder", "Description": "This API is to find a restaurant based on cuisine and location.", "input_params": {"cuisine": {"description": "the type of cuisine", "type": "String"}, "location": {"description": "the location of the restaurant", "type": "String"}}, "output_params": {"restaurant_name": {"description": "the name of the restaurant", "type": "String"}}, "format": "FoodFinder(cuisine, location) -> restaurant_name"}], "Query": "I want to know the ingredients of the 'Tandoori Chicken' from an Indian restaurant in Los Angeles.", "Label": "FoodIngredients(dish_name='Tandoori Chicken', restaurant_name=FoodFinder(cuisine='Indian', location='Los Angeles'))", "Index": 816}, {"APIs": [{"name": "FoodIngredients", "Description": "This API is to get the ingredients of a dish from a specific restaurant.", "input_params": {"dish_name": {"description": "the name of the dish", "type": "String"}, "restaurant_name": {"description": "the name of the restaurant", "type": "String"}}, "output_params": {"ingredients": {"description": "the ingredients of the dish", "type": "List"}}, "format": "FoodIngredients(dish_name, restaurant_name) -> ingredients"}, {"name": "FoodFinder", "Description": "This API is to find a restaurant based on cuisine and location.", "input_params": {"cuisine": {"description": "the type of cuisine", "type": "String"}, "location": {"description": "the location of the restaurant", "type": "String"}}, "output_params": {"restaurant_name": {"description": "the name of the restaurant", "type": "String"}}, "format": "FoodFinder(cuisine, location) -> restaurant_name"}], "Query": "Can you tell me what's in the 'Beef Ramen' from a Japanese restaurant in San Francisco?", "Label": "FoodIngredients(dish_name='Beef Ramen', restaurant_name=FoodFinder(cuisine='Japanese', location='San Francisco'))", "Index": 817}, {"APIs": [{"name": "FoodIngredients", "Description": "This API is to get the components of a dish from a specific restaurant.", "input_params": {"dish_name": {"description": "the name of the dish", "type": "String"}, "restaurant_name": {"description": "the name of the restaurant", "type": "String"}}, "output_params": {"ingredients": {"description": "the components of the dish", "type": "List"}}, "format": "FoodIngredients(dish_name, restaurant_name) -> ingredients"}, {"name": "FoodFinder", "Description": "This API is to find a restaurant based on cuisine and location.", "input_params": {"cuisine": {"description": "the type of cuisine", "type": "String"}, "location": {"description": "the location of the restaurant", "type": "String"}}, "output_params": {"restaurant_name": {"description": "the name of the restaurant", "type": "String"}}, "format": "FoodFinder(cuisine, location) -> restaurant_name"}], "Query": "I'm interested in the components of the 'Fish Tacos' from a Mexican restaurant in San Diego.", "Label": "FoodIngredients(dish_name='Fish Tacos', restaurant_name=FoodFinder(cuisine='Mexican', location='San Diego'))", "Index": 818}, {"APIs": [{"name": "FindRestaurant", "Description": "This API is to find a restaurant based on location and cuisine.", "input_params": {"location": {"description": "the location where the restaurant is located", "type": "String"}, "cuisine": {"description": "the type of cuisine the restaurant serves", "type": "String"}}, "output_params": {"restaurantname": {"description": "the name of the restaurant", "type": "String"}}, "format": "FindRestaurant(location, cuisine) -> restaurantname"}, {"name": "BookReservation", "Description": "This API is to make a reservation at a restaurant.", "input_params": {"restaurantname": {"description": "the name of the restaurant", "type": "String"}, "partySize": {"description": "the number of people in the party", "type": "Integer"}, "time": {"description": "the time of the reservation", "type": "Time"}}, "output_params": {"reservationStatus": {"description": "the status of the reservation", "type": "String"}}, "format": "BookReservation(restaurantname, partySize, time) -> reservationStatus"}], "Query": "I am currently in Boston and I have a huge craving for Mexican food. Based on the current weather, can I make a reservation for 6 people at a Mexican restaurant tonight at 7 pm?", "Label": "BookReservation(restaurantname=FindRestaurant(location='Boston', cuisine='Mexican'), partySize=6, time='7 pm')", "Index": 845}, {"APIs": [{"name": "FindRestaurant", "Description": "This API is to find a restaurant based on location and cuisine.", "input_params": {"location": {"description": "the location where the restaurant is located", "type": "String"}, "cuisine": {"description": "the type of cuisine the restaurant serves", "type": "String"}}, "output_params": {"restaurantname": {"description": "the name of the restaurant", "type": "String"}}, "format": "FindRestaurant(location, cuisine) -> restaurantname"}, {"name": "BookReservation", "Description": "This API is to book a reservation at a restaurant.", "input_params": {"restaurantname": {"description": "the name of the restaurant", "type": "String"}, "partySize": {"description": "the number of people in the party", "type": "Integer"}, "time": {"description": "the time of the reservation", "type": "Time"}}, "output_params": {"reservationStatus": {"description": "the status of the reservation", "type": "String"}}, "format": "BookReservation(restaurantname, partySize, time) -> reservationStatus"}], "Query": "I am in Miami and I am craving Chinese food. Based on the forecast, can I book a reservation for 3 people at a Chinese restaurant tonight at 6 pm?", "Label": "BookReservation(restaurantname=FindRestaurant(location='Miami', cuisine='Chinese'), partySize=3, time='6 pm')", "Index": 847}, {"APIs": [{"name": "FindRestaurant", "Description": "This API is to find a restaurant based on city and cuisine.", "input_params": {"city": {"description": "the city where the restaurant is located", "type": "String"}, "cuisine": {"description": "the type of cuisine desired", "type": "String"}}, "output_params": {"restaurant": {"description": "the name of the restaurant", "type": "String"}}, "format": "FindRestaurant(city, cuisine) -> restaurant"}, {"name": "BookTable", "Description": "This API is to book a table at a restaurant.", "input_params": {"restaurant": {"description": "the name of the restaurant", "type": "String"}, "date": {"description": "the date of the reservation", "type": "String"}, "time": {"description": "the time of the reservation", "type": "String"}}, "output_params": {"booking status": {"description": "the status of the booking", "type": "String"}}, "format": "BookTable(restaurant, date, time) -> booking status"}], "Query": "I crave for Japanese cuisine in San Francisco on Monday at 8pm. Can I reserve a table?", "Label": "BookTable(restaurant=FindRestaurant(city='San Francisco', cuisine='Japanese'), date='Monday', time='8pm')", "Index": 1028}, {"APIs": [{"name": "FindRestaurant", "Description": "This API is to find a restaurant based on the city and cuisine.", "input_params": {"city": {"description": "the city where the restaurant is located", "type": "String"}, "cuisine": {"description": "the type of cuisine", "type": "String"}}, "output_params": {"restaurant": {"description": "the name of the restaurant", "type": "String"}}, "format": "FindRestaurant(city, cuisine) -> restaurant"}, {"name": "BookTable", "Description": "This API is to book a table at a restaurant.", "input_params": {"restaurant": {"description": "the name of the restaurant", "type": "String"}, "date": {"description": "the date of the reservation", "type": "Date"}, "time": {"description": "the time of the reservation", "type": "Time"}}, "output_params": {"reservation_status": {"description": "the status of the reservation", "type": "String"}}, "format": "BookTable(restaurant, date, time) -> reservation_status"}], "Query": "I'm thinking about eating Mexican food in Houston on Thursday at 7:30pm. Is it possible to get a reservation?", "Label": "BookTable(restaurant=FindRestaurant(city='Houston', cuisine='Mexican'), date='Thursday', time='7:30pm')", "Index": 1029}, {"APIs": [{"name": "PharmacyLocator", "Description": "This API is to locate a pharmacy based on the city.", "input_params": {"city": {"description": "the city where the pharmacy is located", "type": "String"}}, "output_params": {"pharmacy": {"description": "the details of the pharmacy", "type": "Object"}}, "format": "PharmacyLocator(city) -> pharmacy"}, {"name": "OrderMedicine", "Description": "This API is to place an order for a specific medicine at a pharmacy.", "input_params": {"pharmacy": {"description": "the details of the pharmacy", "type": "Object"}, "medicine_name": {"description": "the name of the medicine", "type": "String"}, "quantity": {"description": "the quantity of the medicine to order", "type": "Integer"}}, "output_params": {"order_status": {"description": "the status of the order", "type": "String"}}, "format": "OrderMedicine(pharmacy, medicine_name, quantity) -> order_status"}], "Query": "I'm staying in Chicago and I need to buy 4 boxes of Cough Syrup. Can you search for a pharmacy where it's available and place the order for me?", "Label": "OrderMedicine(pharmacy=PharmacyLocator(city='Chicago'), medicine_name='Cough Syrup', quantity=4)", "Index": 1032}, {"APIs": [{"name": "PharmacyLocator", "Description": "This API is to locate a pharmacy based on the city.", "input_params": {"city": {"description": "the name of the city", "type": "String"}}, "output_params": {"pharmacy": {"description": "the location of the pharmacy", "type": "String"}}, "format": "PharmacyLocator(city) -> pharmacy"}, {"name": "OrderMedicine", "Description": "This API is to order a specific medicine from a pharmacy.", "input_params": {"pharmacy": {"description": "the location of the pharmacy", "type": "String"}, "medicine_name": {"description": "the name of the medicine", "type": "String"}, "quantity": {"description": "the quantity of the medicine", "type": "Integer"}}, "output_params": {"order_status": {"description": "the status of the order", "type": "String"}}, "format": "OrderMedicine(pharmacy, medicine_name, quantity) -> order_status"}], "Query": "I am in Seattle and I need to purchase 3 packs of Vitamin C. Can you identify a pharmacy where it's available and order it for me?", "Label": "OrderMedicine(pharmacy=PharmacyLocator(city='Seattle'), medicine_name='Vitamin C', quantity=3)", "Index": 1033}, {"APIs": [{"name": "FlightInfo", "Description": "This API is to get the flight information.", "input_params": {"city_from": {"description": "the departure city", "type": "String"}, "city_to": {"description": "the destination city", "type": "String"}, "date_from": {"description": "the start date of the flight", "type": "Date"}, "date_to": {"description": "the end date of the flight", "type": "Date"}}, "output_params": {"flight_info": {"description": "the information of the flight", "type": "String"}}, "format": "FlightInfo(city_from, city_to, date_from, date_to) -> flight_info"}, {"name": "WeatherEffectPrice", "Description": "This API is to calculate the effect of weather conditions on flight price.", "input_params": {"city": {"description": "the city of the flight", "type": "String"}, "date": {"description": "the date of the flight", "type": "String"}, "original_price": {"description": "the original price of the flight", "type": "Float"}}, "output_params": {"final_price": {"description": "the final price of the flight considering weather conditions", "type": "Float"}}, "format": "WeatherEffectPrice(city, date, original_price) -> final_price"}], "Query": "I am interested in knowing the cost of my upcoming flight to Paris from London in the first week of December considering the weather conditions.", "Label": "WeatherEffectPrice(city='Paris', date='first week of December', original_price=FlightInfo(city_from='London', city_to='Paris', date_from='first week of December', date_to='first week of December'))", "Index": 1047}, {"APIs": [{"name": "WeatherEffectPrice", "Description": "This API is to calculate the potential cost of a flight considering the weather conditions.", "input_params": {"city": {"description": "the destination city of the flight", "type": "String"}, "date": {"description": "the month of the flight", "type": "String"}, "original_price": {"description": "the original price of the flight", "type": "Float"}}, "output_params": {"final_price": {"description": "the potential cost of the flight considering the weather conditions", "type": "Float"}}, "format": "WeatherEffectPrice(city, date, original_price) -> final_price"}, {"name": "FlightInfo", "Description": "This API is to retrieve flight information.", "input_params": {"city_from": {"description": "the departure city of the flight", "type": "String"}, "city_to": {"description": "the destination city of the flight", "type": "String"}, "date_from": {"description": "the start date of the flight", "type": "String"}, "date_to": {"description": "the end date of the flight", "type": "String"}}, "output_params": {"flight_info": {"description": "the information of the flight", "type": "String"}}, "format": "FlightInfo(city_from, city_to, date_from, date_to) -> flight_info"}], "Query": "I'd like to know the potential cost of my flight to Sydney from San Francisco in June considering the weather conditions.", "Label": "WeatherEffectPrice(city='Sydney', date='June', original_price=FlightInfo(city_from='San Francisco', city_to='Sydney', date_from='June', date_to='June'))", "Index": 1049}, {"APIs": [{"name": "LocatePharmacy", "Description": "This API is to locate a pharmacy that carries a specific drug in a specified city.", "input_params": {"city": {"description": "the city where the user is located", "type": "String"}, "drug": {"description": "the name of the drug the user is looking for", "type": "String"}}, "output_params": {"pharmacy_name": {"description": "the name of the pharmacy that carries the drug", "type": "String"}}, "format": "LocatePharmacy(city, drug) -> pharmacy_name"}, {"name": "ReserveMedicine", "Description": "This API is to reserve a specific drug at a specified pharmacy under a patient's name.", "input_params": {"pharmacy_name": {"description": "the name of the pharmacy", "type": "String"}, "drug": {"description": "the name of the drug to be reserved", "type": "String"}, "patient_name": {"description": "the name of the patient who will pick up the drug", "type": "String"}}, "output_params": {"reservation_status": {"description": "the status of the reservation", "type": "String"}}, "format": "ReserveMedicine(pharmacy_name, drug, patient_name) -> reservation_status"}], "Query": "I am in Miami and I am searching for a pharmacy that carries ibuprofen. If they have it, please reserve it under my name, Mike Johnson.", "Label": "ReserveMedicine(pharmacy_name=LocatePharmacy(city='Miami', drug='ibuprofen'), drug='ibuprofen', patient_name='Mike Johnson')", "Index": 1197}, {"APIs": [{"name": "LocatePharmacy", "Description": "This API is to find a pharmacy in a certain city that stocks a specific drug.", "input_params": {"city": {"description": "the name of the city where the user is located", "type": "String"}, "drug": {"description": "the name of the drug that the user needs", "type": "String"}}, "output_params": {"pharmacy_name": {"description": "the name of the pharmacy that stocks the specified drug", "type": "String"}}, "format": "LocatePharmacy(city, drug) -> pharmacy_name"}, {"name": "ReserveMedicine", "Description": "This API is to reserve a specific drug at a pharmacy under a patient's name.", "input_params": {"pharmacy_name": {"description": "the name of the pharmacy where the drug will be reserved", "type": "String"}, "drug": {"description": "the name of the drug to be reserved", "type": "String"}, "patient_name": {"description": "the name of the person under whom the drug will be reserved", "type": "String"}}, "output_params": {"reservation_status": {"description": "the status of the drug reservation", "type": "String"}}, "format": "ReserveMedicine(pharmacy_name, drug, patient_name) -> reservation_status"}], "Query": "I'm staying in Atlanta and I need to find a pharmacy stocking metformin. If available, could you reserve it under my name, Robert Brown?", "Label": "ReserveMedicine(pharmacy_name=LocatePharmacy(city='Atlanta', drug='metformin'), drug='metformin', patient_name='Robert Brown')", "Index": 1198}, {"APIs": [{"name": "GetWeather", "Description": "This API is to get the weather of a specific city.", "input_params": {"city": {"description": "the name of the city", "type": "String"}}, "output_params": {"weather": {"description": "the weather of the city", "type": "String"}}, "format": "GetWeather(city) -> weather"}, {"name": "GetClothingAdvice", "Description": "This API is to get clothing advice for a specific activity in a specific weather.", "input_params": {"weather": {"description": "the weather condition", "type": "String"}, "activity": {"description": "the type of activity", "type": "String"}}, "output_params": {"clothing advice": {"description": "the advice of clothing", "type": "String"}}, "format": "GetClothingAdvice(weather, activity) -> clothing advice"}], "Query": "What should I dress for a cycle in Berlin if I start from Paris now?", "Label": "GetClothingAdvice(weather=GetWeather(city='Berlin'), activity='cycle')", "Index": 1212}, {"APIs": [{"name": "GetWeather", "Description": "This API is to get the weather of a specific city.", "input_params": {"city": {"description": "the name of the city", "type": "String"}}, "output_params": {"weather": {"description": "the current weather of the city", "type": "String"}}, "format": "GetWeather(city) -> weather"}, {"name": "GetClothingAdvice", "Description": "This API provides clothing advice based on weather and activity.", "input_params": {"weather": {"description": "the weather conditions", "type": "String"}, "activity": {"description": "the activity to be performed", "type": "String"}}, "output_params": {"clothing advice": {"description": "advice on what to wear based on weather conditions and activity", "type": "String"}}, "format": "GetClothingAdvice(weather, activity) -> clothing advice"}], "Query": "What should I dress for a stroll in San Francisco if I start from Los Angeles now?", "Label": "GetClothingAdvice(weather=GetWeather(city='San Francisco'), activity='stroll')", "Index": 1215}, {"APIs": [{"name": "FindFlights", "Description": "This API is to find flights based on departure city, destination city, and date.", "input_params": {"city1": {"description": "the departure city", "type": "String"}, "city2": {"description": "the destination city", "type": "String"}, "date": {"description": "the date of the flight", "type": "Date"}}, "output_params": {"flight": {"description": "the flight details", "type": "String"}}, "format": "FindFlights(city1, city2, date) -> flight"}, {"name": "BookFlight", "Description": "This API is to book a flight.", "input_params": {"flight": {"description": "the flight to be booked", "type": "String"}}, "output_params": {"booking status": {"description": "the status of the flight booking", "type": "String"}}, "format": "BookFlight(flight) -> booking status."}], "Query": "I need to go from Dallas to Seattle next Wednesday, can you help me reserve a flight?", "Label": "BookFlight(flight=FindFlights(city1='Dallas', city2='Seattle', date='next Wednesday'))", "Index": 1340}, {"APIs": [{"name": "FindFlights", "Description": "This API is to find available flights between two cities on a specific date", "input_params": {"city1": {"description": "The departure city", "type": "String"}, "city2": {"description": "The arrival city", "type": "String"}, "date": {"description": "The date of travel", "type": "Date"}}, "output_params": {"flight": {"description": "Available flights", "type": "String"}}, "format": "FindFlights(city1, city2, date) -> flight"}, {"name": "BookFlight", "Description": "This API is to book a specific flight", "input_params": {"flight": {"description": "The flight to book", "type": "String"}}, "output_params": {"booking status": {"description": "The status of the flight booking", "type": "String"}}, "format": "BookFlight(flight) -> booking status"}], "Query": "I am planning to travel from Paris to Rome this Sunday, can you help me with the flight booking?", "Label": "BookFlight(flight=FindFlights(city1='Paris', city2='Rome', date='this Sunday'))", "Index": 1341}, {"APIs": [{"name": "AuthorDetails", "Description": "This API is to fetch author details using the author's name.", "input_params": {"author_name": {"description": "the name of the author", "type": "String"}}, "output_params": {"authorDetails": {"description": "Details of the author", "type": "String"}}, "format": "AuthorDetails(author_name) -> authorDetails"}, {"name": "BookValue", "Description": "This API is to fetch the value of a book by its ISBN number and the author details.", "input_params": {"ISBN": {"description": "the ISBN of the book", "type": "String"}, "authorDetails": {"description": "Details of the author", "type": "String"}}, "output_params": {"book value": {"description": "the value of the book", "type": "Float"}}, "format": "BookValue(ISBN, authorDetails) -> book value"}], "Query": "What is the value of the book with ISBN '1029384756' written by J.R.R. Tolkien?", "Label": "BookValue(ISBN='1029384756', authorDetails=AuthorDetails(author_name='J.R.R. Tolkien'))", "Index": 1384}, {"APIs": [{"name": "WeatherInfo", "Description": "This API is to get the weather information of the specific location.", "input_params": {"city": {"description": "the name of the city", "type": "String"}}, "output_params": {"weather_conditions": {"description": "the weather conditions of the city", "type": "String"}}, "format": "WeatherInfo(city) -> weather_conditions"}, {"name": "OutfitSuggestion", "Description": "This API is to suggest outfit according to the weather conditions.", "input_params": {"weather_conditions": {"description": "the weather conditions in the location", "type": "String"}}, "output_params": {"outfit_suggestion": {"description": "the suggested outfit according to the weather", "type": "String"}}, "format": "OutfitSuggestion(weather_conditions) -> outfit_suggestion"}], "Query": "I am planning to take the Shinkansen from Tokyo today, what should I wear?", "Label": "OutfitSuggestion(weather_conditions=WeatherInfo(city='Tokyo'))", "Index": 1397}, {"APIs": [{"name": "WeatherInfo", "Description": "This API is to get the weather information of a certain city.", "input_params": {"city": {"description": "the name of the city", "type": "String"}}, "output_params": {"weather_conditions": {"description": "the weather conditions of the city", "type": "Dictionary"}}, "format": "WeatherInfo(city) -> weather_conditions"}, {"name": "OutfitSuggestion", "Description": "This API is to suggest outfit based on the weather conditions.", "input_params": {"weather_conditions": {"description": "the weather conditions of the city", "type": "Dictionary"}}, "output_params": {"outfit_suggestion": {"description": "the suggested outfit based on the weather conditions", "type": "String"}}, "format": "OutfitSuggestion(weather_conditions) -> outfit_suggestion"}], "Query": "I am going to Paris by TGV today, can you recommend what to wear?", "Label": "OutfitSuggestion(weather_conditions=WeatherInfo(city='Paris'))", "Index": 1399}, {"APIs": [{"name": "WeatherForecast", "Description": "This API is to get the weather forecast of a certain city.", "input_params": {"city": {"description": "the name of the city", "type": "String"}}, "output_params": {"weather_condition": {"description": "the weather condition of the city", "type": "String"}}, "format": "WeatherForecast(city) -> weather_condition"}, {"name": "BestTravelTime", "Description": "This API is to get the most favourable time to visit a certain attraction given the weather condition.", "input_params": {"weather_condition": {"description": "the weather condition of the city where the attraction is located", "type": "String"}, "attraction": {"description": "the name of the attraction", "type": "String"}}, "output_params": {"best_time": {"description": "the most favourable time to visit the attraction", "type": "String"}}, "format": "BestTravelTime(weather_condition, attraction) -> best_time"}], "Query": "When is the most favourable time to visit the Statue of Liberty in New York given the weather?", "Label": "BestTravelTime(weather_condition=WeatherForecast(city='New York'), attraction='Statue of Liberty')", "Index": 1400}, {"APIs": [{"name": "RestaurantSearch", "Description": "This API is to search for a restaurant based on the city and cuisine.", "input_params": {"city": {"description": "the city where the restaurant is located", "type": "String"}, "cuisine": {"description": "the type of cuisine the restaurant serves", "type": "String"}}, "output_params": {"restaurant_name": {"description": "the name of the restaurant", "type": "String"}}, "format": "RestaurantSearch(city, cuisine) -> restaurant_name"}, {"name": "BookReservation", "Description": "This API is to make a reservation at a restaurant.", "input_params": {"restaurant_name": {"description": "the name of the restaurant", "type": "String"}, "party_size": {"description": "the number of people in the party", "type": "Integer"}, "date_time": {"description": "the date and time of the reservation", "type": "Datetime"}}, "output_params": {"reservation_status": {"description": "the status of the reservation", "type": "String"}}, "format": "BookReservation(restaurant_name, party_size, date_time) -> reservation_status"}], "Query": "Can I make a reservation for 6 at the best Indian restaurant in Los Angeles on November 20th at 6 PM?", "Label": "BookReservation(restaurant_name=RestaurantSearch(city='Los Angeles', cuisine='Indian'), party_size=6, date_time='November 20th at 6 PM')", "Index": 1402}, {"APIs": [{"name": "RestaurantSearch", "Description": "This API is to search for a restaurant based on the city and cuisine.", "input_params": {"city": {"description": "the city where the restaurant is located", "type": "String"}, "cuisine": {"description": "the cuisine of the restaurant", "type": "String"}}, "output_params": {"restaurant_name": {"description": "the name of the restaurant", "type": "String"}}, "format": "RestaurantSearch(city, cuisine) -> restaurant_name"}, {"name": "BookReservation", "Description": "This API is to book a reservation at a restaurant.", "input_params": {"restaurant_name": {"description": "the name of the restaurant", "type": "String"}, "party_size": {"description": "the number of people for the reservation", "type": "Integer"}, "date_time": {"description": "the date and time of the reservation", "type": "String"}}, "output_params": {"reservation_status": {"description": "the status of the reservation", "type": "String"}}, "format": "BookReservation(restaurant_name, party_size, date_time) -> reservation_status."}], "Query": "Is it possible to book a table for 7 at the top French restaurant in Boston on February 14th at 7:30 PM?", "Label": "BookReservation(restaurant_name=RestaurantSearch(city='Boston', cuisine='French'), party_size=7, date_time='February 14th at 7:30 PM')", "Index": 1405}, {"APIs": [{"name": "FindBook", "Description": "This API is to find a book by its title.", "input_params": {"title": {"description": "The title of the book", "type": "String"}}, "output_params": {"book_id": {"description": "The ID of the book", "type": "Integer"}}, "format": "FindBook(title) -> book_id"}, {"name": "BuyBook", "Description": "This API is to purchase a book.", "input_params": {"book_id": {"description": "The ID of the book", "type": "Integer"}}, "output_params": {"purchase_status": {"description": "The status of the purchase", "type": "String"}}, "format": "BuyBook(book_id) -> purchase_status"}], "Query": "I need to buy 'The Great Gatsby' from the book store.", "Label": "BuyBook(book_id=FindBook(title='The Great Gatsby'))", "Index": 1437}, {"APIs": [{"name": "SearchFilm", "Description": "This API is to search a film ID by its title.", "input_params": {"title": {"description": "the title of the film", "type": "String"}}, "output_params": {"film_id": {"description": "the ID of the film", "type": "Integer"}}, "format": "SearchFilm(title) -> film_id"}, {"name": "BookMovie", "Description": "This API is to book a movie.", "input_params": {"film_id": {"description": "the ID of the film", "type": "Integer"}, "date": {"description": "the date of the booking", "type": "String"}, "show_time": {"description": "the show time of the movie", "type": "String"}}, "output_params": {"booking status": {"description": "the status of the booking", "type": "String"}}, "format": "BookMovie(film_id, date, show_time) -> booking status"}], "Query": "I want to watch 'The Dark Knight' on Saturday evening.", "Label": "BookMovie(film_id=SearchFilm(title='The Dark Knight'), date='Saturday', show_time='evening')", "Index": 1439}, {"APIs": [{"name": "SearchFilm", "Description": "This API is to search a film by its title.", "input_params": {"title": {"description": "The title of the film", "type": "String"}}, "output_params": {"film_id": {"description": "The ID of the film", "type": "Integer"}}, "format": "SearchFilm(title) -> film_id"}, {"name": "BookMovie", "Description": "This API is to book a movie.", "input_params": {"film_id": {"description": "The ID of the film", "type": "Integer"}, "date": {"description": "The date to watch the movie", "type": "String"}, "show_time": {"description": "The time to watch the movie", "type": "String"}}, "output_params": {"booking status": {"description": "The status of the booking", "type": "String"}}, "format": "BookMovie(film_id, date, show_time) -> booking status"}], "Query": "Want to catch 'Jurassic Park' on Monday evening.", "Label": "BookMovie(film_id=SearchFilm(title='Jurassic Park'), date='Monday', show_time='evening')", "Index": 1441}, {"APIs": [{"name": "GetBookISBN", "Description": "This API is to convert book title to book ISBN.", "input_params": {"book_title": {"description": "The title of the book", "type": "String"}}, "output_params": {"ISBN": {"description": "The ISBN of the book", "type": "String"}}, "format": "GetBookISBN(book_title) -> ISBN"}, {"name": "BuyBook", "Description": "This API is to buy a certain quantity of a book via its ISBN.", "input_params": {"ISBN": {"description": "The ISBN of the book", "type": "String"}, "quantity": {"description": "The quantity of the book to buy", "type": "Integer"}}, "output_params": {"purchase_status": {"description": "The status of the purchase", "type": "String"}}, "format": "BuyBook(ISBN, quantity) -> purchase_status"}], "Query": "I need to get 10 copies of \"To Kill a Mockingbird\".", "Label": "BuyBook(ISBN=GetBookISBN(book_title='To Kill a Mockingbird'), quantity=10)", "Index": 1443}, {"APIs": [{"name": "FindRestaurant", "Description": "This API is to find a restaurant based on location and cuisine type.", "input_params": {"city": {"description": "the city where the user is located", "type": "String"}, "cuisine_type": {"description": "the type of cuisine the user wants to eat", "type": "String"}}, "output_params": {"restaurant_name": {"description": "the name of the recommended restaurant", "type": "String"}}, "format": "FindRestaurant(city, cuisine_type) -> restaurant_name"}, {"name": "ReserveTable", "Description": "This API is to reserve a table at a given restaurant and time.", "input_params": {"restaurant_name": {"description": "the name of the restaurant where the user wants to book a table", "type": "String"}, "time": {"description": "the time when the user wants to have the reservation", "type": "Time"}}, "output_params": {"reservation_status": {"description": "the status of the reservation", "type": "String"}}, "format": "ReserveTable(restaurant_name, time) -> reservation_status"}], "Query": "I'm in New York and fancy some Indian food. Could you find a suitable place and book a table for 6pm?", "Label": "ReserveTable(restaurant_name=FindRestaurant(city='New York', cuisine_type='Indian'), time='6pm')", "Index": 1457}, {"APIs": [{"name": "FindRestaurant", "Description": "This API is to find a restaurant based on city and cuisine type.", "input_params": {"city": {"description": "the city where the user is", "type": "String"}, "cuisine_type": {"description": "the type of cuisine the user fancies", "type": "String"}}, "output_params": {"restaurant_name": {"description": "the name of the restaurant", "type": "String"}}, "format": "FindRestaurant(city, cuisine_type) -> restaurant_name"}, {"name": "ReserveTable", "Description": "This API is to reserve a table at a specified restaurant and time.", "input_params": {"restaurant_name": {"description": "the name of the restaurant", "type": "String"}, "time": {"description": "the time the user wants to reserve a table", "type": "Time"}}, "output_params": {"reservation status": {"description": "the status of the reservation", "type": "String"}}, "format": "ReserveTable(restaurant_name, time) -> reservation status"}], "Query": "I am in Boston and fancy some Lebanese food. Can you find a restaurant and make a reservation for 11am?", "Label": "ReserveTable(restaurant_name=FindRestaurant(city='Boston', cuisine_type='Lebanese'), time='11am')", "Index": 1458}, {"APIs": [{"name": "NearbyHospitalQuery", "Description": "This API is to find a hospital near a given location.", "input_params": {"coordinate_position": {"description": "the coordinates of the location", "type": "Coordinate"}}, "output_params": {"hospital": {"description": "the name of the nearby hospital", "type": "String"}}, "format": "NearbyHospitalQuery(coordinate_position) -> hospital"}, {"name": "DoctorAvailabilityQuery", "Description": "This API is to check the availability of a doctor at a given hospital.", "input_params": {"hospital": {"description": "the name of the hospital", "type": "String"}, "specialty": {"description": "the specialty of the doctor", "type": "String"}}, "output_params": {"availability": {"description": "the availability of the doctor", "type": "Boolean"}}, "format": "DoctorAvailabilityQuery(hospital, specialty) -> availability"}], "Query": "Is there a pediatrician available at a hospital near the bistro 'Le Bouchon' in Chicago?", "Label": "DoctorAvailabilityQuery(hospital=NearbyHospitalQuery(coordinate_position=RestaurantDetail(restaurant_name='Le Bouchon', city='Chicago')), specialty='pediatrician')", "Index": 1465}, {"APIs": [{"name": "AlbumArtist", "Description": "This API is to obtain the artist of a specific album.", "input_params": {"album_name": {"description": "the name of the album", "type": "String"}}, "output_params": {"artist": {"description": "the artist of the album", "type": "String"}}, "format": "AlbumArtist(album_name) -> artist"}, {"name": "MusicRecommend", "Description": "This API is to recommend music based on artist, genre and year.", "input_params": {"artist": {"description": "the artist of the song", "type": "String"}, "genre": {"description": "the genre of the song", "type": "String"}, "year": {"description": "the year of the song", "type": "String"}}, "output_params": {"song": {"description": "the recommended song", "type": "String"}}, "format": "MusicRecommend(artist, genre, year) -> song"}], "Query": "Can you suggest a country song from 2015 by the artist of 'Fearless' album?", "Label": "MusicRecommend(artist=AlbumArtist(album_name='Fearless'), genre='country', year='2015')", "Index": 1491}, {"APIs": [{"name": "WeatherForecast", "Description": "This API is to get the weather forecast of a specific city.", "input_params": {"city": {"description": "the name of the city", "type": "String"}}, "output_params": {"weather": {"description": "the weather forecast of the city", "type": "String"}}, "format": "WeatherForecast(city) -> weather"}, {"name": "RestaurantRecommendation", "Description": "This API is to recommend a restaurant based on the city and cuisine.", "input_params": {"city": {"description": "the name of the city", "type": "String"}, "cuisine": {"description": "the type of cuisine", "type": "String"}}, "output_params": {"restaurant": {"description": "the recommended restaurant", "type": "String"}}, "format": "RestaurantRecommendation(city, cuisine) -> restaurant"}], "Query": "I'm thinking of a day trip to London and would like to eat French cuisine, can you assist with the plan?", "Label": "TravelPlan(weather=WeatherForecast(city='London'), restaurant=RestaurantRecommendation(city='London', cuisine='French'))", "Index": 1495}]}, {"level2": [{"APIs": [{"name": "Username2ID", "Description": "This API is to convert a username to a user ID.", "input_params": {"user_name": {"description": "the name of the user", "type": "String"}}, "output_params": {"user_ID": {"description": "the ID of the user", "type": "Integer"}}, "format": "Username2ID(user_name) -> user_ID"}, {"name": "Playlistname2ID", "Description": "This API is to convert a playlist name to a playlist ID.", "input_params": {"playlist_name": {"description": "the name of the playlist", "type": "String"}}, "output_params": {"playlist_ID": {"description": "the ID of the playlist", "type": "Integer"}}, "format": "Playlistname2ID(playlist_name) -> playlist_ID"}, {"name": "AddSongToPlaylist", "Description": "This API is to add a song to a playlist.", "input_params": {"user_ID": {"description": "the ID of the user", "type": "Integer"}, "playlist_ID": {"description": "the ID of the playlist", "type": "Integer"}, "song_name": {"description": "the name of the song", "type": "String"}}, "output_params": {"playlist_songs": {"description": "a list of the songs in the playlist", "type": "List"}}, "format": "AddSongToPlaylist(user_ID, playlist_ID, song_name) -> playlist_songs"}], "Query": "Would you mind including 'Dancing Queen' in Tom's 'Latin Fiesta' playlist?", "Label": "AddSongToPlaylist(user_ID=Username2ID(user_name='Tom'), playlist_ID=Playlistname2ID(playlist_name='Latin Fiesta'), song_name='Dancing Queen')", "Index": 2}, {"APIs": [{"name": "Username2ID", "Description": "This API is to convert a username to a user ID.", "input_params": {"user_name": {"description": "the name of the user", "type": "String"}}, "output_params": {"user_ID": {"description": "the ID of the user", "type": "Integer"}}, "format": "Username2ID(user_name) -> user_ID"}, {"name": "Playlistname2ID", "Description": "This API is to convert a playlist name to a playlist ID.", "input_params": {"playlist_name": {"description": "the name of the playlist", "type": "String"}}, "output_params": {"playlist_ID": {"description": "the ID of the playlist", "type": "Integer"}}, "format": "Playlistname2ID(playlist_name) -> playlist_ID"}, {"name": "AddSongToPlaylist", "Description": "This API is to add a song to a playlist.", "input_params": {"user_ID": {"description": "the ID of the user", "type": "Integer"}, "playlist_ID": {"description": "the ID of the playlist", "type": "Integer"}, "song_name": {"description": "the name of the song", "type": "String"}}, "output_params": {"playlist_songs": {"description": "a list of the songs in the playlist", "type": "List"}}, "format": "AddSongToPlaylist(user_ID, playlist_ID, song_name) -> playlist_songs"}], "Query": "Is there a way to incorporate the song 'space Oddity' into John's 'Rock Ballads' playlist?", "Label": "AddSongToPlaylist(user_ID=Username2ID(user_name='John'), playlist_ID=Playlistname2ID(playlist_name='Rock Ballads'), song_name='space Oddity')", "Index": 4}, {"APIs": [{"name": "Username2ID", "Description": "This API is to convert a username to a user ID.", "input_params": {"user_name": {"description": "the name of the user", "type": "String"}}, "output_params": {"user_ID": {"description": "the ID of the user", "type": "Integer"}}, "format": "Username2ID(user_name) -> user_ID"}, {"name": "Playlistname2ID", "Description": "This API is to convert a playlist name to a playlist ID.", "input_params": {"playlist_name": {"description": "the name of the playlist", "type": "String"}}, "output_params": {"playlist_ID": {"description": "the ID of the playlist", "type": "Integer"}}, "format": "Playlistname2ID(playlist_name) -> playlist_ID"}, {"name": "AddSongToPlaylist", "Description": "This API is to add a song to a playlist.", "input_params": {"user_ID": {"description": "the ID of the user", "type": "Integer"}, "playlist_ID": {"description": "the ID of the playlist", "type": "Integer"}, "song_name": {"description": "the name of the song", "type": "String"}}, "output_params": {"playlist_songs": {"description": "a list of the songs in the playlist", "type": "List"}}, "format": "AddSongToPlaylist(user_ID, playlist_ID, song_name) -> playlist_songs"}], "Query": "Please, make sure 'Sweet Child of Mine' finds its way into Mia's 'Classic Disco Hits' playlist.", "Label": "AddSongToPlaylist(user_ID=Username2ID(user_name='Mia'), playlist_ID=Playlistname2ID(playlist_name='Classic Disco Hits'), song_name='Sweet Child of Mine')", "Index": 6}, {"APIs": [{"name": "FindMovie", "Description": "This API provides the name of a movie based on the specified genre.", "input_params": {"genre": {"description": "the genre of the movie", "type": "String"}}, "output_params": {"movie_name": {"description": "the name of the movie", "type": "String"}}, "format": "FindMovie(genre) -> movie_name"}, {"name": "MovieShowtimes", "Description": "This API gives the showtimes for a specified movie in a chosen city.", "input_params": {"movie_name": {"description": "the name of the movie", "type": "String"}, "city": {"description": "the name of the city", "type": "String"}}, "output_params": {"show_time": {"description": "the showtimes for the movie in the chosen city", "type": "String"}}, "format": "MovieShowtimes(movie_name, city) -> show_time"}, {"name": "BuyMovieTickets", "Description": "This API buys movie tickets for a specific show time, movie and chosen seats.", "input_params": {"show_time": {"description": "the show time of the movie", "type": "String"}, "movie_name": {"description": "the name of the movie", "type": "String"}, "seats": {"description": "the number of seats to buy", "type": "Integer"}}, "output_params": {"booking_status": {"description": "the status of the booking", "type": "String"}}, "format": "BuyMovieTickets(show_time, movie_name, seats) -> booking_status"}], "Query": "I'd like to see a drama movie in Seattle today. Can you find me a show and buy 2 tickets?", "Label": "BuyMovieTickets(show_time=MovieShowtimes(movie_name=FindMovie(genre='drama'), city='Seattle'), movie_name=FindMovie(genre='drama'), seats=2)", "Index": 37}, {"APIs": [{"name": "Customername2ID", "Description": "This API is to convert a customer name to a customer ID.", "input_params": {"customer_name": {"description": "the name of the customer", "type": "String"}}, "output_params": {"customer_ID": {"description": "the ID of the customer", "type": "Integer"}}, "format": "Customername2ID(customer_name) -> customer_ID"}, {"name": "Productname2ID", "Description": "This API is to convert a book name to a book ID.", "input_params": {"book_name": {"description": "the title of the book", "type": "String"}}, "output_params": {"product_ID": {"description": "the ID of the book", "type": "Integer"}}, "format": "Productname2ID(book_name) -> product_ID"}, {"name": "PurchaseBook", "Description": "This API is to process the purchase of books.", "input_params": {"customer_ID": {"description": "the ID of the customer,it should be number", "type": "Integer"}, "product_ID": {"description": "the ID of the book,it should be number", "type": "Integer"}}, "output_params": {"purchased_books": {"description": "a list of purchased books", "type": "List"}}, "format": "PurchaseBook(customer_ID, product_ID) -> purchased_books"}], "Query": "Jennifer is interested in purchasing the book \"Artificial Intelligence: A Modern Approach\"", "Label": "PurchaseBook(customer_ID=Customername2ID(customer_name='Jennifer'), product_ID=Productname2ID(book_name='Artificial Intelligence: A Modern Approach'))", "Index": 138}, {"APIs": [{"name": "Email2ID", "Description": "This API is to convert user email to user ID.", "input_params": {"email": {"description": "the email of the person", "type": "String"}}, "output_params": {"person_ID": {"description": "the ID of the person", "type": "Integer"}}, "format": "Email2ID(email) -> person_ID"}, {"name": "Subjectname2ID", "Description": "This API is to convert subject name to subject ID.", "input_params": {"subject_name": {"description": "the name of the subject", "type": "String"}}, "output_params": {"subject_ID": {"description": "the ID of the subject", "type": "Integer"}}, "format": "Subjectname2ID(subject_name) -> subject_ID"}, {"name": "EnrollCourse", "Description": "This API is to enroll a user to a specific course.", "input_params": {"person_ID": {"description": "the ID of the person", "type": "Integer"}, "subject_ID": {"description": "the ID of the subject", "type": "Integer"}, "semester": {"description": "the semester of the enrollment", "type": "String"}}, "output_params": {"Enrollment confirmation": {"description": "the confirmation of the enrollment", "type": "String"}}, "format": "EnrollCourse(person_ID,subject_ID,semester) -> Enrollment confirmation"}], "Query": "Can you help johndoe@gmail.com to enroll in Microeconomics for the Fall semester?", "Label": "EnrollCourse(person_ID=Email2ID(email='johndoe@gmail.com'),subject_ID=Subjectname2ID(subject_name='Microeconomics'), semester='Fall')", "Index": 148}, {"APIs": [{"name": "Email2ID", "Description": "This API is to convert user email to user ID.", "input_params": {"email": {"description": "the email of the person", "type": "String"}}, "output_params": {"person_ID": {"description": "the ID of the person", "type": "Integer"}}, "format": "Email2ID(email) -> person_ID"}, {"name": "Subjectname2ID", "Description": "This API is to convert subject name to subject ID.", "input_params": {"subject_name": {"description": "the name of the subject", "type": "String"}}, "output_params": {"subject_ID": {"description": "the ID of the subject", "type": "Integer"}}, "format": "Subjectname2ID(subject_name) -> subject_ID"}, {"name": "EnrollCourse", "Description": "This API is to enroll a user to a specific course.", "input_params": {"person_ID": {"description": "the ID of the person", "type": "Integer"}, "subject_ID": {"description": "the ID of the subject", "type": "Integer"}, "semester": {"description": "the semester of the enrollment", "type": "String"}}, "output_params": {"Enrollment confirmation": {"description": "the confirmation of the enrollment", "type": "String"}}, "format": "EnrollCourse(person_ID,subject_ID,semester) -> Enrollment confirmation"}], "Query": "I wish to enroll tony.stark@avengers.com in the Programming course for the Winter semester.", "Label": "EnrollCourse(person_ID=Email2ID(email='tony.stark@avengers.com'),subject_ID=Subjectname2ID(subject_name='Programming'), semester='Winter')", "Index": 150}, {"APIs": [{"name": "Cityname2ID", "Description": "This API is to convert city name to city ID.", "input_params": {"city_name": {"description": "the name of the city", "type": "String"}}, "output_params": {"City_ID": {"description": "the ID of the city", "type": "Integer"}}, "format": "Cityname2ID(city_name) -> City_ID"}, {"name": "Eventname2ID", "Description": "This API is to convert event name to event ID.", "input_params": {"Event_name": {"description": "the name of the event", "type": "String"}}, "output_params": {"Event_ID": {"description": "the ID of the event", "type": "Integer"}}, "format": "Eventname2ID(Event_name) -> Event_ID"}, {"name": "ReserveTicket", "Description": "This API is to reserve a ticket for an event.", "input_params": {"City_ID": {"description": "the ID of the city", "type": "Integer"}, "Event_ID": {"description": "the ID of the event", "type": "Integer"}, "date": {"description": "the date of the event", "type": "Date"}}, "output_params": {"Ticket_confirmation": {"description": "the confirmation of the ticket", "type": "String"}}, "format": "ReserveTicket(City_ID,Event_ID,date) -> Ticket_confirmation"}], "Query": "Can I get a ticket for 'Metal Concert' in San Francisco on 15th September?", "Label": "ReserveTicket(City_ID=Cityname2ID(city_name='San Francisco'), Event_ID=Eventname2ID(Event_name='Metal Concert'), date='15th September')", "Index": 166}, {"APIs": [{"name": "Cityname2ID", "Description": "This API is to convert city name to city ID.", "input_params": {"city_name": {"description": "the name of the city", "type": "String"}}, "output_params": {"City_ID": {"description": "the ID of the city", "type": "Integer"}}, "format": "Cityname2ID(city_name) -> City_ID"}, {"name": "Eventname2ID", "Description": "This API is to convert event name to event ID.", "input_params": {"Event_name": {"description": "the name of the event", "type": "String"}}, "output_params": {"Event_ID": {"description": "the ID of the event", "type": "Integer"}}, "format": "Eventname2ID(Event_name) -> Event_ID"}, {"name": "ReserveTicket", "Description": "This API is to reserve a ticket for an event.", "input_params": {"City_ID": {"description": "the ID of the city", "type": "Integer"}, "Event_ID": {"description": "the ID of the event", "type": "Integer"}, "date": {"description": "the date of the event", "type": "Date"}}, "output_params": {"Ticket_confirmation": {"description": "the confirmation of the ticket", "type": "String"}}, "format": "ReserveTicket(City_ID,Event_ID,date) -> Ticket_confirmation"}], "Query": "Book a ticket for me for the 'Film Festival' in Los Angeles on 22nd October", "Label": "ReserveTicket(City_ID=Cityname2ID(city_name='Los Angeles'), Event_ID=Eventname2ID(Event_name='Film Festival'), date='22nd October')", "Index": 173}, {"APIs": [{"name": "ItemnameToID", "Description": "This API is used to convert the name of the item to item ID.", "input_params": {"item_name": {"description": "the name of the item", "type": "String"}}, "output_params": {"item_ID": {"description": "the ID of the item", "type": "Integer"}}, "format": "ItemnameToID(item_name) -> item_ID"}, {"name": "SuppliernameToID", "Description": "This API is used to convert the name of the supplier to supplier ID.", "input_params": {"supplier_name": {"description": "the name of the supplier", "type": "String"}}, "output_params": {"supplier_ID": {"description": "the ID of the supplier", "type": "Integer"}}, "format": "SuppliernameToID(supplier_name) -> supplier_ID"}, {"name": "PlaceOrder", "Description": "This API places the order for a particular item from a specified supplier.", "input_params": {"item_ID": {"description": "the ID of the item", "type": "Integer"}, "supplier_ID": {"description": "the ID of the supplier", "type": "Integer"}, "quantity": {"description": "the quantity of the item", "type": "Integer"}}, "output_params": {"order_status": {"description": "the status of the order", "type": "String"}}, "format": "PlaceOrder(item_ID, supplier_ID, quantity) -> order_status"}], "Query": "Please place an order for 50 coffee mugs from KitchenPlus.", "Label": "PlaceOrder(item_ID=ItemnameToID(item_name='coffee mugs'),supplier_ID=SuppliernameToID(supplier_name='KitchenPlus'), quantity=50)", "Index": 227}, {"APIs": [{"name": "Productname2ID", "Description": "This API converts a product name to its ID.", "input_params": {"product_name": {"description": "the name of the product", "type": "String"}}, "output_params": {"product_ID": {"description": "the ID of the product", "type": "Integer"}}, "format": "Productname2ID(product_name) -> product_ID"}, {"name": "Customername2ID", "Description": "This API converts a customer name to its ID.", "input_params": {"customer_name": {"description": "the name of the customer", "type": "String"}}, "output_params": {"customer_ID": {"description": "the ID of the customer", "type": "Integer"}}, "format": "Customername2ID(customer_name) -> customer_ID"}, {"name": "AddToCart", "Description": "This API adds a product to a customer's shopping cart.", "input_params": {"customer_ID": {"description": "the ID of the customer", "type": "Integer"}, "product_ID": {"description": "the ID of the product", "type": "Integer"}}, "output_params": {"Cart status": {"description": "the status of the cart", "type": "String"}}, "format": "AddToCart(customer_ID, product_ID) -> Cart status"}], "Query": "Please add a Samsung Galaxy S21 to Anthony's cart.", "Label": "AddToCart(customer_ID=Customername2ID(customer_name='Anthony'), product_ID=Productname2ID(product_name='Samsung Galaxy S21'))", "Index": 242}, {"APIs": [{"name": "GetHotelAvailability", "Description": "This API checks the availability of hotels in a specific city on specific dates.", "input_params": {"city": {"description": "the name of the city", "type": "String"}, "dates": {"description": "specific dates", "type": "String"}}, "output_params": {"hotel": {"description": "list of available hotels", "type": "List"}}, "format": "GetHotelAvailability(city, dates) -> hotel"}, {"name": "GetRestaurants", "Description": "This API provides a list of restaurants in a specific city.", "input_params": {"city": {"description": "the name of the city", "type": "String"}}, "output_params": {"restaurants": {"description": "list of restaurants", "type": "List"}}, "format": "GetRestaurants(city) -> restaurants"}, {"name": "PlanTrip", "Description": "This API plans a trip including a hotel stay and restaurants visits.", "input_params": {"hotel": {"description": "list of available hotels", "type": "List"}, "restaurants": {"description": "list of restaurants", "type": "List"}}, "output_params": {"trip": {"description": "planned trip details", "type": "Object"}}, "format": "PlanTrip(hotel, restaurants) -> trip"}], "Query": "I need to plan a trip to Los Angeles next month. Can you assist?", "Label": "PlanTrip(hotel=GetHotelAvailability(city='Los Angeles', dates='next month'), restaurants=GetRestaurants(city='Los Angeles'))", "Index": 307}, {"APIs": [{"name": "CurrentExchangeRate", "Description": "This API is to get the current exchange rate for a specific currency.", "input_params": {"currency": {"description": "the currency code", "type": "String"}}, "output_params": {"exchangeRate": {"description": "the current exchange rate", "type": "Float"}}, "format": "CurrentExchangeRate(currency) -> exchangeRate"}, {"name": "BudgetInLocalCurrency", "Description": "This API is to calculate the budget in local currency using the original budget and current exchange rate.", "input_params": {"budget": {"description": "the original budget in USD", "type": "Float"}, "exchangeRate": {"description": "the current exchange rate", "type": "Float"}}, "output_params": {"localBudget": {"description": "the budget in local currency", "type": "Float"}}, "format": "BudgetInLocalCurrency(budget, exchangeRate) -> localBudget"}, {"name": "SuggestDiningOptions", "Description": "This API is to suggest dining options based on the local budget and location.", "input_params": {"localBudget": {"description": "the budget in local currency", "type": "Float"}, "location": {"description": "the location", "type": "String"}}, "output_params": {"diningOptions": {"description": "a list of suggested dining options", "type": "List"}}, "format": "SuggestDiningOptions(localBudget, location) -> diningOptions"}], "Query": "I have 300 USD and I'm planning to visit Paris. Can you suggest some dining places?", "Label": "SuggestDiningOptions(localBudget=BudgetInLocalCurrency(budget=300, exchangeRate=CurrentExchangeRate(currency='USD')),location='Paris')", "Index": 310}, {"APIs": [{"name": "CustomernameToID", "Description": "This API is used to convert the name of the customer to customer ID.", "input_params": {"customer_name": {"description": "the name of the customer", "type": "String"}}, "output_params": {"customer_ID": {"description": "the ID of the customer", "type": "Integer"}}, "format": "CustomernameToID(customer_name) -> customer_ID"}, {"name": "ProductnameToID", "Description": "This API is used to convert the name of the product to product ID.", "input_params": {"product_name": {"description": "the name of the product", "type": "String"}}, "output_params": {"product_ID": {"description": "the ID of the product", "type": "Integer"}}, "format": "ProductnameToID(product_name) -> product_ID"}, {"name": "AddProductToCart", "Description": "This API adds a certain quantity of a particular product to the customer's cart.", "input_params": {"product_ID": {"description": "the ID of the product", "type": "Integer"}, "customer_ID": {"description": "the ID of the customer", "type": "Integer"}, "quantity": {"description": "the quantity of the product to be added to the cart", "type": "Integer"}}, "output_params": {"cart_status": {"description": "the status of the cart after adding the product", "type": "String"}}, "format": "AddProductToCart(product_ID, customer_ID, quantity) -> cart_status"}], "Query": "Can you add 3 iPhone 12 to Jack's cart?", "Label": "AddProductToCart(product_ID=ProductnameToID(product_name='iPhone 12'), customer_ID=CustomernameToID(customer_name='Jack'), quantity=3)", "Index": 429}, {"APIs": [{"name": "UsernameToID", "Description": "This API is used to convert the username to user ID.", "input_params": {"username": {"description": "the username of the user", "type": "String"}}, "output_params": {"user_ID": {"description": "the ID of the user", "type": "Integer"}}, "format": "UsernameToID(username) -> user_ID"}, {"name": "MovienameToID", "Description": "This API is to convert the movie name to movie ID.", "input_params": {"movie_name": {"description": "the name of the movie", "type": "String"}}, "output_params": {"movie_ID": {"description": "the ID of the movie", "type": "Integer"}}, "format": "MovienameToID(movie_name) -> movie_ID"}, {"name": "RentMovie", "Description": "This API rents a movie for a particular user on a specified date.", "input_params": {"user_ID": {"description": "the ID of the user", "type": "Integer"}, "movie_ID": {"description": "the ID of the movie", "type": "Integer"}, "date": {"description": "the date of rental", "type": "Date"}}, "output_params": {"rental_status": {"description": "the status of the rental", "type": "String"}}, "format": "RentMovie(user_ID, movie_ID, date) -> rental_status"}], "Query": "Can you rent the movie 'Inception' for the user 'JohnDoe' on April 1, 2022?", "Label": "RentMovie(user_ID=UsernameToID(username='JohnDoe'), movie_ID=MovienameToID(movie_name='Inception'), date='April 1, 2022')", "Index": 431}, {"APIs": [{"name": "UsernameToID", "Description": "This API is used to convert the user's name to user ID.", "input_params": {"user_name": {"description": "the name of the user", "type": "String"}}, "output_params": {"user_ID": {"description": "the ID of the user", "type": "Integer"}}, "format": "UsernameToID(user_name) -> user_ID"}, {"name": "SongTitleToID", "Description": "This API is to convert the song title to song ID.", "input_params": {"song_title": {"description": "the title of the song", "type": "String"}}, "output_params": {"song_ID": {"description": "the ID of the song", "type": "Integer"}}, "format": "SongTitleToID(song_title) -> song_ID"}, {"name": "PlaySong", "Description": "This API plays a song for a particular user.", "input_params": {"user_ID": {"description": "the ID of the user", "type": "Integer"}, "song_ID": {"description": "the ID of the song", "type": "Integer"}}, "output_params": {"play_status": {"description": "the status of the song playback", "type": "String"}}, "format": "PlaySong(user_ID, song_ID) -> play_status"}], "Query": "Could you play the song 'Bohemian Rhapsody' for user George?", "Label": "PlaySong(user_ID=UsernameToID(user_name='George'), song_ID=SongTitleToID(song_title='Bohemian Rhapsody'))", "Index": 440}, {"APIs": [{"name": "FindRestaurant", "Description": "This API returns the ID of a restaurant based on the city and cuisine.", "input_params": {"city": {"description": "the name of the city", "type": "String"}, "cuisine": {"description": "the type of cuisine", "type": "String"}}, "output_params": {"restaurant_ID": {"description": "the ID of the restaurant", "type": "Integer"}}, "format": "FindRestaurant(city, cuisine) -> restaurant_ID"}, {"name": "GetMenu", "Description": "This API returns the menu of a particular restaurant.", "input_params": {"restaurant_ID": {"description": "the ID of the restaurant", "type": "Integer"}}, "output_params": {"menu": {"description": "the menu of the restaurant", "type": "String"}}, "format": "GetMenu(restaurant_ID) -> menu"}, {"name": "RecommendDish", "Description": "This API recommends a dish from a given menu.", "input_params": {"menu": {"description": "the menu of the restaurant", "type": "String"}}, "output_params": {"dish": {"description": "the recommended dish", "type": "String"}}, "format": "RecommendDish(menu) -> dish"}], "Query": "What's a good dish to try from an Indian restaurant in Chicago?", "Label": "RecommendDish(menu=GetMenu(restaurant_ID=FindRestaurant(city='Chicago', cuisine='Indian')))", "Index": 447}, {"APIs": [{"name": "Cityname2WeatherCode", "Description": "This API converts a city name to its weather code.", "input_params": {"city_name": {"description": "the name of the city", "type": "String"}}, "output_params": {"weather_code": {"description": "the weather code of the city", "type": "String"}}, "format": "Cityname2WeatherCode(city_name) -> weather_code"}, {"name": "WeatherCode2Forecast", "Description": "This API provides the weather forecast for a specific date based on the weather code.", "input_params": {"weather_code": {"description": "the weather code of the city", "type": "String"}, "date": {"description": "the specific date for the weather forecast", "type": "String"}}, "output_params": {"weather_forecast": {"description": "the weather forecast for the specific date", "type": "String"}}, "format": "WeatherCode2Forecast(weather_code, date) -> weather_forecast"}, {"name": "PlanTrip", "Description": "This API plans a trip based on the city, date, and weather forecast.", "input_params": {"city_name": {"description": "the name of the city", "type": "String"}, "date": {"description": "the specific date for the trip", "type": "String"}, "weather_forecast": {"description": "the weather forecast for the specific date", "type": "String"}}, "output_params": {"trip_plan": {"description": "the plan for the trip", "type": "String"}}, "format": "PlanTrip(city_name, date, weather_forecast) -> trip_plan"}], "Query": "Can you plan a trip for me to Paris on June 12?", "Label": "PlanTrip(city_name='Paris', date='June 12', weather_forecast=WeatherCode2Forecast(weather_code=Cityname2WeatherCode(city_name='Paris'), date='June 12'))", "Index": 448}, {"APIs": [{"name": "SearchBook", "Description": "This API returns the ID of a book based on a specified title.", "input_params": {"title": {"description": "the title of the book", "type": "String"}}, "output_params": {"book_id": {"description": "the ID of the book", "type": "Integer"}}, "format": "SearchBook(title) -> book_id"}, {"name": "GetBookReview", "Description": "This API gives a review of a book given its ID.", "input_params": {"book_id": {"description": "the ID of the book", "type": "Integer"}}, "output_params": {"review": {"description": "the review of the book", "type": "String"}}, "format": "GetBookReview(book_id) -> review"}, {"name": "ShareReview", "Description": "This API allows the user to share a review on a specified social media platform.", "input_params": {"review": {"description": "the review of the book", "type": "String"}, "social_media_platform": {"description": "the social media platform to share the review", "type": "String"}}, "output_params": {"share_status": {"description": "the status of the sharing", "type": "String"}}, "format": "ShareReview(review, social_media_platform) -> share_status"}], "Query": "Can you find the book 'Harry Potter' and share its review on my Facebook page?", "Label": "ShareReview(review=GetBookReview(book_id=SearchBook(title='Harry Potter')), social_media_platform='Facebook')", "Index": 455}, {"APIs": [{"name": "FindDoctor", "Description": "This API is to find a doctor based on specialty and location.", "input_params": {"specialty": {"description": "the specialty of the doctor", "type": "String"}, "location": {"description": "the location where the doctor is located", "type": "String"}}, "output_params": {"doctor": {"description": "the information of the doctor", "type": "Object"}}, "format": "FindDoctor(specialty, location) -> doctor"}, {"name": "GetAppointment", "Description": "This API is to get an appointment with a specific doctor on a certain date.", "input_params": {"doctor_id": {"description": "the ID of the doctor", "type": "Integer"}, "date": {"description": "the date of the appointment", "type": "Date"}}, "output_params": {"appointment": {"description": "the information of the appointment", "type": "Object"}}, "format": "GetAppointment(doctor_id, date) -> appointment"}, {"name": "ConfirmAppointment", "Description": "This API is to confirm a specific appointment.", "input_params": {"appointment_id": {"description": "the ID of the appointment", "type": "Integer"}}, "output_params": {"confirmation": {"description": "the confirmation status of the appointment", "type": "String"}}, "format": "ConfirmAppointment(appointment_id) -> confirmation"}], "Query": "Can you confirm an appointment with a cardiologist in New York for August 10th?", "Label": "ConfirmAppointment(appointment_id=GetAppointment(doctor_id=FindDoctor(specialty='cardiologist', location='New York'), date='August 10th'))", "Index": 468}, {"APIs": [{"name": "ProductLookup", "Description": "This API is to query the product details given a product_id.", "input_params": {"product_id": {"description": "the ID of the product", "type": "String"}}, "output_params": {"product_info": {"description": "the details of the product", "type": "Object"}}, "format": "ProductLookup(product_id) -> product_info"}, {"name": "CustomerPurchase", "Description": "This API fetches the purchase history based on product details.", "input_params": {"product_info": {"description": "the details of the product", "type": "Object"}}, "output_params": {"purchase_info": {"description": "the purchase history", "type": "Object"}}, "format": "CustomerPurchase(product_info) -> purchase_info"}, {"name": "ProductRating", "Description": "This API provides product ratings based on purchase history.", "input_params": {"purchase_info": {"description": "the purchase history", "type": "Object"}, "number_of_ratings": {"description": "the number of ratings to retrieve", "type": "Integer"}}, "output_params": {"ratings": {"description": "the product ratings", "type": "List"}}, "format": "ProductRating(purchase_info, number_of_ratings) -> ratings"}], "Query": "Can you provide me with ten ratings for the product with id 56789?", "Label": "ProductRating(purchase_info=CustomerPurchase(product_info=ProductLookup(product_id='56789')), number_of_ratings='10')", "Index": 512}, {"APIs": [{"name": "MovienameToID", "Description": "This API is to convert a movie name into a movie id.", "input_params": {"name": {"description": "the name of the movie", "type": "String"}}, "output_params": {"movie_id": {"description": "the id of the movie", "type": "Integer"}}, "format": "MovienameToID(name) -> movie_id"}, {"name": "MovieSchedule", "Description": "This API is to get the schedule of a movie.", "input_params": {"movie_id": {"description": "the id of the movie", "type": "Integer"}}, "output_params": {"schedule": {"description": "the schedule of the movie", "type": "String"}}, "format": "MovieSchedule(movie_id) -> schedule"}, {"name": "ClosetCinema", "Description": "This API is to get the nearest cinema playing a movie at a given schedule.", "input_params": {"schedule": {"description": "the schedule of the movie", "type": "String"}}, "output_params": {"cinema_location": {"description": "the location of the nearest cinema", "type": "String"}}, "format": "ClosetCinema(schedule) -> cinema_location"}], "Query": "Where is the nearest cinema playing \"Avengers: Endgame\"?", "Label": "ClosetCinema(schedule=MovieSchedule(movie_id=MovienameToID(name='Avengers: Endgame')))", "Index": 532}, {"APIs": [{"name": "RestaurantByname", "Description": "This API provides detailed information about a specific restaurant.", "input_params": {"restaurant_name": {"description": "the name of the restaurant", "type": "String"}}, "output_params": {"restaurant_info": {"description": "detailed information about the restaurant", "type": "Object"}}, "format": "RestaurantByname(restaurant_name) -> restaurant_info"}, {"name": "FoodByDietType", "Description": "This API provides a list of foods based on a specific diet type.", "input_params": {"diet_type": {"description": "the type of diet", "type": "String"}}, "output_params": {"food_list": {"description": "a list of foods based on the diet type", "type": "List"}}, "format": "FoodByDietType(diet_type) -> food_list"}, {"name": "BestOrder", "Description": "This API provides the best order suggestion based on the restaurant and diet type.", "input_params": {"restaurant_info": {"description": "detailed information about the restaurant", "type": "Object"}, "food_list": {"description": "a list of foods based on the diet type", "type": "List"}}, "output_params": {"order_info": {"description": "the best order suggestion", "type": "Object"}}, "format": "BestOrder(restaurant_info, food_list) -> order_info"}], "Query": "I am a vegan and I am planning to dine in 'The Green Leaf' restaurant. Can you suggest me the best order?", "Label": "BestOrder(restaurant_info=RestaurantByname(restaurant_name='The Green Leaf'), food_list=FoodByDietType(diet_type='vegan'))", "Index": 537}, {"APIs": [{"name": "GetWeatherForecast", "Description": "This API is to get the weather forecast for a specific city on a specific date.", "input_params": {"city_name": {"description": "the name of the city", "type": "String"}, "date": {"description": "the date for the weather forecast", "type": "Date"}}, "output_params": {"weather forecast": {"description": "the forecasted weather for the specified city and date", "type": "String"}}, "format": "GetWeatherForecast(city_name, date) -> weather forecast"}, {"name": "FindEventCity", "Description": "This API is to find the city where a specific event will take place.", "input_params": {"event_name": {"description": "the name of the event", "type": "String"}}, "output_params": {"city name": {"description": "the name of the city where the event will take place", "type": "String"}}, "format": "FindEventCity(event_name) -> city name"}, {"name": "FindEventDate", "Description": "This API is to find the date when a specific event will take place.", "input_params": {"event_name": {"description": "the name of the event", "type": "String"}}, "output_params": {"date": {"description": "the date when the event will take place", "type": "Date"}}, "format": "FindEventDate(event_name) -> date"}], "Query": "What is the weather forecast for the location of the Coachella festival on the day it starts?", "Label": "GetWeatherForecast(city_name=FindEventCity(event_name='Coachella'), date=FindEventDate(event_name='Coachella'))", "Index": 540}, {"APIs": [{"name": "Authorname2ID", "Description": "This API is to convert author name to author ID.", "input_params": {"author_name": {"description": "the name of the author", "type": "String"}}, "output_params": {"author_ID": {"description": "the ID of the author", "type": "Integer"}}, "format": "Authorname2ID(author_name) -> author_ID"}, {"name": "BookTitle2ID", "Description": "This API is to convert book title to book ID.", "input_params": {"book_title": {"description": "the title of the book", "type": "String"}}, "output_params": {"book_ID": {"description": "the ID of the book", "type": "Integer"}}, "format": "BookTitle2ID(book_title) -> book_ID"}, {"name": "AddBookToAuthor", "Description": "This API is to add a book to an author's library.", "input_params": {"author_ID": {"description": "the ID of the author", "type": "Integer"}, "book_ID": {"description": "the ID of the book", "type": "Integer"}}, "output_params": {"library_status": {"description": "the status of adding the book to the library", "type": "String"}}, "format": "AddBookToAuthor(author_ID, book_ID) -> library_status"}], "Query": "Can you add the book 'To Kill a Mockingbird' to Harper Lee's library?", "Label": "AddBookToAuthor(author_ID=Authorname2ID(author_name='Harper Lee'), book_ID=BookTitle2ID(book_title='To Kill a Mockingbird'))", "Index": 560}, {"APIs": [{"name": "FlightCode2ID", "Description": "This API is to convert flight code to flight ID.", "input_params": {"Flight_code": {"description": "the flight code", "type": "String"}}, "output_params": {"Flight_ID": {"description": "the ID of the flight", "type": "Integer"}}, "format": "FlightCode2ID(Flight_code) -> Flight_ID"}, {"name": "DateConversion", "Description": "This API is to convert date string to date format.", "input_params": {"date": {"description": "the date string", "type": "String"}}, "output_params": {"date": {"description": "the converted date", "type": "Date"}}, "format": "DateConversion(date) -> date"}, {"name": "BookFlight", "Description": "This API is to book a flight.", "input_params": {"Flight_ID": {"description": "the ID of the flight", "type": "Integer"}, "date": {"description": "the date of the flight", "type": "Date"}}, "output_params": {"booking status": {"description": "the status of the booking", "type": "String"}}, "format": "BookFlight(Flight_ID, date) -> booking status"}], "Query": "Can you book a flight for LH 1112 on July 15th?", "Label": "BookFlight(Flight_ID=FlightCode2ID(Flight_code='LH 1112'), date=DateConversion(date='July 15th'))", "Index": 582}, {"APIs": [{"name": "Recipename2ID", "Description": "This API is to convert recipe name to recipe ID.", "input_params": {"recipe_name": {"description": "the name of the recipe", "type": "String"}}, "output_params": {"recipe_ID": {"description": "the ID of the recipe", "type": "Integer"}}, "format": "Recipename2ID(recipe_name) -> recipe_ID"}, {"name": "Ingredientname2ID", "Description": "This API is to convert ingredient name to ingredient ID.", "input_params": {"ingredient_name": {"description": "the name of the ingredient", "type": "String"}}, "output_params": {"ingredient_ID": {"description": "the ID of the ingredient", "type": "Integer"}}, "format": "Ingredientname2ID(ingredient_name) -> ingredient_ID"}, {"name": "GetRecipe", "Description": "This API is to get a recipe.", "input_params": {"recipe_ID": {"description": "the ID of the recipe", "type": "Integer"}, "ingredient_ID": {"description": "the ID of the ingredient", "type": "Integer"}}, "output_params": {"recipe": {"description": "the recipe details", "type": "String"}}, "format": "GetRecipe(Recipe_ID, Ingredient_ID) -> recipe"}], "Query": "May I have a recipe for 'Chocolate Cake' using 'Cocoa Powder'?", "Label": "GetRecipe(Recipe_ID=Recipename2ID(Recipe_name='Chocolate Cake'), Ingredient_ID=Ingredientname2ID(Ingredient_name='Cocoa Powder'))", "Index": 591}, {"APIs": [{"name": "Bookname2ID", "Description": "This API is to convert book name to book ID.", "input_params": {"book_name": {"description": "the name of the book", "type": "String"}}, "output_params": {"Book_ID": {"description": "the ID of the book", "type": "Integer"}}, "format": "Bookname2ID(book_name) -> Book_ID"}, {"name": "Authorname2ID", "Description": "This API is to convert author name to author ID.", "input_params": {"author_name": {"description": "the name of the author", "type": "String"}}, "output_params": {"Author_ID": {"description": "the ID of the author", "type": "Integer"}}, "format": "Authorname2ID(author_name) -> Author_ID"}, {"name": "ReserveBook", "Description": "This API is to reserve a book.", "input_params": {"Book_ID": {"description": "the ID of the book", "type": "Integer"}, "Author_ID": {"description": "the ID of the author", "type": "Integer"}, "date": {"description": "the date of reservation", "type": "Date"}}, "output_params": {"reservation_status": {"description": "the status of the reservation", "type": "String"}}, "format": "ReserveBook(Book_ID, Author_ID, date) -> reservation_status"}], "Query": "I need your help to reserve 'To Kill a Mockingbird' by 'Harper Lee' on 2nd November.", "Label": "ReserveBook(Book_ID=Bookname2ID(book_name='To Kill a Mockingbird'), Author_ID=Authorname2ID(author_name='Harper Lee'), date='2nd November')", "Index": 601}, {"APIs": [{"name": "Email2UserID", "Description": "This API is to convert email to user ID.", "input_params": {"email": {"description": "the email address of the user", "type": "String"}}, "output_params": {"User_ID": {"description": "the ID of the user", "type": "Integer"}}, "format": "Email2UserID(email) -> User_ID"}, {"name": "BookTitle2BookID", "Description": "This API is to convert book title to book ID.", "input_params": {"book_title": {"description": "the title of the book", "type": "String"}}, "output_params": {"Book_ID": {"description": "the ID of the book", "type": "Integer"}}, "format": "BookTitle2BookID(book_title) -> Book_ID"}, {"name": "BorrowBook", "Description": "This API is to borrow a book.", "input_params": {"User_ID": {"description": "the ID of the user", "type": "Integer"}, "Book_ID": {"description": "the ID of the book", "type": "Integer"}}, "output_params": {"borrow_status": {"description": "the status of the borrowing", "type": "String"}}, "format": "BorrowBook(User_ID, Book_ID) -> borrow_status"}], "Query": "Can I take 'The Catcher in the Rye' with my email id mike@gmail.com?", "Label": "BorrowBook(User_ID=Email2UserID(email='mike@gmail.com'), Book_ID=BookTitle2BookID(book_title='The Catcher in the Rye'))", "Index": 605}, {"APIs": [{"name": "Location2Coordinates", "Description": "This API is to convert location name to coordinates.", "input_params": {"location_name": {"description": "the name of the location", "type": "String"}}, "output_params": {"coordinates": {"description": "the coordinates of the location", "type": "String"}}, "format": "Location2Coordinates(location_name) -> coordinates"}, {"name": "WeatherInfo", "Description": "This API is to generate weather information.", "input_params": {"coordinates": {"description": "the coordinates of the location", "type": "String"}}, "output_params": {"weather_data": {"description": "the weather data for the location", "type": "Object"}}, "format": "WeatherInfo(coordinates) -> weather_data"}, {"name": "GenerateWeatherReport", "Description": "This API is to generate a complete weather report.", "input_params": {"weather_data": {"description": "the weather data for the location", "type": "Object"}}, "output_params": {"report": {"description": "the complete weather report", "type": "String"}}, "format": "GenerateWeatherReport(weather_data) -> report"}], "Query": "I want a complete weather report for Paris. Can you do it?", "Label": "GenerateWeatherReport(weather_data=WeatherInfo(coordinates=Location2Coordinates(location_name='Paris')))", "Index": 625}, {"APIs": [{"name": "Username2City", "Description": "This API is to convert user name to user's city.", "input_params": {"username": {"description": "the username of the person", "type": "String"}}, "output_params": {"city": {"description": "the city of the person", "type": "String"}}, "format": "Username2City(username) -> city"}, {"name": "City2Weather", "Description": "This API is to get the current weather conditions of a city.", "input_params": {"city": {"description": "the name of the city", "type": "String"}}, "output_params": {"weather": {"description": "the weather conditions of the city", "type": "String"}}, "format": "City2Weather(city) -> weather"}, {"name": "Weather2Advice", "Description": "This API is to provide guidance based on the current weather conditions.", "input_params": {"weather": {"description": "the weather conditions", "type": "String"}}, "output_params": {"advice": {"description": "the guidance based on the weather conditions", "type": "String"}}, "format": "Weather2Advice(weather) -> advice"}], "Query": "I'm known as 'Jack_Sparrow' in the system. Can you give me guidance according to the current climatic conditions of my locality?", "Label": "Weather2Advice(weather=City2Weather(city=Username2City(username='Jack_Sparrow')))", "Index": 641}, {"APIs": [{"name": "GetCinema", "Description": "This API is to get the cinema name based on the city and movie.", "input_params": {"city": {"description": "the city where the cinema is located", "type": "String"}, "movie": {"description": "the name of the movie", "type": "String"}}, "output_params": {"cinema_name": {"description": "the name of the cinema", "type": "String"}}, "format": "GetCinema(city, movie) -> cinema_name"}, {"name": "CheckTime", "Description": "This API is to check the show time of a movie in a specific cinema.", "input_params": {"cinema_name": {"description": "the name of the cinema", "type": "String"}, "movie": {"description": "the name of the movie", "type": "String"}}, "output_params": {"show_time": {"description": "the show time of the movie in the cinema", "type": "Time"}}, "format": "CheckTime(cinema_name, movie) -> show_time"}, {"name": "BookTicket", "Description": "This API is to book a ticket for a movie in a specific cinema.", "input_params": {"cinema_name": {"description": "the name of the cinema", "type": "String"}, "movie": {"description": "the name of the movie", "type": "String"}, "show_time": {"description": "the show time of the movie", "type": "Time"}}, "output_params": {"booking_status": {"description": "the status of the ticket booking", "type": "String"}}, "format": "BookTicket(cinema_name, movie, show_time) -> booking_status"}], "Query": "I am in Tokyo and I am interested in seeing the movie 'Spirited Away'. Can you assist me in reserving a ticket?", "Label": "BookTicket(cinema_name=GetCinema(city='Tokyo', movie='Spirited Away'), movie='Spirited Away', show_time=CheckTime(cinema_name=GetCinema(city='Tokyo', movie='Spirited Away'), movie='Spirited Away'))", "Index": 670}, {"APIs": [{"name": "UsernameToID", "Description": "This API is to convert user name to user ID.", "input_params": {"user_name": {"description": "the name of the user", "type": "String"}}, "output_params": {"user_ID": {"description": "the ID of the user", "type": "Integer"}}, "format": "UsernameToID(user_name) -> user_ID"}, {"name": "BooknameToID", "Description": "This API is to convert book name to book ID.", "input_params": {"book_name": {"description": "the name of the book", "type": "String"}}, "output_params": {"book_ID": {"description": "the ID of the book", "type": "Integer"}}, "format": "BooknameToID(book_name) -> book_ID"}, {"name": "BorrowBook", "Description": "This API is to borrow a book.", "input_params": {"user_ID": {"description": "the ID of the user", "type": "Integer"}, "book_ID": {"description": "the ID of the book", "type": "Integer"}, "return_date": {"description": "the date when the book should be returned", "type": "Date"}}, "output_params": {"borrow_status": {"description": "the status of the borrowing", "type": "String"}}, "format": "BorrowBook(user_ID, book_ID, return_date) -> borrow_status"}], "Query": "Is it possible for Mark to borrow 'To Kill a Mockingbird' until next Monday?", "Label": "BorrowBook(user_ID=UsernameToID(user_name='Mark'), book_ID=BooknameToID(book_name='To Kill a Mockingbird'), return_date='next Monday')", "Index": 675}, {"APIs": [{"name": "UsernameToID", "Description": "This API is to convert user name to user ID.", "input_params": {"user_name": {"description": "the name of the user", "type": "String"}}, "output_params": {"user_ID": {"description": "the ID of the user", "type": "Integer"}}, "format": "UsernameToID(user_name) -> user_ID"}, {"name": "BooknameToID", "Description": "This API is to convert book name to book ID.", "input_params": {"book_name": {"description": "the name of the book", "type": "String"}}, "output_params": {"book_ID": {"description": "the ID of the book", "type": "Integer"}}, "format": "BooknameToID(book_name) -> book_ID"}, {"name": "BorrowBook", "Description": "This API is to borrow a book.", "input_params": {"user_ID": {"description": "the ID of the user", "type": "Integer"}, "book_ID": {"description": "the ID of the book", "type": "Integer"}, "return_date": {"description": "the date when the book should be returned", "type": "Date"}}, "output_params": {"borrow_status": {"description": "the status of the borrowing", "type": "String"}}, "format": "BorrowBook(user_ID, book_ID, return_date) -> borrow_status"}], "Query": "Can Jessica borrow \"1984\" until the end of this year?", "Label": "BorrowBook(user_ID=UsernameToID(user_name='Jessica'), book_ID=BooknameToID(book_name='1984'), return_date='end of this year')", "Index": 676}, {"APIs": [{"name": "CitynameToID", "Description": "This API is to convert city name to city ID.", "input_params": {"city_name": {"description": "the name of the city", "type": "String"}}, "output_params": {"city_ID": {"description": "the ID of the city", "type": "Integer"}}, "format": "CitynameToID(city_name) -> city_ID"}, {"name": "HotelnameToID", "Description": "This API is to convert hotel name to hotel ID.", "input_params": {"hotel_name": {"description": "the name of the hotel", "type": "String"}}, "output_params": {"hotel_ID": {"description": "the ID of the hotel", "type": "Integer"}}, "format": "HotelnameToID(hotel_name) -> hotel_ID"}, {"name": "BookRoom", "Description": "This API is to book a room in a hotel.", "input_params": {"city_ID": {"description": "the ID of the city", "type": "Integer"}, "hotel_ID": {"description": "the ID of the hotel", "type": "Integer"}, "check_in_date": {"description": "the check-in date", "type": "Date"}, "check_out_date": {"description": "the check-out date", "type": "Date"}}, "output_params": {"booking status": {"description": "the status of the booking", "type": "String"}}, "format": "BookRoom(city_ID, hotel_ID, check_in_date, check_out_date) -> booking status"}], "Query": "Can you reserve a room in 'Sheraton' hotel in 'Boston' from 10th October to 15th October?", "Label": "BookRoom(city_ID=CitynameToID(city_name='Boston'), hotel_ID=HotelnameToID(hotel_name='Sheraton'), check_in_date='10th October', check_out_date='15th October')", "Index": 696}, {"APIs": [{"name": "UserEmailToID", "Description": "This API is to convert user email address to user ID.", "input_params": {"email_address": {"description": "the email address of the user", "type": "String"}}, "output_params": {"user_ID": {"description": "the ID of the user", "type": "Integer"}}, "format": "UserEmailToID(email_address) -> user_ID"}, {"name": "ISBNToBookname", "Description": "This API is to convert ISBN to book name.", "input_params": {"ISBN": {"description": "the ISBN of the book", "type": "String"}}, "output_params": {"book_name": {"description": "the name of the book", "type": "String"}}, "format": "ISBNToBookname(ISBN) -> book_name"}, {"name": "ReturnBook", "Description": "This API is to return a book for a user.", "input_params": {"user_ID": {"description": "the ID of the user", "type": "Integer"}, "book_name": {"description": "the name of the book", "type": "String"}}, "output_params": {"return_status": {"description": "the status of the book return", "type": "String"}}, "format": "ReturnBook(user_ID, book_name) -> return_status"}], "Query": "Can you return the book with ISBN 978-2-34-567890-1 for the user lisa.brown@example.com?", "Label": "ReturnBook(user_ID=UserEmailToID(email_address='lisa.brown@example.com'), book_name=ISBNToBookname(ISBN='978-2-34-567890-1'))", "Index": 711}, {"APIs": [{"name": "UserEmailToID", "Description": "This API is to convert user email address to user ID.", "input_params": {"email_address": {"description": "the email address of the user", "type": "String"}}, "output_params": {"user_ID": {"description": "the ID of the user", "type": "Integer"}}, "format": "UserEmailToID(email_address) -> user_ID"}, {"name": "ProductToID", "Description": "This API is to convert product name to product ID.", "input_params": {"product_name": {"description": "the name of the product", "type": "String"}}, "output_params": {"product_ID": {"description": "the ID of the product", "type": "Integer"}}, "format": "ProductToID(product_name) -> product_ID"}, {"name": "PurchaseProduct", "Description": "This API is to purchase a product for a user.", "input_params": {"user_ID": {"description": "the ID of the user", "type": "Integer"}, "product_ID": {"description": "the ID of the product", "type": "Integer"}}, "output_params": {"purchase_status": {"description": "the status of the purchase", "type": "String"}}, "format": "PurchaseProduct(user_ID, product_ID) -> purchase_status"}], "Query": "Can you purchase the product 'Google Pixel 6' for the user with email mike@example.com?", "Label": "PurchaseProduct(user_ID=UserEmailToID(email_address='mike@example.com'), product_ID=ProductToID(product_name='Google Pixel 6'))", "Index": 719}, {"APIs": [{"name": "Watchlistname2ID", "Description": "This API is to convert watchlist name to watchlist ID.", "input_params": {"watchlist_name": {"description": "the name of the watchlist", "type": "String"}}, "output_params": {"watchlist_ID": {"description": "the ID of the watchlist", "type": "Integer"}}, "format": "Watchlistname2ID(watchlist_name) -> watchlist_ID"}, {"name": "Moviename2ID", "Description": "This API is to convert movie name to movie ID.", "input_params": {"movie_name": {"description": "the name of the movie", "type": "String"}}, "output_params": {"movie_ID": {"description": "the ID of the movie", "type": "Integer"}}, "format": "Moviename2ID(movie_name) -> movie_ID"}, {"name": "AddMovieToWatchlist", "Description": "This API is to add a movie to a watchlist.", "input_params": {"watchlist_ID": {"description": "the ID of the watchlist", "type": "Integer"}, "movie_ID": {"description": "the ID of the movie", "type": "Integer"}}, "output_params": {"add_status": {"description": "the status of adding the movie to the watchlist", "type": "String"}}, "format": "AddMovieToWatchlist(watchlist_ID, movie_ID) -> add_status"}], "Query": "Can you add the movie 'Interstellar' to Sarah's watchlist 'Sci-fi Movies' with her username sarah_sci?", "Label": "AddMovieToWatchlist(watchlist_ID=Watchlistname2ID(watchlist_name='Sci-fi Movies'), movie_ID=Moviename2ID(movie_name='Interstellar'))", "Index": 727}, {"APIs": [{"name": "ReadingListname2ID", "Description": "This API is to convert reading list name to reading list ID.", "input_params": {"readinglist_name": {"description": "the name of the reading list", "type": "String"}}, "output_params": {"readinglist_ID": {"description": "the ID of the reading list", "type": "Integer"}}, "format": "ReadingListname2ID(readinglist_name) -> readinglist_ID"}, {"name": "BookTitle2ID", "Description": "This API is to convert book title to book ID.", "input_params": {"book_title": {"description": "the title of the book", "type": "String"}}, "output_params": {"book_ID": {"description": "the ID of the book", "type": "Integer"}}, "format": "BookTitle2ID(book_title) -> book_ID"}, {"name": "AddBookToReadingList", "Description": "This API is to add a book to a reading list.", "input_params": {"readinglist_ID": {"description": "the ID of the reading list", "type": "Integer"}, "book_ID": {"description": "the ID of the book", "type": "Integer"}}, "output_params": {"status": {"description": "the status of adding the book to the reading list", "type": "String"}}, "format": "AddBookToReadingList(readinglist_ID, book_ID) -> status"}], "Query": "Could you add the book 'The Great Gatsby' to John's reading list 'Modern Classics' with his username john_reads ?", "Label": "AddBookToReadingList(readinglist_ID=ReadingListname2ID(readinglist_name='Modern Classics'), book_ID=BookTitle2ID(book_title='The Great Gatsby'))", "Index": 734}, {"APIs": [{"name": "Address2Coordinates", "Description": "This API is to convert address to coordinates.", "input_params": {"address": {"description": "the address of the location", "type": "String"}}, "output_params": {"coordinates": {"description": "the coordinates of the location", "type": "String"}}, "format": "Address2Coordinates(address) -> coordinates"}, {"name": "Restaurantname2ID", "Description": "This API is to convert restaurant name to restaurant ID.", "input_params": {"restaurant_name": {"description": "the name of the restaurant", "type": "String"}}, "output_params": {"restaurant_id": {"description": "the ID of the restaurant", "type": "Integer"}}, "format": "Restaurantname2ID(restaurant_name) -> restaurant_id"}, {"name": "BookTable", "Description": "This API is to book a table at a restaurant.", "input_params": {"coordinates": {"description": "the coordinates of the location", "type": "String"}, "restaurant_id": {"description": "the ID of the restaurant", "type": "Integer"}, "date": {"description": "the date of the booking", "type": "Date"}, "time": {"description": "the time of the booking", "type": "Time"}}, "output_params": {"booking_status": {"description": "the status of the booking", "type": "String"}}, "format": "BookTable(coordinates, restaurant_id, date, time) -> booking_status"}], "Query": "Can you book a table for me at 'Red Lobster' in 'Las Vegas Strip, Nevada' on May 5th at 6 pm?", "Label": "BookTable(coordinates=Address2Coordinates(address='Las Vegas Strip, Nevada'), restaurant_id=Restaurantname2ID(restaurant_name='Red Lobster'), date='May 5th', time='6 pm')", "Index": 748}, {"APIs": [{"name": "ISBN2Book", "Description": "This API is to convert ISBN to book title.", "input_params": {"isbn": {"description": "the ISBN of the book", "type": "String"}}, "output_params": {"book_title": {"description": "the title of the book", "type": "String"}}, "format": "ISBN2Book(isbn) -> book_title"}, {"name": "Book2Author", "Description": "This API is to convert book title to author name.", "input_params": {"book_title": {"description": "the title of the book", "type": "String"}}, "output_params": {"author_name": {"description": "the name of the author", "type": "String"}}, "format": "Book2Author(book_title) -> author_name"}, {"name": "ScheduleDiscussion", "Description": "This API is to schedule a book discussion.", "input_params": {"user_ID": {"description": "the ID of the user", "type": "String"}, "author_name": {"description": "the name of the author", "type": "String"}, "date_time": {"description": "the date and time of the discussion", "type": "String"}}, "output_params": {"scheduling_status": {"description": "the status of the scheduling", "type": "String"}}, "format": "ScheduleDiscussion(user_ID, author_name, date_time) -> scheduling_status"}], "Query": "I, user789, would like to have a book discussion with the author of the book with ISBN 978-3-16-148410-0 on 25th of October at 6pm.", "Label": "ScheduleDiscussion(user_ID='user789', author_name=Book2Author(book_title=ISBN2Book(isbn='978-3-16-148410-0')), date_time='25th of October at 6pm')", "Index": 753}, {"APIs": [{"name": "LocateCity", "Description": "This API is to locate the coordinates of a city.", "input_params": {"city": {"description": "the name of the city", "type": "String"}}, "output_params": {"coordinates": {"description": "the coordinates of the city", "type": "String"}}, "format": "LocateCity(city) -> coordinates"}, {"name": "WeatherForecast", "Description": "This API is to get the weather forecast based on coordinates.", "input_params": {"coordinates": {"description": "the coordinates of the city", "type": "String"}}, "output_params": {"weather": {"description": "the weather forecast", "type": "String"}}, "format": "WeatherForecast(coordinates) -> weather"}, {"name": "GetClothingAdvice", "Description": "This API is to get clothing advice based on weather forecast.", "input_params": {"weather": {"description": "the weather forecast", "type": "String"}}, "output_params": {"clothing_advice": {"description": "the clothing advice", "type": "String"}}, "format": "GetClothingAdvice(weather) -> clothing_advice"}], "Query": "What should I wear in New York this weekend?", "Label": "GetClothingAdvice(weather=WeatherForecast(coordinates=LocateCity(city='New York')))", "Index": 759}, {"APIs": [{"name": "Cityname2WeatherCode", "Description": "This API is to convert city name to weather code.", "input_params": {"city_name": {"description": "the name of the city", "type": "String"}}, "output_params": {"weather_code": {"description": "the weather code of the city", "type": "String"}}, "format": "Cityname2WeatherCode(city_name) -> weather_code"}, {"name": "WeatherCode2Forecast", "Description": "This API is to get weather forecast based on weather code and date.", "input_params": {"weather_code": {"description": "the weather code of the city", "type": "String"}, "date": {"description": "the date for weather forecast", "type": "Date"}}, "output_params": {"weather_forecast": {"description": "the weather forecast for the given date and weather code", "type": "String"}}, "format": "WeatherCode2Forecast(weather_code, date) -> weather_forecast"}, {"name": "PlanTrip", "Description": "This API is to plan a trip to a specific city on a specific date.", "input_params": {"city_name": {"description": "the name of the city", "type": "String"}, "date": {"description": "the date for the trip", "type": "Date"}, "weather_forecast": {"description": "the weather forecast for the trip", "type": "String"}}, "output_params": {"trip_plan": {"description": "the plan for the trip to the given city on the given date", "type": "String"}}, "format": "PlanTrip(city_name, date, weather_forecast) -> trip_plan"}], "Query": "Can you plan a trip for me to Tokyo on September 15?", "Label": "PlanTrip(city_name='Tokyo', date='September 15', weather_forecast=WeatherCode2Forecast(weather_code=Cityname2WeatherCode(city_name='Tokyo'), date='September 15'))", "Index": 774}, {"APIs": [{"name": "FindMovie", "Description": "This API is to find a movie based on genre.", "input_params": {"genre": {"description": "the genre of the movie", "type": "String"}}, "output_params": {"movie_title": {"description": "the title of the movie", "type": "String"}}, "format": "FindMovie(genre) -> movie_title"}, {"name": "GetShowtimes", "Description": "This API is to get the showtimes of a movie in a specific city.", "input_params": {"movie_title": {"description": "the title of the movie", "type": "String"}, "city": {"description": "the city where the showtimes are searched", "type": "String"}}, "output_params": {"showtime": {"description": "the showtime of the movie in the city", "type": "Time"}}, "format": "GetShowtimes(movie_title, city) -> showtime"}, {"name": "ReserveTickets", "Description": "This API is to reserve tickets for a showtime.", "input_params": {"showtime": {"description": "the showtime of the movie", "type": "Time"}, "number_of_tickets": {"description": "the number of tickets to be reserved", "type": "Integer"}}, "output_params": {"reservation_status": {"description": "the status of the ticket reservation", "type": "String"}}, "format": "ReserveTickets(showtime, number_of_tickets) -> reservation_status"}], "Query": "Can you find me a romance movie and reserve four tickets for its earliest showtime in San Francisco?", "Label": "ReserveTickets(showtime=GetShowtimes(movie_title=FindMovie(genre='romance'), city='San Francisco'), number_of_tickets=4)", "Index": 805}, {"APIs": [{"name": "FindNearestBookStore", "Description": "This API is to find the nearest bookstore in a given city.", "input_params": {"city": {"description": "the name of the city", "type": "String"}}, "output_params": {"store_name": {"description": "the name of the bookstore", "type": "String"}}, "format": "FindNearestBookStore(city) -> store_name"}, {"name": "SearchBook", "Description": "This API is to search for a book in a specific bookstore.", "input_params": {"store_name": {"description": "the name of the bookstore", "type": "String"}, "book_title": {"description": "the title of the book", "type": "String"}}, "output_params": {"book_id": {"description": "the ID of the book", "type": "Integer"}}, "format": "SearchBook(store_name, book_title) -> book_id"}, {"name": "CheckAvailability", "Description": "This API is to check the availability of a book in stock.", "input_params": {"book_id": {"description": "the ID of the book", "type": "Integer"}}, "output_params": {"availability_status": {"description": "the availability status of the book", "type": "String"}}, "format": "CheckAvailability(book_id) -> availability_status"}], "Query": "Can you assist me in verifying if 'The Catcher in the Rye' is in stock at the closest bookstore in Boston?", "Label": "CheckAvailability(book_id=SearchBook(store_name=FindNearestBookStore(city='Boston'), book_title='The Catcher in the Rye'))", "Index": 821}, {"APIs": [{"name": "GetLocalTheater", "Description": "This API is to get the nearest theater in a specific city.", "input_params": {"city": {"description": "the name of the city", "type": "String"}}, "output_params": {"theater_name": {"description": "the name of the theater", "type": "String"}}, "format": "GetLocalTheater(city) -> theater_name"}, {"name": "GetCurrentPlays", "Description": "This API is to get the currently performed plays at a specific theater.", "input_params": {"theater_name": {"description": "the name of the theater", "type": "String"}}, "output_params": {"play_name": {"description": "the name of the play", "type": "String"}}, "format": "GetCurrentPlays(theater_name) -> play_name"}, {"name": "GetPlayReviews", "Description": "This API is to get the reviews for a specific play.", "input_params": {"play_name": {"description": "the name of the play", "type": "String"}}, "output_params": {"reviews": {"description": "the reviews for the play", "type": "List"}}, "format": "GetPlayReviews(play_name) -> reviews"}], "Query": "Can you find the reviews for the play currently being performed at the nearest theater in London?", "Label": "GetPlayReviews(play_name=GetCurrentPlays(theater_name=GetLocalTheater(city='London')))", "Index": 823}, {"APIs": [{"name": "GetLocalMusicStore", "Description": "This API is to get the nearest music store in a specific city.", "input_params": {"city": {"description": "the name of the city", "type": "String"}}, "output_params": {"store_name": {"description": "the name of the music store", "type": "String"}}, "format": "GetLocalMusicStore(city) -> store_name"}, {"name": "GetCurrentAlbums", "Description": "This API is to get the currently playing albums at a music store.", "input_params": {"store_name": {"description": "the name of the music store", "type": "String"}}, "output_params": {"album_name": {"description": "the name of the album", "type": "String"}}, "format": "GetCurrentAlbums(store_name) -> album_name"}, {"name": "GetAlbumReviews", "Description": "This API is to get the reviews for a specific album.", "input_params": {"album_name": {"description": "the name of the album", "type": "String"}}, "output_params": {"reviews": {"description": "the reviews for the album", "type": "List of Strings"}}, "format": "GetAlbumReviews(album_name) -> reviews"}], "Query": "Can you find the reviews for the album currently being played at the nearest music store in Toronto?", "Label": "GetAlbumReviews(album_name=GetCurrentAlbums(store_name=GetLocalMusicStore(city='Toronto')))", "Index": 824}, {"APIs": [{"name": "FindRestaurant", "Description": "This API is to find a restaurant based on the city and cuisine type.", "input_params": {"city": {"description": "the city where the restaurant is located", "type": "String"}, "cuisine_type": {"description": "the type of cuisine", "type": "String"}}, "output_params": {"restaurant_id": {"description": "the ID of the restaurant", "type": "Integer"}}, "format": "FindRestaurant(city, cuisine_type) -> restaurant_id"}, {"name": "GetRestaurantMenu", "Description": "This API is to get the menu of a restaurant based on the restaurant ID.", "input_params": {"restaurant_id": {"description": "the ID of the restaurant", "type": "Integer"}}, "output_params": {"menu_id": {"description": "the ID of the menu", "type": "Integer"}}, "format": "GetRestaurantMenu(restaurant_id) -> menu_id"}, {"name": "OrderFood", "Description": "This API is to order food from a menu based on the menu ID, dish name, and quantity.", "input_params": {"menu_id": {"description": "the ID of the menu", "type": "Integer"}, "dish_name": {"description": "the name of the dish", "type": "String"}, "quantity": {"description": "the quantity of the dish", "type": "Integer"}}, "output_params": {"order_status": {"description": "the status of the order", "type": "String"}}, "format": "OrderFood(menu_id, dish_name, quantity) -> order_status"}], "Query": "Please get me 6 dumplings from the best Chinese restaurant in Seattle.", "Label": "OrderFood(menu_id=GetRestaurantMenu(restaurant_id=FindRestaurant(city='Seattle', cuisine_type='Chinese')), dish_name='Dumpling', quantity=6)", "Index": 830}, {"APIs": [{"name": "GetStockPrice", "Description": "This API is to get the current market price of a stock.", "input_params": {"stockId": {"description": "the ID of the stock", "type": "String"}}, "output_params": {"currentPrice": {"description": "the current market price of the stock", "type": "Float"}}, "format": "GetStockPrice(stockId) -> currentPrice"}, {"name": "PredictFutureStockPrice", "Description": "This API is to predict the future market price of a stock.", "input_params": {"stockId": {"description": "the ID of the stock", "type": "String"}, "currentPrice": {"description": "the current market price of the stock", "type": "Float"}}, "output_params": {"futurePrice": {"description": "the predicted future market price of the stock", "type": "Float"}}, "format": "PredictFutureStockPrice(stockId, currentPrice) -> futurePrice"}, {"name": "SuggestStockAction", "Description": "This API is to suggest an action for a stock based on its current and predicted future market prices.", "input_params": {"stockId": {"description": "the ID of the stock", "type": "String"}, "currentPrice": {"description": "the current market price of the stock", "type": "Float"}, "futurePrice": {"description": "the predicted future market price of the stock", "type": "Float"}}, "output_params": {"suggestedAction": {"description": "the suggested action for the stock (augment holdings, relinquish, or hold steady)", "type": "String"}}, "format": "SuggestStockAction(stockId, currentPrice, futurePrice) -> suggestedAction"}], "Query": "I own shares in Netflix. Considering its current market value, should I augment my holdings, relinquish, or hold steady?", "Label": "SuggestStockAction(stockId='Netflix', currentPrice=GetStockPrice(stockId='Netflix'), futurePrice=PredictFutureStockPrice(stockId='Netflix', currentPrice=GetStockPrice(stockId='Netflix')))", "Index": 898}, {"APIs": [{"name": "TrackSpending", "Description": "This API is to track the spending of a user.", "input_params": {"Username": {"description": "the username of the user", "type": "String"}}, "output_params": {"SpendingReport": {"description": "the spending report of the user", "type": "Object"}}, "format": "TrackSpending(Username) -> SpendingReport"}, {"name": "CalculateSavings", "Description": "This API is to calculate the savings based on the spending report.", "input_params": {"SpendingReport": {"description": "the spending report of the user", "type": "Object"}}, "output_params": {"Savings": {"description": "the calculated savings", "type": "Float"}}, "format": "CalculateSavings(SpendingReport) -> Savings"}, {"name": "SuggestInvestment", "Description": "This API is to suggest where to put the savings based on the expenditures.", "input_params": {"Savings": {"description": "the calculated savings", "type": "Float"}}, "output_params": {"InvestmentOptions": {"description": "the suggested investment options", "type": "List"}}, "format": "SuggestInvestment(Savings) -> InvestmentOptions"}], "Query": "My name is Sarah. Can you suggest where I can put my savings based on my expenditures?", "Label": "SuggestInvestment(Savings=CalculateSavings(SpendingReport=TrackSpending(Username='Sarah')))", "Index": 910}, {"APIs": [{"name": "FindRestaurant", "Description": "This API is to find restaurants based on cuisine and location.", "input_params": {"cuisine": {"description": "the type of cuisine", "type": "String"}, "location": {"description": "the location of the restaurant", "type": "String"}}, "output_params": {"restaurant": {"description": "the name of the restaurant", "type": "String"}}, "format": "FindRestaurant(cuisine, location) -> restaurant"}, {"name": "GetMenu", "Description": "This API is to get the menu of a restaurant.", "input_params": {"restaurant": {"description": "the name of the restaurant", "type": "String"}}, "output_params": {"menu": {"description": "the menu of the restaurant", "type": "List"}}, "format": "GetMenu(restaurant) -> menu"}, {"name": "RecommendDish", "Description": "This API is to recommend a dish based on dietary restrictions.", "input_params": {"menu": {"description": "the menu of the restaurant", "type": "List"}, "restriction": {"description": "the dietary restriction", "type": "String"}}, "output_params": {"dish": {"description": "the recommended dish", "type": "String"}}, "format": "RecommendDish(menu, restriction) -> dish"}], "Query": "I am in Los Angeles and I'm craving Chinese food but I am gluten intolerant. Can you suggest something for me?", "Label": "RecommendDish(GetMenu(FindRestaurant('Chinese', 'Los Angeles')), 'gluten intolerant')", "Index": 920}, {"APIs": [{"name": "FindRestaurant", "Description": "This API is to find a restaurant based on city and cuisine.", "input_params": {"city": {"description": "the city where the restaurant is located", "type": "String"}, "cuisine": {"description": "the cuisine type of the restaurant", "type": "String"}}, "output_params": {"restaurant_name": {"description": "the name of the restaurant", "type": "String"}}, "format": "FindRestaurant(city, cuisine) -> restaurant_name"}, {"name": "GetMenu", "Description": "This API is to get the menu of a restaurant.", "input_params": {"restaurant_name": {"description": "the name of the restaurant", "type": "String"}}, "output_params": {"menu": {"description": "the menu of the restaurant", "type": "List of dishes"}}, "format": "GetMenu(restaurant_name) -> menu"}, {"name": "SuggestFood", "Description": "This API is to suggest a dish based on menu and dietary preferences.", "input_params": {"menu": {"description": "the menu of the restaurant", "type": "List of dishes"}, "dietary_preferences": {"description": "the dietary preferences of the user", "type": "String"}}, "output_params": {"suggested_dish": {"description": "the suggested dish based on dietary preferences", "type": "String"}}, "format": "SuggestFood(menu, dietary_preferences) -> suggested_dish"}], "Query": "Can you provide a lactose-free dish from a Chinese restaurant in Houston?", "Label": "SuggestFood(menu=GetMenu(restaurant_name=FindRestaurant(city='Houston', cuisine='Chinese')), dietary_preferences='lactose-free')", "Index": 933}, {"APIs": [{"name": "MovieSearch", "Description": "This API is to search for a movie by its title.", "input_params": {"movie_title": {"description": "the title of the movie", "type": "String"}}, "output_params": {"movie_id": {"description": "the ID of the movie", "type": "Integer"}}, "format": "MovieSearch(movie_title) -> movie_id"}, {"name": "MovieRatings", "Description": "This API is to get the ratings of a movie.", "input_params": {"movie_id": {"description": "the ID of the movie", "type": "Integer"}}, "output_params": {"ratingScores": {"description": "the ratings of the movie", "type": "List of Float"}}, "format": "MovieRatings(movie_id) -> ratingScores"}, {"name": "AverageRating", "Description": "This API is to calculate the average rating of a movie.", "input_params": {"ratingScores": {"description": "the ratings of the movie", "type": "List of Float"}}, "output_params": {"average_rating": {"description": "the average rating of the movie", "type": "Float"}}, "format": "AverageRating(ratingScores) -> average_rating"}], "Query": "What is the average rating for the movie 'The Dark Knight'?", "Label": "AverageRating(ratingScores=MovieRatings(movie_id=MovieSearch(movie_title='The Dark Knight')))", "Index": 945}, {"APIs": [{"name": "MovieLookup", "Description": "This API is to lookup the movie ID based on the movie name.", "input_params": {"movie_name": {"description": "the name of the movie", "type": "String"}}, "output_params": {"movie_id": {"description": "the ID of the movie", "type": "Integer"}}, "format": "MovieLookup(movie_name) -> movie_id"}, {"name": "MovieRating", "Description": "This API is to get the rating scores of a movie.", "input_params": {"movie_id": {"description": "the ID of the movie", "type": "Integer"}}, "output_params": {"rating_scores": {"description": "the rating scores of the movie", "type": "List"}}, "format": "MovieRating(movie_id) -> rating_scores"}, {"name": "HighestRating", "Description": "This API is to get the highest rating score from a list of rating scores.", "input_params": {"rating_scores": {"description": "the rating scores of the movie", "type": "List"}}, "output_params": {"highest_rating": {"description": "the highest rating score", "type": "Float"}}, "format": "HighestRating(rating_scores) -> highest_rating"}], "Query": "What is the highest rating score for the movie 'Titanic'?", "Label": "HighestRating(rating_scores=MovieRating(movie_id=MovieLookup(movie_name='Titanic')))", "Index": 952}, {"APIs": [{"name": "FlightSearch", "Description": "This API is to search for flights based on destination and date.", "input_params": {"destination": {"description": "the destination of the flight", "type": "String"}, "date": {"description": "the date of the flight", "type": "Date"}}, "output_params": {"flight_id": {"description": "the ID of the flight", "type": "Integer"}}, "format": "FlightSearch(destination, date) -> flight_id"}, {"name": "SeatSelection", "Description": "This API is to select seats for a flight.", "input_params": {"flight_id": {"description": "the ID of the flight", "type": "Integer"}}, "output_params": {"seats": {"description": "the available seats for the flight", "type": "List"}}, "format": "SeatSelection(flight_id) -> seats"}, {"name": "UpgradeAvailability", "Description": "This API is to check the availability of seat upgrades.", "input_params": {"seats": {"description": "the available seats for the flight", "type": "List"}}, "output_params": {"upgrade_status": {"description": "the availability of seat upgrades", "type": "String"}}, "format": "UpgradeAvailability(seats) -> upgrade_status"}], "Query": "Can I upgrade my seat for the flight to Paris on 30th November?", "Label": "UpgradeAvailability(seats=SeatSelection(flight_id=FlightSearch(destination='Paris', date='30th November')))", "Index": 959}, {"APIs": [{"name": "FlightSearch", "Description": "This API is to search for flights based on departure and arrival cities.", "input_params": {"departure_city": {"description": "the city of departure", "type": "String"}, "arrival_city": {"description": "the city of arrival", "type": "String"}}, "output_params": {"flight_id": {"description": "the ID of the flight", "type": "Integer"}}, "format": "FlightSearch(departure_city, arrival_city) -> flight_id"}, {"name": "SeatClassAvailability", "Description": "This API is to check the availability of seat classes for a flight.", "input_params": {"flight_id": {"description": "the ID of the flight", "type": "Integer"}}, "output_params": {"seat_classes": {"description": "the available seat classes", "type": "List"}}, "format": "SeatClassAvailability(flight_id) -> seat_classes"}, {"name": "BestSeatClass", "Description": "This API is to find the best seat class for a flight.", "input_params": {"seat_classes": {"description": "the available seat classes", "type": "List"}}, "output_params": {"best_seat_class": {"description": "the best seat class for the flight", "type": "String"}}, "format": "BestSeatClass(seat_classes) -> best_seat_class"}], "Query": "Can you find the premium seat class for a flight from Singapore to San Francisco?", "Label": "BestSeatClass(seat_classes=SeatClassAvailability(flight_id=FlightSearch(departure_city='Singapore', arrival_city='San Francisco')))", "Index": 961}, {"APIs": [{"name": "BookSearch", "Description": "This API is to search for a book by title and author.", "input_params": {"title": {"description": "the title of the book", "type": "String"}, "author": {"description": "the author of the book", "type": "String"}}, "output_params": {"book_id": {"description": "the ID of the book", "type": "Integer"}}, "format": "BookSearch(title, author) -> book_id"}, {"name": "BookStoreAvailability", "Description": "This API is to check the availability of a book in different bookstores.", "input_params": {"book_id": {"description": "the ID of the book", "type": "Integer"}}, "output_params": {"store_ids": {"description": "the IDs of the bookstores where the book is available", "type": "List of Integer"}}, "format": "BookStoreAvailability(book_id) -> store_ids"}, {"name": "NearestStore", "Description": "This API is to locate the nearest bookstore where a specific book is available.", "input_params": {"store_ids": {"description": "the IDs of the bookstores where the book is available", "type": "List of Integer"}, "user_location": {"description": "the location of the user", "type": "String"}}, "output_params": {"nearest_store": {"description": "the ID of the nearest bookstore", "type": "Integer"}}, "format": "NearestStore(store_ids, user_location) -> nearest_store"}], "Query": "Could you locate the nearest bookstore where I could buy 'To Kill a Mockingbird' by Harper Lee in New York?", "Label": "NearestStore(store_ids=BookStoreAvailability(book_id=BookSearch(title='To Kill a Mockingbird', author='Harper Lee')), user_location='New York')", "Index": 967}, {"APIs": [{"name": "ItemPrice", "Description": "This API is to get the price of an item.", "input_params": {"item_id": {"description": "the ID of the item", "type": "Integer"}}, "output_params": {"price": {"description": "the price of the item", "type": "Float"}}, "format": "ItemPrice(item_id) -> price"}, {"name": "CurrencyConversion", "Description": "This API is to convert currency from one type to another.", "input_params": {"from_currency": {"description": "the currency to convert from", "type": "String"}, "to_currency": {"description": "the currency to convert to", "type": "String"}}, "output_params": {"conversion_rate": {"description": "the conversion rate between the two currencies", "type": "Float"}}, "format": "CurrencyConversion(from_currency, to_currency) -> conversion_rate"}, {"name": "CalculatePrice", "Description": "This API is to calculate the price of an item in a different currency.", "input_params": {"price": {"description": "the price of the item", "type": "Float"}, "conversion_rate": {"description": "the conversion rate between the two currencies", "type": "Float"}}, "output_params": {"converted_price": {"description": "the price of the item in the new currency", "type": "Float"}}, "format": "CalculatePrice(price, conversion_rate) -> converted_price"}], "Query": "How much would item ID: 999 cost in Japanese Yen if its price is in Euros?", "Label": "CalculatePrice(price=ItemPrice(item_id='999'), conversion_rate=CurrencyConversion(from_currency='EUR', to_currency='JPY'))", "Index": 971}, {"APIs": [{"name": "BookInfo", "Description": "This API is to get the details of a book.", "input_params": {"title": {"description": "the title of the book", "type": "String"}}, "output_params": {"bookdetails": {"description": "the details of the book", "type": "Object"}}, "format": "BookInfo(title) -> bookdetails"}, {"name": "AuthorBio", "Description": "This API is to get the biography of an author.", "input_params": {"author": {"description": "the name of the author", "type": "String"}}, "output_params": {"authorData": {"description": "the biography of the author", "type": "Object"}}, "format": "AuthorBio(author) -> authorData"}, {"name": "ReviewGenerator", "Description": "This API is to generate a review for a book using book details and author biography.", "input_params": {"bookdetails": {"description": "the details of the book", "type": "Object"}, "authorData": {"description": "the biography of the author", "type": "Object"}}, "output_params": {"review": {"description": "the generated review for the book", "type": "String"}}, "format": "ReviewGenerator(bookdetails, authorData) -> review"}], "Query": "Can you generate a review for the book 'Pride and Prejudice' by Jane Austen?", "Label": "ReviewGenerator(bookdetails = BookInfo(title = 'Pride and Prejudice'), authorData = AuthorBio(author = 'Jane Austen'))", "Index": 1011}, {"APIs": [{"name": "GetMovie", "Description": "This API is to get information about a movie.", "input_params": {"show": {"description": "the name of the movie", "type": "String"}}, "output_params": {"movie_info": {"description": "information about the movie", "type": "String"}}, "format": "GetMovie(show) -> movie_info"}, {"name": "RestaurantRecommendation", "Description": "This API is to recommend a restaurant.", "input_params": {"venue": {"description": "the name of the movie theater", "type": "String"}}, "output_params": {"restaurant_name": {"description": "the name of the recommended restaurant", "type": "String"}}, "format": "RestaurantRecommendation(venue) -> restaurant_name"}, {"name": "BookTable", "Description": "This API is to make a reservation at a restaurant.", "input_params": {"restaurant": {"description": "the name of the restaurant", "type": "String"}, "no_of_persons": {"description": "the number of persons for the reservation", "type": "Integer"}, "time": {"description": "the time of the reservation", "type": "Time"}}, "output_params": {"reservation_status": {"description": "the status of the reservation", "type": "String"}}, "format": "BookTable(restaurant, no_of_persons, time) -> reservation_status"}], "Query": "We are eager to watch the new Harry Potter movie tomorrow night. Can you recommend a restaurant for dinner and make a reservation for 8 at 6 PM?", "Label": "BookTable(restaurant=RestaurantRecommendation(venue=GetMovie(show='Harry Potter')), no_of_persons='8', time='6 PM')", "Index": 1037}, {"APIs": [{"name": "CarInfo", "Description": "This API is to get information about a car.", "input_params": {"car_name": {"description": "the name of the car", "type": "String"}, "country": {"description": "the country where the car is being purchased", "type": "String"}}, "output_params": {"car_info": {"description": "the information about the car", "type": "String"}}, "format": "CarInfo(car_name, country) -> car_info"}, {"name": "CountryTaxRate", "Description": "This API is to get the tax rate of a country.", "input_params": {"country": {"description": "the country for which the tax rate is required", "type": "String"}}, "output_params": {"tax_rate": {"description": "the tax rate of the country", "type": "Float"}}, "format": "CountryTaxRate(country) -> tax_rate"}, {"name": "TaxCostCalculator", "Description": "This API is to calculate the tax cost for a car.", "input_params": {"price": {"description": "the price of the car", "type": "Float"}, "tax_rate": {"description": "the tax rate applicable for the car", "type": "Float"}}, "output_params": {"tax_cost": {"description": "the tax cost for the car", "type": "Float"}}, "format": "TaxCostCalculator(price, tax_rate) -> tax_cost"}], "Query": "Can you tell me the tax I would need to pay if I get a Audi Q7 in Italy?", "Label": "TaxCostCalculator(price=CarInfo(car_name='Audi Q7', country='Italy'), tax_rate=CountryTaxRate(country='Italy'))", "Index": 1044}, {"APIs": [{"name": "RestaurantSearch", "Description": "This API is to search for restaurants based on location.", "input_params": {"location": {"description": "the location to search for restaurants", "type": "String"}}, "output_params": {"restaurant_name": {"description": "the name of the restaurant", "type": "String"}}, "format": "RestaurantSearch(location) -> restaurant_name"}, {"name": "RestaurantReview", "Description": "This API is to get the review report of a restaurant.", "input_params": {"restaurant_name": {"description": "the name of the restaurant", "type": "String"}}, "output_params": {"review_report": {"description": "the review report of the restaurant", "type": "String"}}, "format": "RestaurantReview(restaurant_name) -> review_report"}, {"name": "CuisineRecommendations", "Description": "This API is to recommend cuisines based on review report and dietary preferences.", "input_params": {"review_report": {"description": "the review report of the restaurant", "type": "String"}, "dietary_preferences": {"description": "the dietary preferences of the user", "type": "String"}}, "output_params": {"recommended_cuisines": {"description": "the recommended cuisines for the user", "type": "List"}}, "format": "CuisineRecommendations(review_report, dietary_preferences) -> recommended_cuisines"}], "Query": "Which food should I taste at a well-known restaurant in Dubai? I need gluten-free dishes.", "Label": "CuisineRecommendations(review_report=RestaurantReview(restaurant_name=RestaurantSearch(location='Dubai')), dietary_preferences='gluten-free')", "Index": 1061}, {"APIs": [{"name": "SearchMovie", "Description": "This API is to search for movies based on genre and location.", "input_params": {"genre": {"description": "the genre of the movie", "type": "String"}, "location": {"description": "the location where the movie is playing", "type": "String"}}, "output_params": {"movie_name": {"description": "the name of the movie", "type": "String"}}, "format": "SearchMovie(genre, location) -> movie_name"}, {"name": "CheckShowtimes", "Description": "This API is to check the showtimes of a movie on a specific date.", "input_params": {"movie_name": {"description": "the name of the movie", "type": "String"}, "date": {"description": "the date for which to check the showtimes", "type": "String"}}, "output_params": {"showtime": {"description": "the showtime of the movie on the specified date", "type": "Time"}}, "format": "CheckShowtimes(movie_name, date) -> showtime"}, {"name": "BookTickets", "Description": "This API is to book tickets for a movie.", "input_params": {"movie_name": {"description": "the name of the movie", "type": "String"}, "showtime": {"description": "the showtime of the movie", "type": "Time"}, "number_of_tickets": {"description": "the number of tickets to book", "type": "Integer"}}, "output_params": {"booking_status": {"description": "the status of the ticket booking", "type": "String"}}, "format": "BookTickets(movie_name, showtime, number_of_tickets) -> booking_status"}], "Query": "I would like to get 5 tickets for a drama movie in Chicago on Sunday at 6pm.", "Label": "BookTickets(movie_name=SearchMovie(genre='drama', location='Chicago'), showtime=CheckShowtimes(movie_name=SearchMovie(genre='drama', location='Chicago'), date='Sunday'), number_of_tickets=5)", "Index": 1067}, {"APIs": [{"name": "SearchHotel", "Description": "This API is to search for hotels in a specific city with a specific star rating.", "input_params": {"city": {"description": "the name of the city", "type": "String"}, "starRating": {"description": "the star rating of the hotel", "type": "Integer"}}, "output_params": {"hotelname": {"description": "the name of the hotel", "type": "String"}}, "format": "SearchHotel(city, starRating) -> hotelname"}, {"name": "FindRoomType", "Description": "This API is to find the room type available in a hotel for a specific number of guests.", "input_params": {"hotelname": {"description": "the name of the hotel", "type": "String"}, "guestNumber": {"description": "the number of guests", "type": "Integer"}}, "output_params": {"roomType": {"description": "the type of room available", "type": "String"}}, "format": "FindRoomType(hotelname, guestNumber) -> roomType"}, {"name": "BookHotel", "Description": "This API is to book a hotel room.", "input_params": {"roomType": {"description": "the type of room", "type": "String"}, "checkInDate": {"description": "the check-in date", "type": "Date"}, "checkOutDate": {"description": "the check-out date", "type": "Date"}}, "output_params": {"booking status": {"description": "the status of the booking", "type": "String"}}, "format": "BookHotel(roomType, checkInDate, checkOutDate) -> booking status"}], "Query": "I need to book a room for five people in a 4-star hotel in Seattle from 15th September to 22nd September.", "Label": "BookHotel(roomType=FindRoomType(hotelname=SearchHotel(city='Seattle', starRating=4), guestNumber=5), checkInDate='15th September', checkOutDate='22nd September')", "Index": 1075}, {"APIs": [{"name": "FindDoctor", "Description": "This API is to find a doctor based on their specialty.", "input_params": {"specialty": {"description": "the specialty of the doctor", "type": "String"}}, "output_params": {"doctorId": {"description": "the ID of the doctor", "type": "Integer"}}, "format": "FindDoctor(specialty) -> doctorId"}, {"name": "FindPatient", "Description": "This API is to find a patient based on their name.", "input_params": {"patientname": {"description": "the name of the patient", "type": "String"}}, "output_params": {"patientId": {"description": "the ID of the patient", "type": "Integer"}}, "format": "FindPatient(patientname) -> patientId"}, {"name": "CreateAppointment", "Description": "This API is to create an appointment.", "input_params": {"doctorId": {"description": "the ID of the doctor", "type": "Integer"}, "patientId": {"description": "the ID of the patient", "type": "Integer"}, "date": {"description": "the date of the appointment", "type": "Date"}, "time": {"description": "the time of the appointment", "type": "Time"}}, "output_params": {"appointmentId": {"description": "the ID of the appointment", "type": "Integer"}}, "format": "CreateAppointment(doctorId, patientId, date, time) -> appointmentId"}], "Query": "I want to set an appointment with an ophthalmologist for Michael Johnson on 5th October at 10:00 AM", "Label": "CreateAppointment(doctorId=FindDoctor(specialty='ophthalmologist'), patientId=FindPatient(patientname='Michael Johnson'), date='5th October', time='10:00 AM')", "Index": 1080}, {"APIs": [{"name": "FindMovie", "Description": "This API is to find a movie based on genre and location.", "input_params": {"genre": {"description": "the genre of the movie", "type": "String"}, "location": {"description": "the location where the movie is being searched", "type": "String"}}, "output_params": {"movie_name": {"description": "the name of the movie", "type": "String"}}, "format": "FindMovie(genre, location) -> movie_name"}, {"name": "FindShowtime", "Description": "This API is to find the showtime of a movie based on movie name, location, and date.", "input_params": {"movie_name": {"description": "the name of the movie", "type": "String"}, "location": {"description": "the location where the movie is being searched", "type": "String"}, "date": {"description": "the date for which the showtime is being searched", "type": "String"}}, "output_params": {"showtime": {"description": "the showtime of the movie", "type": "String"}}, "format": "FindShowtime(movie_name, location, date) -> showtime"}, {"name": "BookMovieTicket", "Description": "This API is to book movie tickets.", "input_params": {"movie_name": {"description": "the name of the movie", "type": "String"}, "showtime": {"description": "the showtime of the movie", "type": "String"}, "number_of_tickets": {"description": "the number of tickets to be booked", "type": "Integer"}}, "output_params": {"booking_status": {"description": "the status of the ticket booking", "type": "String"}}, "format": "BookMovieTicket(movie_name, showtime, number_of_tickets) -> booking_status"}], "Query": "I want to watch a drama movie in Seattle on December 25th for 6 people. Could you find a suitable movie and book the tickets?", "Label": "BookMovieTicket(movie_name=FindMovie(genre='drama', location='Seattle'), showtime=FindShowtime(movie_name=FindMovie(genre='drama', location='Seattle'), location='Seattle', date='December 25th'), number_of_tickets=6)", "Index": 1088}, {"APIs": [{"name": "FindMovie", "Description": "This API is to find a movie based on genre and rating.", "input_params": {"genre": {"description": "the genre of the movie", "type": "String"}, "rating": {"description": "the rating of the movie", "type": "String"}}, "output_params": {"movie": {"description": "the name of the movie", "type": "String"}}, "format": "FindMovie(genre, rating) -> movie"}, {"name": "GetMovieTimes", "Description": "This API is to get the showtimes for a specific movie.", "input_params": {"movie_name": {"description": "the name of the movie", "type": "String"}}, "output_params": {"showtimes": {"description": "the showtimes for the movie", "type": "List"}}, "format": "GetMovieTimes(movie_name) -> showtimes"}, {"name": "BookMovieTickets", "Description": "This API is to book movie tickets for a specific showtime.", "input_params": {"showtime": {"description": "the showtime for the movie", "type": "String"}}, "output_params": {"ticket": {"description": "the ticket for the movie", "type": "String"}}, "format": "BookMovieTickets(showtime) -> ticket"}], "Query": "I want to watch a highly rated thriller movie. Please book tickets for it.", "Label": "BookMovieTickets(showtime=GetMovieTimes(movie_name=FindMovie(genre='thriller', rating='high')))", "Index": 1093}, {"APIs": [{"name": "FlightStatus", "Description": "This API checks the status of a specified flight.", "input_params": {"flight_number": {"description": "the number of the flight", "type": "String"}}, "output_params": {"flight_info": {"description": "the information of the flight", "type": "String"}}, "format": "FlightStatus(flight_number) -> flight_info"}, {"name": "GetFlightNumber", "Description": "This API retrieves the flight number a certain person booked.", "input_params": {"person_ID": {"description": "the ID of the person", "type": "Integer"}}, "output_params": {"flight_number": {"description": "the number of the flight", "type": "String"}}, "format": "GetFlightNumber(person_ID) -> flight_number"}, {"name": "Personname2ID", "Description": "This API is to convert user name to user ID.", "input_params": {"person_name": {"description": "the name of the person", "type": "String"}}, "output_params": {"person_ID": {"description": "the ID of the person", "type": "Integer"}}, "format": "Personname2ID(person_name) -> person_ID"}], "Query": "Can you check the status of John's flight?", "Label": "FlightStatus(flight_number=GetFlightNumber(person_ID=Personname2ID(person_name='John')))", "Index": 1097}, {"APIs": [{"name": "GetMovieTime", "Description": "This API gets the showtime for a specific movie.", "input_params": {"movie_name": {"description": "the name of the movie", "type": "String"}}, "output_params": {"ShowTime": {"description": "the showtime for the movie", "type": "Time"}}, "format": "GetMovieTime(movie_name) -> ShowTime"}, {"name": "FindRestaurant", "Description": "This API finds restaurants that are open before or after the movie showtime.", "input_params": {"movie_name": {"description": "the name of the movie", "type": "String"}, "ShowTime": {"description": "the showtime for the movie", "type": "Time"}}, "output_params": {"RestaurantOptions": {"description": "the options of restaurants", "type": "List"}}, "format": "FindRestaurant(movie_name, ShowTime) -> RestaurantOptions"}, {"name": "MakeReservation", "Description": "This API reserves a table at the chosen restaurant at a desired time.", "input_params": {"RestaurantOptions": {"description": "the options of restaurants", "type": "List"}, "ShowTime": {"description": "the showtime for the movie", "type": "Time"}}, "output_params": {"ReservationStatus": {"description": "the status of the reservation", "type": "String"}}, "format": "MakeReservation(RestaurantOptions, ShowTime) -> ReservationStatus"}], "Query": "Can I find a restaurant near the theatre showing 'Inception' and make a reservation?", "Label": "MakeReservation(RestaurantOptions=FindRestaurant(movie_name='Inception', ShowTime=GetMovieTime(movie_name='Inception')), ShowTime=GetMovieTime(movie_name='Inception'))", "Index": 1112}, {"APIs": [{"name": "BookTitle", "Description": "This API fetches the title of a book using its ISBN number.", "input_params": {"ISBN": {"description": "the ISBN number of the book", "type": "String"}}, "output_params": {"Title": {"description": "the title of the book", "type": "String"}}, "format": "BookTitle(ISBN) -> Title"}, {"name": "PageCount", "Description": "This API fetches the number of pages in a book using its title.", "input_params": {"Title": {"description": "the title of the book", "type": "String"}}, "output_params": {"Pages": {"description": "the number of pages in the book", "type": "Integer"}}, "format": "PageCount(Title) -> Pages"}, {"name": "ReadingTime", "Description": "This API estimates the time it will take to read a book based on the number of pages.", "input_params": {"Pages": {"description": "the number of pages in the book", "type": "Integer"}}, "output_params": {"Time": {"description": "the estimated time to read the book", "type": "String"}}, "format": "ReadingTime(Pages) -> Time"}], "Query": "How long will it take me to read the book with ISBN 123456789?", "Label": "ReadingTime(Pages=PageCount(Title=BookTitle(ISBN='123456789')))", "Index": 1117}, {"APIs": [{"name": "Weather", "Description": "This API fetches the current weather condition in a specific city.", "input_params": {"City": {"description": "the name of the city", "type": "String"}}, "output_params": {"WeatherCondition": {"description": "the current weather condition", "type": "String"}}, "format": "Weather(City) -> WeatherCondition"}, {"name": "OutfitSuggestion", "Description": "This API suggests an outfit based on the weather condition.", "input_params": {"WeatherCondition": {"description": "the current weather condition", "type": "String"}}, "output_params": {"Outfit": {"description": "the suggested outfit", "type": "String"}}, "format": "OutfitSuggestion(WeatherCondition) -> Outfit"}, {"name": "Shop", "Description": "This API finds stores that have the suggested outfit in stock.", "input_params": {"Outfit": {"description": "the suggested outfit", "type": "String"}}, "output_params": {"Stores": {"description": "the stores that have the suggested outfit in stock", "type": "List"}}, "format": "Shop(Outfit) -> Stores"}], "Query": "Where can I buy the appropriate outfit for today's weather in Los Angeles?", "Label": "Shop(Outfit=OutfitSuggestion(WeatherCondition=Weather(City='Los Angeles')))", "Index": 1118}, {"APIs": [{"name": "CalculateDistance", "Description": "This API calculates the distance between the origin and destination.", "input_params": {"origin": {"description": "the starting point of the journey", "type": "String"}, "destination": {"description": "the destination point of the journey", "type": "String"}}, "output_params": {"distance": {"description": "the calculated distance between the origin and destination", "type": "Float"}}, "format": "CalculateDistance(origin, destination) -> distance"}, {"name": "CalculateTime", "Description": "This API calculates the travel time based on distance and speed.", "input_params": {"distance": {"description": "the distance of the journey", "type": "Float"}, "speed": {"description": "the average speed of the journey", "type": "Integer"}}, "output_params": {"time": {"description": "the estimated travel time", "type": "Float"}}, "format": "CalculateTime(distance, speed) -> time"}, {"name": "RoutePlanner", "Description": "This API provides a travel route plan from origin to destination with distance and estimated time.", "input_params": {"origin": {"description": "the starting point of the journey", "type": "String"}, "destination": {"description": "the destination point of the journey", "type": "String"}, "distance": {"description": "the distance of the journey", "type": "Float"}, "time": {"description": "the estimated travel time", "type": "Float"}}, "output_params": {"route": {"description": "the travel route plan", "type": "String"}}, "format": "RoutePlanner(origin, destination, distance, time) -> route"}], "Query": "I'm in New York and I'm planning to drive to Washington D.C. Can you tell me the route and how long it will take if I drive at an average speed of 60 miles per hour?", "Label": "RoutePlanner(origin='New York', destination='Washington D.C.', distance=CalculateDistance(origin='New York', destination='Washington D.C.'), time=CalculateTime(distance=CalculateDistance(origin='New York', destination='Washington D.C.'), speed=60))", "Index": 1132}, {"APIs": [{"name": "FetchStockData", "Description": "This API is to retrieve real-time stock data for a given stock symbol.", "input_params": {"stock_symbol": {"description": "the symbol of the stock", "type": "String"}}, "output_params": {"stock_data": {"description": "the real-time stock data", "type": "Object"}}, "format": "FetchStockData(stock_symbol) -> stock_data"}, {"name": "BasicDataAnalysis", "Description": "This API performs a basic data analysis on the input stock data.", "input_params": {"stock_data": {"description": "the real-time stock data", "type": "Object"}}, "output_params": {"analyzed_data": {"description": "the analyzed stock data", "type": "Object"}}, "format": "BasicDataAnalysis(stock_data) -> analyzed_data"}, {"name": "GenerateReport", "Description": "This API generates a stock analysis report based on the analyzed data and a specific template.", "input_params": {"analyzed_data": {"description": "the analyzed stock data", "type": "Object"}, "template": {"description": "the specific template for the report", "type": "String"}}, "output_params": {"report": {"description": "the generated stock analysis report", "type": "Object"}}, "format": "GenerateReport(analyzed_data, template) -> report"}], "Query": "I want to analyze the stock data of 'AAPL' and generate a report with the 'basic_analysis' template.", "Label": "GenerateReport(analyzed_data=BasicDataAnalysis(stock_data=FetchStockData(stock_symbol='AAPL')), template='basic_analysis')", "Index": 1165}, {"APIs": [{"name": "UserEmail2ID", "Description": "This API is to convert user email to user ID.", "input_params": {"user_email": {"description": "the email of the user", "type": "String"}}, "output_params": {"user_ID": {"description": "the ID of the user", "type": "Integer"}}, "format": "UserEmail2ID(user_email) -> user_ID"}, {"name": "Productname2ID", "Description": "This API is to convert product name to product ID.", "input_params": {"product_name": {"description": "the name of the product", "type": "String"}}, "output_params": {"product_ID": {"description": "the ID of the product", "type": "Integer"}}, "format": "Productname2ID(product_name) -> product_ID"}, {"name": "PurchaseItem", "Description": "This API is to purchase a product item.", "input_params": {"user_ID": {"description": "the ID of the user", "type": "Integer"}, "product_ID": {"description": "the ID of the product", "type": "Integer"}, "quantity": {"description": "the quantity of the product", "type": "Integer"}}, "output_params": {"purchase status": {"description": "the status of the purchase", "type": "String"}}, "format": "PurchaseItem(user_ID, product_ID, quantity) -> purchase status."}], "Query": "Can you help John purchase 2 units of Samsung Galaxy S21 Ultra, his email is john@example.com.", "Label": "PurchaseItem(user_ID=UserEmail2ID(user_email='john@example.com'), product_ID=Productname2ID(product_name='Samsung Galaxy S21 Ultra'), quantity=2)", "Index": 1176}, {"APIs": [{"name": "GetCityLocation", "Description": "This API is to get the latitude and longitude of a city.", "input_params": {"city_name": {"description": "the name of the city", "type": "String"}}, "output_params": {"latitude": {"description": "the latitude of the city", "type": "Float"}, "longitude": {"description": "the longitude of the city", "type": "Float"}}, "format": "GetCityLocation(city_name) -> latitude, longitude"}, {"name": "GetWeather", "Description": "This API is to get the weather condition based on latitude and longitude.", "input_params": {"latitude": {"description": "the latitude of the location", "type": "Float"}, "longitude": {"description": "the longitude of the location", "type": "Float"}}, "output_params": {"weather_condition": {"description": "the weather condition of the location", "type": "String"}}, "format": "GetWeather(latitude, longitude) -> weather_condition"}, {"name": "GetClothingAdvice", "Description": "This API is to get clothing advice based on the weather condition.", "input_params": {"weather_condition": {"description": "the weather condition of the location", "type": "String"}}, "output_params": {"clothing_advice": {"description": "the advice of clothing based on the weather", "type": "String"}}, "format": "GetClothingAdvice(weather_condition) -> clothing_advice"}], "Query": "What's the weather like in Tokyo and what should I wear today?", "Label": "GetClothingAdvice(weather_condition=GetWeather(latitude, longitude = GetCityLocation(city_name='Tokyo')))", "Index": 1190}, {"APIs": [{"name": "GetProductPrice", "Description": "This API is to get the price of a product by its ID.", "input_params": {"product_ID": {"description": "the ID of the product", "type": "String"}}, "output_params": {"price": {"description": "the price of the product", "type": "Float"}}, "format": "GetProductPrice(product_ID) -> price"}, {"name": "GetExchangeRate", "Description": "This API is to get the exchange rate between two currencies.", "input_params": {"from_currency": {"description": "the original currency", "type": "String"}, "to_currency": {"description": "the currency to convert to", "type": "String"}}, "output_params": {"exchange_rate": {"description": "the exchange rate from the original currency to the target currency", "type": "Float"}}, "format": "GetExchangeRate(from_currency, to_currency) -> exchange_rate"}, {"name": "CalculateCost", "Description": "This API is to calculate the cost of a product in a different currency.", "input_params": {"price": {"description": "the price of the product in the original currency", "type": "Float"}, "exchange_rate": {"description": "the exchange rate from the original currency to the target currency", "type": "Float"}}, "output_params": {"cost": {"description": "the cost of the product in the target currency", "type": "Float"}}, "format": "CalculateCost(price, exchange_rate) -> cost"}], "Query": "How much is the product with ID '22222' in Chinese Yuan if the cost is listed in Brazilian Real?", "Label": "CalculateCost(price=GetProductPrice(product_ID='22222'), exchange_rate=GetExchangeRate(from_currency='Brazilian Real', to_currency='Chinese Yuan'))", "Index": 1209}, {"APIs": [{"name": "SearchFlight", "Description": "This API is to search for available flights to a specified destination.", "input_params": {"destination": {"description": "the destination of the flight", "type": "String"}}, "output_params": {"flight": {"description": "the details of the flight", "type": "Flight Object"}}, "format": "SearchFlight(destination) -> flight"}, {"name": "CheckBaggageAllowance", "Description": "This API is to check the maximum baggage allowance for a specified flight.", "input_params": {"flight": {"description": "the flight to check baggage allowance for", "type": "Flight Object"}}, "output_params": {"baggage_allowance": {"description": "the maximum baggage allowance for the flight", "type": "Integer"}}, "format": "CheckBaggageAllowance(flight) -> baggage_allowance"}, {"name": "BookFlight", "Description": "This API is to book a flight with a specified baggage allowance.", "input_params": {"flight": {"description": "the flight to book", "type": "Flight Object"}, "baggage_allowance": {"description": "the desired baggage allowance for the flight", "type": "Integer"}}, "output_params": {"booking status": {"description": "the status of the flight booking", "type": "String"}}, "format": "BookFlight(flight, baggage_allowance) -> booking status"}], "Query": "I need to reserve a flight to Tokyo with the maximum allowable luggage.", "Label": "BookFlight(flight=SearchFlight(destination='Tokyo'), baggage_allowance=CheckBaggageAllowance(flight=SearchFlight(destination='Tokyo')))", "Index": 1225}, {"APIs": [{"name": "FindMovie", "Description": "This API is to find a movie.", "input_params": {"title": {"description": "the title of the movie", "type": "String"}}, "output_params": {"movie": {"description": "the movie found", "type": "Object"}}, "format": "FindMovie(title) -> movie"}, {"name": "GetShowtimes", "Description": "This API is to get the showtimes for a specific movie in a specific city.", "input_params": {"movie": {"description": "the movie to find the showtimes for", "type": "Object"}, "city": {"description": "the city to find the showtimes in", "type": "String"}}, "output_params": {"showtime": {"description": "the showtimes for the movie in the city", "type": "Object"}}, "format": "GetShowtimes(movie, city) -> showtime"}, {"name": "BuyTickets", "Description": "This API is to purchase movie tickets.", "input_params": {"showtime": {"description": "the showtime to purchase tickets for", "type": "Object"}, "number_of_tickets": {"description": "the number of tickets to purchase", "type": "Integer"}}, "output_params": {"tickets": {"description": "the purchased tickets", "type": "Object"}}, "format": "BuyTickets(showtime, number_of_tickets) -> tickets"}], "Query": "Can you help me purchase 4 tickets for the movie 'Avengers' in Los Angeles?", "Label": "BuyTickets(showtime=GetShowtimes(movie=FindMovie(title='Avengers'), city='Los Angeles'), number_of_tickets=4)", "Index": 1227}, {"APIs": [{"name": "BookSearch", "Description": "This API is to search for a book by title and author.", "input_params": {"title": {"description": "the title of the book", "type": "String"}, "author": {"description": "the author of the book", "type": "String"}}, "output_params": {"book_id": {"description": "the ID of the book", "type": "Integer"}}, "format": "BookSearch(title, author) -> book_id"}, {"name": "BookAvailability", "Description": "This API is to check the availability of a book by its ID.", "input_params": {"book_id": {"description": "the ID of the book", "type": "Integer"}}, "output_params": {"availability": {"description": "the availability status of the book", "type": "String"}}, "format": "BookAvailability(book_id) -> availability"}, {"name": "BookLocation", "Description": "This API is to find the location of a book in the library.", "input_params": {"book_availability": {"description": "the availability status of the book", "type": "String"}}, "output_params": {"location": {"description": "the location of the book in the library", "type": "String"}}, "format": "BookLocation(book_availability) -> location"}], "Query": "Where can I find '1984' by George Orwell in the library?", "Label": "BookLocation(book_availability=BookAvailability(book_id=BookSearch(title='1984', author='George Orwell')))", "Index": 1236}, {"APIs": [{"name": "WeatherForecast", "Description": "This API is to fetch the weather forecast.", "input_params": {"city": {"description": "the name of the city", "type": "String"}, "date": {"description": "the date of the weather forecast", "type": "Date"}}, "output_params": {"weatherDetails": {"description": "the details of the weather", "type": "String"}}, "format": "WeatherForecast(city, date) -> weatherDetails"}, {"name": "EventSearch", "Description": "This API is to search for events.", "input_params": {"city": {"description": "the name of the city", "type": "String"}, "date": {"description": "the date of the event", "type": "Date"}, "weatherDetails": {"description": "the details of the weather", "type": "String"}}, "output_params": {"eventDetails": {"description": "the details of the event", "type": "String"}}, "format": "EventSearch(city, date, weatherDetails) -> eventDetails"}, {"name": "TicketBooking", "Description": "This API is to book tickets for an event.", "input_params": {"eventDetails": {"description": "the details of the event", "type": "String"}, "num_of_tickets": {"description": "the number of tickets to be booked", "type": "Integer"}}, "output_params": {"booking status": {"description": "the status of the booking", "type": "String"}}, "format": "TicketBooking(eventDetails, num_of_tickets) -> booking status."}], "Query": "Can you fetch me the weather in Sydney on 1st of January, search for events on the same day keeping the weather in mind and then help me book 1 ticket for the event?", "Label": "TicketBooking(eventDetails=EventSearch(city='Sydney', date='1st of January', weatherDetails=WeatherForecast(city='Sydney', date='1st of January')), num_of_tickets='1')", "Index": 1250}, {"APIs": [{"name": "MovieSearch", "Description": "This API is to search movie by title and director.", "input_params": {"title": {"description": "the title of the movie", "type": "String"}, "director": {"description": "the director of the movie", "type": "String"}}, "output_params": {"movieDetails": {"description": "the details of the movie", "type": "Object"}}, "format": "MovieSearch(title, director) -> movieDetails"}, {"name": "CinemaFinder", "Description": "This API is to find cinemas showing a specific movie.", "input_params": {"movieDetails": {"description": "the details of the movie", "type": "Object"}}, "output_params": {"cinemaLocations": {"description": "the locations of cinemas showing the movie", "type": "List"}}, "format": "CinemaFinder(movieDetails) -> cinemaLocations"}, {"name": "ShowtimeCheck", "Description": "This API is to check the showtimes of a movie at specified cinemas.", "input_params": {"cinemaLocations": {"description": "the locations of cinemas", "type": "List"}, "movieDetails": {"description": "the details of the movie", "type": "Object"}}, "output_params": {"showtimes": {"description": "the showtimes of the movie", "type": "List"}}, "format": "ShowtimeCheck(cinemaLocations, movieDetails) -> showtimes"}], "Query": "Can you find where the movie 'Dunkirk' by Christopher Nolan is being shown and tell me the showtimes?", "Label": "ShowtimeCheck(cinemaLocations=CinemaFinder(movieDetails=MovieSearch(title='Dunkirk', director='Christopher Nolan')), movieDetails=MovieSearch(title='Dunkirk', director='Christopher Nolan'))", "Index": 1255}, {"APIs": [{"name": "HotelSearch", "Description": "This API is to search hotels in a city.", "input_params": {"city": {"description": "the city where the hotel is located", "type": "String"}, "date": {"description": "the date to book the hotel", "type": "Date"}}, "output_params": {"hotelDetails": {"description": "the details of the hotel", "type": "String"}}, "format": "HotelSearch(city, date) -> hotelDetails"}, {"name": "RestaurantLocator", "Description": "This API is to locate restaurants in a city.", "input_params": {"city": {"description": "the city where the restaurant is located", "type": "String"}}, "output_params": {"restaurantLocations": {"description": "the locations of restaurants in the city", "type": "String"}}, "format": "RestaurantLocator(city) -> restaurantLocations"}, {"name": "ReservationBooking", "Description": "This API is to book a hotel and a restaurant.", "input_params": {"hotelDetails": {"description": "the details of the hotel", "type": "String"}, "restaurantLocations": {"description": "the locations of restaurants", "type": "String"}}, "output_params": {"booking status": {"description": "the status of the booking", "type": "String"}}, "format": "ReservationBooking(hotelDetails, restaurantLocations)-> booking status."}], "Query": "Can you book a hotel and a restaurant in Miami on August 25th?", "Label": "ReservationBooking(hotelDetails=HotelSearch(city='Miami', date='August 25th'), restaurantLocations=RestaurantLocator(city='Miami'))", "Index": 1259}, {"APIs": [{"name": "GetWeather", "Description": "This API is to get the weather status of a specific city.", "input_params": {"city": {"description": "the name of the city", "type": "String"}}, "output_params": {"WeatherStatus": {"description": "the weather status of the city", "type": "String"}}, "format": "GetWeather(city) -> WeatherStatus"}, {"name": "FindClothing", "Description": "This API is to find the suitable clothing based on weather status.", "input_params": {"WeatherStatus": {"description": "the weather status of the city", "type": "String"}}, "output_params": {"ClothingRecommendation": {"description": "the recommended type of clothing based on weather status", "type": "String"}}, "format": "FindClothing(WeatherStatus) -> ClothingRecommendation"}, {"name": "FindStore", "Description": "This API is to find a store where the recommended clothing can be bought.", "input_params": {"ClothingRecommendation": {"description": "the recommended type of clothing", "type": "String"}}, "output_params": {"StoreLocation": {"description": "the location of the store where the recommended clothing can be bought", "type": "String"}}, "format": "FindStore(ClothingRecommendation) -> StoreLocation"}], "Query": "What kind of dress should I wear in Miami today and where can I buy that?", "Label": "FindStore(ClothingRecommendation=FindClothing(WeatherStatus=GetWeather(city='Miami')))", "Index": 1267}, {"APIs": [{"name": "IPGeolocation", "Description": "This API is to get location based on IP address.", "input_params": {"ip": {"description": "the ip address", "type": "String"}}, "output_params": {"location": {"description": "the location of the IP address", "type": "String"}}, "format": "IPGeolocation(ip) -> location"}, {"name": "WeatherForecast", "Description": "This API is to get weather forecast based on location and date.", "input_params": {"location": {"description": "the location", "type": "String"}, "date": {"description": "the date for weather forecast", "type": "Date"}}, "output_params": {"weather": {"description": "the weather forecast", "type": "String"}}, "format": "WeatherForecast(location, date) -> weather"}, {"name": "ActivitySuggestion", "Description": "This API is to suggest activities based on weather and date.", "input_params": {"weather": {"description": "the weather", "type": "String"}, "date": {"description": "the date for activity", "type": "Date"}}, "output_params": {"activities": {"description": "the suggested activities", "type": "Array of Strings"}}, "format": "ActivitySuggestion(weather, date) -> activities"}], "Query": "What activities can I do on July 23rd based on the weather forecast for the location of IP 192.168.0.254?", "Label": "ActivitySuggestion(weather=WeatherForecast(location=IPGeolocation(ip='192.168.0.254'), date='July 23rd'), date='July 23rd')", "Index": 1294}, {"APIs": [{"name": "GetCurrentWeather", "Description": "This API is to retrieve the current weather at a given location.", "input_params": {"location": {"description": "the location to get the current weather of", "type": "String"}}, "output_params": {"current_weather": {"description": "the current weather at the given location", "type": "String"}}, "format": "GetCurrentWeather(location) -> current_weather"}, {"name": "GetWeatherForecast", "Description": "This API is to retrieve the weather forecast at a given location for the coming week.", "input_params": {"location": {"description": "the location to get the weather forecast of", "type": "String"}}, "output_params": {"weather_forecast": {"description": "the weather forecast at the given location for the coming week", "type": "String"}}, "format": "GetWeatherForecast(location) -> weather_forecast"}, {"name": "CompareWeather", "Description": "This API is to compare the current weather with the forecast for the coming week.", "input_params": {"current_weather": {"description": "the current weather at a location", "type": "String"}, "weather_forecast": {"description": "the forecasted weather for the coming week at a location", "type": "String"}}, "output_params": {"comparison_result": {"description": "the result of the comparison between current weather and forecasted weather", "type": "String"}}, "format": "CompareWeather(current_weather, weather_forecast) -> comparison_result"}], "Query": "What's the current weather in New York and how does it compare to the forecast for the coming week?", "Label": "CompareWeather(current_weather=GetCurrentWeather(location='New York'), weather_forecast=GetWeatherForecast(location='New York'))", "Index": 1298}, {"APIs": [{"name": "GetCurrentWeather", "Description": "This API is to get the current weather of a specific location.", "input_params": {"location": {"description": "the location where you want to know the weather", "type": "String"}}, "output_params": {"current_weather": {"description": "the current weather of the specified location", "type": "String"}}, "format": "GetCurrentWeather(location) -> current_weather"}, {"name": "GetWeatherForecast", "Description": "This API is to get the weather forecast of a specific location for the following week.", "input_params": {"location": {"description": "the location where you want to know the weather forecast", "type": "String"}}, "output_params": {"weather_forecast": {"description": "the weather forecast of the specified location for the following week", "type": "String"}}, "format": "GetWeatherForecast(location) -> weather_forecast"}, {"name": "CompareWeather", "Description": "This API is to compare the current weather with the weather forecast.", "input_params": {"current_weather": {"description": "the current weather of the specified location", "type": "String"}, "weather_forecast": {"description": "the weather forecast of the specified location for the following week", "type": "String"}}, "output_params": {"comparison_result": {"description": "the comparison result between the current weather and the weather forecast", "type": "String"}}, "format": "CompareWeather(current_weather, weather_forecast) -> comparison_result"}], "Query": "What's the weather like in Tokyo right now and how does it compare to the forecast for the following week?", "Label": "CompareWeather(current_weather=GetCurrentWeather(location='Tokyo'), weather_forecast=GetWeatherForecast(location='Tokyo'))", "Index": 1300}, {"APIs": [{"name": "RestaurantSearch", "Description": "This API is to search for a restaurant in a specific city with a specific cuisine.", "input_params": {"city": {"description": "the name of the city where the restaurant is located", "type": "String"}, "cuisine": {"description": "the type of cuisine the restaurant serves", "type": "String"}}, "output_params": {"restaurant": {"description": "the name of the recommended restaurant", "type": "String"}}, "format": "RestaurantSearch(city, cuisine) -> restaurant"}, {"name": "EventSearch", "Description": "This API is to search for events in a specific city on a specific date.", "input_params": {"city": {"description": "the name of the city where the event is located", "type": "String"}, "date": {"description": "the date of the event", "type": "Date"}}, "output_params": {"event": {"description": "the name of the event", "type": "String"}}, "format": "EventSearch(city, date) -> event"}, {"name": "CityGuide", "Description": "This API is to provide a guide for a city including events and restaurant recommendations.", "input_params": {"restaurant": {"description": "the name of the recommended restaurant", "type": "String"}, "event": {"description": "the name of the event", "type": "String"}}, "output_params": {"city guide": {"description": "the guide for the city including events and restaurant recommendations", "type": "String"}}, "format": "CityGuide(restaurant, event) -> city guide"}], "Query": "What's going on in New York on April 15, and can you suggest a good French restaurant?", "Label": "CityGuide(restaurant = RestaurantSearch(city = 'New York', cuisine = 'French'), event = EventSearch(city = 'New York', date = 'April 15'))", "Index": 1304}, {"APIs": [{"name": "WeatherForecast", "Description": "This API is to forecast the weather of a location.", "input_params": {"location": {"description": "the name of the location", "type": "String"}}, "output_params": {"weather": {"description": "the forecasted weather of the location", "type": "String"}}, "format": "WeatherForecast(location) -> weather"}, {"name": "ClothingSuggestion", "Description": "This API is to suggest clothing based on the weather.", "input_params": {"weather": {"description": "the weather condition", "type": "String"}}, "output_params": {"clothes": {"description": "the suggested clothing", "type": "String"}}, "format": "ClothingSuggestion(weather) -> clothes"}, {"name": "FashionStore", "Description": "This API is to provide the cost of the suggested clothing from a location.", "input_params": {"clothes": {"description": "the suggested clothing", "type": "String"}, "location": {"description": "the name of the location", "type": "String"}}, "output_params": {"cost": {"description": "the cost of the clothing", "type": "Float"}}, "format": "FashionStore(clothes,location) -> cost"}], "Query": "What should I wear in Chicago tomorrow and how much would it cost?", "Label": "FashionStore(clothes=ClothingSuggestion(weather=WeatherForecast(location='Chicago')), location='Chicago')", "Index": 1319}, {"APIs": [{"name": "CalculateDistance", "Description": "This API is to calculate the distance between two locations.", "input_params": {"origin": {"description": "The starting point of the journey", "type": "String"}, "destination": {"description": "The ending point of the journey", "type": "String"}}, "output_params": {"distance": {"description": "The distance between two locations", "type": "Float"}}, "format": "CalculateDistance(origin, destination) -> distance"}, {"name": "CalculateTime", "Description": "This API is to calculate the time it would take to travel a certain distance at a certain speed.", "input_params": {"distance": {"description": "The distance to be travelled", "type": "Float"}, "speed": {"description": "The speed at which to travel", "type": "Float"}}, "output_params": {"time": {"description": "The time it would take to travel the given distance at the given speed", "type": "Time"}}, "format": "CalculateTime(distance, speed) -> time"}, {"name": "RoutePlanner", "Description": "This API is to provide the route and time for a journey.", "input_params": {"origin": {"description": "The starting point of the journey", "type": "String"}, "destination": {"description": "The ending point of the journey", "type": "String"}, "distance": {"description": "The distance between the origin and destination", "type": "Float"}, "time": {"description": "The time it would take to travel the distance", "type": "Time"}}, "output_params": {"route": {"description": "The route for the journey", "type": "String"}, "travel_time": {"description": "The time it would take to travel the route", "type": "Time"}}, "format": "RoutePlanner(origin, destination, distance, time) -> route, travel_time"}], "Query": "I'm currently in San Francisco and I plan to drive to Los Angeles. Could you provide me with the route and the time it would take if I maintain an average speed of 55 miles per hour?", "Label": "RoutePlanner(origin='San Francisco', destination='Los Angeles', distance=CalculateDistance(origin='San Francisco', destination='Los Angeles'), time=CalculateTime(distance=CalculateDistance(origin='San Francisco', destination='Los Angeles'), speed=55))", "Index": 1322}, {"APIs": [{"name": "RestaurantFinder", "Description": "This API is to find a restaurant based on city and cuisine.", "input_params": {"city": {"description": "the city where the restaurant located", "type": "String"}, "cuisine": {"description": "the cuisine the restaurant serves", "type": "String"}}, "output_params": {"restaurant": {"description": "the restaurant found based on input city and cuisine", "type": "String"}}, "format": "RestaurantFinder(city, cuisine) -> restaurant"}, {"name": "MenuGetter", "Description": "This API is to get the menu of a specific restaurant.", "input_params": {"restaurant": {"description": "the restaurant to get the menu from", "type": "String"}}, "output_params": {"menu": {"description": "the menu of the restaurant", "type": "String"}}, "format": "MenuGetter(restaurant) -> menu"}, {"name": "OrderFood", "Description": "This API is to order a specific food item from a restaurant.", "input_params": {"restaurant": {"description": "the restaurant to order food from", "type": "String"}, "menu": {"description": "the menu of the restaurant", "type": "String"}, "item": {"description": "the food item to order", "type": "String"}}, "output_params": {"order confirmation": {"description": "the confirmation of the order", "type": "String"}}, "format": "OrderFood(restaurant, menu, item) -> order confirmation"}], "Query": "I'm craving for a steak from an American restaurant in New York City.", "Label": "OrderFood(restaurant=RestaurantFinder(city='New York City', cuisine='American'), menu=MenuGetter(restaurant=RestaurantFinder(city='New York City', cuisine='American')), item='Steak')", "Index": 1351}, {"APIs": [{"name": "FootballTeamInfo", "Description": "This API is to get information about the football team.", "input_params": {"team_name": {"description": "the name of the football team", "type": "String"}}, "output_params": {"team_info": {"description": "the information of the football team", "type": "Object"}}, "format": "FootballTeamInfo(team_name) -> team_info"}, {"name": "GameSchedule", "Description": "This API is to get the schedule of the games for the specified football team.", "input_params": {"team_info": {"description": "the information of the football team", "type": "Object"}}, "output_params": {"game_schedule": {"description": "the schedule of the games for the specified football team", "type": "Object"}}, "format": "GameSchedule(team_info) -> game_schedule"}, {"name": "TicketPrice", "Description": "This API is to get the ticket price for a specific game.", "input_params": {"game_schedule": {"description": "the schedule of the game", "type": "Object"}}, "output_params": {"ticket_price": {"description": "the price of the ticket for the specified game", "type": "Float"}}, "format": "TicketPrice(game_schedule) -> ticket_price"}], "Query": "Can you tell me the cost of seeing a FC Barcelona game?", "Label": "TicketPrice(game_schedule=GameSchedule(team_info=FootballTeamInfo(team_name='FC Barcelona')))", "Index": 1354}, {"APIs": [{"name": "FlightDetails", "Description": "This API is to get flight details.", "input_params": {"destination": {"description": "destination of the flight", "type": "String"}, "departure_date": {"description": "departure date of the flight", "type": "Date"}}, "output_params": {"flight_info": {"description": "the information of the flight", "type": "JSON"}}, "format": "FlightDetails(destination, departure_date) -> flight_info"}, {"name": "HotelBooking", "Description": "This API is to book a hotel.", "input_params": {"flight_info": {"description": "the information of the flight", "type": "JSON"}}, "output_params": {"hotel_reservation": {"description": "the reservation confirmation of the hotel", "type": "JSON"}}, "format": "HotelBooking(flight_info) -> hotel_reservation"}, {"name": "ActivityPlanning", "Description": "This API is to plan activities.", "input_params": {"hotel_reservation": {"description": "the reservation confirmation of the hotel", "type": "JSON"}, "destination": {"description": "destination of the activity", "type": "String"}}, "output_params": {"activity_plan": {"description": "activity plan", "type": "JSON"}}, "format": "ActivityPlanning(hotel_reservation, destination) -> activity_plan"}], "Query": "I am planning to visit Tokyo on 15th September. Can you assist me with flight, hotel and activity plan?", "Label": "ActivityPlanning(hotel_reservation=HotelBooking(flight_info=FlightDetails(destination='Tokyo', departure_date='15th September')), destination='Tokyo')", "Index": 1359}, {"APIs": [{"name": "HotelReservation", "Description": "This API retrieves hotel reservation information based on city and date.", "input_params": {"city": {"description": "the city where the hotel is located", "type": "String"}, "date": {"description": "the date of the hotel reservation", "type": "Date"}}, "output_params": {"hotelInfo": {"description": "the information of the hotel reservation", "type": "Object"}}, "format": "HotelReservation(city, date) -> hotelInfo"}, {"name": "EventSuggestions", "Description": "This API generates event suggestions based on city and date.", "input_params": {"city": {"description": "the city where the event is located", "type": "String"}, "date": {"description": "the date of the event", "type": "Date"}}, "output_params": {"eventDetails": {"description": "the details of the event suggestions", "type": "Object"}}, "format": "EventSuggestions(city, date) -> eventDetails"}, {"name": "RestaurantRecommendation", "Description": "This API recommends restaurants based on city, hotel information and event details.", "input_params": {"city": {"description": "the city where the restaurant is located", "type": "String"}, "hotelInfo": {"description": "the information of the hotel reservation", "type": "Object"}, "eventDetails": {"description": "the details of the event", "type": "Object"}}, "output_params": {"restaurant recommendation": {"description": "the recommendation of the restaurant", "type": "String"}}, "format": "RestaurantRecommendation(city, hotelInfo, eventDetails) -> restaurant recommendation"}], "Query": "I'll be in Tokyo next weekend. I'm staying at the Park Hyatt and I'm planning to see a sumo match. Can you recommend a restaurant?", "Label": "RestaurantRecommendation(city='Tokyo', hotelInfo=HotelReservation(city='Tokyo', date='next weekend'), eventDetails=EventSuggestions(city='Tokyo', date='next weekend'))", "Index": 1367}, {"APIs": [{"name": "GetWeather", "Description": "This API is to get the current weather of a specific city.", "input_params": {"city": {"description": "the name of the city", "type": "String"}}, "output_params": {"weather": {"description": "the current weather of the city", "type": "String"}}, "format": "GetWeather(city) -> weather"}, {"name": "CityPopulation", "Description": "This API is to get the population of a specific city.", "input_params": {"city": {"description": "the name of the city", "type": "String"}}, "output_params": {"population": {"description": "the population of the city", "type": "Integer"}}, "format": "CityPopulation(city) -> population"}, {"name": "WeatherImpactOnPopulation", "Description": "This API is to estimate the impact of a specific weather condition on a city's population.", "input_params": {"weather": {"description": "the current weather of the city", "type": "String"}, "population": {"description": "the population of the city", "type": "Integer"}}, "output_params": {"impact": {"description": "the estimated impact of the weather on the city's population", "type": "String"}}, "format": "WeatherImpactOnPopulation(weather, population) -> impact"}], "Query": "What could be the repercussion of the current weather on the population in Tokyo?", "Label": "WeatherImpactOnPopulation(weather=GetWeather(city='Tokyo'), population=CityPopulation(city='Tokyo'))", "Index": 1380}, {"APIs": [{"name": "BookFinder", "Description": "This API is to find the book ID by book name.", "input_params": {"book_name": {"description": "the name of the book", "type": "String"}}, "output_params": {"book_id": {"description": "the ID of the book", "type": "Integer"}}, "format": "BookFinder(book_name) -> book_id"}, {"name": "AuthorOfBook", "Description": "This API is to find the author ID by book ID.", "input_params": {"book_id": {"description": "the ID of the book", "type": "Integer"}}, "output_params": {"author_id": {"description": "the ID of the author", "type": "Integer"}}, "format": "AuthorOfBook(book_id) -> author_id"}, {"name": "BooksByAuthor", "Description": "This API is to find the books written by a particular author by author ID.", "input_params": {"author_id": {"description": "the ID of the author", "type": "Integer"}}, "output_params": {"books": {"description": "the books written by the author", "type": "Array"}}, "format": "BooksByAuthor(author_id) -> books"}], "Query": "Can you name other books written by the author of 'The Hobbit'?", "Label": "BooksByAuthor(author_id=AuthorOfBook(book_id=BookFinder(book_name='The Hobbit')))", "Index": 1410}, {"APIs": [{"name": "SearchFare", "Description": "This API is to search the fare from source to destination.", "input_params": {"src": {"description": "the source city", "type": "String"}, "dest": {"description": "the destination city", "type": "String"}, "date": {"description": "the date of travel", "type": "Dates"}}, "output_params": {"fare_id": {"description": "the ID of the fare", "type": "Integer"}}, "format": "SearchFare(src, dest, date) -> fare_id"}, {"name": "CheckDiscount", "Description": "This API is to check the discount amount for a given coupon and fare ID.", "input_params": {"coupon": {"description": "the discount coupon code", "type": "String"}, "fare_id": {"description": "the ID of the fare", "type": "Integer"}}, "output_params": {"discount_amount": {"description": "the amount of discount", "type": "Float"}}, "format": "CheckDiscount(coupon, fare_id) -> discount_amount"}, {"name": "CalculateFinalFare", "Description": "This API is to calculate the final fare after applying discount.", "input_params": {"fare_id": {"description": "the ID of the fare", "type": "Integer"}, "discount_amount": {"description": "the amount of discount", "type": "Float"}}, "output_params": {"final_fare": {"description": "the final fare after applying discount", "type": "Float"}}, "format": "CalculateFinalFare(fare_id, discount_amount) -> final_fare"}], "Query": "I want to travel from New York to Los Angeles on 13th June. I have a discount code \"SUMMER50\" and I want to know how much it will cost me after the discount.", "Label": "CalculateFinalFare(fare_id=SearchFare(src='New York', dest='Los Angeles', date='13th June'), discount_amount=CheckDiscount(coupon='SUMMER50', fare_id=SearchFare(src='New York', dest='Los Angeles', date='13th June')))", "Index": 1425}, {"APIs": [{"name": "CheckFlights", "Description": "This API is to search for flights.", "input_params": {"source": {"description": "the departure city", "type": "String"}, "destination": {"description": "the destination city", "type": "String"}}, "output_params": {"flight": {"description": "the flight details", "type": "Flight"}}, "format": "CheckFlights(source, destination) -> flight"}, {"name": "BookHotel", "Description": "This API is to book a hotel.", "input_params": {"location": {"description": "the location of the hotel", "type": "String"}, "date": {"description": "the date of the booking", "type": "Date"}}, "output_params": {"hotel": {"description": "the hotel details", "type": "Hotel"}}, "format": "BookHotel(location, date) -> hotel"}, {"name": "PlanItinerary", "Description": "This API is to create an itinerary based on user's interests.", "input_params": {"location": {"description": "the destination location", "type": "String"}, "interests": {"description": "the user's interests", "type": "String"}, "flight": {"description": "the flight details", "type": "Flight"}, "hotel": {"description": "the hotel details", "type": "Hotel"}}, "output_params": {"itinerary": {"description": "the created itinerary", "type": "Itinerary"}}, "format": "PlanItinerary(location, interests, flight, hotel) -> itinerary"}], "Query": "I'm thinking of going to Tokyo. Can you locate a flight from Chicago, book a hotel and make a schedule that is aligned with my fascination in technology?", "Label": "PlanItinerary(location='Tokyo', interests='technology', flight=CheckFlights(source='Chicago', destination='Tokyo'), hotel=BookHotel(location='Tokyo', date='flight.date'))", "Index": 1459}, {"APIs": [{"name": "GetRestaurant", "Description": "This API is to get restaurant details given the city and type of food.", "input_params": {"city": {"description": "the city where the restaurant is located", "type": "String"}, "type_of_food": {"description": "the type of food the user wants", "type": "String"}}, "output_params": {"restaurant_details": {"description": "the details of the restaurant", "type": "Object"}}, "format": "GetRestaurant(city, type_of_food) -> restaurant_details"}, {"name": "BookTable", "Description": "This API is to book a table of a specified number of people at a particular time in a specific restaurant.", "input_params": {"restaurant_name": {"description": "the name of the restaurant", "type": "String"}, "number_of_people": {"description": "the number of people for the table booking", "type": "Integer"}, "time": {"description": "the time for the table booking", "type": "Time"}}, "output_params": {"booking_confirmation": {"description": "the confirmation of the table booking", "type": "String"}}, "format": "BookTable(restaurant_name, number_of_people, time) -> booking_confirmation"}, {"name": "GetDirections", "Description": "This API is to get directions from a start location to an end location.", "input_params": {"start_location": {"description": "the starting location", "type": "String"}, "end_location": {"description": "the ending location", "type": "String"}}, "output_params": {"directions": {"description": "the directions from start location to end location", "type": "Object"}}, "format": "GetDirections(start_location, end_location) -> directions"}], "Query": "I would like to have Italian food for dinner for 3 in New York city at 8 pm, and could you please show me the way from Manhattan?", "Label": "GetDirections(start_location='Manhattan', end_location=BookTable(restaurant_name=GetRestaurant(city='New York', type_of_food='Italian'), number_of_people=3, time='8 pm'))", "Index": 1509}, {"APIs": [{"name": "RetrieveLocalTrafficInfo", "Description": "This API is to get real-time traffic information on the roads of a specific city.", "input_params": {"city": {"description": "the name of the city", "type": "String"}}, "output_params": {"traffic_info": {"description": "the real-time traffic information", "type": "String"}}, "format": "RetrieveLocalTrafficInfo(city) -> traffic_info"}, {"name": "CalculateTravelTime", "Description": "This API is to calculate travel time from one place to another based on the current traffic conditions.", "input_params": {"traffic_info": {"description": "the real-time traffic information", "type": "String"}, "start_point": {"description": "the starting point of the travel", "type": "String"}, "end_point": {"description": "the destination of the travel", "type": "String"}}, "output_params": {"travel_time": {"description": "the calculated travel time", "type": "Time"}}, "format": "CalculateTravelTime(traffic_info, start_point, end_point) -> travel_time"}, {"name": "FetchNextBus", "Description": "This API is to fetch the timing of the next bus on a specific route based on the estimated travel time.", "input_params": {"travel_time": {"description": "the calculated travel time", "type": "Time"}, "bus_route": {"description": "the specific bus route", "type": "String"}}, "output_params": {"bus_info": {"description": "the timing of the next bus on the specific route", "type": "String"}}, "format": "FetchNextBus(travel_time, bus_route) -> bus_info"}], "Query": "When is the next bus from Times Square to Wall Street considering current traffic conditions?", "Label": "FetchNextBus(travel_time=CalculateTravelTime(traffic_info=RetrieveLocalTrafficInfo(city='New York'), start_point='Times Square', end_point='Wall Street'), bus_route='M20')", "Index": 1532}, {"APIs": [{"name": "GetEventCalendar", "Description": "This API retrieves the user's event calendar based on their user id.", "input_params": {"user_id": {"description": "the id of the user", "type": "String"}}, "output_params": {"event": {"description": "the user's event calendar", "type": "List"}}, "format": "GetEventCalendar(user_id) -> event"}, {"name": "FindTravelTime", "Description": "This API finds the estimated travel time between two locations.", "input_params": {"start_location": {"description": "the starting location", "type": "String"}, "end_location": {"description": "the ending location", "type": "String"}}, "output_params": {"travel_time": {"description": "the estimated travel time", "type": "Time"}}, "format": "FindTravelTime(start_location, end_location) -> travel_time"}, {"name": "CheckTraffic", "Description": "This API checks the traffic situation based on the expected travel time.", "input_params": {"travel_time": {"description": "the expected travel time", "type": "Time"}}, "output_params": {"traffic": {"description": "the traffic situation", "type": "String"}}, "format": "CheckTraffic(travel_time) -> traffic"}], "Query": "How is the traffic for my next appointment?", "Label": "CheckTraffic(travel_time=FindTravelTime(start_location=GetLocation(user_id='current'), end_location=GetEventCalendar(user_id='current')))", "Index": 1535}]}, {"level3": [{"APIs": [{"name": "Songname2ID", "Description": "This API is to convert a song's name to song ID.", "input_params": {"song_name": {"description": "the name of the song", "type": "String"}}, "output_params": {"song_ID": {"description": "the ID of the song", "type": "Integer"}}, "format": "Songname2ID(song_name) -> song_ID"}, {"name": "AddSongToPlaylist", "Description": "This API is to add a song to a playlist.", "input_params": {"playlist_ID": {"description": "the ID of the playlist", "type": "Integer"}, "song_ID": {"description": "the ID of the song", "type": "Integer"}}, "output_params": {"song_status": {"description": "the status of the song addition", "type": "String"}}, "format": "AddSongToPlaylist(playlist_ID, song_ID) -> song_status"}, {"name": "Playlistname2ID", "Description": "This API is to convert a playlist's name to playlist ID.", "input_params": {"playlist_name": {"description": "the name of the playlist", "type": "String"}}, "output_params": {"playlist_ID": {"description": "the ID of the playlist", "type": "Integer"}}, "format": "Playlistname2ID(playlist_name) -> playlist_ID"}, {"name": "GetUsernameID", "Description": "This API is to convert a username to user ID.", "input_params": {"username": {"description": "the username", "type": "String"}}, "output_params": {"person_ID": {"description": "the ID of the person", "type": "Integer"}}, "format": "GetUsernameID(username) -> person_ID"}], "Query": "May I request the addition of 'Hey Jude' to Emma's 'Classic Disco Hits' playlist?", "Label": "AddSongToPlaylist(playlist_ID=Playlistname2ID(playlist_name='Classic Disco Hits'), song_ID=Songname2ID(song_name='Hey Jude'))", "Index": 18}, {"APIs": [{"name": "Username2Email", "Description": "This API is used to convert a username to a user's email.", "input_params": {"username": {"description": "the username of the user", "type": "String"}}, "output_params": {"user_email": {"description": "the email of the user", "type": "String"}}, "format": "Username2Email(username) -> user_email"}, {"name": "Title2ISBN", "Description": "This API is used to convert a book title to its ISBN.", "input_params": {"title": {"description": "the title of the book", "type": "String"}}, "output_params": {"title_ISBN": {"description": "the ISBN of the book", "type": "String"}}, "format": "Title2ISBN(title) -> title_ISBN"}, {"name": "CheckAvailability", "Description": "This API checks the availability of a book based on its ISBN and a given date range.", "input_params": {"ISBN": {"description": "the ISBN of the book", "type": "String"}, "start_date": {"description": "the start date of the range", "type": "Date"}, "end_date": {"description": "the end date of the range", "type": "Date"}}, "output_params": {"availability_status": {"description": "the availability status of the book", "type": "String"}}, "format": "CheckAvailability(ISBN,start_date,end_date) -> availability_status"}, {"name": "ReserveBook", "Description": "This API is used to reserve a book.", "input_params": {"user_email": {"description": "the email of the user", "type": "String"}, "ISBN": {"description": "the ISBN of the book", "type": "String"}, "start_date": {"description": "the start date of the reservation", "type": "Date"}, "end_date": {"description": "the end date of the reservation", "type": "Date"}}, "output_params": {"reservation_status": {"description": "the status of the reservation", "type": "String"}}, "format": "ReserveBook(user_email,ISBN,start_date,end_date) -> reservation_status"}], "Query": "Please reserve the book 'The Great Gatsby' from July 2nd to July 16th. The user is 'emily_davis'.", "Label": "ReserveBook(user_email=Username2Email(username='emily_davis'),ISBN=Title2ISBN(title='The Great Gatsby'), start_date='July 2nd',end_date='July 16th')", "Index": 20}, {"APIs": [{"name": "Username2Email", "Description": "This API is used to convert a username to a user's email.", "input_params": {"username": {"description": "the username of the user", "type": "String"}}, "output_params": {"user_email": {"description": "the email of the user", "type": "String"}}, "format": "Username2Email(username) -> user_email"}, {"name": "Title2ISBN", "Description": "This API is used to convert a book title to its ISBN.", "input_params": {"title": {"description": "the title of the book", "type": "String"}}, "output_params": {"title_ISBN": {"description": "the ISBN of the book", "type": "String"}}, "format": "Title2ISBN(title) -> title_ISBN"}, {"name": "CheckAvailability", "Description": "This API checks the availability of a book based on its ISBN and a given date range.", "input_params": {"ISBN": {"description": "the ISBN of the book", "type": "String"}, "start_date": {"description": "the start date of the range", "type": "Date"}, "end_date": {"description": "the end date of the range", "type": "Date"}}, "output_params": {"availability_status": {"description": "the availability status of the book", "type": "String"}}, "format": "CheckAvailability(ISBN,start_date,end_date) -> availability_status"}, {"name": "ReserveBook", "Description": "This API is used to reserve a book.", "input_params": {"user_email": {"description": "the email of the user", "type": "String"}, "ISBN": {"description": "the ISBN of the book", "type": "String"}, "start_date": {"description": "the start date of the reservation", "type": "Date"}, "end_date": {"description": "the end date of the reservation", "type": "Date"}}, "output_params": {"reservation_status": {"description": "the status of the reservation", "type": "String"}}, "format": "ReserveBook(user_email,ISBN,start_date,end_date) -> reservation_status"}], "Query": "Can you reserve the book 'Pride and Prejudice' for user 'michael_brown' from August 7th to August 21st?", "Label": "ReserveBook(user_email=Username2Email(username='michael_brown'),ISBN=Title2ISBN(title='Pride and Prejudice'), start_date='August 7th',end_date='August 21st')", "Index": 21}, {"APIs": [{"name": "Username2Email", "Description": "This API is used to convert a username to a user's email.", "input_params": {"username": {"description": "the username of the user", "type": "String"}}, "output_params": {"user_email": {"description": "the email of the user", "type": "String"}}, "format": "Username2Email(username) -> user_email"}, {"name": "Title2ISBN", "Description": "This API is used to convert a book title to its ISBN.", "input_params": {"title": {"description": "the title of the book", "type": "String"}}, "output_params": {"title_ISBN": {"description": "the ISBN of the book", "type": "String"}}, "format": "Title2ISBN(title) -> title_ISBN"}, {"name": "CheckAvailability", "Description": "This API checks the availability of a book based on its ISBN and a given date range.", "input_params": {"ISBN": {"description": "the ISBN of the book", "type": "String"}, "start_date": {"description": "the start date of the range", "type": "Date"}, "end_date": {"description": "the end date of the range", "type": "Date"}}, "output_params": {"availability_status": {"description": "the availability status of the book", "type": "String"}}, "format": "CheckAvailability(ISBN,start_date,end_date) -> availability_status"}, {"name": "ReserveBook", "Description": "This API is used to reserve a book.", "input_params": {"user_email": {"description": "the email of the user", "type": "String"}, "ISBN": {"description": "the ISBN of the book", "type": "String"}, "start_date": {"description": "the start date of the reservation", "type": "Date"}, "end_date": {"description": "the end date of the reservation", "type": "Date"}}, "output_params": {"reservation_status": {"description": "the status of the reservation", "type": "String"}}, "format": "ReserveBook(user_email,ISBN,start_date,end_date) -> reservation_status"}], "Query": "User 'sarah_wilson' wants to reserve the book 'Moby-Dick'. Start from September 12th to September 26th.", "Label": "ReserveBook(user_email=Username2Email(username='sarah_wilson'),ISBN=Title2ISBN(title='Moby-Dick'), start_date='September 12th',end_date='September 26th')", "Index": 22}, {"APIs": [{"name": "RecommendHotel", "Description": "This API recommends a hotel name based on city and star level.", "input_params": {"city": {"description": "the city for hotel recommendation", "type": "String"}, "star_level": {"description": "the star level of the hotel", "type": "Integer"}}, "output_params": {"hotel_name": {"description": "the name of the recommended hotel", "type": "String"}}, "format": "RecommendHotel(city, star_level) -> hotel_name"}, {"name": "GetCity", "Description": "This API will return the city of the user based on user ID.", "input_params": {"user_ID": {"description": "the ID of the user", "type": "Integer"}}, "output_params": {"city": {"description": "the city of the user", "type": "String"}}, "format": "GetCity(user_ID) -> city"}, {"name": "BookHotel", "Description": "This API books a hotel for a certain date.", "input_params": {"hotel_name": {"description": "the name of the hotel", "type": "String"}, "date": {"description": "the date of the booking", "type": "String"}}, "output_params": {"booking_status": {"description": "the status of the booking", "type": "String"}}, "format": "BookHotel(hotel_name, date) -> booking_status"}, {"name": "GetUserID", "Description": "This API retrieves the user ID by using the user name.", "input_params": {"username": {"description": "the name of the user", "type": "String"}}, "output_params": {"user_ID": {"description": "the ID of the user", "type": "Integer"}}, "format": "GetUserID(username) -> user_ID"}], "Query": "Can you book a 3-star hotel for David this weekend?", "Label": "BookHotel(hotel_name=RecommendHotel(city=GetCity(user_ID=GetUserID(username='David')), star_level=3), date='this weekend')", "Index": 89}, {"APIs": [{"name": "RecommendHotel", "Description": "This API recommends a hotel name based on city and star level.", "input_params": {"city": {"description": "the city for hotel recommendation", "type": "String"}, "star_level": {"description": "the star level of the hotel", "type": "Integer"}}, "output_params": {"hotel_name": {"description": "the name of the recommended hotel", "type": "String"}}, "format": "RecommendHotel(city, star_level) -> hotel_name"}, {"name": "GetCity", "Description": "This API will return the city of the user based on user ID.", "input_params": {"user_ID": {"description": "the ID of the user", "type": "Integer"}}, "output_params": {"city": {"description": "the city of the user", "type": "String"}}, "format": "GetCity(user_ID) -> city"}, {"name": "BookHotel", "Description": "This API books a hotel for a certain date.", "input_params": {"hotel_name": {"description": "the name of the hotel", "type": "String"}, "date": {"description": "the date of the booking", "type": "String"}}, "output_params": {"booking_status": {"description": "the status of the booking", "type": "String"}}, "format": "BookHotel(hotel_name, date) -> booking_status"}, {"name": "GetUserID", "Description": "This API retrieves the user ID by using the user name.", "input_params": {"username": {"description": "the name of the user", "type": "String"}}, "output_params": {"user_ID": {"description": "the ID of the user", "type": "Integer"}}, "format": "GetUserID(username) -> user_ID"}], "Query": "It would be great if you can reserve a 4-star hotel for Peter next Sunday.", "Label": "BookHotel(hotel_name=RecommendHotel(city=GetCity(user_ID=GetUserID(username='Peter')),star_level=4),date='next Sunday')", "Index": 90}, {"APIs": [{"name": "RecommendHotel", "Description": "This API recommends a hotel name based on city and star level.", "input_params": {"city": {"description": "the city for hotel recommendation", "type": "String"}, "star_level": {"description": "the star level of the hotel", "type": "Integer"}}, "output_params": {"hotel_name": {"description": "the name of the recommended hotel", "type": "String"}}, "format": "RecommendHotel(city, star_level) -> hotel_name"}, {"name": "GetCity", "Description": "This API will return the city of the user based on user ID.", "input_params": {"user_ID": {"description": "the ID of the user", "type": "Integer"}}, "output_params": {"city": {"description": "the city of the user", "type": "String"}}, "format": "GetCity(user_ID) -> city"}, {"name": "BookHotel", "Description": "This API books a hotel for a certain date.", "input_params": {"hotel_name": {"description": "the name of the hotel", "type": "String"}, "date": {"description": "the date of the booking", "type": "String"}}, "output_params": {"booking_status": {"description": "the status of the booking", "type": "String"}}, "format": "BookHotel(hotel_name, date) -> booking_status"}, {"name": "GetUserID", "Description": "This API retrieves the user ID by using the user name.", "input_params": {"username": {"description": "the name of the user", "type": "String"}}, "output_params": {"user_ID": {"description": "the ID of the user", "type": "Integer"}}, "format": "GetUserID(username) -> user_ID"}], "Query": "Please book a 2-star hotel for James this Wednesday.", "Label": "BookHotel(hotel_name=RecommendHotel(city=GetCity(user_ID=GetUserID(username='James')), star_level=2), date='this Wednesday')", "Index": 91}, {"APIs": [{"name": "RecommendHotel", "Description": "This API recommends a hotel name based on city and star level.", "input_params": {"city": {"description": "the city for hotel recommendation", "type": "String"}, "star_level": {"description": "the star level of the hotel", "type": "Integer"}}, "output_params": {"hotel_name": {"description": "the name of the recommended hotel", "type": "String"}}, "format": "RecommendHotel(city, star_level) -> hotel_name"}, {"name": "GetCity", "Description": "This API will return the city of the user based on user ID.", "input_params": {"user_ID": {"description": "the ID of the user", "type": "Integer"}}, "output_params": {"city": {"description": "the city of the user", "type": "String"}}, "format": "GetCity(user_ID) -> city"}, {"name": "BookHotel", "Description": "This API books a hotel for a certain date.", "input_params": {"hotel_name": {"description": "the name of the hotel", "type": "String"}, "date": {"description": "the date of the booking", "type": "String"}}, "output_params": {"booking_status": {"description": "the status of the booking", "type": "String"}}, "format": "BookHotel(hotel_name, date) -> booking_status"}, {"name": "GetUserID", "Description": "This API retrieves the user ID by using the user name.", "input_params": {"username": {"description": "the name of the user", "type": "String"}}, "output_params": {"user_ID": {"description": "the ID of the user", "type": "Integer"}}, "format": "GetUserID(username) -> user_ID"}], "Query": "I want to reserve a 5-star hotel for Olivia on Sunday.", "Label": "BookHotel(hotel_name=RecommendHotel(city=GetCity(user_ID=GetUserID(username='Olivia')), star_level=5), date='Sunday')", "Index": 92}, {"APIs": [{"name": "RecommendHotel", "Description": "This API recommends a hotel name based on city and star level.", "input_params": {"city": {"description": "the city for hotel recommendation", "type": "String"}, "star_level": {"description": "the star level of the hotel", "type": "Integer"}}, "output_params": {"hotel_name": {"description": "the name of the recommended hotel", "type": "String"}}, "format": "RecommendHotel(city, star_level) -> hotel_name"}, {"name": "GetCity", "Description": "This API will return the city of the user based on user ID.", "input_params": {"user_ID": {"description": "the ID of the user", "type": "Integer"}}, "output_params": {"city": {"description": "the city of the user", "type": "String"}}, "format": "GetCity(user_ID) -> city"}, {"name": "BookHotel", "Description": "This API books a hotel for a certain date.", "input_params": {"hotel_name": {"description": "the name of the hotel", "type": "String"}, "date": {"description": "the date of the booking", "type": "String"}}, "output_params": {"booking_status": {"description": "the status of the booking", "type": "String"}}, "format": "BookHotel(hotel_name, date) -> booking_status"}, {"name": "GetUserID", "Description": "This API retrieves the user ID by using the user name.", "input_params": {"username": {"description": "the name of the user", "type": "String"}}, "output_params": {"user_ID": {"description": "the ID of the user", "type": "Integer"}}, "format": "GetUserID(username) -> user_ID"}], "Query": "Is it possible to reserve a 2-star hotel for William on Thursday?", "Label": "BookHotel(hotel_name=RecommendHotel(city=GetCity(user_ID=GetUserID(username='William')), star_level=2), date='Thursday')", "Index": 94}, {"APIs": [{"name": "QueryEventTime", "Description": "This API is to query the start time of a specific event.", "input_params": {"event_name": {"description": "the name of the event", "type": "String"}}, "output_params": {"start_time": {"description": "the start time of the event", "type": "String"}}, "format": "QueryEventTime(event_name) -> start_time"}, {"name": "CalculateDistance", "Description": "This API is to calculate the distance between the start point and end point.", "input_params": {"start_point": {"description": "the starting point of the journey", "type": "String"}, "end_point": {"description": "the ending point of the journey", "type": "String"}}, "output_params": {"distance": {"description": "the distance between the start point and end point", "type": "Float"}}, "format": "CalculateDistance(start_point, end_point) -> distance"}, {"name": "EstimateTravelTime", "Description": "This API is to estimate the travel time based on the distance and mode of transportation.", "input_params": {"distance": {"description": "the distance of the journey", "type": "Float"}, "mode_of_transport": {"description": "the mode of transportation", "type": "String"}}, "output_params": {"time": {"description": "the estimated travel time", "type": "String"}}, "format": "EstimateTravelTime(distance, mode_of_transport) -> time"}, {"name": "AlertBeforeDeparture", "Description": "This API is to calculate the time when the user needs to leave, given the event time and travel time.", "input_params": {"event_time": {"description": "the time of the event", "type": "DateTime"}, "travel_time": {"description": "the estimated travel time", "type": "String"}}, "output_params": {"alert_time": {"description": "the time when the user needs to leave", "type": "DateTime"}}, "format": "AlertBeforeDeparture(event_time, travel_time) -> alert_time"}], "Query": "I want to know when should I leave from King Station for a concert located at Central Park, I will drive a car.", "Label": "AlertBeforeDeparture(event_time=QueryEventTime(event_name='concert'),travel_time=EstimateTravelTime(distance=CalculateDistance(start_point='King Station',end_point='Central Park'),mode_of_transport='drive'))", "Index": 105}, {"APIs": [{"name": "QueryEventTime", "Description": "This API is to query the start time of a specific event.", "input_params": {"event_name": {"description": "the name of the event", "type": "String"}}, "output_params": {"start_time": {"description": "the start time of the event", "type": "String"}}, "format": "QueryEventTime(event_name) -> start_time"}, {"name": "CalculateDistance", "Description": "This API is to calculate the distance between the start point and end point.", "input_params": {"start_point": {"description": "the starting point of the journey", "type": "String"}, "end_point": {"description": "the ending point of the journey", "type": "String"}}, "output_params": {"distance": {"description": "the distance between the start point and end point", "type": "Float"}}, "format": "CalculateDistance(start_point, end_point) -> distance"}, {"name": "EstimateTravelTime", "Description": "This API is to estimate the travel time based on the distance and mode of transportation.", "input_params": {"distance": {"description": "the distance of the journey", "type": "Float"}, "mode_of_transport": {"description": "the mode of transportation", "type": "String"}}, "output_params": {"time": {"description": "the estimated travel time", "type": "String"}}, "format": "EstimateTravelTime(distance, mode_of_transport) -> time"}, {"name": "AlertBeforeDeparture", "Description": "This API is to calculate the time when the user needs to leave, given the event time and travel time.", "input_params": {"event_time": {"description": "the time of the event", "type": "DateTime"}, "travel_time": {"description": "the estimated travel time", "type": "String"}}, "output_params": {"alert_time": {"description": "the time when the user needs to leave", "type": "DateTime"}}, "format": "AlertBeforeDeparture(event_time, travel_time) -> alert_time"}], "Query": "When should I go for a meeting which is held at downtown by taxi? I am now at Power Station.", "Label": "AlertBeforeDeparture(event_time=QueryEventTime(event_name='meeting'),travel_time=EstimateTravelTime(distance=CalculateDistance(start_point='Power Station',end_point='downtown'),mode_of_transport='taxi'))", "Index": 106}, {"APIs": [{"name": "QueryEventTime", "Description": "This API is to query the start time of a specific event.", "input_params": {"event_name": {"description": "the name of the event", "type": "String"}}, "output_params": {"start_time": {"description": "the start time of the event", "type": "String"}}, "format": "QueryEventTime(event_name) -> start_time"}, {"name": "CalculateDistance", "Description": "This API is to calculate the distance between the start point and end point.", "input_params": {"start_point": {"description": "the starting point of the journey", "type": "String"}, "end_point": {"description": "the ending point of the journey", "type": "String"}}, "output_params": {"distance": {"description": "the distance between the start point and end point", "type": "Float"}}, "format": "CalculateDistance(start_point, end_point) -> distance"}, {"name": "EstimateTravelTime", "Description": "This API is to estimate the travel time based on the distance and mode of transportation.", "input_params": {"distance": {"description": "the distance of the journey", "type": "Float"}, "mode_of_transport": {"description": "the mode of transportation", "type": "String"}}, "output_params": {"time": {"description": "the estimated travel time", "type": "String"}}, "format": "EstimateTravelTime(distance, mode_of_transport) -> time"}, {"name": "AlertBeforeDeparture", "Description": "This API is to calculate the time when the user needs to leave, given the event time and travel time.", "input_params": {"event_time": {"description": "the time of the event", "type": "DateTime"}, "travel_time": {"description": "the estimated travel time", "type": "String"}}, "output_params": {"alert_time": {"description": "the time when the user needs to leave", "type": "DateTime"}}, "format": "AlertBeforeDeparture(event_time, travel_time) -> alert_time"}], "Query": "At what time should I leave for Music Festival. The end point is Golden Beach and I will depart from Queen Street by bike?", "Label": "AlertBeforeDeparture(event_time=QueryEventTime(event_name='Music Festival'),travel_time=EstimateTravelTime(distance=CalculateDistance(start_point='Queen Street',end_point='Golden Beach'),mode_of_transport='bike'))", "Index": 107}, {"APIs": [{"name": "Username2ID", "Description": "This API is to convert user name to user ID.", "input_params": {"user_name": {"description": "the name of the user", "type": "String"}}, "output_params": {"user_ID": {"description": "the ID of the user", "type": "Integer"}}, "format": "Username2ID(user_name) -> user_ID"}, {"name": "BookRestaurant", "Description": "This API allows the user to book a specific restaurant for a certain date and time", "input_params": {"restaurant_name": {"description": "the name of restarant", "type": "String"}, "date": {"description": "data", "type": "String"}, "time": {"description": "time", "type": "String"}}, "output_params": {"booking status": {"description": "Booking success or failure information", "type": "String"}}, "format": "BookRestaurant(restaurant_name, date, time) -> booking status"}, {"name": "RecommendRestaurant", "Description": "This API returns the name of a restaurant according to location and star_level", "input_params": {"location": {"description": "the location of the restaurant", "type": "Location"}, "star_level": {"description": "the star level of the restaurant", "type": "Integer"}}, "output_params": {"restaurant_name": {"description": "the name of the restaurant", "type": "String"}}, "format": "RecommendRestaurant(location,star_level) -> restaurant_name"}, {"name": "GetUserLocation", "Description": "This API returns the location of a certain user ID", "input_params": {"user_ID": {"description": "the ID of the user, please note that it should be number, not character", "type": "Integer"}}, "output_params": {"user_location": {"description": "the location of the user ID", "type": "Location"}}, "format": "GetUserLocation(user_ID) -> user_location"}, {"name": "GetRestaurantLevel", "Description": "This API returns the star level of a certain restaurant", "input_params": {"restaurant_name": {"description": "the name of restaurant", "type": "String"}}, "output_params": {"star_level": {"description": "the star level of the restaurant", "type": "Integer"}}, "format": "GetRestaurantLevel(restaurant_name) -> star_level"}], "Query": "Can you make a reservation at a restaurant with 3 stars for John this Saturday, 8pm? He prefers Chinese cuisine.", "Label": "BookRestaurant(restaurant_name=RecommendRestaurant(location=GetUserLocation(user_ID=Username2ID(user_name='John')), star_level=3), date='Saturday', time='8pm')", "Index": 109}, {"APIs": [{"name": "Username2ID", "Description": "This API is to convert user name to user ID.", "input_params": {"user_name": {"description": "the name of the user", "type": "String"}}, "output_params": {"user_ID": {"description": "the ID of the user", "type": "Integer"}}, "format": "Username2ID(user_name) -> user_ID"}, {"name": "BookRestaurant", "Description": "This API allows the user to book a specific restaurant for a certain date and time", "input_params": {"restaurant_name": {"description": "the name of restarant", "type": "String"}, "date": {"description": "data", "type": "String"}, "time": {"description": "time", "type": "String"}}, "output_params": {"booking status": {"description": "Booking success or failure information", "type": "String"}}, "format": "BookRestaurant(restaurant_name, date, time) -> booking status"}, {"name": "RecommendRestaurant", "Description": "This API returns the name of a restaurant according to location and star_level", "input_params": {"location": {"description": "the location of the restaurant", "type": "Location"}, "star_level": {"description": "the star level of the restaurant", "type": "Integer"}}, "output_params": {"restaurant_name": {"description": "the name of the restaurant", "type": "String"}}, "format": "RecommendRestaurant(location,star_level) -> restaurant_name"}, {"name": "GetUserLocation", "Description": "This API returns the location of a certain user ID", "input_params": {"user_ID": {"description": "the ID of the user, please note that it should be number, not character", "type": "Integer"}}, "output_params": {"user_location": {"description": "the location of the user ID", "type": "Location"}}, "format": "GetUserLocation(user_ID) -> user_location"}, {"name": "GetRestaurantLevel", "Description": "This API returns the star level of a certain restaurant", "input_params": {"restaurant_name": {"description": "the name of restaurant", "type": "String"}}, "output_params": {"star_level": {"description": "the star level of the restaurant", "type": "Integer"}}, "format": "GetRestaurantLevel(restaurant_name) -> star_level"}], "Query": "I would appreciate it if you could help me reserve a restaurant with a 5-star rating for Sarah next Wednesday, 7pm.", "Label": "BookRestaurant(restaurant_name=RecommendRestaurant(location=GetUserLocation(user_ID=Username2ID(user_name='Sarah')), star_level=5), date='next Wednesday', time='7pm')", "Index": 110}, {"APIs": [{"name": "Username2ID", "Description": "This API is to convert user name to user ID.", "input_params": {"user_name": {"description": "the name of the user", "type": "String"}}, "output_params": {"user_ID": {"description": "the ID of the user", "type": "Integer"}}, "format": "Username2ID(user_name) -> user_ID"}, {"name": "BookRestaurant", "Description": "This API allows the user to book a specific restaurant for a certain date and time", "input_params": {"restaurant_name": {"description": "the name of restarant", "type": "String"}, "date": {"description": "data", "type": "String"}, "time": {"description": "time", "type": "String"}}, "output_params": {"booking status": {"description": "Booking success or failure information", "type": "String"}}, "format": "BookRestaurant(restaurant_name, date, time) -> booking status"}, {"name": "RecommendRestaurant", "Description": "This API returns the name of a restaurant according to location and star_level", "input_params": {"location": {"description": "the location of the restaurant", "type": "Location"}, "star_level": {"description": "the star level of the restaurant", "type": "Integer"}}, "output_params": {"restaurant_name": {"description": "the name of the restaurant", "type": "String"}}, "format": "RecommendRestaurant(location,star_level) -> restaurant_name"}, {"name": "GetUserLocation", "Description": "This API returns the location of a certain user ID", "input_params": {"user_ID": {"description": "the ID of the user, please note that it should be number, not character", "type": "Integer"}}, "output_params": {"user_location": {"description": "the location of the user ID", "type": "Location"}}, "format": "GetUserLocation(user_ID) -> user_location"}, {"name": "GetRestaurantLevel", "Description": "This API returns the star level of a certain restaurant", "input_params": {"restaurant_name": {"description": "the name of restaurant", "type": "String"}}, "output_params": {"star_level": {"description": "the star level of the restaurant", "type": "Integer"}}, "format": "GetRestaurantLevel(restaurant_name) -> star_level"}], "Query": "Is it possible to book a restaurant with 4 stars for Michael this Sunday, 6:30pm? He enjoys Japanese cuisine.", "Label": "BookRestaurant(restaurant_name=RecommendRestaurant(location=GetUserLocation(user_ID=Username2ID(user_name='Michael')), star_level=4), date='Sunday', time='6:30pm')", "Index": 111}, {"APIs": [{"name": "Username2ID", "Description": "This API is to convert user name to user ID.", "input_params": {"user_name": {"description": "the name of the user", "type": "String"}}, "output_params": {"user_ID": {"description": "the ID of the user", "type": "Integer"}}, "format": "Username2ID(user_name) -> user_ID"}, {"name": "BookRestaurant", "Description": "This API allows the user to book a specific restaurant for a certain date and time", "input_params": {"restaurant_name": {"description": "the name of restarant", "type": "String"}, "date": {"description": "data", "type": "String"}, "time": {"description": "time", "type": "String"}}, "output_params": {"booking status": {"description": "Booking success or failure information", "type": "String"}}, "format": "BookRestaurant(restaurant_name, date, time) -> booking status"}, {"name": "RecommendRestaurant", "Description": "This API returns the name of a restaurant according to location and star_level", "input_params": {"location": {"description": "the location of the restaurant", "type": "Location"}, "star_level": {"description": "the star level of the restaurant", "type": "Integer"}}, "output_params": {"restaurant_name": {"description": "the name of the restaurant", "type": "String"}}, "format": "RecommendRestaurant(location,star_level) -> restaurant_name"}, {"name": "GetUserLocation", "Description": "This API returns the location of a certain user ID", "input_params": {"user_ID": {"description": "the ID of the user, please note that it should be number, not character", "type": "Integer"}}, "output_params": {"user_location": {"description": "the location of the user ID", "type": "Location"}}, "format": "GetUserLocation(user_ID) -> user_location"}, {"name": "GetRestaurantLevel", "Description": "This API returns the star level of a certain restaurant", "input_params": {"restaurant_name": {"description": "the name of restaurant", "type": "String"}}, "output_params": {"star_level": {"description": "the star level of the restaurant", "type": "Integer"}}, "format": "GetRestaurantLevel(restaurant_name) -> star_level"}], "Query": "Would you mind helping me book a restaurant with 2-star rating this Monday, 7pm? The reserver is Ava and she likes Mexican food.", "Label": "BookRestaurant(restaurant_name=RecommendRestaurant(location=GetUserLocation(user_ID=Username2ID(user_name='Ava')), star_level=2), date='Monday', time='7pm')", "Index": 113}, {"APIs": [{"name": "MusicGenre2Artist", "Description": "This API is to convert music genre to artist's name.", "input_params": {"music_genre": {"description": "the genre of the music", "type": "String"}}, "output_params": {"artist_name": {"description": "the name of the artist", "type": "String"}}, "format": "MusicGenre2Artist(music_genre) -> artist_name"}, {"name": "PlayMusic", "Description": "This API allows the user to play music.", "input_params": {"song_title": {"description": "the title of the song", "type": "String"}}, "output_params": {"music_status": {"description": "the status of the music playing", "type": "String"}}, "format": "PlayMusic(song_title) -> music_status"}, {"name": "RecommendSong", "Description": "This API returns the title of a song according to user's mood.", "input_params": {"user_mood": {"description": "the mood of the user", "type": "String"}}, "output_params": {"song_title": {"description": "the title of the recommended song", "type": "String"}}, "format": "RecommendSong(user_mood) -> song_title"}, {"name": "GetUserMood", "Description": "This API returns the mood of a certain user.", "input_params": {"user_name": {"description": "the name of the user", "type": "String"}}, "output_params": {"user_mood": {"description": "the mood of the user", "type": "String"}}, "format": "GetUserMood(user_name) -> user_mood"}], "Query": "As Peter, I want to listen to a song that matches my current feelings.", "Label": "PlayMusic(song_title=RecommendSong(user_mood=GetUserMood(user_name='Peter')))", "Index": 117}, {"APIs": [{"name": "MusicGenre2Artist", "Description": "This API is to convert music genre to artist's name.", "input_params": {"music_genre": {"description": "the genre of the music", "type": "String"}}, "output_params": {"artist_name": {"description": "the name of the artist", "type": "String"}}, "format": "MusicGenre2Artist(music_genre) -> artist_name"}, {"name": "PlayMusic", "Description": "This API allows the user to play music.", "input_params": {"song_title": {"description": "the title of the song", "type": "String"}}, "output_params": {"music_status": {"description": "the status of the music playing", "type": "String"}}, "format": "PlayMusic(song_title) -> music_status"}, {"name": "RecommendSong", "Description": "This API returns the title of a song according to user's mood.", "input_params": {"user_mood": {"description": "the mood of the user", "type": "String"}}, "output_params": {"song_title": {"description": "the title of the recommended song", "type": "String"}}, "format": "RecommendSong(user_mood) -> song_title"}, {"name": "GetUserMood", "Description": "This API returns the mood of a certain user.", "input_params": {"user_name": {"description": "the name of the user", "type": "String"}}, "output_params": {"user_mood": {"description": "the mood of the user", "type": "String"}}, "format": "GetUserMood(user_name) -> user_mood"}], "Query": "It will be perfect if you play music that matches my mood. This is Anna.", "Label": "PlayMusic(song_title=RecommendSong(user_mood=GetUserMood(user_name='Anna')))", "Index": 118}, {"APIs": [{"name": "MusicGenre2Artist", "Description": "This API is to convert music genre to artist's name.", "input_params": {"music_genre": {"description": "the genre of the music", "type": "String"}}, "output_params": {"artist_name": {"description": "the name of the artist", "type": "String"}}, "format": "MusicGenre2Artist(music_genre) -> artist_name"}, {"name": "PlayMusic", "Description": "This API allows the user to play music.", "input_params": {"song_title": {"description": "the title of the song", "type": "String"}}, "output_params": {"music_status": {"description": "the status of the music playing", "type": "String"}}, "format": "PlayMusic(song_title) -> music_status"}, {"name": "RecommendSong", "Description": "This API returns the title of a song according to user's mood.", "input_params": {"user_mood": {"description": "the mood of the user", "type": "String"}}, "output_params": {"song_title": {"description": "the title of the recommended song", "type": "String"}}, "format": "RecommendSong(user_mood) -> song_title"}, {"name": "GetUserMood", "Description": "This API returns the mood of a certain user.", "input_params": {"user_name": {"description": "the name of the user", "type": "String"}}, "output_params": {"user_mood": {"description": "the mood of the user", "type": "String"}}, "format": "GetUserMood(user_name) -> user_mood"}], "Query": "I'm Lisa, can you play a tune that corresponds to my mood?", "Label": "PlayMusic(song_title=RecommendSong(user_mood=GetUserMood(user_name='Lisa')))", "Index": 119}, {"APIs": [{"name": "MusicGenre2Artist", "Description": "This API is to convert music genre to artist's name.", "input_params": {"music_genre": {"description": "the genre of the music", "type": "String"}}, "output_params": {"artist_name": {"description": "the name of the artist", "type": "String"}}, "format": "MusicGenre2Artist(music_genre) -> artist_name"}, {"name": "PlayMusic", "Description": "This API allows the user to play music.", "input_params": {"song_title": {"description": "the title of the song", "type": "String"}}, "output_params": {"music_status": {"description": "the status of the music playing", "type": "String"}}, "format": "PlayMusic(song_title) -> music_status"}, {"name": "RecommendSong", "Description": "This API returns the title of a song according to user's mood.", "input_params": {"user_mood": {"description": "the mood of the user", "type": "String"}}, "output_params": {"song_title": {"description": "the title of the recommended song", "type": "String"}}, "format": "RecommendSong(user_mood) -> song_title"}, {"name": "GetUserMood", "Description": "This API returns the mood of a certain user.", "input_params": {"user_name": {"description": "the name of the user", "type": "String"}}, "output_params": {"user_mood": {"description": "the mood of the user", "type": "String"}}, "format": "GetUserMood(user_name) -> user_mood"}], "Query": "I'm Tom, can you play a song that aligns with my present mood?", "Label": "PlayMusic(song_title=RecommendSong(user_mood=GetUserMood(user_name='Tom')))", "Index": 120}, {"APIs": [{"name": "MusicGenre2Artist", "Description": "This API is to convert music genre to artist's name.", "input_params": {"music_genre": {"description": "the genre of the music", "type": "String"}}, "output_params": {"artist_name": {"description": "the name of the artist", "type": "String"}}, "format": "MusicGenre2Artist(music_genre) -> artist_name"}, {"name": "PlayMusic", "Description": "This API allows the user to play music.", "input_params": {"song_title": {"description": "the title of the song", "type": "String"}}, "output_params": {"music_status": {"description": "the status of the music playing", "type": "String"}}, "format": "PlayMusic(song_title) -> music_status"}, {"name": "RecommendSong", "Description": "This API returns the title of a song according to user's mood.", "input_params": {"user_mood": {"description": "the mood of the user", "type": "String"}}, "output_params": {"song_title": {"description": "the title of the recommended song", "type": "String"}}, "format": "RecommendSong(user_mood) -> song_title"}, {"name": "GetUserMood", "Description": "This API returns the mood of a certain user.", "input_params": {"user_name": {"description": "the name of the user", "type": "String"}}, "output_params": {"user_mood": {"description": "the mood of the user", "type": "String"}}, "format": "GetUserMood(user_name) -> user_mood"}], "Query": "Could you recommend a song for Emily?", "Label": "RecommendSong(user_mood=GetUserMood(user_name='Emily'))", "Index": 121}, {"APIs": [{"name": "MusicGenre2Artist", "Description": "This API is to convert music genre to artist's name.", "input_params": {"music_genre": {"description": "the genre of the music", "type": "String"}}, "output_params": {"artist_name": {"description": "the name of the artist", "type": "String"}}, "format": "MusicGenre2Artist(music_genre) -> artist_name"}, {"name": "PlayMusic", "Description": "This API allows the user to play music.", "input_params": {"song_title": {"description": "the title of the song", "type": "String"}}, "output_params": {"music_status": {"description": "the status of the music playing", "type": "String"}}, "format": "PlayMusic(song_title) -> music_status"}, {"name": "RecommendSong", "Description": "This API returns the title of a song according to user's mood.", "input_params": {"user_mood": {"description": "the mood of the user", "type": "String"}}, "output_params": {"song_title": {"description": "the title of the recommended song", "type": "String"}}, "format": "RecommendSong(user_mood) -> song_title"}, {"name": "GetUserMood", "Description": "This API returns the mood of a certain user.", "input_params": {"user_name": {"description": "the name of the user", "type": "String"}}, "output_params": {"user_mood": {"description": "the mood of the user", "type": "String"}}, "format": "GetUserMood(user_name) -> user_mood"}], "Query": "I'm Michael, can you play music that suits my mood?", "Label": "PlayMusic(song_title=RecommendSong(user_mood=GetUserMood(user_name='Michael')))", "Index": 122}, {"APIs": [{"name": "MusicGenre2Artist", "Description": "This API is to convert music genre to artist's name.", "input_params": {"music_genre": {"description": "the genre of the music", "type": "String"}}, "output_params": {"artist_name": {"description": "the name of the artist", "type": "String"}}, "format": "MusicGenre2Artist(music_genre) -> artist_name"}, {"name": "PlayMusic", "Description": "This API allows the user to play music.", "input_params": {"song_title": {"description": "the title of the song", "type": "String"}}, "output_params": {"music_status": {"description": "the status of the music playing", "type": "String"}}, "format": "PlayMusic(song_title) -> music_status"}, {"name": "RecommendSong", "Description": "This API returns the title of a song according to user's mood.", "input_params": {"user_mood": {"description": "the mood of the user", "type": "String"}}, "output_params": {"song_title": {"description": "the title of the recommended song", "type": "String"}}, "format": "RecommendSong(user_mood) -> song_title"}, {"name": "GetUserMood", "Description": "This API returns the mood of a certain user.", "input_params": {"user_name": {"description": "the name of the user", "type": "String"}}, "output_params": {"user_mood": {"description": "the mood of the user", "type": "String"}}, "format": "GetUserMood(user_name) -> user_mood"}], "Query": "My name is Sarah, can you play a song that matches my current mood?", "Label": "PlayMusic(song_title=RecommendSong(user_mood=GetUserMood(user_name='Sarah')))", "Index": 123}, {"APIs": [{"name": "MusicGenre2Artist", "Description": "This API is to convert music genre to artist's name.", "input_params": {"music_genre": {"description": "the genre of the music", "type": "String"}}, "output_params": {"artist_name": {"description": "the name of the artist", "type": "String"}}, "format": "MusicGenre2Artist(music_genre) -> artist_name"}, {"name": "PlayMusic", "Description": "This API allows the user to play music.", "input_params": {"song_title": {"description": "the title of the song", "type": "String"}}, "output_params": {"music_status": {"description": "the status of the music playing", "type": "String"}}, "format": "PlayMusic(song_title) -> music_status"}, {"name": "RecommendSong", "Description": "This API returns the title of a song according to user's mood.", "input_params": {"user_mood": {"description": "the mood of the user", "type": "String"}}, "output_params": {"song_title": {"description": "the title of the recommended song", "type": "String"}}, "format": "RecommendSong(user_mood) -> song_title"}, {"name": "GetUserMood", "Description": "This API returns the mood of a certain user.", "input_params": {"user_name": {"description": "the name of the user", "type": "String"}}, "output_params": {"user_mood": {"description": "the mood of the user", "type": "String"}}, "format": "GetUserMood(user_name) -> user_mood"}], "Query": "I'm Jack, could you suggest a song for my current mood?", "Label": "RecommendSong(user_mood=GetUserMood(user_name='Jack'))", "Index": 124}, {"APIs": [{"name": "GetWeather", "Description": "This API retrieves the weather information for a given city.", "input_params": {"city": {"description": "the name of the city", "type": "String"}}, "output_params": {"weather": {"description": "the weather information", "type": "String"}}, "format": "GetWeather(city) -> weather"}, {"name": "RecommendClothing", "Description": "This API suggests clothing items to wear based on the current weather.", "input_params": {"weather": {"description": "the current weather", "type": "String"}}, "output_params": {"clothingItems": {"description": "the suggested clothing items", "type": "List"}}, "format": "RecommendClothing(weather) -> clothingItems"}, {"name": "GetStore", "Description": "This API finds stores where a certain clothing item is available in a given city.", "input_params": {"city": {"description": "the name of the city", "type": "String"}, "clothingItem": {"description": "the clothing item", "type": "String"}}, "output_params": {"storename": {"description": "the name of the store", "type": "String"}}, "format": "GetStore(city, clothingItem) -> storename"}, {"name": "BuyClothing", "Description": "This API is to purchase a clothing item from a certain store.", "input_params": {"storename": {"description": "the name of the store", "type": "String"}, "clothingItem": {"description": "the clothing item", "type": "String"}}, "output_params": {"purchaseStatus": {"description": "the status of the purchase", "type": "String"}}, "format": "BuyClothing(storename, clothingItem) -> purchaseStatus"}], "Query": "I want to purchase apparel that is fit for the weather in Madrid.", "Label": "BuyClothing(storename=GetStore(city='Madrid', clothingItem=RecommendClothing(weather=GetWeather(city='Madrid'))), clothingItem=RecommendClothing(weather=GetWeather(city='Madrid')))", "Index": 126}, {"APIs": [{"name": "GetWeather", "Description": "This API retrieves the weather information for a given city.", "input_params": {"city": {"description": "the name of the city", "type": "String"}}, "output_params": {"weather": {"description": "the weather information", "type": "String"}}, "format": "GetWeather(city) -> weather"}, {"name": "RecommendClothing", "Description": "This API suggests clothing items to wear based on the current weather.", "input_params": {"weather": {"description": "the current weather", "type": "String"}}, "output_params": {"clothingItems": {"description": "the suggested clothing items", "type": "List"}}, "format": "RecommendClothing(weather) -> clothingItems"}, {"name": "GetStore", "Description": "This API finds stores where a certain clothing item is available in a given city.", "input_params": {"city": {"description": "the name of the city", "type": "String"}, "clothingItem": {"description": "the clothing item", "type": "String"}}, "output_params": {"storename": {"description": "the name of the store", "type": "String"}}, "format": "GetStore(city, clothingItem) -> storename"}, {"name": "BuyClothing", "Description": "This API is to purchase a clothing item from a certain store.", "input_params": {"storename": {"description": "the name of the store", "type": "String"}, "clothingItem": {"description": "the clothing item", "type": "String"}}, "output_params": {"purchaseStatus": {"description": "the status of the purchase", "type": "String"}}, "format": "BuyClothing(storename, clothingItem) -> purchaseStatus"}], "Query": "Is it possible for you to help me buy some clothes that matches the weather in Tokyo.", "Label": "BuyClothing(storename=GetStore(city='Tokyo', clothingItem=RecommendClothing(weather=GetWeather(city='Tokyo'))), clothingItem=RecommendClothing(weather=GetWeather(city='Tokyo')))", "Index": 127}, {"APIs": [{"name": "GetWeather", "Description": "This API retrieves the weather information for a given city.", "input_params": {"city": {"description": "the name of the city", "type": "String"}}, "output_params": {"weather": {"description": "the weather information", "type": "String"}}, "format": "GetWeather(city) -> weather"}, {"name": "RecommendClothing", "Description": "This API suggests clothing items to wear based on the current weather.", "input_params": {"weather": {"description": "the current weather", "type": "String"}}, "output_params": {"clothingItems": {"description": "the suggested clothing items", "type": "List"}}, "format": "RecommendClothing(weather) -> clothingItems"}, {"name": "GetStore", "Description": "This API finds stores where a certain clothing item is available in a given city.", "input_params": {"city": {"description": "the name of the city", "type": "String"}, "clothingItem": {"description": "the clothing item", "type": "String"}}, "output_params": {"storename": {"description": "the name of the store", "type": "String"}}, "format": "GetStore(city, clothingItem) -> storename"}, {"name": "BuyClothing", "Description": "This API is to purchase a clothing item from a certain store.", "input_params": {"storename": {"description": "the name of the store", "type": "String"}, "clothingItem": {"description": "the clothing item", "type": "String"}}, "output_params": {"purchaseStatus": {"description": "the status of the purchase", "type": "String"}}, "format": "BuyClothing(storename, clothingItem) -> purchaseStatus"}], "Query": "Hi there, it is so windy. I need to purchase a suitable outfit for the weather in Rome.", "Label": "BuyClothing(storename=GetStore(city='Rome', clothingItem=RecommendClothing(weather=GetWeather(city='Rome'))), clothingItem=RecommendClothing(weather=GetWeather(city='Rome')))", "Index": 129}, {"APIs": [{"name": "GetWeather", "Description": "This API retrieves the weather information for a given city.", "input_params": {"city": {"description": "the name of the city", "type": "String"}}, "output_params": {"weather": {"description": "the weather information", "type": "String"}}, "format": "GetWeather(city) -> weather"}, {"name": "RecommendClothing", "Description": "This API suggests clothing items to wear based on the current weather.", "input_params": {"weather": {"description": "the current weather", "type": "String"}}, "output_params": {"clothingItems": {"description": "the suggested clothing items", "type": "List"}}, "format": "RecommendClothing(weather) -> clothingItems"}, {"name": "GetStore", "Description": "This API finds stores where a certain clothing item is available in a given city.", "input_params": {"city": {"description": "the name of the city", "type": "String"}, "clothingItem": {"description": "the clothing item", "type": "String"}}, "output_params": {"storename": {"description": "the name of the store", "type": "String"}}, "format": "GetStore(city, clothingItem) -> storename"}, {"name": "BuyClothing", "Description": "This API is to purchase a clothing item from a certain store.", "input_params": {"storename": {"description": "the name of the store", "type": "String"}, "clothingItem": {"description": "the clothing item", "type": "String"}}, "output_params": {"purchaseStatus": {"description": "the status of the purchase", "type": "String"}}, "format": "BuyClothing(storename, clothingItem) -> purchaseStatus"}], "Query": "I'm currently in Sydney and it's humid. I need to buy clothing that suits the weather.", "Label": "BuyClothing(storename=GetStore(city='Sydney', clothingItem=RecommendClothing(weather=GetWeather(city='Sydney'))), clothingItem=RecommendClothing(weather=GetWeather(city='Sydney')))", "Index": 130}, {"APIs": [{"name": "GetWeather", "Description": "This API retrieves the weather information for a given city.", "input_params": {"city": {"description": "the name of the city", "type": "String"}}, "output_params": {"weather": {"description": "the weather information", "type": "String"}}, "format": "GetWeather(city) -> weather"}, {"name": "RecommendClothing", "Description": "This API suggests clothing items to wear based on the current weather.", "input_params": {"weather": {"description": "the current weather", "type": "String"}}, "output_params": {"clothingItems": {"description": "the suggested clothing items", "type": "List"}}, "format": "RecommendClothing(weather) -> clothingItems"}, {"name": "GetStore", "Description": "This API finds stores where a certain clothing item is available in a given city.", "input_params": {"city": {"description": "the name of the city", "type": "String"}, "clothingItem": {"description": "the clothing item", "type": "String"}}, "output_params": {"storename": {"description": "the name of the store", "type": "String"}}, "format": "GetStore(city, clothingItem) -> storename"}, {"name": "BuyClothing", "Description": "This API is to purchase a clothing item from a certain store.", "input_params": {"storename": {"description": "the name of the store", "type": "String"}, "clothingItem": {"description": "the clothing item", "type": "String"}}, "output_params": {"purchaseStatus": {"description": "the status of the purchase", "type": "String"}}, "format": "BuyClothing(storename, clothingItem) -> purchaseStatus"}], "Query": "Can you suggest what clothings to buy? I'm in Beijing and it's sunny.", "Label": "BuyClothing(storename=GetStore(city='Beijing', clothingItem=RecommendClothing(weather=GetWeather(city='Beijing'))), clothingItem=RecommendClothing(weather=GetWeather(city='Beijing')))", "Index": 131}, {"APIs": [{"name": "FindFlightByDestination", "Description": "This API is used to retrieve flight ID by using the flight's destination.", "input_params": {"destination": {"description": "the destination of the flight", "type": "String"}}, "output_params": {"flight_ID": {"description": "the ID of the flight", "type": "Integer"}}, "format": "FindFlightByDestination(destination) -> flight_ID"}, {"name": "GetUserDestination", "Description": "This API will return the user's travel destination based on user ID.", "input_params": {"user_ID": {"description": "the ID of the user", "type": "Integer"}}, "output_params": {"user_destination": {"description": "the travel destination of the user", "type": "String"}}, "format": "GetUserDestination(user_ID) -> user_destination"}, {"name": "BookFlight", "Description": "This API books a flight for a certain date.", "input_params": {"flight_ID": {"description": "the ID of the flight", "type": "Integer"}, "date": {"description": "the date of the flight booking", "type": "Date"}}, "output_params": {"booking_status": {"description": "the status of the flight booking", "type": "String"}}, "format": "BookFlight(flight_ID, date) -> booking_status"}, {"name": "GetUserID", "Description": "This API retrieves the user ID by using the user name.", "input_params": {"username": {"description": "the name of the user", "type": "String"}}, "output_params": {"user_ID": {"description": "the ID of the user", "type": "Integer"}}, "format": "GetUserID(username) -> user_ID"}], "Query": "I'm Ruby, Can you book a flight to my travel destination next Monday?", "Label": "BookFlight(flight_ID=FindFlightByDestination(destination=GetUserDestination(user_ID=GetUserID(username='Ruby'))), date='next Monday')", "Index": 207}, {"APIs": [{"name": "FindFlightByDestination", "Description": "This API is used to retrieve flight ID by using the flight's destination.", "input_params": {"destination": {"description": "the destination of the flight", "type": "String"}}, "output_params": {"flight_ID": {"description": "the ID of the flight", "type": "Integer"}}, "format": "FindFlightByDestination(destination) -> flight_ID"}, {"name": "GetUserDestination", "Description": "This API will return the user's travel destination based on user ID.", "input_params": {"user_ID": {"description": "the ID of the user", "type": "Integer"}}, "output_params": {"user_destination": {"description": "the travel destination of the user", "type": "String"}}, "format": "GetUserDestination(user_ID) -> user_destination"}, {"name": "BookFlight", "Description": "This API books a flight for a certain date.", "input_params": {"flight_ID": {"description": "the ID of the flight", "type": "Integer"}, "date": {"description": "the date of the flight booking", "type": "Date"}}, "output_params": {"booking_status": {"description": "the status of the flight booking", "type": "String"}}, "format": "BookFlight(flight_ID, date) -> booking_status"}, {"name": "GetUserID", "Description": "This API retrieves the user ID by using the user name.", "input_params": {"username": {"description": "the name of the user", "type": "String"}}, "output_params": {"user_ID": {"description": "the ID of the user", "type": "Integer"}}, "format": "GetUserID(username) -> user_ID"}], "Query": "Can you help John book a flight to his destination on July 18th?", "Label": "BookFlight(flight_ID=FindFlightByDestination(destination=GetUserDestination(user_ID=GetUserID(username='John'))), date='July 18th')", "Index": 208}, {"APIs": [{"name": "FindFlightByDestination", "Description": "This API is used to retrieve flight ID by using the flight's destination.", "input_params": {"destination": {"description": "the destination of the flight", "type": "String"}}, "output_params": {"flight_ID": {"description": "the ID of the flight", "type": "Integer"}}, "format": "FindFlightByDestination(destination) -> flight_ID"}, {"name": "GetUserDestination", "Description": "This API will return the user's travel destination based on user ID.", "input_params": {"user_ID": {"description": "the ID of the user", "type": "Integer"}}, "output_params": {"user_destination": {"description": "the travel destination of the user", "type": "String"}}, "format": "GetUserDestination(user_ID) -> user_destination"}, {"name": "BookFlight", "Description": "This API books a flight for a certain date.", "input_params": {"flight_ID": {"description": "the ID of the flight", "type": "Integer"}, "date": {"description": "the date of the flight booking", "type": "Date"}}, "output_params": {"booking_status": {"description": "the status of the flight booking", "type": "String"}}, "format": "BookFlight(flight_ID, date) -> booking_status"}, {"name": "GetUserID", "Description": "This API retrieves the user ID by using the user name.", "input_params": {"username": {"description": "the name of the user", "type": "String"}}, "output_params": {"user_ID": {"description": "the ID of the user", "type": "Integer"}}, "format": "GetUserID(username) -> user_ID"}], "Query": "Can you assist Emma in booking a flight to her travel destination on the 20th of this month?", "Label": "BookFlight(flight_ID=FindFlightByDestination(destination=GetUserDestination(user_ID=GetUserID(username='Emma'))), date='the 20th of this month')", "Index": 209}, {"APIs": [{"name": "FindFlightByDestination", "Description": "This API is used to retrieve flight ID by using the flight's destination.", "input_params": {"destination": {"description": "the destination of the flight", "type": "String"}}, "output_params": {"flight_ID": {"description": "the ID of the flight", "type": "Integer"}}, "format": "FindFlightByDestination(destination) -> flight_ID"}, {"name": "GetUserDestination", "Description": "This API will return the user's travel destination based on user ID.", "input_params": {"user_ID": {"description": "the ID of the user", "type": "Integer"}}, "output_params": {"user_destination": {"description": "the travel destination of the user", "type": "String"}}, "format": "GetUserDestination(user_ID) -> user_destination"}, {"name": "BookFlight", "Description": "This API books a flight for a certain date.", "input_params": {"flight_ID": {"description": "the ID of the flight", "type": "Integer"}, "date": {"description": "the date of the flight booking", "type": "Date"}}, "output_params": {"booking_status": {"description": "the status of the flight booking", "type": "String"}}, "format": "BookFlight(flight_ID, date) -> booking_status"}, {"name": "GetUserID", "Description": "This API retrieves the user ID by using the user name.", "input_params": {"username": {"description": "the name of the user", "type": "String"}}, "output_params": {"user_ID": {"description": "the ID of the user", "type": "Integer"}}, "format": "GetUserID(username) -> user_ID"}], "Query": "I'm Lucas. Could you find a flight and book it to my destination next Tuesday?", "Label": "BookFlight(flight_ID=FindFlightByDestination(destination=GetUserDestination(user_ID=GetUserID(username='Lucas'))), date='next Tuesday')", "Index": 214}, {"APIs": [{"name": "FindFlightByDestination", "Description": "This API is used to retrieve flight ID by using the flight's destination.", "input_params": {"destination": {"description": "the destination of the flight", "type": "String"}}, "output_params": {"flight_ID": {"description": "the ID of the flight", "type": "Integer"}}, "format": "FindFlightByDestination(destination) -> flight_ID"}, {"name": "GetUserDestination", "Description": "This API will return the user's travel destination based on user ID.", "input_params": {"user_ID": {"description": "the ID of the user", "type": "Integer"}}, "output_params": {"user_destination": {"description": "the travel destination of the user", "type": "String"}}, "format": "GetUserDestination(user_ID) -> user_destination"}, {"name": "BookFlight", "Description": "This API books a flight for a certain date.", "input_params": {"flight_ID": {"description": "the ID of the flight", "type": "Integer"}, "date": {"description": "the date of the flight booking", "type": "Date"}}, "output_params": {"booking_status": {"description": "the status of the flight booking", "type": "String"}}, "format": "BookFlight(flight_ID, date) -> booking_status"}, {"name": "GetUserID", "Description": "This API retrieves the user ID by using the user name.", "input_params": {"username": {"description": "the name of the user", "type": "String"}}, "output_params": {"user_ID": {"description": "the ID of the user", "type": "Integer"}}, "format": "GetUserID(username) -> user_ID"}], "Query": "I would like to book a flight to my destination this Friday. My name is John.", "Label": "BookFlight(flight_ID=FindFlightByDestination(destination=GetUserDestination(user_ID=GetUserID(username='John'))), date='this Friday')", "Index": 215}, {"APIs": [{"name": "FindFlightByDestination", "Description": "This API is used to retrieve flight ID by using the flight's destination.", "input_params": {"destination": {"description": "the destination of the flight", "type": "String"}}, "output_params": {"flight_ID": {"description": "the ID of the flight", "type": "Integer"}}, "format": "FindFlightByDestination(destination) -> flight_ID"}, {"name": "GetUserDestination", "Description": "This API will return the user's travel destination based on user ID.", "input_params": {"user_ID": {"description": "the ID of the user", "type": "Integer"}}, "output_params": {"user_destination": {"description": "the travel destination of the user", "type": "String"}}, "format": "GetUserDestination(user_ID) -> user_destination"}, {"name": "BookFlight", "Description": "This API books a flight for a certain date.", "input_params": {"flight_ID": {"description": "the ID of the flight", "type": "Integer"}, "date": {"description": "the date of the flight booking", "type": "Date"}}, "output_params": {"booking_status": {"description": "the status of the flight booking", "type": "String"}}, "format": "BookFlight(flight_ID, date) -> booking_status"}, {"name": "GetUserID", "Description": "This API retrieves the user ID by using the user name.", "input_params": {"username": {"description": "the name of the user", "type": "String"}}, "output_params": {"user_ID": {"description": "the ID of the user", "type": "Integer"}}, "format": "GetUserID(username) -> user_ID"}], "Query": "Book a flight for me to my travel destination on 25th December. My name is Maria", "Label": "BookFlight(flight_ID=FindFlightByDestination(destination=GetUserDestination(user_ID=GetUserID(username='Maria'))), date='25th December')", "Index": 216}, {"APIs": [{"name": "FindFlightByDestination", "Description": "This API is used to retrieve flight ID by using the flight's destination.", "input_params": {"destination": {"description": "the destination of the flight", "type": "String"}}, "output_params": {"flight_ID": {"description": "the ID of the flight", "type": "Integer"}}, "format": "FindFlightByDestination(destination) -> flight_ID"}, {"name": "GetUserDestination", "Description": "This API will return the user's travel destination based on user ID.", "input_params": {"user_ID": {"description": "the ID of the user", "type": "Integer"}}, "output_params": {"user_destination": {"description": "the travel destination of the user", "type": "String"}}, "format": "GetUserDestination(user_ID) -> user_destination"}, {"name": "BookFlight", "Description": "This API books a flight for a certain date.", "input_params": {"flight_ID": {"description": "the ID of the flight", "type": "Integer"}, "date": {"description": "the date of the flight booking", "type": "Date"}}, "output_params": {"booking_status": {"description": "the status of the flight booking", "type": "String"}}, "format": "BookFlight(flight_ID, date) -> booking_status"}, {"name": "GetUserID", "Description": "This API retrieves the user ID by using the user name.", "input_params": {"username": {"description": "the name of the user", "type": "String"}}, "output_params": {"user_ID": {"description": "the ID of the user", "type": "Integer"}}, "format": "GetUserID(username) -> user_ID"}], "Query": "Please reserve a flight for me to where I'm traveling on June 1st. My name is Steve.", "Label": "BookFlight(flight_ID=FindFlightByDestination(destination=GetUserDestination(user_ID=GetUserID(username='Steve'))), date='June 1st')", "Index": 217}, {"APIs": [{"name": "SearchRestaurant", "Description": "This API finds a restaurant and its location in a certain cuisine.", "input_params": {"cuisine": {"description": "cuisine type", "type": "String"}}, "output_params": {"restaurant_location": {"description": "restaurant location", "type": "String"}}, "format": "SearchRestaurant(cuisine) -> restaurant_location"}, {"name": "GetRoute", "Description": "This API provides the optimal driving route between two locations.", "input_params": {"origin_location": {"description": "starting location,the format: (Latitude,longitude),eg.(23,145)", "type": "String"}, "destination_location": {"description": "destination location,the format: (Latitude,longitude),eg.(23,145)", "type": "String"}}, "output_params": {"route": {"description": "optimal driving route", "type": "String"}}, "format": "GetRoute(origin_location,destination_location) -> route"}, {"name": "GetUserLocation", "Description": "This API returns the location of a certain user", "input_params": {"person_ID": {"description": "the ID of the user, it should be a number, not a character", "type": "Integer"}}, "output_params": {"user_location": {"description": "the location of the user, the format: (Latitude,longitude),eg.(23,145)", "type": "String"}}, "format": "GetUserLocation(person_ID) -> user_location"}, {"name": "Personname2ID", "Description": "This API is to convert user name to user ID.", "input_params": {"person_name": {"description": "the name of the person", "type": "String"}}, "output_params": {"person_ID": {"description": "the ID of the person", "type": "Integer"}}, "format": "Personname2ID(person_name) -> person_ID"}], "Query": "Give Mike the quickest route to a highly recommended Mexican food place", "Label": "GetRoute(origin_location=GetUserLocation(person_ID=Personname2ID(person_name='Mike')),destination_location=SearchRestaurant(cuisine='Mexican'))", "Index": 376}, {"APIs": [{"name": "SearchRestaurant", "Description": "This API finds a restaurant and its location in a certain cuisine.", "input_params": {"cuisine": {"description": "cuisine type", "type": "String"}}, "output_params": {"restaurant_location": {"description": "restaurant location", "type": "String"}}, "format": "SearchRestaurant(cuisine) -> restaurant_location"}, {"name": "GetRoute", "Description": "This API provides the optimal driving route between two locations.", "input_params": {"origin_location": {"description": "starting location,the format: (Latitude,longitude),eg.(23,145)", "type": "String"}, "destination_location": {"description": "destination location,the format: (Latitude,longitude),eg.(23,145)", "type": "String"}}, "output_params": {"route": {"description": "optimal driving route", "type": "String"}}, "format": "GetRoute(origin_location,destination_location) -> route"}, {"name": "GetUserLocation", "Description": "This API returns the location of a certain user", "input_params": {"person_ID": {"description": "the ID of the user, it should be a number, not a character", "type": "Integer"}}, "output_params": {"user_location": {"description": "the location of the user, the format: (Latitude,longitude),eg.(23,145)", "type": "String"}}, "format": "GetUserLocation(person_ID) -> user_location"}, {"name": "Personname2ID", "Description": "This API is to convert user name to user ID.", "input_params": {"person_name": {"description": "the name of the person", "type": "String"}}, "output_params": {"person_ID": {"description": "the ID of the person", "type": "Integer"}}, "format": "Personname2ID(person_name) -> person_ID"}], "Query": "Can you suggest the optimal route for Lisa to a recommended restaurant for Japanese cuisine?", "Label": "GetRoute(origin_location=GetUserLocation(person_ID=Personname2ID(person_name='Lisa')),destination_location=SearchRestaurant(cuisine='Japanese'))", "Index": 377}, {"APIs": [{"name": "SearchRestaurant", "Description": "This API finds a restaurant and its location in a certain cuisine.", "input_params": {"cuisine": {"description": "cuisine type", "type": "String"}}, "output_params": {"restaurant_location": {"description": "restaurant location", "type": "String"}}, "format": "SearchRestaurant(cuisine) -> restaurant_location"}, {"name": "GetRoute", "Description": "This API provides the optimal driving route between two locations.", "input_params": {"origin_location": {"description": "starting location,the format: (Latitude,longitude),eg.(23,145)", "type": "String"}, "destination_location": {"description": "destination location,the format: (Latitude,longitude),eg.(23,145)", "type": "String"}}, "output_params": {"route": {"description": "optimal driving route", "type": "String"}}, "format": "GetRoute(origin_location,destination_location) -> route"}, {"name": "GetUserLocation", "Description": "This API returns the location of a certain user", "input_params": {"person_ID": {"description": "the ID of the user, it should be a number, not a character", "type": "Integer"}}, "output_params": {"user_location": {"description": "the location of the user, the format: (Latitude,longitude),eg.(23,145)", "type": "String"}}, "format": "GetUserLocation(person_ID) -> user_location"}, {"name": "Personname2ID", "Description": "This API is to convert user name to user ID.", "input_params": {"person_name": {"description": "the name of the person", "type": "String"}}, "output_params": {"person_ID": {"description": "the ID of the person", "type": "Integer"}}, "format": "Personname2ID(person_name) -> person_ID"}], "Query": "Find the optimal driving route for Lucy to a recommended restaurant that serves French cuisine", "Label": "GetRoute(origin_location=GetUserLocation(person_ID=Personname2ID(person_name='Lucy')),destination_location=SearchRestaurant(cuisine='French'))", "Index": 378}, {"APIs": [{"name": "SearchRestaurant", "Description": "This API finds a restaurant and its location in a certain cuisine.", "input_params": {"cuisine": {"description": "cuisine type", "type": "String"}}, "output_params": {"restaurant_location": {"description": "restaurant location", "type": "String"}}, "format": "SearchRestaurant(cuisine) -> restaurant_location"}, {"name": "GetRoute", "Description": "This API provides the optimal driving route between two locations.", "input_params": {"origin_location": {"description": "starting location,the format: (Latitude,longitude),eg.(23,145)", "type": "String"}, "destination_location": {"description": "destination location,the format: (Latitude,longitude),eg.(23,145)", "type": "String"}}, "output_params": {"route": {"description": "optimal driving route", "type": "String"}}, "format": "GetRoute(origin_location,destination_location) -> route"}, {"name": "GetUserLocation", "Description": "This API returns the location of a certain user", "input_params": {"person_ID": {"description": "the ID of the user, it should be a number, not a character", "type": "Integer"}}, "output_params": {"user_location": {"description": "the location of the user, the format: (Latitude,longitude),eg.(23,145)", "type": "String"}}, "format": "GetUserLocation(person_ID) -> user_location"}, {"name": "Personname2ID", "Description": "This API is to convert user name to user ID.", "input_params": {"person_name": {"description": "the name of the person", "type": "String"}}, "output_params": {"person_ID": {"description": "the ID of the person", "type": "Integer"}}, "format": "Personname2ID(person_name) -> person_ID"}], "Query": "Can you provide the best driving route for Lisa to a recommended Mexican restaurant?", "Label": "GetRoute(origin_location=GetUserLocation(person_ID=Personname2ID(person_name='Lisa')),destination_location=SearchRestaurant(cuisine='Mexican'))", "Index": 379}, {"APIs": [{"name": "SearchRestaurant", "Description": "This API finds a restaurant and its location in a certain cuisine.", "input_params": {"cuisine": {"description": "cuisine type", "type": "String"}}, "output_params": {"restaurant_location": {"description": "restaurant location", "type": "String"}}, "format": "SearchRestaurant(cuisine) -> restaurant_location"}, {"name": "GetRoute", "Description": "This API provides the optimal driving route between two locations.", "input_params": {"origin_location": {"description": "starting location,the format: (Latitude,longitude),eg.(23,145)", "type": "String"}, "destination_location": {"description": "destination location,the format: (Latitude,longitude),eg.(23,145)", "type": "String"}}, "output_params": {"route": {"description": "optimal driving route", "type": "String"}}, "format": "GetRoute(origin_location,destination_location) -> route"}, {"name": "GetUserLocation", "Description": "This API returns the location of a certain user", "input_params": {"person_ID": {"description": "the ID of the user, it should be a number, not a character", "type": "Integer"}}, "output_params": {"user_location": {"description": "the location of the user, the format: (Latitude,longitude),eg.(23,145)", "type": "String"}}, "format": "GetUserLocation(person_ID) -> user_location"}, {"name": "Personname2ID", "Description": "This API is to convert user name to user ID.", "input_params": {"person_name": {"description": "the name of the person", "type": "String"}}, "output_params": {"person_ID": {"description": "the ID of the person", "type": "Integer"}}, "format": "Personname2ID(person_name) -> person_ID"}], "Query": "Find the best route for Emma to drive to a top-rated French restaurant", "Label": "GetRoute(origin_location=GetUserLocation(person_ID=Personname2ID(person_name='Emma')),destination_location=SearchRestaurant(cuisine='French'))", "Index": 380}, {"APIs": [{"name": "SearchRestaurant", "Description": "This API finds a restaurant and its location in a certain cuisine.", "input_params": {"cuisine": {"description": "cuisine type", "type": "String"}}, "output_params": {"restaurant_location": {"description": "restaurant location", "type": "String"}}, "format": "SearchRestaurant(cuisine) -> restaurant_location"}, {"name": "GetRoute", "Description": "This API provides the optimal driving route between two locations.", "input_params": {"origin_location": {"description": "starting location,the format: (Latitude,longitude),eg.(23,145)", "type": "String"}, "destination_location": {"description": "destination location,the format: (Latitude,longitude),eg.(23,145)", "type": "String"}}, "output_params": {"route": {"description": "optimal driving route", "type": "String"}}, "format": "GetRoute(origin_location,destination_location) -> route"}, {"name": "GetUserLocation", "Description": "This API returns the location of a certain user", "input_params": {"person_ID": {"description": "the ID of the user, it should be a number, not a character", "type": "Integer"}}, "output_params": {"user_location": {"description": "the location of the user, the format: (Latitude,longitude),eg.(23,145)", "type": "String"}}, "format": "GetUserLocation(person_ID) -> user_location"}, {"name": "Personname2ID", "Description": "This API is to convert user name to user ID.", "input_params": {"person_name": {"description": "the name of the person", "type": "String"}}, "output_params": {"person_ID": {"description": "the ID of the person", "type": "Integer"}}, "format": "Personname2ID(person_name) -> person_ID"}], "Query": "How can Sara drive to a recommended Indian restaurant in the most optimal way?", "Label": "GetRoute(origin_location=GetUserLocation(person_ID=Personname2ID(person_name='Sara')),destination_location=SearchRestaurant(cuisine='Indian'))", "Index": 381}, {"APIs": [{"name": "SearchMovieByGenre", "Description": "This API is used to retrieve a movie ID by using the movie's genre.", "input_params": {"genre": {"description": "the genre of the movie", "type": "String"}}, "output_params": {"movie_ID": {"description": "the ID of the movie", "type": "Integer"}}, "format": "SearchMovieByGenre(genre) -> movie_ID"}, {"name": "GetUserFavoriteGenre", "Description": "This API will return the user's favorite movie genre based on user ID.", "input_params": {"user_ID": {"description": "the ID of the user", "type": "Integer"}}, "output_params": {"user_genre": {"description": "the favorite genre of the user", "type": "String"}}, "format": "GetUserFavoriteGenre(user_ID) -> user_genre"}, {"name": "ReserveMovieTicket", "Description": "This API reserves a movie ticket for a certain date.", "input_params": {"movie_ID": {"description": "the ID of the movie", "type": "Integer"}, "date": {"description": "the date of the movie ticket reservation", "type": "Date"}}, "output_params": {"reservation_status": {"description": "the status of the movie ticket reservation", "type": "String"}}, "format": "ReserveMovieTicket(movie_ID, date) -> reservation_status"}, {"name": "GetUserID", "Description": "This API retrieves the user ID by using the user name.", "input_params": {"username": {"description": "the name of the user", "type": "String"}}, "output_params": {"user_ID": {"description": "the ID of the user", "type": "Integer"}}, "format": "GetUserID(username) -> user_ID"}], "Query": "I'm Mike, can you book a movie ticket for my favorite genre next Friday?", "Label": "ReserveMovieTicket(movie_ID=SearchMovieByGenre(genre=GetUserFavoriteGenre(user_ID=GetUserID(username='Mike'))), date='next Friday')", "Index": 414}, {"APIs": [{"name": "FindRestaurantByCuisine", "Description": "This API is used to retrieve a restaurant ID by using the restaurant's cuisine.", "input_params": {"cuisine": {"description": "the cuisine of the restaurant", "type": "String"}}, "output_params": {"restaurant_ID": {"description": "the ID of the restaurant", "type": "Integer"}}, "format": "FindRestaurantByCuisine(cuisine) -> restaurant_ID"}, {"name": "GetUserFavoriteCuisine", "Description": "This API will return the user's favorite cuisine based on user ID.", "input_params": {"user_ID": {"description": "the ID of the user", "type": "Integer"}}, "output_params": {"user_cuisine": {"description": "the favorite cuisine of the user", "type": "String"}}, "format": "GetUserFavoriteCuisine(user_ID) -> user_cuisine"}, {"name": "BookRestaurantTable", "Description": "This API books a table at a restaurant for a certain date.", "input_params": {"restaurant_ID": {"description": "the ID of the restaurant", "type": "Integer"}, "date": {"description": "the date of the booking", "type": "Date"}}, "output_params": {"booking_status": {"description": "the status of the booking", "type": "String"}}, "format": "BookRestaurantTable(restaurant_ID, date) -> booking_status"}, {"name": "GetUserID", "Description": "This API retrieves the user ID by using the user name.", "input_params": {"username": {"description": "the name of the user", "type": "String"}}, "output_params": {"user_ID": {"description": "the ID of the user", "type": "Integer"}}, "format": "GetUserID(username) -> user_ID"}], "Query": "I'm John, can you book a table for my favorite cuisine next Saturday?", "Label": "BookRestaurantTable(restaurant_ID=FindRestaurantByCuisine(cuisine=GetUserFavoriteCuisine(user_ID=GetUserID(username='John'))), date='next Saturday')", "Index": 415}, {"APIs": [{"name": "FindRestaurantByCuisine", "Description": "This API is used to retrieve restaurant ID by using the restaurant's cuisine type.", "input_params": {"cuisine": {"description": "the cuisine type of the restaurant", "type": "String"}}, "output_params": {"restaurant_ID": {"description": "the ID of the restaurant", "type": "Integer"}}, "format": "FindRestaurantByCuisine(cuisine) -> restaurant_ID"}, {"name": "GetUserPreferredCuisine", "Description": "This API will return the user's preferred cuisine based on user ID.", "input_params": {"user_ID": {"description": "the ID of the user", "type": "Integer"}}, "output_params": {"user_cuisine": {"description": "the preferred cuisine of the user", "type": "String"}}, "format": "GetUserPreferredCuisine(user_ID) -> user_cuisine"}, {"name": "ReserveTable", "Description": "This API reserves a table at a restaurant for a certain date and time.", "input_params": {"restaurant_ID": {"description": "the ID of the restaurant", "type": "Integer"}, "date": {"description": "the date of the reservation", "type": "Date"}, "time": {"description": "the time of the reservation", "type": "Time"}}, "output_params": {"reservation_status": {"description": "the status of the reservation", "type": "String"}}, "format": "ReserveTable(restaurant_ID, date, time) -> reservation_status"}, {"name": "GetUserID", "Description": "This API retrieves the user ID by using the user name.", "input_params": {"username": {"description": "the name of the user", "type": "String"}}, "output_params": {"user_ID": {"description": "the ID of the user", "type": "Integer"}}, "format": "GetUserID(username) -> user_ID"}], "Query": "Hi, I'm John. Could you reserve a table for dinner at my favorite cuisine restaurant tomorrow at 7pm?", "Label": "ReserveTable(restaurant_ID=FindRestaurantByCuisine(cuisine=GetUserPreferredCuisine(user_ID=GetUserID(username='John'))), date='tomorrow', time='7pm')", "Index": 416}, {"APIs": [{"name": "Card2Number", "Description": "This API is to convert card ID to card number.", "input_params": {"card_id": {"description": "the ID of the card", "type": "String"}}, "output_params": {"card_number": {"description": "the number of the card", "type": "String"}}, "format": "Card2Number(card_id) -> card_number"}, {"name": "CheckCardBalance", "Description": "This API allows the user to check the balance in a card.", "input_params": {"card_number": {"description": "the number of the card", "type": "String"}}, "output_params": {"card_balance": {"description": "the balance in the card", "type": "Float"}}, "format": "CheckCardBalance(card_number) -> card_balance"}, {"name": "OrderProduct", "Description": "This API returns the price of a product based on the product ID.", "input_params": {"product_id": {"description": "the ID of the product", "type": "String"}}, "output_params": {"product_price": {"description": "the price of the product", "type": "Float"}}, "format": "OrderProduct(product_id) -> product_price"}, {"name": "EnoughBalance", "Description": "This API checks if there is sufficient balance in the card for the product order and returns an order status.", "input_params": {"product_price": {"description": "the price of the product", "type": "Float"}, "card_balance": {"description": "the balance in the card", "type": "Float"}}, "output_params": {"order_status": {"description": "the status of the order", "type": "String"}}, "format": "EnoughBalance(product_price, card_balance) -> order_status"}], "Query": "I have a card with the ID '9876', can I afford a product with the ID 'abc123' using this card?", "Label": "EnoughBalance(product_price=OrderProduct(product_id='abc123'), card_balance=CheckCardBalance(card_number=Card2Number(card_id='9876')))", "Index": 418}, {"APIs": [{"name": "Productname2ID", "Description": "This API is to convert a product's name to product ID.", "input_params": {"product_name": {"description": "the name of the product", "type": "String"}}, "output_params": {"product_ID": {"description": "the ID of the product", "type": "Integer"}}, "format": "Productname2ID(product_name) -> product_ID"}, {"name": "AddProductToCart", "Description": "This API is to add a product to a cart.", "input_params": {"cart_ID": {"description": "the ID of the cart", "type": "Integer"}, "product_ID": {"description": "the ID of the product", "type": "Integer"}}, "output_params": {"product_status": {"description": "the status of the product", "type": "String"}}, "format": "AddProductToCart(cart_ID, product_ID) -> product_status"}, {"name": "Cartname2ID", "Description": "This API is to convert a cart's name to cart ID.", "input_params": {"cart_name": {"description": "the name of the cart", "type": "String"}}, "output_params": {"cart_ID": {"description": "the ID of the cart", "type": "Integer"}}, "format": "Cartname2ID(cart_name) -> cart_ID"}, {"name": "GetUsernameID", "Description": "This API is to convert a username to user ID.", "input_params": {"username": {"description": "the username", "type": "String"}}, "output_params": {"person_ID": {"description": "the ID of the person", "type": "Integer"}}, "format": "GetUsernameID(username) -> person_ID"}], "Query": "Please add the product \"iPhone 12\" to Michael's cart \"Tech Products\" with his username michael_tech.", "Label": "AddProductToCart(cart_ID=Cartname2ID(cart_name='Tech Products'), product_ID=Productname2ID(product_name='iPhone 12'))", "Index": 442}, {"APIs": [{"name": "Coursename2ID", "Description": "This API converts a course name to its ID.", "input_params": {"course_name": {"description": "the name of the course", "type": "String"}}, "output_params": {"course_ID": {"description": "the ID of the course", "type": "Integer"}}, "format": "Coursename2ID(course_name) -> course_ID"}, {"name": "Instructorname2ID", "Description": "This API converts an instructor's name to their ID.", "input_params": {"instructor_name": {"description": "the name of the instructor", "type": "String"}}, "output_params": {"instructor_ID": {"description": "the ID of the instructor", "type": "Integer"}}, "format": "Instructorname2ID(instructor_name) -> instructor_ID"}, {"name": "EnrollCourse", "Description": "This API enrolls a student in a course with a specific instructor.", "input_params": {"course_ID": {"description": "the ID of the course", "type": "Integer"}, "student_ID": {"description": "the ID of the student", "type": "Integer"}, "instructor_ID": {"description": "the ID of the instructor", "type": "Integer"}}, "output_params": {"Enrollment status": {"description": "the status of the enrollment", "type": "String"}}, "format": "EnrollCourse(course_ID, student_ID, instructor_ID) -> Enrollment status"}, {"name": "Studentname2ID", "Description": "This API converts a student's name to their ID.", "input_params": {"student_name": {"description": "the name of the student", "type": "String"}}, "output_params": {"student_ID": {"description": "the ID of the student", "type": "Integer"}}, "format": "Studentname2ID(student_name) -> student_ID"}], "Query": "Can you enroll \"Tom\" in the \"Mathematics\" course taught by \"Dr. Smith\"?", "Label": "EnrollCourse(course_ID=Coursename2ID(course_name='Mathematics'), student_ID=Studentname2ID(student_name='Tom'), instructor_ID=Instructorname2ID(instructor_name='Dr. Smith'))", "Index": 450}, {"APIs": [{"name": "GetHealthInformation", "Description": "This API provides general health information based on age and gender.", "input_params": {"age": {"description": "the age of the person", "type": "Integer"}, "gender": {"description": "the gender of the person", "type": "String"}}, "output_params": {"HealthInformation": {"description": "the general health information", "type": "String"}}, "format": "GetHealthInformation(age, gender) -> HealthInformation"}, {"name": "GetDietPlan", "Description": "This API generates a diet plan based on the provided health information.", "input_params": {"HealthInformation": {"description": "the general health information", "type": "String"}}, "output_params": {"DietPlan": {"description": "the generated diet plan", "type": "String"}}, "format": "GetDietPlan(HealthInformation) -> DietPlan"}, {"name": "GetExerciseRoutine", "Description": "This API recommends an exercise routine based on the health information.", "input_params": {"HealthInformation": {"description": "the general health information", "type": "String"}}, "output_params": {"ExerciseRoutine": {"description": "the recommended exercise routine", "type": "String"}}, "format": "GetExerciseRoutine(HealthInformation) -> ExerciseRoutine"}, {"name": "CreateWellnessPlan", "Description": "This API creates a comprehensive wellness plan that includes a diet plan and exercise routine.", "input_params": {"DietPlan": {"description": "the generated diet plan", "type": "String"}, "ExerciseRoutine": {"description": "the recommended exercise routine", "type": "String"}}, "output_params": {"WellnessPlan": {"description": "the comprehensive wellness plan", "type": "String"}}, "format": "CreateWellnessPlan(DietPlan, ExerciseRoutine) -> WellnessPlan"}], "Query": "I am a 45-year-old woman looking to improve my health. Can you help me create a wellness plan?", "Label": "CreateWellnessPlan(DietPlan=GetDietPlan(HealthInformation=GetHealthInformation(age=45, gender='woman')), ExerciseRoutine=GetExerciseRoutine(HealthInformation=GetHealthInformation(age=45, gender='woman')))", "Index": 474}, {"APIs": [{"name": "CheckInventory", "Description": "This API checks the inventory status of a specific product.", "input_params": {"productID": {"description": "the ID of the product", "type": "Integer"}}, "output_params": {"InventoryStatus": {"description": "the inventory status of the product", "type": "String"}}, "format": "CheckInventory(productID) -> InventoryStatus"}, {"name": "EstimateDeliveryTime", "Description": "This API estimates the delivery time for a product to a specific location.", "input_params": {"productID": {"description": "the ID of the product", "type": "Integer"}, "location": {"description": "the location for delivery", "type": "String"}}, "output_params": {"DeliveryTime": {"description": "the estimated delivery time for the product", "type": "String"}}, "format": "EstimateDeliveryTime(productID, location) -> DeliveryTime"}, {"name": "CalculateShippingCost", "Description": "This API calculates the shipping cost for a product to a specific location.", "input_params": {"productID": {"description": "the ID of the product", "type": "Integer"}, "location": {"description": "the location for delivery", "type": "String"}}, "output_params": {"ShippingCost": {"description": "the calculated shipping cost for the product", "type": "Float"}}, "format": "CalculateShippingCost(productID, location) -> ShippingCost"}, {"name": "PlaceOrder", "Description": "This API places an order if the product is in stock, and provides estimated delivery time and shipping cost.", "input_params": {"InventoryStatus": {"description": "the inventory status of the product", "type": "String"}, "DeliveryTime": {"description": "the estimated delivery time for the product", "type": "String"}, "ShippingCost": {"description": "the calculated shipping cost for the product", "type": "Float"}}, "output_params": {"OrderConfirmation": {"description": "the confirmation of the placed order", "type": "String"}}, "format": "PlaceOrder(InventoryStatus, DeliveryTime, ShippingCost) -> OrderConfirmation"}], "Query": "I want to order a new television, product ID 12345, to my home in New York. Can you help me with this?", "Label": "PlaceOrder(InventoryStatus=CheckInventory(productID='12345'), DeliveryTime=EstimateDeliveryTime(productID='12345', location='New York'), ShippingCost=CalculateShippingCost(productID='12345', location='New York'))", "Index": 477}, {"APIs": [{"name": "FindFlight", "Description": "This API is to find the available flights from one point to another.", "input_params": {"startPoint": {"description": "the starting point of the flight", "type": "String"}, "endPoint": {"description": "the destination of the flight", "type": "String"}}, "output_params": {"flight": {"description": "the available flight options", "type": "List"}}, "format": "FindFlight(startPoint, endPoint) -> flight"}, {"name": "GetFlightPrice", "Description": "This API is to get the price of a specific flight.", "input_params": {"flight": {"description": "the flight option", "type": "String"}}, "output_params": {"price": {"description": "the price of the flight", "type": "Float"}}, "format": "GetFlightPrice(flight) -> price"}, {"name": "CheckLuggageAllowance", "Description": "This API is to check the luggage allowance of a specific flight.", "input_params": {"flight": {"description": "the flight option", "type": "String"}}, "output_params": {"luggage": {"description": "the luggage allowance of the flight", "type": "String"}}, "format": "CheckLuggageAllowance(flight) -> luggage"}, {"name": "GetLuggageFee", "Description": "This API is to get the luggage fee based on the luggage allowance and the weight of the luggage.", "input_params": {"luggage": {"description": "the luggage allowance of the flight", "type": "String"}, "weight": {"description": "the weight of the luggage", "type": "Float"}}, "output_params": {"fee": {"description": "the luggage fee", "type": "Float"}}, "format": "GetLuggageFee(luggage, weight) -> fee"}], "Query": "I am flying from New York to Los Angeles and I have 50kg of luggage. How much will it cost me?", "Label": "GetLuggageFee(luggage=CheckLuggageAllowance(flight=FindFlight(startPoint='New York', endPoint='Los Angeles')), weight=50)", "Index": 478}, {"APIs": [{"name": "GetHotelRoomRate", "Description": "This API is to get the rate of a hotel room in a specific city.", "input_params": {"city": {"description": "the name of the city", "type": "String"}}, "output_params": {"roomRate": {"description": "the rate of the hotel room", "type": "Float"}}, "format": "GetHotelRoomRate(city) -> roomRate"}, {"name": "GetMealCost", "Description": "This API is to get the cost of meals in a specific city.", "input_params": {"city": {"description": "the name of the city", "type": "String"}}, "output_params": {"mealCost": {"description": "the cost of meals", "type": "Float"}}, "format": "GetMealCost(city) -> mealCost"}, {"name": "GetSightSeeingCost", "Description": "This API is to get the cost for sightseeing in a specific city.", "input_params": {"city": {"description": "the name of the city", "type": "String"}}, "output_params": {"sightSeeingCost": {"description": "the cost for sightseeing", "type": "Float"}}, "format": "GetSightSeeingCost(city) -> sightSeeingCost"}, {"name": "CalculateVacationCost", "Description": "This API is to calculate the total cost of a vacation including hotel room, meals and sightseeing.", "input_params": {"roomRate": {"description": "the rate of the hotel room", "type": "Float"}, "mealCost": {"description": "the cost of meals", "type": "Float"}, "sightSeeingCost": {"description": "the cost for sightseeing", "type": "Float"}}, "output_params": {"totalCost": {"description": "the total cost of the vacation", "type": "Float"}}, "format": "CalculateVacationCost(roomRate, mealCost, sightSeeingCost) -> totalCost"}], "Query": "I'm planning a vacation to Paris. How much will the hotel, meals and sightseeing cost me?", "Label": "CalculateVacationCost(roomRate=GetHotelRoomRate(city='Paris'), mealCost=GetMealCost(city='Paris'), sightSeeingCost=GetSightSeeingCost(city='Paris'))", "Index": 479}, {"APIs": [{"name": "GetWeatherForecast", "Description": "This API is to get the weather forecast of a specific city at a specific date.", "input_params": {"city": {"description": "the name of the city", "type": "String"}, "date": {"description": "the specific date", "type": "String"}}, "output_params": {"weatherForecast": {"description": "the weather forecast of the city at the specific date", "type": "String"}}, "format": "GetWeatherForecast(city, date) -> weatherForecast"}, {"name": "FindOutdoorActivities", "Description": "This API is to find suitable outdoor activities based on the city and weather forecast.", "input_params": {"city": {"description": "the name of the city", "type": "String"}, "weatherForecast": {"description": "the weather forecast of the city", "type": "String"}}, "output_params": {"activities": {"description": "the suitable outdoor activities based on the city and weather forecast", "type": "List"}}, "format": "FindOutdoorActivities(city, weatherForecast) -> activities"}, {"name": "FindRestaurants", "Description": "This API is to find restaurants of a specific cuisine type in a specific city.", "input_params": {"city": {"description": "the name of the city", "type": "String"}, "cuisineType": {"description": "the specific cuisine type", "type": "String"}}, "output_params": {"restaurants": {"description": "the restaurants of the specific cuisine type in the specific city", "type": "List"}}, "format": "FindRestaurants(city, cuisineType) -> restaurants"}, {"name": "PlanDayOut", "Description": "This API is to plan a day out including outdoor activities and restaurants in a specific city.", "input_params": {"city": {"description": "the name of the city", "type": "String"}, "activities": {"description": "the suitable outdoor activities", "type": "List"}, "restaurants": {"description": "the restaurants", "type": "List"}}, "output_params": {"dayPlan": {"description": "the plan for a day out including outdoor activities and restaurants", "type": "String"}}, "format": "PlanDayOut(city, activities, restaurants) -> dayPlan"}], "Query": "I'm going to visit San Francisco next Sunday, can you suggest some outdoor activities and a Japanese restaurant for me depending on the weather?", "Label": "PlanDayOut(city='San Francisco', activities=FindOutdoorActivities(city='San Francisco', weatherForecast=GetWeatherForecast(city='San Francisco', date='next Sunday')), restaurants=FindRestaurants(city='San Francisco', cuisineType='Japanese'))", "Index": 481}, {"APIs": [{"name": "WeatherForecast", "Description": "This API provides the weather forecast of a city on a certain date.", "input_params": {"city": {"description": "the name of the city", "type": "String"}, "date": {"description": "the date for the weather forecast", "type": "String"}}, "output_params": {"weather": {"description": "the weather forecast for the city on the specified date", "type": "String"}}, "format": "WeatherForecast(city, date) -> weather"}, {"name": "RestaurantRecommendations", "Description": "This API provides recommendations for restaurants in a city.", "input_params": {"city": {"description": "the name of the city", "type": "String"}}, "output_params": {"restaurants": {"description": "a list of recommended restaurants in the city", "type": "List"}}, "format": "RestaurantRecommendations(city) -> restaurants"}, {"name": "EventFinder", "Description": "This API provides information about events happening in a city on a certain date.", "input_params": {"city": {"description": "the name of the city", "type": "String"}, "date": {"description": "the date for the event search", "type": "String"}}, "output_params": {"events": {"description": "a list of events happening in the city on the specified date", "type": "List"}}, "format": "EventFinder(city, date) -> events"}, {"name": "TripAdvisor", "Description": "This API helps in advising your trip by combining weather, restaurants, and events information.", "input_params": {"weather": {"description": "the weather forecast for the city on the specified date", "type": "String"}, "restaurants": {"description": "a list of recommended restaurants in the city", "type": "List"}, "events": {"description": "a list of events happening in the city on the specified date", "type": "List"}}, "output_params": {"trip_advice": {"description": "advice for your trip based on the weather, restaurants, and events information", "type": "String"}}, "format": "TripAdvisor(weather, restaurants, events) -> trip_advice"}], "Query": "Can you suggest a plan for my trip to Rome next weekend?", "Label": "TripAdvisor(weather=WeatherForecast(city='Rome', date='next weekend'), restaurants=RestaurantRecommendations(city='Rome'), events=EventFinder(city='Rome', date='next weekend'))", "Index": 538}, {"APIs": [{"name": "GetUserIDByUser", "Description": "This API is to convert user name to user ID.", "input_params": {"user_name": {"description": "the name of the user", "type": "String"}}, "output_params": {"user_ID": {"description": "the ID of the user", "type": "Integer"}}, "format": "GetUserIDByUser(user_name) -> user_ID"}, {"name": "GetBookIDByTitle", "Description": "This API is to convert book title to book ID.", "input_params": {"book_title": {"description": "the title of the book", "type": "String"}}, "output_params": {"book_ID": {"description": "the ID of the book", "type": "Integer"}}, "format": "GetBookIDByTitle(book_title) -> book_ID"}, {"name": "GetBookGenre", "Description": "This API is to get the genre of a book.", "input_params": {"book_ID": {"description": "the ID of the book", "type": "Integer"}}, "output_params": {"genre": {"description": "the genre of the book", "type": "String"}}, "format": "GetBookGenre(book_ID) -> genre"}, {"name": "RecommendBookByGenre", "Description": "This API is to recommend a book based on genre.", "input_params": {"user_ID": {"description": "the ID of the user", "type": "Integer"}, "genre": {"description": "the genre of the book", "type": "String"}}, "output_params": {"recommended_book": {"description": "the recommended book", "type": "String"}}, "format": "RecommendBookByGenre(user_ID, genre) -> recommended_book"}], "Query": "Hi, This is Edward. I just finished 'Moby Dick' and looking for a similar book. Can you suggest me one?", "Label": "RecommendBookByGenre(user_ID=GetUserIDByUser(user_name='Edward'), genre=GetBookGenre(book_ID=GetBookIDByTitle(book_title='Moby Dick')))", "Index": 631}, {"APIs": [{"name": "GetUserID", "Description": "This API is to convert user name to user ID.", "input_params": {"username": {"description": "the name of the user", "type": "String"}}, "output_params": {"user_ID": {"description": "the ID of the user", "type": "Integer"}}, "format": "GetUserID(username) -> user_ID"}, {"name": "GetUserFavouriteGenre", "Description": "This API is to get the favourite genre of a user.", "input_params": {"user_ID": {"description": "the ID of the user", "type": "Integer"}}, "output_params": {"genre": {"description": "the favourite genre of the user", "type": "String"}}, "format": "GetUserFavouriteGenre(user_ID) -> genre"}, {"name": "FindMovieByGenre", "Description": "This API is to find a movie by genre.", "input_params": {"genre": {"description": "the genre of the movie", "type": "String"}}, "output_params": {"movie_ID": {"description": "the ID of the movie", "type": "Integer"}}, "format": "FindMovieByGenre(genre) -> movie_ID"}, {"name": "BookMovieTicket", "Description": "This API is to book a movie ticket.", "input_params": {"movie_ID": {"description": "the ID of the movie", "type": "Integer"}, "date": {"description": "the date of the movie", "type": "Date"}}, "output_params": {"booking_status": {"description": "the status of the booking", "type": "String"}}, "format": "BookMovieTicket(movie_ID, date) -> booking_status"}], "Query": "I'm Alex, Can you book a movie ticket for my favourite genre this Sunday?", "Label": "BookMovieTicket(movie_ID=FindMovieByGenre(genre=GetUserFavouriteGenre(user_ID=GetUserID(username='Alex'))), date='this Sunday')", "Index": 632}, {"APIs": [{"name": "GetUserID", "Description": "This API is to convert user name to user ID.", "input_params": {"username": {"description": "the name of the user", "type": "String"}}, "output_params": {"user_ID": {"description": "the ID of the user", "type": "Integer"}}, "format": "GetUserID(username) -> user_ID"}, {"name": "GetUserFavoriteGenre", "Description": "This API is to get the favorite genre of a user.", "input_params": {"user_ID": {"description": "the ID of the user", "type": "Integer"}}, "output_params": {"genre": {"description": "the favorite genre of the user", "type": "String"}}, "format": "GetUserFavoriteGenre(user_ID) -> genre"}, {"name": "SearchMovieByGenre", "Description": "This API is to search movies by genre.", "input_params": {"genre": {"description": "the genre of the movie", "type": "String"}}, "output_params": {"movie_ID": {"description": "the ID of the movie", "type": "Integer"}}, "format": "SearchMovieByGenre(genre) -> movie_ID"}, {"name": "ReserveMovieTicket", "Description": "This API is to reserve a movie ticket.", "input_params": {"movie_ID": {"description": "the ID of the movie", "type": "Integer"}, "date": {"description": "the date of the movie", "type": "Date"}}, "output_params": {"reservation_status": {"description": "the status of the reservation", "type": "String"}}, "format": "ReserveMovieTicket(movie_ID, date) -> reservation_status"}], "Query": "Hello, I am Sarah. Could you please reserve a movie ticket for me according to my favorite genre for this Sunday?", "Label": "ReserveMovieTicket(movie_ID=SearchMovieByGenre(genre=GetUserFavoriteGenre(user_ID=GetUserID(username='Sarah'))), date='this Sunday')", "Index": 633}, {"APIs": [{"name": "GetUserID", "Description": "This API is to convert user name to user ID.", "input_params": {"username": {"description": "the name of the user", "type": "String"}}, "output_params": {"user_ID": {"description": "the ID of the user", "type": "Integer"}}, "format": "GetUserID(username) -> user_ID"}, {"name": "GetUserFavoriteCuisine", "Description": "This API is to get the favorite cuisine of a user.", "input_params": {"user_ID": {"description": "the ID of the user", "type": "Integer"}}, "output_params": {"cuisine": {"description": "the favorite cuisine of the user", "type": "String"}}, "format": "GetUserFavoriteCuisine(user_ID) -> cuisine"}, {"name": "FindRestaurantByCuisine", "Description": "This API is to find a restaurant by cuisine.", "input_params": {"cuisine": {"description": "the cuisine to search for", "type": "String"}}, "output_params": {"restaurant_ID": {"description": "the ID of the restaurant", "type": "Integer"}}, "format": "FindRestaurantByCuisine(cuisine) -> restaurant_ID"}, {"name": "BookRestaurantTable", "Description": "This API is to book a table at a restaurant.", "input_params": {"restaurant_ID": {"description": "the ID of the restaurant", "type": "Integer"}, "date": {"description": "the date for the table booking", "type": "Date"}}, "output_params": {"booking_status": {"description": "the status of the table booking", "type": "String"}}, "format": "BookRestaurantTable(restaurant_ID, date) -> booking_status"}], "Query": "I'm Michelle. Can you book a table for me for my favourite cuisine next Wednesday?", "Label": "BookRestaurantTable(restaurant_ID=FindRestaurantByCuisine(cuisine=GetUserFavoriteCuisine(user_ID=GetUserID(username='Michelle'))), date='next Wednesday')", "Index": 636}, {"APIs": [{"name": "GetUserID", "Description": "This API is to convert user name to user ID.", "input_params": {"username": {"description": "the name of the user", "type": "String"}}, "output_params": {"user_ID": {"description": "the ID of the user", "type": "Integer"}}, "format": "GetUserID(username) -> user_ID"}, {"name": "GetUserFavoriteCuisine", "Description": "This API is to get the favorite cuisine of a user.", "input_params": {"user_ID": {"description": "the ID of the user", "type": "Integer"}}, "output_params": {"cuisine": {"description": "the favorite cuisine of the user", "type": "String"}}, "format": "GetUserFavoriteCuisine(user_ID) -> cuisine"}, {"name": "FindRestaurantByCuisine", "Description": "This API is to find a restaurant by cuisine.", "input_params": {"cuisine": {"description": "the cuisine type", "type": "String"}}, "output_params": {"restaurant_ID": {"description": "the ID of the restaurant", "type": "Integer"}}, "format": "FindRestaurantByCuisine(cuisine) -> restaurant_ID"}, {"name": "BookRestaurantTable", "Description": "This API is to book a table at a restaurant.", "input_params": {"restaurant_ID": {"description": "the ID of the restaurant", "type": "Integer"}, "date": {"description": "the date of the reservation", "type": "Date"}}, "output_params": {"booking_status": {"description": "the status of the booking", "type": "String"}}, "format": "BookRestaurantTable(restaurant_ID, date) -> booking_status"}], "Query": "I'm Michelle. Can you book a table for me for my favourite cuisine next Wednesday?", "Label": "BookRestaurantTable(restaurant_ID=FindRestaurantByCuisine(cuisine=GetUserFavoriteCuisine(user_ID=GetUserID(username='Michelle'))), date='next Wednesday')", "Index": 637}, {"APIs": [{"name": "GetUserID", "Description": "This API is to convert user name to user ID.", "input_params": {"username": {"description": "the name of the user", "type": "String"}}, "output_params": {"user_ID": {"description": "the ID of the user", "type": "Integer"}}, "format": "GetUserID(username) -> user_ID"}, {"name": "GetUserPreferredCuisine", "Description": "This API is to get the preferred cuisine of a user.", "input_params": {"user_ID": {"description": "the ID of the user", "type": "Integer"}}, "output_params": {"cuisine": {"description": "the preferred cuisine of the user", "type": "String"}}, "format": "GetUserPreferredCuisine(user_ID) -> cuisine"}, {"name": "FindRestaurantByCuisine", "Description": "This API is to find a restaurant by cuisine.", "input_params": {"cuisine": {"description": "the cuisine to search for", "type": "String"}}, "output_params": {"restaurant_ID": {"description": "the ID of the restaurant", "type": "Integer"}}, "format": "FindRestaurantByCuisine(cuisine) -> restaurant_ID"}, {"name": "ReserveTable", "Description": "This API is to reserve a table at a restaurant.", "input_params": {"restaurant_ID": {"description": "the ID of the restaurant", "type": "Integer"}, "date": {"description": "the date of the reservation", "type": "Date"}, "time": {"description": "the time of the reservation", "type": "Time"}}, "output_params": {"reservation_status": {"description": "the status of the reservation", "type": "String"}}, "format": "ReserveTable(restaurant_ID, date, time) -> reservation_status"}], "Query": "Hello there! This is Jane, could you kindly book a place for lunch at my favorite seafood restaurant next Friday at 1pm?", "Label": "ReserveTable(restaurant_ID=FindRestaurantByCuisine(cuisine=GetUserPreferredCuisine(user_ID=GetUserID(username='Jane'))), date='next Friday', time='1pm')", "Index": 639}, {"APIs": [{"name": "GetUserID", "Description": "This API is to convert user name to user ID.", "input_params": {"username": {"description": "the name of the user", "type": "String"}}, "output_params": {"user_ID": {"description": "the ID of the user", "type": "Integer"}}, "format": "GetUserID(username) -> user_ID"}, {"name": "GetUserPreferredCuisine", "Description": "This API is to get the preferred cuisine of a user.", "input_params": {"user_ID": {"description": "the ID of the user", "type": "Integer"}}, "output_params": {"cuisine": {"description": "the preferred cuisine of the user", "type": "String"}}, "format": "GetUserPreferredCuisine(user_ID) -> cuisine"}, {"name": "FindRestaurantByCuisine", "Description": "This API is to find a restaurant by cuisine.", "input_params": {"cuisine": {"description": "the cuisine to search for", "type": "String"}}, "output_params": {"restaurant_ID": {"description": "the ID of the restaurant", "type": "Integer"}}, "format": "FindRestaurantByCuisine(cuisine) -> restaurant_ID"}, {"name": "ReserveTable", "Description": "This API is to reserve a table at a restaurant.", "input_params": {"restaurant_ID": {"description": "the ID of the restaurant", "type": "Integer"}, "date": {"description": "the date of the reservation", "type": "Date"}, "time": {"description": "the time of the reservation", "type": "Time"}}, "output_params": {"reservation_status": {"description": "the status of the reservation", "type": "String"}}, "format": "ReserveTable(restaurant_ID, date, time) -> reservation_status"}], "Query": "Hey, it's Sara here. Could you reserve a table for lunch at my preferred salad bar this coming Monday at 12:30pm?", "Label": "ReserveTable(restaurant_ID=FindRestaurantByCuisine(cuisine=GetUserPreferredCuisine(user_ID=GetUserID(username='Sara'))), date='this coming Monday', time='12:30pm')", "Index": 640}, {"APIs": [{"name": "GetUserCar", "Description": "This API is to get the car ID of a user.", "input_params": {"user_name": {"description": "the name of the user", "type": "String"}}, "output_params": {"car_id": {"description": "the ID of the user's car", "type": "Integer"}}, "format": "GetUserCar(user_name) -> car_id"}, {"name": "GetUserLocation", "Description": "This API is to get the location of a user.", "input_params": {"user_name": {"description": "the name of the user", "type": "String"}}, "output_params": {"user_location": {"description": "the location of the user", "type": "String"}}, "format": "GetUserLocation(user_name) -> user_location"}, {"name": "GetServiceStationNearMe", "Description": "This API is to get the nearest service station based on user location.", "input_params": {"user_location": {"description": "the location of the user", "type": "String"}}, "output_params": {"service_station_id": {"description": "the ID of the nearest service station", "type": "Integer"}}, "format": "GetServiceStationNearMe(user_location) -> service_station_id"}, {"name": "BookCarService", "Description": "This API is to book a car service.", "input_params": {"car_id": {"description": "the ID of the car", "type": "Integer"}, "service_station_id": {"description": "the ID of the service station", "type": "Integer"}, "user_name": {"description": "the name of the user", "type": "String"}}, "output_params": {"booking_status": {"description": "the status of the booking", "type": "String"}}, "format": "BookCarService(car_id, service_station_id, user_name) -> booking_status"}], "Query": "This is 'RobertBrown'. Could you schedule a service for my auto at the nearest service center?", "Label": "BookCarService(car_id=GetUserCar(user_name='RobertBrown'), service_station_id=GetServiceStationNearMe(user_location=GetUserLocation(user_name='RobertBrown')), user_name='RobertBrown')", "Index": 645}, {"APIs": [{"name": "UserIdToname", "Description": "This API is to convert user ID to user name.", "input_params": {"userId": {"description": "the ID of the user", "type": "Integer"}}, "output_params": {"user_name": {"description": "the name of the user", "type": "String"}}, "format": "UserIdToname(userId) -> user_name"}, {"name": "RouteToLocation", "Description": "This API is to convert route name to location coordinates.", "input_params": {"route": {"description": "the name of the bus route", "type": "String"}}, "output_params": {"location_coordinates": {"description": "the coordinates of the bus route location", "type": "String"}}, "format": "RouteToLocation(route) -> location_coordinates"}, {"name": "CheckBusSchedule", "Description": "This API is to check the bus schedule.", "input_params": {"location_coordinates": {"description": "the coordinates of the bus route location", "type": "String"}, "date": {"description": "the date of the bus schedule", "type": "Date"}, "time": {"description": "the time of the bus schedule", "type": "Time"}}, "output_params": {"bus_schedule_info": {"description": "the information of the bus schedule", "type": "String"}}, "format": "CheckBusSchedule(location_coordinates, date, time) -> bus_schedule_info"}, {"name": "BookBusSeat", "Description": "This API is to book a bus seat.", "input_params": {"user_name": {"description": "the name of the user", "type": "String"}, "bus_schedule_info": {"description": "the information of the bus schedule", "type": "String"}}, "output_params": {"booking_status": {"description": "the status of the booking", "type": "String"}}, "format": "BookBusSeat(user_name, bus_schedule_info) -> booking_status"}], "Query": "Can you arrange a seat on the bus route '22C' for user with id '11122' on May 10th at 1 PM?", "Label": "BookBusSeat(user_name=UserIdToname(userId='11122'), bus_schedule_info=CheckBusSchedule(location_coordinates=RouteToLocation(route='22C'), date='May 10th', time='1 PM'))", "Index": 740}, {"APIs": [{"name": "UserIdToname", "Description": "This API is to convert user ID to user name.", "input_params": {"userId": {"description": "the ID of the user", "type": "Integer"}}, "output_params": {"user_name": {"description": "the name of the user", "type": "String"}}, "format": "UserIdToname(userId) -> user_name"}, {"name": "RouteToLocation", "Description": "This API is to convert route name to location coordinates.", "input_params": {"route": {"description": "the name of the bus route", "type": "String"}}, "output_params": {"location_coordinates": {"description": "the coordinates of the bus route location", "type": "String"}}, "format": "RouteToLocation(route) -> location_coordinates"}, {"name": "CheckBusSchedule", "Description": "This API is to check the bus schedule.", "input_params": {"location_coordinates": {"description": "the coordinates of the bus route location", "type": "String"}, "date": {"description": "the date of the bus schedule", "type": "Date"}, "time": {"description": "the time of the bus schedule", "type": "Time"}}, "output_params": {"bus_schedule_info": {"description": "the information of the bus schedule", "type": "String"}}, "format": "CheckBusSchedule(location_coordinates, date, time) -> bus_schedule_info"}, {"name": "BookBusSeat", "Description": "This API is to book a bus seat.", "input_params": {"user_name": {"description": "the name of the user", "type": "String"}, "bus_schedule_info": {"description": "the information of the bus schedule", "type": "String"}}, "output_params": {"booking_status": {"description": "the status of the booking", "type": "String"}}, "format": "BookBusSeat(user_name, bus_schedule_info) -> booking_status"}], "Query": "Can you reserve a seat on the bus route '99Z' for user with id '33344' on June 30th at 5 PM?", "Label": "BookBusSeat(user_name=UserIdToname(userId='33344'), bus_schedule_info=CheckBusSchedule(location_coordinates=RouteToLocation(route='99Z'), date='June 30th', time='5 PM'))", "Index": 741}, {"APIs": [{"name": "UserIdToname", "Description": "This API is to convert user ID to user name.", "input_params": {"userId": {"description": "the ID of the user", "type": "Integer"}}, "output_params": {"user_name": {"description": "the name of the user", "type": "String"}}, "format": "UserIdToname(userId) -> user_name"}, {"name": "RouteToLocation", "Description": "This API is to convert route name to location coordinates.", "input_params": {"route": {"description": "the name of the bus route", "type": "String"}}, "output_params": {"location_coordinates": {"description": "the coordinates of the bus route location", "type": "String"}}, "format": "RouteToLocation(route) -> location_coordinates"}, {"name": "CheckBusSchedule", "Description": "This API is to check the bus schedule.", "input_params": {"location_coordinates": {"description": "the coordinates of the bus route location", "type": "String"}, "date": {"description": "the date of the bus schedule", "type": "Date"}, "time": {"description": "the time of the bus schedule", "type": "Time"}}, "output_params": {"bus_schedule_info": {"description": "the information of the bus schedule", "type": "String"}}, "format": "CheckBusSchedule(location_coordinates, date, time) -> bus_schedule_info"}, {"name": "BookBusSeat", "Description": "This API is to book a bus seat.", "input_params": {"user_name": {"description": "the name of the user", "type": "String"}, "bus_schedule_info": {"description": "the information of the bus schedule", "type": "String"}}, "output_params": {"booking_status": {"description": "the status of the booking", "type": "String"}}, "format": "BookBusSeat(user_name, bus_schedule_info) -> booking_status"}], "Query": "Can you ensure a seat on the bus route '77X' for user with id '22233' on August 25th at 4 PM?", "Label": "BookBusSeat(user_name=UserIdToname(userId='22233'), bus_schedule_info=CheckBusSchedule(location_coordinates=RouteToLocation(route='77X'), date='August 25th', time='4 PM'))", "Index": 743}, {"APIs": [{"name": "Eventname2ID", "Description": "This API is to convert event name to event ID.", "input_params": {"event_name": {"description": "the name of the event", "type": "String"}}, "output_params": {"event_ID": {"description": "the ID of the event", "type": "Integer"}}, "format": "Eventname2ID(event_name) -> event_ID"}, {"name": "Venuename2ID", "Description": "This API is to convert venue name to venue ID.", "input_params": {"venue_name": {"description": "the name of the venue", "type": "String"}}, "output_params": {"venue_ID": {"description": "the ID of the venue", "type": "Integer"}}, "format": "Venuename2ID(venue_name) -> venue_ID"}, {"name": "StringToDatetime", "Description": "This API is to convert a string to a datetime object.", "input_params": {"date_string": {"description": "the string representation of the date", "type": "String"}}, "output_params": {"date": {"description": "the datetime object", "type": "Datetime"}}, "format": "StringToDatetime(date_string) -> date"}, {"name": "BookEventTicket", "Description": "This API is to book a ticket for an event.", "input_params": {"event_ID": {"description": "the ID of the event", "type": "Integer"}, "venue_ID": {"description": "the ID of the venue", "type": "Integer"}, "date": {"description": "the date of the event", "type": "Datetime"}}, "output_params": {"booking_status": {"description": "the status of the ticket booking", "type": "String"}}, "format": "BookEventTicket(event_ID, venue_ID, date) -> booking_status"}], "Query": "Can you book a ticket for the 'Beyonce concert' at the 'O2 Arena' on 'March 13, 2023'?", "Label": "BookEventTicket(event_ID=Eventname2ID(event_name='Beyonce concert'), venue_ID=Venuename2ID(venue_name='O2 Arena'), date=StringToDatetime(date_string='March 13, 2023'))", "Index": 776}, {"APIs": [{"name": "Coursename2ID", "Description": "This API is to convert course name to course ID.", "input_params": {"course_name": {"description": "the name of the course", "type": "String"}}, "output_params": {"course_ID": {"description": "the ID of the course", "type": "Integer"}}, "format": "Coursename2ID(course_name) -> course_ID"}, {"name": "Studentname2ID", "Description": "This API is to convert student name to student ID.", "input_params": {"student_name": {"description": "the name of the student", "type": "String"}}, "output_params": {"student_ID": {"description": "the ID of the student", "type": "Integer"}}, "format": "Studentname2ID(student_name) -> student_ID"}, {"name": "Instructorname2ID", "Description": "This API is to convert instructor name to instructor ID.", "input_params": {"instructor_name": {"description": "the name of the instructor", "type": "String"}}, "output_params": {"instructor_ID": {"description": "the ID of the instructor", "type": "Integer"}}, "format": "Instructorname2ID(instructor_name) -> instructor_ID"}, {"name": "EnrollCourse", "Description": "This API is to enroll a student in a course.", "input_params": {"course_ID": {"description": "the ID of the course", "type": "Integer"}, "student_ID": {"description": "the ID of the student", "type": "Integer"}, "instructor_ID": {"description": "the ID of the instructor", "type": "Integer"}}, "output_params": {"enrollment_status": {"description": "the status of the enrollment", "type": "String"}}, "format": "EnrollCourse(course_ID, student_ID, instructor_ID) -> enrollment_status"}], "Query": "Can you enroll 'Alice' in the 'Chemistry' course taught by 'Prof. Cooper'?", "Label": "EnrollCourse(course_ID=Coursename2ID(course_name='Chemistry'), student_ID=Studentname2ID(student_name='Alice'), instructor_ID=Instructorname2ID(instructor_name='Prof. Cooper'))", "Index": 780}, {"APIs": [{"name": "GetHealthInformation", "Description": "This API is to get health information based on age and gender.", "input_params": {"age": {"description": "the age of the person", "type": "Integer"}, "gender": {"description": "the gender of the person", "type": "String"}}, "output_params": {"health_info": {"description": "the health information of the person", "type": "String"}}, "format": "GetHealthInformation(age, gender) -> health_info"}, {"name": "GetDietPlan", "Description": "This API is to get a diet plan based on health information.", "input_params": {"HealthInformation": {"description": "the health information of the person", "type": "String"}}, "output_params": {"diet_plan": {"description": "the diet plan for the person", "type": "String"}}, "format": "GetDietPlan(HealthInformation) -> diet_plan"}, {"name": "GetExerciseRoutine", "Description": "This API is to get an exercise routine based on health information.", "input_params": {"HealthInformation": {"description": "the health information of the person", "type": "String"}}, "output_params": {"exercise_routine": {"description": "the exercise routine for the person", "type": "String"}}, "format": "GetExerciseRoutine(HealthInformation) -> exercise_routine"}, {"name": "CreateWellnessPlan", "Description": "This API is to create a wellness plan based on a diet plan and an exercise routine.", "input_params": {"DietPlan": {"description": "the diet plan for the person", "type": "String"}, "ExerciseRoutine": {"description": "the exercise routine for the person", "type": "String"}}, "output_params": {"wellness_plan": {"description": "the wellness plan for the person", "type": "String"}}, "format": "CreateWellnessPlan(DietPlan, ExerciseRoutine) -> wellness_plan"}], "Query": "I'm a 26-year-old man and want to work on my wellness. Can you help?", "Label": "CreateWellnessPlan(DietPlan=GetDietPlan(HealthInformation=GetHealthInformation(age=26, gender='man')), ExerciseRoutine=GetExerciseRoutine(HealthInformation=GetHealthInformation(age=26, gender='man')))", "Index": 862}, {"APIs": [{"name": "CheckInventory", "Description": "This API is to check the inventory status of a product.", "input_params": {"productID": {"description": "the ID of the product", "type": "Integer"}}, "output_params": {"InventoryStatus": {"description": "the inventory status of the product", "type": "String"}}, "format": "CheckInventory(productID) -> InventoryStatus"}, {"name": "EstimateDeliveryTime", "Description": "This API is to estimate the delivery time of a product to a specific location.", "input_params": {"productID": {"description": "the ID of the product", "type": "Integer"}, "location": {"description": "the location where the product will be delivered", "type": "String"}}, "output_params": {"DeliveryTime": {"description": "the estimated delivery time of the product", "type": "String"}}, "format": "EstimateDeliveryTime(productID, location) -> DeliveryTime"}, {"name": "CalculateShippingCost", "Description": "This API is to calculate the shipping cost of a product to a specific location.", "input_params": {"productID": {"description": "the ID of the product", "type": "Integer"}, "location": {"description": "the location where the product will be delivered", "type": "String"}}, "output_params": {"ShippingCost": {"description": "the calculated shipping cost of the product", "type": "Float"}}, "format": "CalculateShippingCost(productID, location) -> ShippingCost"}, {"name": "PlaceOrder", "Description": "This API is to place an order for a product with the specified inventory status, delivery time, and shipping cost.", "input_params": {"InventoryStatus": {"description": "the inventory status of the product", "type": "String"}, "DeliveryTime": {"description": "the estimated delivery time of the product", "type": "String"}, "ShippingCost": {"description": "the calculated shipping cost of the product", "type": "Float"}}, "output_params": {"OrderStatus": {"description": "the status of the order", "type": "String"}}, "format": "PlaceOrder(InventoryStatus, DeliveryTime, ShippingCost) -> OrderStatus"}], "Query": "I would like to purchase a new laptop, product ID 6789, and have it shipped to my house in California. Can you assist me with this?", "Label": "PlaceOrder(InventoryStatus=CheckInventory(productID='6789'), DeliveryTime=EstimateDeliveryTime(productID='6789', location='California'), ShippingCost=CalculateShippingCost(productID='6789', location='California'))", "Index": 872}, {"APIs": [{"name": "CheckInventory", "Description": "This API is to check the inventory status of a product.", "input_params": {"productID": {"description": "the ID of the product", "type": "Integer"}}, "output_params": {"InventoryStatus": {"description": "the inventory status of the product", "type": "String"}}, "format": "CheckInventory(productID) -> InventoryStatus"}, {"name": "EstimateDeliveryTime", "Description": "This API is to estimate the delivery time of a product to a specific location.", "input_params": {"productID": {"description": "the ID of the product", "type": "Integer"}, "location": {"description": "the location for delivery", "type": "String"}}, "output_params": {"DeliveryTime": {"description": "the estimated delivery time", "type": "String"}}, "format": "EstimateDeliveryTime(productID, location) -> DeliveryTime"}, {"name": "CalculateShippingCost", "Description": "This API is to calculate the shipping cost of a product to a specific location.", "input_params": {"productID": {"description": "the ID of the product", "type": "Integer"}, "location": {"description": "the location for delivery", "type": "String"}}, "output_params": {"ShippingCost": {"description": "the calculated shipping cost", "type": "Float"}}, "format": "CalculateShippingCost(productID, location) -> ShippingCost"}, {"name": "PlaceOrder", "Description": "This API is to place an order for a product.", "input_params": {"InventoryStatus": {"description": "the inventory status of the product", "type": "String"}, "DeliveryTime": {"description": "the estimated delivery time", "type": "String"}, "ShippingCost": {"description": "the calculated shipping cost", "type": "Float"}}, "output_params": {"OrderStatus": {"description": "the status of the order", "type": "String"}}, "format": "PlaceOrder(InventoryStatus, DeliveryTime, ShippingCost) -> OrderStatus"}], "Query": "I'm interested in ordering a new refrigerator, product ID 54321, to be delivered to my home in Texas. Can you help me with this?", "Label": "PlaceOrder(InventoryStatus=CheckInventory(productID='54321'), DeliveryTime=EstimateDeliveryTime(productID='54321', location='Texas'), ShippingCost=CalculateShippingCost(productID='54321', location='Texas'))", "Index": 873}, {"APIs": [{"name": "GetHotelRoomRate", "Description": "This API is to get the room rate for a specific city.", "input_params": {"city": {"description": "the name of the city", "type": "String"}}, "output_params": {"roomRate": {"description": "the cost of accommodation in the city", "type": "Float"}}, "format": "GetHotelRoomRate(city) -> roomRate"}, {"name": "GetMealCost", "Description": "This API is to get the cost of meals for a specific city.", "input_params": {"city": {"description": "the name of the city", "type": "String"}}, "output_params": {"mealCost": {"description": "the cost of meals in the city", "type": "Float"}}, "format": "GetMealCost(city) -> mealCost"}, {"name": "GetSightSeeingCost", "Description": "This API is to get the cost of sightseeing attractions for a specific city.", "input_params": {"city": {"description": "the name of the city", "type": "String"}}, "output_params": {"sightSeeingCost": {"description": "the cost of sightseeing attractions in the city", "type": "Float"}}, "format": "GetSightSeeingCost(city) -> sightSeeingCost"}, {"name": "CalculateVacationCost", "Description": "This API is to calculate the total cost of a vacation including accommodation, food, and tourist attractions.", "input_params": {"roomRate": {"description": "the cost of accommodation", "type": "Float"}, "mealCost": {"description": "the cost of meals", "type": "Float"}, "sightSeeingCost": {"description": "the cost of sightseeing attractions", "type": "Float"}}, "output_params": {"totalCost": {"description": "the total cost of the vacation", "type": "Float"}}, "format": "CalculateVacationCost(roomRate, mealCost, sightSeeingCost) -> totalCost"}], "Query": "I'm thinking of taking a trip to New York. How much will it cost for accommodation, food, and tourist attractions?", "Label": "CalculateVacationCost(roomRate=GetHotelRoomRate(city='New York'), mealCost=GetMealCost(city='New York'), sightSeeingCost=GetSightSeeingCost(city='New York'))", "Index": 877}, {"APIs": [{"name": "GetHotelRoomRate", "Description": "This API is to get the room rate for a specific city.", "input_params": {"city": {"description": "the name of the city", "type": "String"}}, "output_params": {"roomRate": {"description": "the rate of hotel rooms in the city", "type": "Float"}}, "format": "GetHotelRoomRate(city) -> roomRate"}, {"name": "GetMealCost", "Description": "This API is to get the cost of meals in a specific city.", "input_params": {"city": {"description": "the name of the city", "type": "String"}}, "output_params": {"mealCost": {"description": "the cost of meals in the city", "type": "Float"}}, "format": "GetMealCost(city) -> mealCost"}, {"name": "GetSightSeeingCost", "Description": "This API is to get the cost of sightseeing in a specific city.", "input_params": {"city": {"description": "the name of the city", "type": "String"}}, "output_params": {"sightSeeingCost": {"description": "the cost of sightseeing in the city", "type": "Float"}}, "format": "GetSightSeeingCost(city) -> sightSeeingCost"}, {"name": "CalculateVacationCost", "Description": "This API is to calculate the total cost of a vacation.", "input_params": {"roomRate": {"description": "the rate of hotel rooms", "type": "Float"}, "mealCost": {"description": "the cost of meals", "type": "Float"}, "sightSeeingCost": {"description": "the cost of sightseeing", "type": "Float"}}, "output_params": {"totalCost": {"description": "the total cost of the vacation", "type": "Float"}}, "format": "CalculateVacationCost(roomRate, mealCost, sightSeeingCost) -> totalCost"}], "Query": "I plan to holiday in London. What are the charges for hotels, meals and tourist spots?", "Label": "CalculateVacationCost(roomRate=GetHotelRoomRate(city='London'), mealCost=GetMealCost(city='London'), sightSeeingCost=GetSightSeeingCost(city='London'))", "Index": 878}, {"APIs": [{"name": "GetHotelRoomRate", "Description": "This API is to get the room rate for a specific city.", "input_params": {"city": {"description": "the name of the city", "type": "String"}}, "output_params": {"roomRate": {"description": "the rate of the hotel room", "type": "Float"}}, "format": "GetHotelRoomRate(city) -> roomRate"}, {"name": "GetMealCost", "Description": "This API is to get the cost of meals for a specific city.", "input_params": {"city": {"description": "the name of the city", "type": "String"}}, "output_params": {"mealCost": {"description": "the cost of meals", "type": "Float"}}, "format": "GetMealCost(city) -> mealCost"}, {"name": "GetSightSeeingCost", "Description": "This API is to get the cost of sightseeing for a specific city.", "input_params": {"city": {"description": "the name of the city", "type": "String"}}, "output_params": {"sightSeeingCost": {"description": "the cost of sightseeing", "type": "Float"}}, "format": "GetSightSeeingCost(city) -> sightSeeingCost"}, {"name": "CalculateVacationCost", "Description": "This API is to calculate the total cost of a vacation.", "input_params": {"roomRate": {"description": "the rate of the hotel room", "type": "Float"}, "mealCost": {"description": "the cost of meals", "type": "Float"}, "sightSeeingCost": {"description": "the cost of sightseeing", "type": "Float"}}, "output_params": {"totalCost": {"description": "the total cost of the vacation", "type": "Float"}}, "format": "CalculateVacationCost(roomRate, mealCost, sightSeeingCost) -> totalCost"}], "Query": "I'm planning a getaway to Rome. Can you tell me the costs for lodging, dinners, and sightseeing?", "Label": "CalculateVacationCost(roomRate=GetHotelRoomRate(city='Rome'), mealCost=GetMealCost(city='Rome'), sightSeeingCost=GetSightSeeingCost(city='Rome'))", "Index": 879}, {"APIs": [{"name": "GetWeatherForecast", "Description": "This API is to get the weather forecast for a specific city and date.", "input_params": {"city": {"description": "the name of the city", "type": "String"}, "date": {"description": "the date for which the weather forecast is required", "type": "String"}}, "output_params": {"weatherForecast": {"description": "the weather forecast for the specified city and date", "type": "String"}}, "format": "GetWeatherForecast(city, date) -> weatherForecast"}, {"name": "FindOutdoorActivities", "Description": "This API is to find outdoor activities in a specific city based on the weather forecast.", "input_params": {"city": {"description": "the name of the city", "type": "String"}, "weatherForecast": {"description": "the weather forecast for the specified city and date", "type": "String"}}, "output_params": {"activities": {"description": "a list of outdoor activities based on the weather forecast", "type": "List"}}, "format": "FindOutdoorActivities(city, weatherForecast) -> activities"}, {"name": "FindRestaurants", "Description": "This API is to find restaurants in a specific city based on the cuisine type.", "input_params": {"city": {"description": "the name of the city", "type": "String"}, "cuisineType": {"description": "the type of cuisine", "type": "String"}}, "output_params": {"restaurants": {"description": "a list of restaurants based on the cuisine type", "type": "List"}}, "format": "FindRestaurants(city, cuisineType) -> restaurants"}, {"name": "PlanDayOut", "Description": "This API is to plan a day out in a specific city with outdoor activities and a restaurant.", "input_params": {"city": {"description": "the name of the city", "type": "String"}, "activities": {"description": "a list of outdoor activities", "type": "List"}, "restaurants": {"description": "a list of restaurants", "type": "List"}}, "output_params": {"plan": {"description": "a plan for a day out with outdoor activities and a restaurant", "type": "String"}}, "format": "PlanDayOut(city, activities, restaurants) -> plan"}], "Query": "I plan to travel to London this Friday, could you recommend some outdoor activities and a Chinese restaurant for me based on the weather?", "Label": "PlanDayOut(city='London', activities=FindOutdoorActivities(city='London', weatherForecast=GetWeatherForecast(city='London', date='this Friday')), restaurants=FindRestaurants(city='London', cuisineType='Chinese'))", "Index": 887}, {"APIs": [{"name": "GetWeatherForecast", "Description": "This API is to get the weather forecast for a specific city and date.", "input_params": {"city": {"description": "the name of the city", "type": "String"}, "date": {"description": "the date for which the weather forecast is needed", "type": "String"}}, "output_params": {"weatherForecast": {"description": "the weather forecast for the specified city and date", "type": "String"}}, "format": "GetWeatherForecast(city, date) -> weatherForecast"}, {"name": "FindOutdoorActivities", "Description": "This API is to find outdoor activities in a specific city based on the weather forecast.", "input_params": {"city": {"description": "the name of the city", "type": "String"}, "weatherForecast": {"description": "the weather forecast for the specified city and date", "type": "String"}}, "output_params": {"activities": {"description": "a list of outdoor activities based on the weather forecast", "type": "List"}}, "format": "FindOutdoorActivities(city, weatherForecast) -> activities"}, {"name": "FindRestaurants", "Description": "This API is to find restaurants in a specific city based on the cuisine type.", "input_params": {"city": {"description": "the name of the city", "type": "String"}, "cuisineType": {"description": "the type of cuisine", "type": "String"}}, "output_params": {"restaurants": {"description": "a list of restaurants based on the cuisine type", "type": "List"}}, "format": "FindRestaurants(city, cuisineType) -> restaurants"}, {"name": "PlanDayOut", "Description": "This API is to plan a day out in a specific city with outdoor activities and a restaurant.", "input_params": {"city": {"description": "the name of the city", "type": "String"}, "activities": {"description": "a list of outdoor activities", "type": "List"}, "restaurants": {"description": "a list of restaurants", "type": "List"}}, "output_params": {"plan": {"description": "a plan for the day out with outdoor activities and a restaurant", "type": "String"}}, "format": "PlanDayOut(city, activities, restaurants) -> plan"}], "Query": "I'm going to visit Toronto this Wednesday, can you suggest some outdoor activities and an Italian restaurant for me depending on the weather?", "Label": "PlanDayOut(city='Toronto', activities=FindOutdoorActivities(city='Toronto', weatherForecast=GetWeatherForecast(city='Toronto', date='this Wednesday')), restaurants=FindRestaurants(city='Toronto', cuisineType='Italian'))", "Index": 889}, {"APIs": [{"name": "FoodFestival", "Description": "This API is to get the food festivals currently open in parks in a specific city.", "input_params": {"park": {"description": "the name of the park", "type": "String"}}, "output_params": {"food_festivals": {"description": "a list of food festivals", "type": "List"}}, "format": "FoodFestival(park)"}, {"name": "OpenParks", "Description": "This API is to get the list of open parks in a specific city at the current time.", "input_params": {"city": {"description": "the name of the city", "type": "String"}, "time": {"description": "the current time", "type": "Time"}}, "output_params": {"open_parks": {"description": "a list of open parks", "type": "List"}}, "format": "OpenParks(city, time)"}, {"name": "TheatrePlay", "Description": "This API is to get the theatre plays currently showing in theatres in a specific city.", "input_params": {"theatre": {"description": "the name of the theatre", "type": "String"}}, "output_params": {"theatre_plays": {"description": "a list of theatre plays", "type": "List"}}, "format": "TheatrePlay(theatre)"}, {"name": "OpenTheatres", "Description": "This API is to get the list of open theatres in a specific city at the current time.", "input_params": {"city": {"description": "the name of the city", "type": "String"}, "time": {"description": "the current time", "type": "Time"}}, "output_params": {"open_theatres": {"description": "a list of open theatres", "type": "List"}}, "format": "OpenTheatres(city, time)"}, {"name": "CurrentTime", "Description": "This API is to get the current time in a specific city.", "input_params": {"city": {"description": "the name of the city", "type": "String"}}, "output_params": {"current_time": {"description": "the current time", "type": "Time"}}, "format": "CurrentTime(city)"}], "Query": "What food festivals are currently open in parks in Sydney?", "Label": "FoodFestival(park=OpenParks(city='Sydney', time=CurrentTime(city='Sydney')))", "Index": 972}, {"APIs": [{"name": "GetCityByZip", "Description": "This API retrieves the city given a zip code.", "input_params": {"zip_code": {"description": "the zip code", "type": "String"}}, "output_params": {"city": {"description": "the city corresponding to the zip code", "type": "String"}}, "format": "GetCityByZip(zip_code) -> city"}, {"name": "GetWeatherForecast", "Description": "This API provides the weather forecast for specific cities on specific dates.", "input_params": {"city": {"description": "the city for which weather forecast is required", "type": "String"}, "date": {"description": "the date for which weather forecast is required", "type": "Date"}}, "output_params": {"weather": {"description": "the weather forecast for the specified city and date", "type": "String"}}, "format": "GetWeatherForecast(city, date) -> weather"}, {"name": "GetClothingAdvice", "Description": "This API gives clothing advice based on the weather.", "input_params": {"weather": {"description": "the weather condition", "type": "String"}}, "output_params": {"outfit": {"description": "the recommended outfit based on the weather", "type": "String"}}, "format": "GetClothingAdvice(weather) -> outfit"}, {"name": "GetOutfitStore", "Description": "This API finds stores in a given city where the recommended outfit can be purchased.", "input_params": {"city": {"description": "the city for which stores are to be found", "type": "String"}, "outfit": {"description": "the recommended outfit", "type": "String"}}, "output_params": {"store_name": {"description": "the name of the store where the recommended outfit can be purchased", "type": "String"}}, "format": "GetOutfitStore(city, outfit) -> store_name"}], "Query": "I'm at 10001 and would like to know the weather tomorrow and what should I wear. Also, is there any store I can buy the suggested outfit?", "Label": "GetOutfitStore(city=GetCityByZip(zip_code='10001'), outfit=GetClothingAdvice(weather=GetWeatherForecast(city=GetCityByZip(zip_code='10001'), date='tomorrow')))", "Index": 1089}, {"APIs": [{"name": "RestaurantRating", "Description": "This API gives the current rating of a restaurant in a specified city.", "input_params": {"city": {"description": "the name of the city", "type": "String"}, "restaurant": {"description": "the name of the restaurant", "type": "String"}}, "output_params": {"rating": {"description": "the current rating of the restaurant", "type": "Float"}}, "format": "RestaurantRating(city, restaurant) -> rating"}, {"name": "RestaurantPriceRange", "Description": "This API gives the price range for a restaurant in the specified city.", "input_params": {"city": {"description": "the name of the city", "type": "String"}, "restaurant": {"description": "the name of the restaurant", "type": "String"}}, "output_params": {"priceRange": {"description": "the price range of the restaurant", "type": "String"}}, "format": "RestaurantPriceRange(city, restaurant) -> priceRange"}, {"name": "TransportFare", "Description": "This API gives the one-way transportation fare to the destination in a specified city.", "input_params": {"city": {"description": "the name of the city", "type": "String"}, "destination": {"description": "the destination", "type": "String"}}, "output_params": {"fare": {"description": "the one-way transportation fare", "type": "Float"}}, "format": "TransportFare(city, destination) -> fare"}, {"name": "TotalDinnerCost", "Description": "This API calculates the total cost of dinner including the price range of the restaurant and transportation fare.", "input_params": {"restaurantPriceRange": {"description": "the price range of the restaurant", "type": "String"}, "transportFare": {"description": "the one-way transportation fare", "type": "Float"}}, "output_params": {"totalCost": {"description": "the total cost of dinner", "type": "Float"}}, "format": "TotalDinnerCost(restaurantPriceRange, transportFare) -> totalCost"}], "Query": "I'm planning to have dinner at \"Le Bernardin\" in New York and I need to take a taxi there. Can you estimate the total cost for me?", "Label": "TotalDinnerCost(restaurantPriceRange=RestaurantPriceRange(city='New York', restaurant='Le Bernardin'), transportFare=TransportFare(city='New York', destination='Le Bernardin'))", "Index": 1129}, {"APIs": [{"name": "WeatherForecast", "Description": "This API provides weather forecast for a city on a certain date.", "input_params": {"city": {"description": "the name of the city", "type": "String"}, "date": {"description": "the date for weather forecast", "type": "String"}}, "output_params": {"weather": {"description": "the weather forecast for the city on the specified date", "type": "String"}}, "format": "WeatherForecast(city, date) -> weather"}, {"name": "CarRentalAvailability", "Description": "This API provides information about the availability of rental cars in a city on a certain date.", "input_params": {"city": {"description": "the name of the city", "type": "String"}, "date": {"description": "the date for car rental availability", "type": "String"}}, "output_params": {"available_cars": {"description": "the information about the availability of rental cars in the city on the specified date", "type": "String"}}, "format": "CarRentalAvailability(city, date) -> available_cars"}, {"name": "ConferenceDetails", "Description": "This API provides information about conferences in a city.", "input_params": {"city": {"description": "the name of the city", "type": "String"}}, "output_params": {"conferences": {"description": "the information about conferences in the city", "type": "String"}}, "format": "ConferenceDetails(city) -> conferences"}, {"name": "BusinessTripPlanner", "Description": "This API helps in planning your business trip by combining weather, car rental, and conference information.", "input_params": {"weather": {"description": "the weather forecast for the city on the specified date", "type": "String"}, "available_cars": {"description": "the information about the availability of rental cars in the city on the specified date", "type": "String"}, "conferences": {"description": "the information about conferences in the city", "type": "String"}}, "output_params": {"business_plan": {"description": "the business trip plan combining weather, car rental, and conference information", "type": "String"}}, "format": "BusinessTripPlanner(weather, available_cars, conferences) -> business_plan"}], "Query": "Could you help me to plan a business trip to San Francisco in two weeks?", "Label": "BusinessTripPlanner(weather=WeatherForecast(city='San Francisco', date='in two weeks'), available_cars=CarRentalAvailability(city='San Francisco', date='in two weeks'), conferences=ConferenceDetails(city='San Francisco'))", "Index": 1153}, {"APIs": [{"name": "GetCityByZip", "Description": "This API is to get city name by given zip code.", "input_params": {"zip_code": {"description": "the zip code of the area", "type": "String"}}, "output_params": {"city": {"description": "the city of the given zip code", "type": "String"}}, "format": "GetCityByZip(zip_code) -> city"}, {"name": "GetWeatherForecast", "Description": "This API is to get weather forecast of a given city on a specific date.", "input_params": {"city": {"description": "the city to get weather forecast", "type": "String"}, "date": {"description": "the date to get weather forecast", "type": "Date"}}, "output_params": {"weather": {"description": "the weather forecast of the city on the date", "type": "String"}}, "format": "GetWeatherForecast(city, date) -> weather"}, {"name": "GetClothingAdvice", "Description": "This API is to get clothing advice based on the weather.", "input_params": {"weather": {"description": "the weather to get clothing advice", "type": "String"}}, "output_params": {"outfit": {"description": "the suggested clothes based on the weather", "type": "String"}}, "format": "GetClothingAdvice(weather) -> outfit"}, {"name": "GetOutfitStore", "Description": "This API is to get store location where you can purchase the suggested clothes.", "input_params": {"city": {"description": "the city to get store location", "type": "String"}, "outfit": {"description": "the outfit to search store", "type": "String"}}, "output_params": {"store_location": {"description": "the store location where you can purchase the outfit", "type": "String"}}, "format": "GetOutfitStore(city, outfit) -> store_location"}], "Query": "I'm currently in 80014 and I need to know the weather forecast for next Monday and what should I dress in? Can you tell me a place where I can purchase the suggested clothes?", "Label": "GetOutfitStore(city=GetCityByZip(zip_code='80014'), outfit=GetClothingAdvice(weather=GetWeatherForecast(city=GetCityByZip(zip_code='80014'), date='next Monday')))", "Index": 1168}, {"APIs": [{"name": "GetCityByZip", "Description": "This API is to convert zip code to city.", "input_params": {"zip_code": {"description": "the zip code", "type": "String"}}, "output_params": {"city": {"description": "the city corresponding to the zip code", "type": "String"}}, "format": "GetCityByZip(zip_code) -> city"}, {"name": "GetWeatherForecast", "Description": "This API is to get weather forecast for a specific city and date.", "input_params": {"city": {"description": "the city for which the weather forecast is required", "type": "String"}, "date": {"description": "the date for which the weather forecast is required", "type": "Date"}}, "output_params": {"weather": {"description": "the weather forecast for the city on the specific date", "type": "String"}}, "format": "GetWeatherForecast(city,date) -> weather"}, {"name": "GetClothingAdvice", "Description": "This API is to get clothing advice based on the weather.", "input_params": {"weather": {"description": "the weather based on which the clothing advice is required", "type": "String"}}, "output_params": {"outfit": {"description": "the suggested outfit based on the weather", "type": "String"}}, "format": "GetClothingAdvice(weather) -> outfit"}, {"name": "GetOutfitStore", "Description": "This API is to get the store where the suggested clothing can be bought.", "input_params": {"city": {"description": "the city where the store is located", "type": "String"}, "outfit": {"description": "the outfit for which the store needs to be found", "type": "String"}}, "output_params": {"store": {"description": "the store where the suggested clothing can be bought", "type": "String"}}, "format": "GetOutfitStore(city,outfit) -> store"}], "Query": "I'm residing at 60629 and I would like to know the weather next Wednesday and what would be the appropriate clothing? Also, where can I buy the suggested clothing?", "Label": "GetOutfitStore(city=GetCityByZip(zip_code='60629'), outfit=GetClothingAdvice(weather=GetWeatherForecast(city=GetCityByZip(zip_code='60629'), date='next Wednesday')))", "Index": 1169}, {"APIs": [{"name": "GetCityByZip", "Description": "This API is to get city name by zip code.", "input_params": {"zip_code": {"description": "the zip code", "type": "String"}}, "output_params": {"city": {"description": "the city of the zip code", "type": "String"}}, "format": "GetCityByZip(zip_code) -> city"}, {"name": "GetWeatherForecast", "Description": "This API is to get the weather forecast for a given city and date.", "input_params": {"city": {"description": "the city where to get the weather", "type": "String"}, "date": {"description": "the date when to get the weather", "type": "Date"}}, "output_params": {"weather": {"description": "the weather condition", "type": "String"}}, "format": "GetWeatherForecast(city, date) -> weather"}, {"name": "GetClothingAdvice", "Description": "This API is to suggest the appropriate clothing based on the weather.", "input_params": {"weather": {"description": "the weather condition", "type": "String"}}, "output_params": {"outfit": {"description": "the suggested clothing", "type": "String"}}, "format": "GetClothingAdvice(weather) -> outfit"}, {"name": "GetOutfitStore", "Description": "This API is to find the stores selling the suggested clothing in a city.", "input_params": {"city": {"description": "the city where to find the store", "type": "String"}, "outfit": {"description": "the clothing to buy", "type": "String"}}, "output_params": {"store": {"description": "the store selling the clothing", "type": "String"}}, "format": "GetOutfitStore(city, outfit) -> store"}], "Query": "I'm residing at 60629 and I would like to know the weather next Wednesday and what would be the appropriate clothing? Also, where can I buy the suggested clothing?", "Label": "GetOutfitStore(city=GetCityByZip(zip_code='60629'), outfit=GetClothingAdvice(weather=GetWeatherForecast(city=GetCityByZip(zip_code='60629'), date='next Wednesday')))", "Index": 1170}, {"APIs": [{"name": "GetCityByZip", "Description": "This API returns the city corresponding to the entered zip code.", "input_params": {"zip_code": {"description": "Zip code of the area", "type": "String"}}, "output_params": {"city": {"description": "name of the city corresponding to the entered zip code", "type": "String"}}, "format": "GetCityByZip(zip_code) -> city"}, {"name": "GetWeatherForecast", "Description": "This API forecasts the weather for a specific city on a specific date.", "input_params": {"city": {"description": "City for which to forecast the weather", "type": "String"}, "date": {"description": "Date for which to forecast the weather", "type": "String"}}, "output_params": {"weather": {"description": "Weather conditions for the specified city and date", "type": "String"}}, "format": "GetWeatherForecast(city, date) -> weather"}, {"name": "GetClothingAdvice", "Description": "This API provides clothing advice based on weather conditions.", "input_params": {"weather": {"description": "Weather conditions for a specific day", "type": "String"}}, "output_params": {"outfit": {"description": "Clothing advice based on weather conditions", "type": "String"}}, "format": "GetClothingAdvice(weather) -> outfit"}, {"name": "GetOutfitStore", "Description": "This API suggests a store where the recommended outfit can be purchased.", "input_params": {"city": {"description": "City where the user is located", "type": "String"}, "outfit": {"description": "Recommended outfit based on weather conditions", "type": "String"}}, "output_params": {"store": {"description": "Suggested store where the recommended outfit can be purchased", "type": "String"}}, "format": "GetOutfitStore(city, outfit) -> store"}], "Query": "I'm located at 02128 and I am curious about the weather next Friday and what should I wear? Could you suggest a store where I can buy the recommended outfit?", "Label": "GetOutfitStore(city=GetCityByZip(zip_code='02128'), outfit=GetClothingAdvice(weather=GetWeatherForecast(city=GetCityByZip(zip_code='02128'), date='next Friday')))", "Index": 1171}, {"APIs": [{"name": "RealEstatePrice", "Description": "This API is to retrieve the price of a real estate property.", "input_params": {"city": {"description": "the name of the city where the property is located", "type": "String"}, "propertyType": {"description": "the type of the property", "type": "String"}}, "output_params": {"propertyPrice": {"description": "the price of the real estate property", "type": "Float"}}, "format": "RealEstatePrice(city, propertyType) -> propertyPrice"}, {"name": "MortgageCalculator", "Description": "This API is to calculate the mortgage payment.", "input_params": {"propertyPrice": {"description": "the price of the property", "type": "Float"}, "downPayment": {"description": "the initial payment for the property", "type": "Float"}, "interestRate": {"description": "the interest rate of the mortgage", "type": "Float"}, "term": {"description": "the term of the mortgage", "type": "Integer"}}, "output_params": {"mortgagePayment": {"description": "the monthly mortgage payment", "type": "Float"}}, "format": "MortgageCalculator(propertyPrice, downPayment, interestRate, term) -> mortgagePayment"}, {"name": "TaxEstimator", "Description": "This API is to estimate the tax of a property.", "input_params": {"propertyPrice": {"description": "the price of the property", "type": "Float"}, "city": {"description": "the city where the property is located", "type": "String"}}, "output_params": {"tax": {"description": "the estimated tax of the property", "type": "Float"}}, "format": "TaxEstimator(propertyPrice, city) -> tax"}, {"name": "PropertyOwnershipCost", "Description": "This API is to estimate the total cost of owning a property.", "input_params": {"mortgagePayment": {"description": "the monthly mortgage payment", "type": "Float"}, "tax": {"description": "the estimated tax of the property", "type": "Float"}}, "output_params": {"totalCost": {"description": "the total cost of owning the property", "type": "Float"}}, "format": "PropertyOwnershipCost(mortgagePayment, tax) -> totalCost"}], "Query": "I'm thinking of purchasing a townhouse in Miami with an initial payment of 150000, an interest rate of 3 percent, and a term of 25 years. Can you provide me with a total cost estimation?", "Label": "PropertyOwnershipCost(mortgagePayment=MortgageCalculator(propertyPrice=RealEstatePrice(city='Miami', propertyType='townhouse'), downPayment=150000, interestRate=3, term=25), tax=TaxEstimator(propertyPrice=RealEstatePrice(city='Miami', propertyType='townhouse'), city='Miami'))", "Index": 1316}, {"APIs": [{"name": "RealEstatePrice", "Description": "This API is to get the price of a real estate property.", "input_params": {"city": {"description": "the city where the property is located", "type": "String"}, "propertyType": {"description": "the type of the property", "type": "String"}}, "output_params": {"propertyPrice": {"description": "the price of the property", "type": "Float"}}, "format": "RealEstatePrice(city, propertyType) -> propertyPrice"}, {"name": "MortgageCalculator", "Description": "This API is to calculate the total mortgage payment.", "input_params": {"propertyPrice": {"description": "the price of the property", "type": "Float"}, "downPayment": {"description": "the down payment for the property", "type": "Float"}, "interestRate": {"description": "the interest rate of the loan", "type": "Float"}, "term": {"description": "the term of the loan in years", "type": "Integer"}}, "output_params": {"mortgagePayment": {"description": "the total mortgage payment", "type": "Float"}}, "format": "MortgageCalculator(propertyPrice, downPayment, interestRate, term) -> mortgagePayment"}, {"name": "TaxEstimator", "Description": "This API is to estimate the tax for a property.", "input_params": {"propertyPrice": {"description": "the price of the property", "type": "Float"}, "city": {"description": "the city where the property is located", "type": "String"}}, "output_params": {"tax": {"description": "the estimated tax for the property", "type": "Float"}}, "format": "TaxEstimator(propertyPrice, city) -> tax"}, {"name": "PropertyOwnershipCost", "Description": "This API is to calculate the total cost of owning a property including mortgage payments and tax.", "input_params": {"mortgagePayment": {"description": "the total mortgage payment", "type": "Float"}, "tax": {"description": "the estimated tax for the property", "type": "Float"}}, "output_params": {"totalCost": {"description": "the total cost of owning the property", "type": "Float"}}, "format": "PropertyOwnershipCost(mortgagePayment, tax) -> totalCost"}], "Query": "I plan to buy a duplex in Seattle with a down payment of 250000, an interest rate of 3.2 percent, and a term of 30 years. Could you calculate the total cost for me?", "Label": "PropertyOwnershipCost(mortgagePayment=MortgageCalculator(propertyPrice=RealEstatePrice(city='Seattle', propertyType='duplex'), downPayment=250000, interestRate=3.2, term=30), tax=TaxEstimator(propertyPrice=RealEstatePrice(city='Seattle', propertyType='duplex'), city='Seattle'))", "Index": 1317}, {"APIs": [{"name": "WeatherAPI", "Description": "This API is to get the weather of a specific city.", "input_params": {"city": {"description": "the name of the city", "type": "String"}}, "output_params": {"weather": {"description": "the weather of the city", "type": "String"}}, "format": "WeatherAPI(city) -> weather"}, {"name": "ClothingSuggestionAPI", "Description": "This API is to recommend clothing based on the weather.", "input_params": {"weather": {"description": "the weather condition", "type": "String"}}, "output_params": {"clothing_info": {"description": "the information of recommended clothing", "type": "String"}}, "format": "ClothingSuggestionAPI(weather) -> clothing_info"}, {"name": "StoreSearchAPI", "Description": "This API is to find the store based on city and recommended clothing.", "input_params": {"city": {"description": "the name of the city", "type": "String"}, "clothing_info": {"description": "the information of recommended clothing", "type": "String"}}, "output_params": {"store_info": {"description": "the information of the store", "type": "String"}}, "format": "StoreSearchAPI(city, clothing_info) -> store_info"}, {"name": "BuyOnlineAPI", "Description": "This API is to purchase clothing online from the recommended store.", "input_params": {"store_info": {"description": "the information of the store", "type": "String"}}, "output_params": {"purchase_status": {"description": "the status of the purchase", "type": "String"}}, "format": "BuyOnlineAPI(store_info) -> purchase_status"}], "Query": "What's the current weather in Sydney? What clothes are recommended and where can I buy them? Can I do it online?", "Label": "BuyOnlineAPI(store_info=StoreSearchAPI(city='Sydney', clothing_info=ClothingSuggestionAPI(weather=WeatherAPI(city='Sydney'))))", "Index": 1363}, {"APIs": [{"name": "CheckWeather", "Description": "This API is to check the weather of a specific city.", "input_params": {"city_name": {"description": "the name of the city", "type": "String"}}, "output_params": {"weather_status": {"description": "the weather status of the city", "type": "String"}}, "format": "CheckWeather(city_name) -> weather_status"}, {"name": "SearchFlight", "Description": "This API is to search for flights between two cities.", "input_params": {"departure_city": {"description": "the departure city of the flight", "type": "String"}, "destination_city": {"description": "the destination city of the flight", "type": "String"}}, "output_params": {"flight_options": {"description": "the flight options between the two cities", "type": "List"}}, "format": "SearchFlight(departure_city, destination_city) -> flight_options"}, {"name": "GetFlightID", "Description": "This API is to get the ID of a flight based on flight options and weather status.", "input_params": {"flight_options": {"description": "the flight options between two cities", "type": "List"}, "weather_status": {"description": "the weather status of destination city", "type": "String"}}, "output_params": {"flight_id": {"description": "the ID of the selected flight", "type": "Integer"}}, "format": "GetFlightID(flight_options, weather_status) -> flight_id"}, {"name": "BookFlight", "Description": "This API is to book a flight with a specific ID.", "input_params": {"flight_id": {"description": "the ID of the flight to be booked", "type": "Integer"}}, "output_params": {"booking status": {"description": "the status of the flight booking", "type": "String"}}, "format": "BookFlight(flight_id) -> booking status"}], "Query": "I want to know the weather in Tokyo and then reserve a flight from Los Angeles to Tokyo", "Label": "BookFlight(flight_id=GetFlightID(flight_options=SearchFlight(departure_city='Los Angeles', destination_city='Tokyo'), weather_status=CheckWeather(city_name='Tokyo')))", "Index": 1423}, {"APIs": [{"name": "CheckWeather", "Description": "This API is to check the weather in a specific city.", "input_params": {"city_name": {"description": "the name of the city", "type": "String"}}, "output_params": {"weather_status": {"description": "the current weather status of the city", "type": "String"}}, "format": "CheckWeather(city_name) -> weather_status"}, {"name": "SearchFlight", "Description": "This API is to search available flights between two cities.", "input_params": {"departure_city": {"description": "the name of the departure city", "type": "String"}, "destination_city": {"description": "the name of the destination city", "type": "String"}}, "output_params": {"flight_options": {"description": "the available flight options", "type": "Array"}}, "format": "SearchFlight(departure_city, destination_city) -> flight_options"}, {"name": "GetFlightID", "Description": "This API is to get the flight ID based on flight options and weather conditions.", "input_params": {"flight_options": {"description": "the available flight options", "type": "Array"}, "weather_status": {"description": "the weather status of the destination city", "type": "String"}}, "output_params": {"flight_id": {"description": "the ID of the selected flight", "type": "String"}}, "format": "GetFlightID(flight_options, weather_status) -> flight_id"}, {"name": "BookFlight", "Description": "This API is to book a specific flight.", "input_params": {"flight_id": {"description": "the ID of the flight", "type": "String"}}, "output_params": {"booking_status": {"description": "the status of the booking", "type": "String"}}, "format": "BookFlight(flight_id) -> booking_status"}], "Query": "I want to look at the weather in Madrid and then book a flight from Houston to Madrid", "Label": "BookFlight(flight_id=GetFlightID(flight_options=SearchFlight(departure_city='Houston', destination_city='Madrid'), weather_status=CheckWeather(city_name='Madrid')))", "Index": 1424}, {"APIs": [{"name": "GetLocalWeather", "Description": "This API is to get the local weather of a city.", "input_params": {"city": {"description": "the name of the city", "type": "String"}}, "output_params": {"weather": {"description": "the weather information of the city", "type": "String"}}, "format": "GetLocalWeather(city) -> weather"}, {"name": "RecommendClothing", "Description": "This API is to recommend clothing based on weather conditions.", "input_params": {"weather": {"description": "the weather information", "type": "String"}}, "output_params": {"clothing": {"description": "the recommended clothing", "type": "String"}}, "format": "RecommendClothing(weather) -> clothing"}, {"name": "FindTrendingFashion", "Description": "This API is to find trending fashion based on city and season.", "input_params": {"city": {"description": "the name of the city", "type": "String"}, "season": {"description": "the current season", "type": "String"}}, "output_params": {"fashion": {"description": "the trending fashion", "type": "String"}}, "format": "FindTrendingFashion(city, season) -> fashion"}, {"name": "GenerateOutfit", "Description": "This API is to generate an outfit based on weather and fashion trends.", "input_params": {"clothing": {"description": "the recommended clothing", "type": "String"}, "fashion": {"description": "the trending fashion", "type": "String"}}, "output_params": {"outfit": {"description": "the generated outfit", "type": "String"}}, "format": "GenerateOutfit(clothing, fashion) -> outfit"}], "Query": "I have a dinner date in Rome this weekend. What should I put on considering the weather and the current fashion trends?", "Label": "GenerateOutfit(clothing=RecommendClothing(weather=GetLocalWeather(city='Rome')), fashion=FindTrendingFashion(city='Rome', season='current'))", "Index": 1468}, {"APIs": [{"name": "GetLocalWeather", "Description": "This API is to get the local weather of a city.", "input_params": {"city": {"description": "the name of the city", "type": "String"}}, "output_params": {"weather": {"description": "the weather information of the city", "type": "String"}}, "format": "GetLocalWeather(city) -> weather"}, {"name": "RecommendClothing", "Description": "This API is to recommend clothing based on weather conditions.", "input_params": {"weather": {"description": "the weather information", "type": "String"}}, "output_params": {"clothing": {"description": "the recommended clothing", "type": "String"}}, "format": "RecommendClothing(weather) -> clothing"}, {"name": "FindTrendingFashion", "Description": "This API is to find the trending fashion in a city during a specific season.", "input_params": {"city": {"description": "the name of the city", "type": "String"}, "season": {"description": "the current season", "type": "String"}}, "output_params": {"fashion": {"description": "the trending fashion", "type": "String"}}, "format": "FindTrendingFashion(city, season) -> fashion"}, {"name": "GenerateOutfit", "Description": "This API is to generate an outfit recommendation based on weather and fashion trends.", "input_params": {"clothing": {"description": "the recommended clothing", "type": "String"}, "fashion": {"description": "the trending fashion", "type": "String"}}, "output_params": {"outfit": {"description": "the generated outfit", "type": "String"}}, "format": "GenerateOutfit(clothing, fashion) -> outfit"}], "Query": "I have a conference in Tokyo next week. What should I wear considering the weather and the latest fashion trends?", "Label": "GenerateOutfit(clothing=RecommendClothing(weather=GetLocalWeather(city='Tokyo')), fashion=FindTrendingFashion(city='Tokyo', season='current'))", "Index": 1469}, {"APIs": [{"name": "ISBN2BookTitle", "Description": "This API is to convert an ISBN to its corresponding book title.", "input_params": {"ISBN": {"description": "the ISBN of the book", "type": "String"}}, "output_params": {"book_title": {"description": "the title of the book", "type": "String"}}, "format": "ISBN2BookTitle(ISBN) -> book_title"}, {"name": "BookPrice", "Description": "This API is to get the current price of the book.", "input_params": {"book_title": {"description": "the title of the book", "type": "String"}}, "output_params": {"book_price": {"description": "the price of the book", "type": "Float"}}, "format": "BookPrice(book_title) -> book_price"}, {"name": "NotifyUser", "Description": "This API is to send a notification to the user.", "input_params": {"person_ID": {"description": "the ID of the person", "type": "Integer"}, "message": {"description": "the notification message", "type": "String"}}, "output_params": {"Notification status": {"description": "the status of the notification", "type": "String"}}, "format": "NotifyUser(person_ID, message) -> Notification status"}, {"name": "Username2ID", "Description": "This API is to convert a user's username to user ID.", "input_params": {"username": {"description": "the username of the user", "type": "String"}}, "output_params": {"person_ID": {"description": "the ID of the person", "type": "Integer"}}, "format": "Username2ID(username) -> person_ID"}], "Query": "Could you send a notification to the user with the username 'booklover' about the price of the book with ISBN 978-3-16-148410-0?", "Label": "NotifyUser(person_ID=Username2ID(username='booklover'), message=BookPrice(book_title=ISBN2BookTitle(ISBN='978-3-16-148410-0')))", "Index": 1500}, {"APIs": [{"name": "User2Age", "Description": "This API generates the age of a specific user through its user name.", "input_params": {"user_name": {"description": "the name of the user", "type": "String"}}, "output_params": {"user_age": {"description": "the age of the user", "type": "Integer"}}, "format": "User2Age(user_name) -> user_age"}, {"name": "BuyAlcohol", "Description": "This API allows the user to purchase alcohol if their age is over the legal limit.", "input_params": {"user_age": {"description": "the age of the user", "type": "Integer"}}, "output_params": {"purchase_status": {"description": "the status of the purchase", "type": "String"}}, "format": "BuyAlcohol(user_age) -> purchase_status"}, {"name": "RecommendDrink", "Description": "This API suggests a type of drink according to user preference.", "input_params": {"user_preference": {"description": "the preference of the user", "type": "String"}}, "output_params": {"drink": {"description": "the suggested drink", "type": "String"}}, "format": "RecommendDrink(user_preference) -> drink"}, {"name": "UserPreference", "Description": "This API will provide the preferred type of drink of the specified user.", "input_params": {"user_name": {"description": "the name of the user", "type": "String"}}, "output_params": {"user_preference": {"description": "the preferred type of drink", "type": "String"}}, "format": "UserPreference(user_name) -> user_preference"}], "Query": "I'm Jennifer, I want to buy a drink that I will like", "Label": "BuyAlcohol(user_age=User2Age(user_name='Jennifer'), drink=RecommendDrink(user_preference=UserPreference(user_name='Jennifer')))", "Index": 1514}, {"APIs": [{"name": "ISBN2BookTitle", "Description": "This API is to convert an ISBN to its corresponding book title.", "input_params": {"ISBN": {"description": "the ISBN of the book", "type": "String"}}, "output_params": {"book_title": {"description": "the title of the book", "type": "String"}}, "format": "ISBN2BookTitle(ISBN) -> book_title"}, {"name": "BookPrice", "Description": "This API is to get the current price of the book.", "input_params": {"book_title": {"description": "the title of the book", "type": "String"}}, "output_params": {"book_price": {"description": "the price of the book", "type": "Float"}}, "format": "BookPrice(book_title) -> book_price"}, {"name": "NotifyUser", "Description": "This API is to send a notification to the user.", "input_params": {"person_ID": {"description": "the ID of the person", "type": "Integer"}, "message": {"description": "the notification message", "type": "String"}}, "output_params": {"Notification status": {"description": "the status of the notification", "type": "String"}}, "format": "NotifyUser(person_ID, message) -> Notification status"}, {"name": "Username2ID", "Description": "This API is to convert a user's username to user ID.", "input_params": {"username": {"description": "the username of the user", "type": "String"}}, "output_params": {"person_ID": {"description": "the ID of the person", "type": "Integer"}}, "format": "Username2ID(username) -> person_ID"}], "Query": "Could you send a notification to the user with the username 'booklover' about the price of the book with ISBN 978-3-16-148410-0?", "Label": "NotifyUser(person_ID=Username2ID(username='booklover'), message=BookPrice(book_title=ISBN2BookTitle(ISBN='978-3-16-148410-0')))", "Index": 1519}, {"APIs": [{"name": "GetUserLocationByUsername", "Description": "This API is used to get a user's location based on their username.", "input_params": {"username": {"description": "the username of the user", "type": "String"}}, "output_params": {"user_location": {"description": "the location of the user", "type": "String"}}, "format": "GetUserLocationByUsername(username) -> user_location"}, {"name": "GetTimeZoneByLocation", "Description": "This API is used to determine the timezone based on a given location.", "input_params": {"location": {"description": "the location", "type": "String"}}, "output_params": {"timezone": {"description": "the timezone", "type": "String"}}, "format": "GetTimeZoneByLocation(location) -> timezone"}, {"name": "ConvertTime", "Description": "This API converts given start and end time into the desired timezone.", "input_params": {"start_time": {"description": "the start time", "type": "Time"}, "end_time": {"description": "the end time", "type": "Time"}, "timezone": {"description": "the desired timezone", "type": "String"}}, "output_params": {"converted_time": {"description": "the converted start and end time", "type": "Time"}}, "format": "ConvertTime(start_time, end_time, timezone) -> converted_time"}, {"name": "ScheduleMeeting", "Description": "This API schedules a meeting.", "input_params": {"user_email": {"description": "the email of the user", "type": "String"}, "start_time": {"description": "the start time of the meeting", "type": "Time"}, "end_time": {"description": "the end time of the meeting", "type": "Time"}, "timezone": {"description": "the timezone of the meeting", "type": "String"}}, "output_params": {"meeting_status": {"description": "the status of the meeting", "type": "String"}}, "format": "ScheduleMeeting(user_email, start_time, end_time, timezone) -> meeting_status"}], "Query": "Can you schedule a meeting for user 'alice' from 2 pm to 3 pm PST?", "Label": "ScheduleMeeting(user_email=Username2Email(username='alice'), start_time='2 pm', end_time='3 pm', timezone=GetTimeZoneByLocation(location=GetUserLocationByUsername(username='alice')))", "Index": 1520}, {"APIs": [{"name": "Username2ID", "Description": "This API converts a user name to its ID.", "input_params": {"user_name": {"description": "the name of the user", "type": "String"}}, "output_params": {"user_ID": {"description": "the ID of the user", "type": "Integer"}}, "format": "Username2ID(user_name) -> user_ID"}, {"name": "MovieTitle2ID", "Description": "This API converts a movie title to its ID.", "input_params": {"movie_title": {"description": "the title of the movie", "type": "String"}}, "output_params": {"movie_ID": {"description": "the ID of the movie", "type": "Integer"}}, "format": "MovieTitle2ID(movie_title) -> movie_ID"}, {"name": "AddToWatchlist", "Description": "This API adds a movie to a user's watchlist.", "input_params": {"user_ID": {"description": "the ID of the user", "type": "Integer"}, "movie_ID": {"description": "the ID of the movie", "type": "Integer"}}, "output_params": {"Watchlist status": {"description": "the status of adding the movie to the watchlist", "type": "String"}}, "format": "AddToWatchlist(user_ID, movie_ID) -> Watchlist status"}, {"name": "EmailNotification", "Description": "This API sends a notification email to the user.", "input_params": {"user_ID": {"description": "the ID of the user", "type": "Integer"}, "message": {"description": "the notification message", "type": "String"}}, "output_params": {"Notification status": {"description": "the status of sending the notification email", "type": "String"}}, "format": "EmailNotification(user_ID, message) -> Notification status"}], "Query": "Can you add 'The Godfather' to Nancy's watchlist and notify her?", "Label": "EmailNotification(user_ID=Username2ID(user_name='Nancy'), message=AddToWatchlist(user_ID=Username2ID(user_name='Nancy'), movie_ID=MovieTitle2ID(movie_title='The Godfather')))", "Index": 1525}, {"APIs": [{"name": "GetTicketPrice", "Description": "This API is to get the ticket price of a specific movie at a specific cinema.", "input_params": {"cinema": {"description": "the name of the cinema", "type": "String"}, "movie": {"description": "the name of the movie", "type": "String"}}, "output_params": {"price": {"description": "the ticket price", "type": "Float"}}, "format": "GetTicketPrice(cinema, movie) -> price"}, {"name": "FindNearestCinema", "Description": "This API is to find the nearest cinema in a specific city that is showing a specific movie.", "input_params": {"city": {"description": "the name of the city", "type": "String"}, "movie": {"description": "the name of the movie", "type": "String"}}, "output_params": {"cinema": {"description": "the name of the cinema", "type": "String"}}, "format": "FindNearestCinema(city, movie) -> cinema"}, {"name": "GetTravelTime", "Description": "This API is to get the estimated travel time from start location to the destination.", "input_params": {"start": {"description": "the starting location", "type": "String"}, "destination": {"description": "the destination location", "type": "String"}}, "output_params": {"travelTime": {"description": "the estimated travel time", "type": "Time"}}, "format": "GetTravelTime(start, destination) -> travelTime"}, {"name": "CalculateTotalMovieOutingTime", "Description": "This API is to calculate the total time of the movie outing considering the travel time and the movie length.", "input_params": {"travelTime": {"description": "the estimated travel time", "type": "Time"}, "movieLength": {"description": "the length of the movie", "type": "String"}}, "output_params": {"totalOutingTime": {"description": "the total time of the movie outing", "type": "Time"}}, "format": "CalculateTotalMovieOutingTime(travelTime, movieLength) -> totalOutingTime"}], "Query": "I'm in New York City and want to watch the movie 'Inception'. How much will the ticket cost and how long will the entire outing take?", "Label": "CalculateTotalMovieOutingTime(travelTime=GetTravelTime(start='My location', destination=FindNearestCinema(city='New York City', movie='Inception')), movieLength='148 minutes') and GetTicketPrice(cinema=FindNearestCinema(city='New York City', movie='Inception'), movie='Inception')", "Index": 1537}, {"APIs": [{"name": "FetchFlightID", "Description": "This API retrieves the flight ID using the flight name.", "input_params": {"flight_name": {"description": "the name of the flight", "type": "String"}}, "output_params": {"flight_ID": {"description": "the ID of the flight", "type": "Integer"}}, "format": "FetchFlightID(flight_name) -> flight_ID"}, {"name": "FindFlight", "Description": "This API finds a flight based on departure city, arrival city and date.", "input_params": {"cityDeparture": {"description": "the departure city", "type": "String"}, "cityArrival": {"description": "the arrival city", "type": "String"}, "date": {"description": "the date of the flight", "type": "String"}}, "output_params": {"flight_name": {"description": "the name of the flight", "type": "String"}}, "format": "FindFlight(cityDeparture, cityArrival, date) -> flight_name"}, {"name": "FetchCity", "Description": "This API will return the city of the user based on user ID.", "input_params": {"user_ID": {"description": "the ID of the user", "type": "Integer"}}, "output_params": {"city": {"description": "the city of the user", "type": "String"}}, "format": "FetchCity(user_ID) -> city"}, {"name": "BookFlight", "Description": "This API books a flight for a certain date.", "input_params": {"flight_ID": {"description": "the ID of the flight", "type": "Integer"}, "date": {"description": "the date of the flight", "type": "String"}}, "output_params": {"booking_status": {"description": "the status of the booking", "type": "String"}}, "format": "BookFlight(flight_ID, date) -> booking_status"}, {"name": "GetUserID", "Description": "This API retrieves the user ID by using the user name.", "input_params": {"username": {"description": "the name of the user", "type": "String"}}, "output_params": {"user_ID": {"description": "the ID of the user", "type": "Integer"}}, "format": "GetUserID(username) -> user_ID"}], "Query": "Can you book a flight from my city to New York on May 15th?", "Label": "BookFlight(flight_ID=FetchFlightID(flight_name=FindFlight(cityDeparture=FetchCity(user_ID=GetUserID(username='John')), cityArrival='New York', date='May 15th')), date='May 15th')", "Index": 1542}, {"APIs": [{"name": "FindRestaurantByCuisine", "Description": "This API is used to retrieve a restaurant ID by using the restaurant's cuisine.", "input_params": {"cuisine": {"description": "the cuisine of the restaurant", "type": "String"}}, "output_params": {"restaurant_ID": {"description": "the ID of the restaurant", "type": "Integer"}}, "format": "FindRestaurantByCuisine(cuisine) -> restaurant_ID"}, {"name": "GetUserFavoriteCuisine", "Description": "This API will return the user's favorite cuisine based on user ID.", "input_params": {"user_ID": {"description": "the ID of the user", "type": "Integer"}}, "output_params": {"user_cuisine": {"description": "the favorite cuisine of the user", "type": "String"}}, "format": "GetUserFavoriteCuisine(user_ID) -> user_cuisine"}, {"name": "BookRestaurantTable", "Description": "This API books a table at a restaurant for a certain date.", "input_params": {"restaurant_ID": {"description": "the ID of the restaurant", "type": "Integer"}, "date": {"description": "the date of the booking", "type": "Date"}}, "output_params": {"booking_status": {"description": "the status of the booking", "type": "String"}}, "format": "BookRestaurantTable(restaurant_ID, date) -> booking_status"}, {"name": "GetUserID", "Description": "This API retrieves the user ID by using the user name.", "input_params": {"username": {"description": "the name of the user", "type": "String"}}, "output_params": {"user_ID": {"description": "the ID of the user", "type": "Integer"}}, "format": "GetUserID(username) -> user_ID"}], "Query": "Hello, I am Emma. Can you reserve a spot for my favorite food this Friday?", "Label": "BookRestaurantTable(restaurant_ID=FindRestaurantByCuisine(cuisine=GetUserFavoriteCuisine(user_ID=GetUserID(username='Emma'))), date='this Friday')", "Index": 1545}, {"APIs": [{"name": "Username2ID", "Description": "This API is to convert username to user ID.", "input_params": {"username": {"description": "the username of the user", "type": "String"}}, "output_params": {"user_id": {"description": "the ID of the user", "type": "Integer"}}, "format": "Username2ID(username) -> user_id"}, {"name": "FetchUserPlaylist", "Description": "This API allows the user to fetch a playlist of a certain user.", "input_params": {"user_id": {"description": "the ID of the user", "type": "Integer"}}, "output_params": {"playlist": {"description": "the playlist of the user", "type": "List"}}, "format": "FetchUserPlaylist(user_id) -> playlist"}, {"name": "RecommendSong", "Description": "This API recommends a song based on the playlist.", "input_params": {"playlist": {"description": "the playlist of the user", "type": "List"}}, "output_params": {"song_title": {"description": "the title of the recommended song", "type": "String"}}, "format": "RecommendSong(playlist) -> song_title"}, {"name": "PlaySong", "Description": "This API plays the recommended song and returns the song status.", "input_params": {"song_title": {"description": "the title of the song", "type": "String"}}, "output_params": {"song_status": {"description": "the status of the song", "type": "String"}}, "format": "PlaySong(song_title) -> song_status"}], "Query": "I'm logged in as 'lisa', can you play a track you'd recommend based on my music list?", "Label": "PlaySong(song_title=RecommendSong(playlist=FetchUserPlaylist(user_id=Username2ID(username='lisa'))))", "Index": 1546}, {"APIs": [{"name": "Username2ID", "Description": "This API is to convert username to user ID.", "input_params": {"username": {"description": "the username of the user", "type": "String"}}, "output_params": {"user_id": {"description": "the ID of the user", "type": "Integer"}}, "format": "Username2ID(username) -> user_id"}, {"name": "FetchUserPlaylist", "Description": "This API allows the user to fetch a playlist of a certain user.", "input_params": {"user_id": {"description": "the ID of the user", "type": "Integer"}}, "output_params": {"playlist": {"description": "the playlist of the user", "type": "List"}}, "format": "FetchUserPlaylist(user_id) -> playlist"}, {"name": "RecommendSong", "Description": "This API recommends a song based on the playlist.", "input_params": {"playlist": {"description": "the playlist of the user", "type": "List"}}, "output_params": {"song_title": {"description": "the title of the recommended song", "type": "String"}}, "format": "RecommendSong(playlist) -> song_title"}, {"name": "PlaySong", "Description": "This API plays the recommended song and returns the song status.", "input_params": {"song_title": {"description": "the title of the song", "type": "String"}}, "output_params": {"song_status": {"description": "the status of the song", "type": "String"}}, "format": "PlaySong(song_title) -> song_status"}], "Query": "I'm signed in as 'mia', can you play a song that you suggest based on my song list?", "Label": "PlaySong(song_title=RecommendSong(playlist=FetchUserPlaylist(user_id=Username2ID(username='mia'))))", "Index": 1547}]}]