[{"name": "Username2ID", "Description": "This API is to convert a username to a user ID.", "input_params": {"user_name": {"description": "the name of the user", "type": "String"}}, "output_params": {"user_ID": {"description": "the ID of the user", "type": "Integer"}}, "format": "Username2ID(user_name) -> user_ID"}, {"name": "Playlistname2ID", "Description": "This API is to convert a playlist name to a playlist ID.", "input_params": {"playlist_name": {"description": "the name of the playlist", "type": "String"}}, "output_params": {"playlist_ID": {"description": "the ID of the playlist", "type": "Integer"}}, "format": "Playlistname2ID(playlist_name) -> playlist_ID"}, {"name": "AddSongToPlaylist", "Description": "This API is to add a song to a playlist.", "input_params": {"user_ID": {"description": "the ID of the user", "type": "Integer"}, "playlist_ID": {"description": "the ID of the playlist", "type": "Integer"}, "song_name": {"description": "the name of the song", "type": "String"}}, "output_params": {"playlist_songs": {"description": "a list of the songs in the playlist", "type": "List"}}, "format": "AddSongToPlaylist(user_ID, playlist_ID, song_name) -> playlist_songs"}, {"name": "GeoLocation2TimeZone", "Description": "This API is to convert geolocation to timezone.", "input_params": {"geolocation": {"description": "the geolocation of a place", "type": "String"}}, "output_params": {"timezone": {"description": "the timezone of the geolocation", "type": "String"}}, "format": "GeoLocation2TimeZone(geolocation) -> timezone"}, {"name": "SetAlarm", "Description": "This API allows the user to set an alarm in a specific timezone.", "input_params": {"timezone": {"description": "the timezone where the alarm will be set", "type": "String"}, "time": {"description": "the time when the alarm will ring", "type": "Time"}}, "output_params": {"alarm_status": {"description": "the status of the alarm", "type": "String"}}, "format": "SetAlarm(timezone, time) -> alarm_status"}, {"name": "GetUserGeolocation", "Description": "This API returns the geolocation of a certain user.", "input_params": {"user_name": {"description": "the name of the user", "type": "String"}}, "output_params": {"user_geolocation": {"description": "the geolocation of the user", "type": "String"}}, "format": "GetUserGeolocation(user_name) -> user_geolocation"}, {"name": "Songname2ID", "Description": "This API is to convert a song's name to song ID.", "input_params": {"song_name": {"description": "the name of the song", "type": "String"}}, "output_params": {"song_ID": {"description": "the ID of the song", "type": "Integer"}}, "format": "Songname2ID(song_name) -> song_ID"}, {"name": "GetUsernameID", "Description": "This API is to convert a username to user ID.", "input_params": {"username": {"description": "the username", "type": "String"}}, "output_params": {"person_ID": {"description": "the ID of the person", "type": "Integer"}}, "format": "GetUsernameID(username) -> person_ID"}, {"name": "Username2Email", "Description": "This API is used to convert a username to a user's email.", "input_params": {"username": {"description": "the username of the user", "type": "String"}}, "output_params": {"user_email": {"description": "the email of the user", "type": "String"}}, "format": "Username2Email(username) -> user_email"}, {"name": "Title2ISBN", "Description": "This API is used to convert a book title to its ISBN.", "input_params": {"title": {"description": "the title of the book", "type": "String"}}, "output_params": {"title_ISBN": {"description": "the ISBN of the book", "type": "String"}}, "format": "Title2ISBN(title) -> title_ISBN"}, {"name": "CheckAvailability", "Description": "This API checks the availability of a book based on its ISBN and a given date range.", "input_params": {"ISBN": {"description": "the ISBN of the book", "type": "String"}, "start_date": {"description": "the start date of the range", "type": "Date"}, "end_date": {"description": "the end date of the range", "type": "Date"}}, "output_params": {"availability_status": {"description": "the availability status of the book", "type": "String"}}, "format": "CheckAvailability(ISBN,start_date,end_date) -> availability_status"}, {"name": "ReserveBook", "Description": "This API is used to reserve a book.", "input_params": {"user_email": {"description": "the email of the user", "type": "String"}, "ISBN": {"description": "the ISBN of the book", "type": "String"}, "start_date": {"description": "the start date of the reservation", "type": "Date"}, "end_date": {"description": "the end date of the reservation", "type": "Date"}}, "output_params": {"reservation_status": {"description": "the status of the reservation", "type": "String"}}, "format": "ReserveBook(user_email,ISBN,start_date,end_date) -> reservation_status"}, {"name": "OrderFood", "Description": "This API allows the user to order a specific food from a specified restaurant.", "input_params": {"dish_name": {"description": "the name of the dish", "type": "String"}, "restaurant_name": {"description": "the name of the restaurant", "type": "String"}}, "output_params": {"order_status": {"description": "the status of the order", "type": "String"}}, "format": "OrderFood(dish_name, restaurant_name) -> order_status"}, {"name": "FindPopularDishes", "Description": "This API recommends popular dishes in a given city.", "input_params": {"city": {"description": "the name of the city", "type": "String"}}, "output_params": {"dish_name": {"description": "the name of the popular dish", "type": "String"}}, "format": "FindPopularDishes(city) -> dish_name"}, {"name": "TopRestaurants", "Description": "This API provides the names of top ranked restaurants in a given city.", "input_params": {"city": {"description": "the name of the city", "type": "String"}}, "output_params": {"restaurant_name": {"description": "the name of the top ranked restaurant", "type": "String"}}, "format": "TopRestaurants(city) -> restaurant_name"}, {"name": "FindMovie", "Description": "This API provides the name of a movie based on the specified genre.", "input_params": {"genre": {"description": "the genre of the movie", "type": "String"}}, "output_params": {"movie_name": {"description": "the name of the movie", "type": "String"}}, "format": "FindMovie(genre) -> movie_name"}, {"name": "MovieShowtimes", "Description": "This API gives the showtimes for a specified movie in a chosen city.", "input_params": {"movie_name": {"description": "the name of the movie", "type": "String"}, "city": {"description": "the name of the city", "type": "String"}}, "output_params": {"show_time": {"description": "the showtimes for the movie in the chosen city", "type": "String"}}, "format": "MovieShowtimes(movie_name, city) -> show_time"}, {"name": "BuyMovieTickets", "Description": "This API buys movie tickets for a specific show time, movie and chosen seats.", "input_params": {"show_time": {"description": "the show time of the movie", "type": "String"}, "movie_name": {"description": "the name of the movie", "type": "String"}, "seats": {"description": "the number of seats to buy", "type": "Integer"}}, "output_params": {"booking_status": {"description": "the status of the booking", "type": "String"}}, "format": "BuyMovieTickets(show_time, movie_name, seats) -> booking_status"}, {"name": "CheckWeather", "Description": "This API checks the weather of a specific location.", "input_params": {"location": {"description": "the specific location", "type": "String"}}, "output_params": {"weather": {"description": "the weather at the specific location", "type": "String"}}, "format": "CheckWeather(location) -> weather"}, {"name": "SelectOutfit", "Description": "This API selects an appropriate outfit based on the weather and occasion.", "input_params": {"weather": {"description": "the weather condition", "type": "String"}, "occasion": {"description": "the occasion", "type": "String"}}, "output_params": {"outfit": {"description": "the recommended outfit", "type": "String"}}, "format": "SelectOutfit(weather, occasion) -> outfit"}, {"name": "FindRestaurant", "Description": "This API is to find a restaurant based on location, type and rating.", "input_params": {"location": {"description": "the location of the restaurant", "type": "String"}, "type": {"description": "the type of the restaurant", "type": "String"}, "rating": {"description": "the rating of the restaurant", "type": "String"}}, "output_params": {"restaurant": {"description": "the restaurant found", "type": "Object"}}, "format": "FindRestaurant(location, type, rating) -> restaurant"}, {"name": "GetMenu", "Description": "This API is to get the menu of a specific restaurant.", "input_params": {"restaurant_id": {"description": "the ID of the restaurant", "type": "String"}}, "output_params": {"menu": {"description": "the menu of the restaurant", "type": "Object"}}, "format": "GetMenu(restaurant_id) -> menu"}, {"name": "FlightSchedule", "Description": "This API is to get the departure and arrival times for flights at a specific airport.", "input_params": {"airport": {"description": "the name of the airport", "type": "String"}}, "output_params": {"flightTimes": {"description": "the departure and arrival times for flights", "type": "List"}}, "format": "FlightSchedule(airport) -> flightTimes"}, {"name": "GetTrafficUpdate", "Description": "This API is to fetch the current traffic scenario and any possible delays happening at a given location.", "input_params": {"location": {"description": "the location for which traffic updates are needed", "type": "String"}}, "output_params": {"trafficDelay": {"description": "the current traffic scenario and any possible delays", "type": "String"}}, "format": "GetTrafficUpdate(location) -> trafficDelay"}, {"name": "CalculateTravelTime", "Description": "This API is to estimate the travel time accounting for flight times and possible traffic delays.", "input_params": {"flightTimes": {"description": "the departure and arrival times for flights", "type": "List"}, "trafficDelay": {"description": "the current traffic scenario and any possible delays", "type": "String"}}, "output_params": {"travelTime": {"description": "the estimated travel time", "type": "String"}}, "format": "CalculateTravelTime(flightTimes, trafficDelay) -> travelTime"}, {"name": "HealthCheck", "Description": "This API is used to calculate health index based on age and weight.", "input_params": {"Age": {"description": "the age of the person", "type": "Integer"}, "Weight": {"description": "the weight of the person", "type": "Float"}}, "output_params": {"HealthScale": {"description": "the health index of the person", "type": "String"}}, "format": "HealthCheck(Age, Weight) -> HealthScale"}, {"name": "RecommendDiet", "Description": "This API is used to recommend a diet chart considering the health index.", "input_params": {"HealthScale": {"description": "the health index of the person", "type": "String"}}, "output_params": {"DietReport": {"description": "the diet chart recommended for the person", "type": "String"}}, "format": "RecommendDiet(HealthScale) -> DietReport"}, {"name": "RetrieveUserInfo", "Description": "This API retrieves Age and Weight of a specific user.", "input_params": {"Username": {"description": "the username of the person", "type": "String"}}, "output_params": {"Age": {"description": "the age of the person", "type": "Integer"}, "Weight": {"description": "the weight of the person", "type": "Float"}}, "format": "RetrieveUserInfo(Username) -> Age, Weight"}, {"name": "BuyMovieTicket", "Description": "This API allows the user to purchase a movie ticket for a specific movie, theater, date, and time.", "input_params": {"movie_name": {"description": "the name of the movie", "type": "String"}, "theater_name": {"description": "the name of the theater", "type": "String"}, "date": {"description": "the date of the movie showing", "type": "Date"}, "time": {"description": "the time of the movie showing", "type": "Time"}}, "output_params": {"booking_status": {"description": "Booking success or failure information", "type": "String"}}, "format": "BuyMovieTicket(movie_name, theater_name, date, time) -> booking status"}, {"name": "GetMovieTheaters", "Description": "This API returns a recommended movie theaters in a given city.", "input_params": {"city": {"description": "city name", "type": "String"}}, "output_params": {"theater_name": {"description": "the name of the movie theaters", "type": "String"}}, "format": "GetMovieTheaters(city) -> theater_name"}, {"name": "QueryEventTime", "Description": "This API is to query event time.", "input_params": {"event_name": {"description": "the name of the event", "type": "String"}}, "output_params": {"time": {"description": "the start time of the event", "type": "Time"}}, "format": "QueryEvent(event_name) -> time"}, {"name": "CreateEvent", "Description": "This API is to create an event in your calendar.", "input_params": {"event_name": {"description": "the name of the event", "type": "String"}, "location": {"description": "the location of the event", "type": "String"}, "time": {"description": "the start time of the event", "type": "Time"}}, "output_params": {"event_confirmation": {"description": "the confirmation of event creation", "type": "String"}}, "format": "CreateEvent(event_name, location, time) -> event_confirmation"}, {"name": "RemindEvent", "Description": "This API is to set up a reminder for the event.", "input_params": {"event_name": {"description": "the name of the event", "type": "String"}, "alert_time": {"description": "the time to set the reminder", "type": "Time"}}, "output_params": {"reminder_confirmation": {"description": "the confirmation of reminder setup", "type": "String"}}, "format": "RemindEvent(event_name, alert_time) -> reminder_confirmation"}, {"name": "RecommendHotel", "Description": "This API recommends a hotel name based on city and star level.", "input_params": {"city": {"description": "the city for hotel recommendation", "type": "String"}, "star_level": {"description": "the star level of the hotel", "type": "Integer"}}, "output_params": {"hotel_name": {"description": "the name of the recommended hotel", "type": "String"}}, "format": "RecommendHotel(city, star_level) -> hotel_name"}, {"name": "GetCity", "Description": "This API will return the city of the user based on user ID.", "input_params": {"user_ID": {"description": "the ID of the user", "type": "Integer"}}, "output_params": {"city": {"description": "the city of the user", "type": "String"}}, "format": "GetCity(user_ID) -> city"}, {"name": "BookHotel", "Description": "This API books a hotel for a certain date.", "input_params": {"hotel_name": {"description": "the name of the hotel", "type": "String"}, "date": {"description": "the date of the booking", "type": "String"}}, "output_params": {"booking_status": {"description": "the status of the booking", "type": "String"}}, "format": "BookHotel(hotel_name, date) -> booking_status"}, {"name": "GetUserID", "Description": "This API retrieves the user ID by using the user name.", "input_params": {"username": {"description": "the name of the user", "type": "String"}}, "output_params": {"user_ID": {"description": "the ID of the user", "type": "Integer"}}, "format": "GetUserID(username) -> user_ID"}, {"name": "SearchHotel", "Description": "This API searches a hotel in a given city based on user preferences.", "input_params": {"city": {"description": "the city name", "type": "String"}, "hotel_preferences": {"description": "the user preferences for the hotel", "type": "String"}}, "output_params": {"hotel_name": {"description": "the name of the hotel", "type": "String"}}, "format": "SearchHotel(city, hotel_preferences) -> hotel_name"}, {"name": "CalculateDistance", "Description": "This API is to calculate the distance between the start point and end point.", "input_params": {"start_point": {"description": "the starting point of the journey", "type": "String"}, "end_point": {"description": "the ending point of the journey", "type": "String"}}, "output_params": {"distance": {"description": "the distance between the start point and end point", "type": "Float"}}, "format": "CalculateDistance(start_point, end_point) -> distance"}, {"name": "EstimateTravelTime", "Description": "This API is to estimate the travel time based on the distance and mode of transportation.", "input_params": {"distance": {"description": "the distance of the journey", "type": "Float"}, "mode_of_transport": {"description": "the mode of transportation", "type": "String"}}, "output_params": {"time": {"description": "the estimated travel time", "type": "String"}}, "format": "EstimateTravelTime(distance, mode_of_transport) -> time"}, {"name": "AlertBeforeDeparture", "Description": "This API is to calculate the time when the user needs to leave, given the event time and travel time.", "input_params": {"event_time": {"description": "the time of the event", "type": "DateTime"}, "travel_time": {"description": "the estimated travel time", "type": "String"}}, "output_params": {"alert_time": {"description": "the time when the user needs to leave", "type": "DateTime"}}, "format": "AlertBeforeDeparture(event_time, travel_time) -> alert_time"}, {"name": "BookRestaurant", "Description": "This API allows the user to book a specific restaurant for a certain date and time", "input_params": {"restaurant_name": {"description": "the name of restarant", "type": "String"}, "date": {"description": "data", "type": "String"}, "time": {"description": "time", "type": "String"}}, "output_params": {"booking status": {"description": "Booking success or failure information", "type": "String"}}, "format": "BookRestaurant(restaurant_name, date, time) -> booking status"}, {"name": "RecommendRestaurant", "Description": "This API returns the name of a restaurant according to location and star_level", "input_params": {"location": {"description": "the location of the restaurant", "type": "Location"}, "star_level": {"description": "the star level of the restaurant", "type": "Integer"}}, "output_params": {"restaurant_name": {"description": "the name of the restaurant", "type": "String"}}, "format": "RecommendRestaurant(location,star_level) -> restaurant_name"}, {"name": "GetUserLocation", "Description": "This API returns the location of a certain user ID", "input_params": {"user_ID": {"description": "the ID of the user, please note that it should be number, not character", "type": "Integer"}}, "output_params": {"user_location": {"description": "the location of the user ID", "type": "Location"}}, "format": "GetUserLocation(user_ID) -> user_location"}, {"name": "GetRestaurantLevel", "Description": "This API returns the star level of a certain restaurant", "input_params": {"restaurant_name": {"description": "the name of restaurant", "type": "String"}}, "output_params": {"star_level": {"description": "the star level of the restaurant", "type": "Integer"}}, "format": "GetRestaurantLevel(restaurant_name) -> star_level"}, {"name": "SearchFlight", "Description": "This API generates flight details from one location to another at a specified date.", "input_params": {"from_location": {"description": "the location from where the flight will depart", "type": "String"}, "to_location": {"description": "the location where the flight will arrive", "type": "String"}, "date": {"description": "the date of the flight", "type": "String"}}, "output_params": {"flight_details": {"description": "the details of the flight", "type": "String"}}, "format": "SearchFlight(from_location, to_location, date) -> flight_details"}, {"name": "GetUserPreference", "Description": "This API returns a user's preferred flight class, e.g., economy, business.", "input_params": {"user_ID": {"description": "the ID of the user", "type": "Integer"}}, "output_params": {"preferred_flight_class": {"description": "the preferred flight class of the user", "type": "String"}}, "format": "GetUserPreference(user_ID) -> preferred_flight_class"}, {"name": "BookFlight", "Description": "This API books a flight using the flight details and the user's preferred flight class.", "input_params": {"flight_details": {"description": "the details of the flight", "type": "String"}, "preferred_flight_class": {"description": "the preferred flight class of the user", "type": "String"}}, "output_params": {"booking_status": {"description": "the status of the booking", "type": "String"}}, "format": "BookFlight(flight_details, preferred_flight_class) -> booking_status"}, {"name": "MusicGenre2Artist", "Description": "This API is to convert music genre to artist's name.", "input_params": {"music_genre": {"description": "the genre of the music", "type": "String"}}, "output_params": {"artist_name": {"description": "the name of the artist", "type": "String"}}, "format": "MusicGenre2Artist(music_genre) -> artist_name"}, {"name": "PlayMusic", "Description": "This API allows the user to play music.", "input_params": {"song_title": {"description": "the title of the song", "type": "String"}}, "output_params": {"music_status": {"description": "the status of the music playing", "type": "String"}}, "format": "PlayMusic(song_title) -> music_status"}, {"name": "RecommendSong", "Description": "This API returns the title of a song according to user's mood.", "input_params": {"user_mood": {"description": "the mood of the user", "type": "String"}}, "output_params": {"song_title": {"description": "the title of the recommended song", "type": "String"}}, "format": "RecommendSong(user_mood) -> song_title"}, {"name": "GetUserMood", "Description": "This API returns the mood of a certain user.", "input_params": {"user_name": {"description": "the name of the user", "type": "String"}}, "output_params": {"user_mood": {"description": "the mood of the user", "type": "String"}}, "format": "GetUserMood(user_name) -> user_mood"}, {"name": "GetWeather", "Description": "This API retrieves the weather information for a given city.", "input_params": {"city": {"description": "the name of the city", "type": "String"}}, "output_params": {"weather": {"description": "the weather information", "type": "String"}}, "format": "GetWeather(city) -> weather"}, {"name": "RecommendClothing", "Description": "This API suggests clothing items to wear based on the current weather.", "input_params": {"weather": {"description": "the current weather", "type": "String"}}, "output_params": {"clothingItems": {"description": "the suggested clothing items", "type": "List"}}, "format": "RecommendClothing(weather) -> clothingItems"}, {"name": "GetStore", "Description": "This API finds stores where a certain clothing item is available in a given city.", "input_params": {"city": {"description": "the name of the city", "type": "String"}, "clothingItem": {"description": "the clothing item", "type": "String"}}, "output_params": {"storename": {"description": "the name of the store", "type": "String"}}, "format": "GetStore(city, clothingItem) -> storename"}, {"name": "BuyClothing", "Description": "This API is to purchase a clothing item from a certain store.", "input_params": {"storename": {"description": "the name of the store", "type": "String"}, "clothingItem": {"description": "the clothing item", "type": "String"}}, "output_params": {"purchaseStatus": {"description": "the status of the purchase", "type": "String"}}, "format": "BuyClothing(storename, clothingItem) -> purchaseStatus"}, {"name": "FindNearestStore", "Description": "This API is to find the nearest store based on user location and the preferred product type.", "input_params": {"city": {"description": "the city where the user is located", "type": "String"}, "store_type": {"description": "the preferred store type", "type": "String"}}, "output_params": {"store_name": {"description": "the name of the nearest store", "type": "String"}}, "format": "FindNearestStore(city, store_type) -> store_name"}, {"name": "GetProductPrice", "Description": "This API is to get the price of a specific product in a given store.", "input_params": {"store_name": {"description": "the name of the store", "type": "String"}, "product_name": {"description": "the name of the product", "type": "String"}}, "output_params": {"price": {"description": "the price of the product", "type": "Float"}}, "format": "GetProductPrice(store_name, product_name) -> price"}, {"name": "Customername2ID", "Description": "This API is to convert a customer name to a customer ID.", "input_params": {"customer_name": {"description": "the name of the customer", "type": "String"}}, "output_params": {"customer_ID": {"description": "the ID of the customer", "type": "Integer"}}, "format": "Customername2ID(customer_name) -> customer_ID"}, {"name": "Productname2ID", "Description": "This API is to convert a book name to a book ID.", "input_params": {"book_name": {"description": "the title of the book", "type": "String"}}, "output_params": {"product_ID": {"description": "the ID of the book", "type": "Integer"}}, "format": "Productname2ID(book_name) -> product_ID"}, {"name": "PurchaseBook", "Description": "This API is to process the purchase of books.", "input_params": {"customer_ID": {"description": "the ID of the customer,it should be number", "type": "Integer"}, "product_ID": {"description": "the ID of the book,it should be number", "type": "Integer"}}, "output_params": {"purchased_books": {"description": "a list of purchased books", "type": "List"}}, "format": "PurchaseBook(customer_ID, product_ID) -> purchased_books"}, {"name": "Email2ID", "Description": "This API is to convert user email to user ID.", "input_params": {"email": {"description": "the email of the person", "type": "String"}}, "output_params": {"person_ID": {"description": "the ID of the person", "type": "Integer"}}, "format": "Email2ID(email) -> person_ID"}, {"name": "Subjectname2ID", "Description": "This API is to convert subject name to subject ID.", "input_params": {"subject_name": {"description": "the name of the subject", "type": "String"}}, "output_params": {"subject_ID": {"description": "the ID of the subject", "type": "Integer"}}, "format": "Subjectname2ID(subject_name) -> subject_ID"}, {"name": "EnrollCourse", "Description": "This API is to enroll a user to a specific course.", "input_params": {"person_ID": {"description": "the ID of the person", "type": "Integer"}, "subject_ID": {"description": "the ID of the subject", "type": "Integer"}, "semester": {"description": "the semester of the enrollment", "type": "String"}}, "output_params": {"Enrollment confirmation": {"description": "the confirmation of the enrollment", "type": "String"}}, "format": "EnrollCourse(person_ID,subject_ID,semester) -> Enrollment confirmation"}, {"name": "Cityname2ID", "Description": "This API is to convert city name to city ID.", "input_params": {"city_name": {"description": "the name of the city", "type": "String"}}, "output_params": {"City_ID": {"description": "the ID of the city", "type": "Integer"}}, "format": "Cityname2ID(city_name) -> City_ID"}, {"name": "Eventname2ID", "Description": "This API is to convert event name to event ID.", "input_params": {"Event_name": {"description": "the name of the event", "type": "String"}}, "output_params": {"Event_ID": {"description": "the ID of the event", "type": "Integer"}}, "format": "Eventname2ID(Event_name) -> Event_ID"}, {"name": "ReserveTicket", "Description": "This API is to reserve a ticket for an event.", "input_params": {"City_ID": {"description": "the ID of the city", "type": "Integer"}, "Event_ID": {"description": "the ID of the event", "type": "Integer"}, "date": {"description": "the date of the event", "type": "Date"}}, "output_params": {"Ticket_confirmation": {"description": "the confirmation of the ticket", "type": "String"}}, "format": "ReserveTicket(City_ID,Event_ID,date) -> Ticket_confirmation"}, {"name": "Sendername2ID", "Description": "This API is to convert sender name to sender ID.", "input_params": {"sender_name": {"description": "the name of the sender", "type": "String"}}, "output_params": {"Sender_ID": {"description": "the ID of the sender", "type": "Integer"}}, "format": "Sendername2ID(sender_name) -> Sender_ID"}, {"name": "Receivername2ID", "Description": "This API converts receiver name to receiver ID.", "input_params": {"receiver_name": {"description": "the name of the receiver", "type": "String"}}, "output_params": {"Receiver_ID": {"description": "the ID of the receiver", "type": "Integer"}}, "format": "Receivername2ID(receiver_name) -> Receiver_ID"}, {"name": "TransferAmount", "Description": "This API is to transfer money between two users.", "input_params": {"Sender_ID": {"description": "the ID of the sender,it should be number", "type": "Integer"}, "Receiver_ID": {"description": "the ID of the receiver,it should be number", "type": "Integer"}, "amount": {"description": "the amount of money to be transferred", "type": "Float"}}, "output_params": {"Money transfer confirmation": {"description": "confirmation message for the money transfer", "type": "String"}}, "format": "TransferAmount(Sender_ID,Receiver_ID,amount) -> Money transfer confirmation"}, {"name": "Address2GPS", "Description": "This API is to convert an address to GPS coordinates.", "input_params": {"address": {"description": "the address", "type": "String"}}, "output_params": {"GPS coordinates": {"description": "the GPS coordinates", "type": "String"}}, "format": "Address2GPS(address) -> GPS coordinates"}, {"name": "GPS2Weather", "Description": "This API is to convert GPS coordinates to weather information.", "input_params": {"gps_coordinates": {"description": "the GPS coordinates", "type": "String"}}, "output_params": {"weather data": {"description": "the weather data", "type": "JSON"}}, "format": "GPS2Weather(gps_coordinates) -> weather data"}, {"name": "Cityname2Address", "Description": "This API is to convert a city name to its detailed address.", "input_params": {"city_name": {"description": "the name of the city", "type": "String"}}, "output_params": {"address": {"description": "the detailed address", "type": "String"}}, "format": "Cityname2Address(city_name) -> address"}, {"name": "Productname2Id", "Description": "This API is to convert product name to its Id.", "input_params": {"product_name": {"description": "the name of the product", "type": "String"}}, "output_params": {"Product_Id": {"description": "the Id of the product", "type": "Integer"}}, "format": "Productname2Id(product_name) -> Product_Id"}, {"name": "ProductAvailability", "Description": "API to check the availability of a product.", "input_params": {"product_id": {"description": "the Id of the product", "type": "Integer"}}, "output_params": {"availability": {"description": "the availability of the product", "type": "Boolean"}}, "format": "ProductAvailability(product_id) -> availability"}, {"name": "FindFlightByDestination", "Description": "This API is used to retrieve flight ID by using the flight's destination.", "input_params": {"destination": {"description": "the destination of the flight", "type": "String"}}, "output_params": {"flight_ID": {"description": "the ID of the flight", "type": "Integer"}}, "format": "FindFlightByDestination(destination) -> flight_ID"}, {"name": "GetUserDestination", "Description": "This API will return the user's travel destination based on user ID.", "input_params": {"user_ID": {"description": "the ID of the user", "type": "Integer"}}, "output_params": {"user_destination": {"description": "the travel destination of the user", "type": "String"}}, "format": "GetUserDestination(user_ID) -> user_destination"}, {"name": "ItemnameToID", "Description": "This API is used to convert the name of the item to item ID.", "input_params": {"item_name": {"description": "the name of the item", "type": "String"}}, "output_params": {"item_ID": {"description": "the ID of the item", "type": "Integer"}}, "format": "ItemnameToID(item_name) -> item_ID"}, {"name": "SuppliernameToID", "Description": "This API is used to convert the name of the supplier to supplier ID.", "input_params": {"supplier_name": {"description": "the name of the supplier", "type": "String"}}, "output_params": {"supplier_ID": {"description": "the ID of the supplier", "type": "Integer"}}, "format": "SuppliernameToID(supplier_name) -> supplier_ID"}, {"name": "PlaceOrder", "Description": "This API places the order for a particular item from a specified supplier.", "input_params": {"item_ID": {"description": "the ID of the item", "type": "Integer"}, "supplier_ID": {"description": "the ID of the supplier", "type": "Integer"}, "quantity": {"description": "the quantity of the item", "type": "Integer"}}, "output_params": {"order_status": {"description": "the status of the order", "type": "String"}}, "format": "PlaceOrder(item_ID, supplier_ID, quantity) -> order_status"}, {"name": "UserEmailToID", "Description": "This API is used to convert the user's email address to user ID.", "input_params": {"email_address": {"description": "the email address of the user", "type": "String"}}, "output_params": {"user_ID": {"description": "the ID of the user", "type": "Integer"}}, "format": "UserEmailToID(email_address) -> user_ID"}, {"name": "BooknameToID", "Description": "This API is to convert the book name to book ID.", "input_params": {"book_name": {"description": "the name of the book", "type": "String"}}, "output_params": {"book_ID": {"description": "the ID of the book", "type": "Integer"}}, "format": "BooknameToID(book_name) -> book_ID"}, {"name": "BorrowBook", "Description": "This API borrows a book for a particular user.", "input_params": {"user_ID": {"description": "the ID of the user", "type": "Integer"}, "book_ID": {"description": "the ID of the book", "type": "Integer"}}, "output_params": {"borrow_status": {"description": "the status of the borrowing", "type": "String"}}, "format": "BorrowBook(user_ID, book_ID) -> borrow_status"}, {"name": "FlightFromTo", "Description": "This API returns a flight id between two cities.", "input_params": {"city1": {"description": "the departure city", "type": "String"}, "city2": {"description": "the destination city", "type": "String"}}, "output_params": {"flight_ID": {"description": "the id of the flight", "type": "Integer"}}, "format": "FlightFromTo(city1, city2) -> flight_ID"}, {"name": "GetPassengerID", "Description": "This API returns the id of a passenger.", "input_params": {"name": {"description": "the name of the passenger", "type": "String"}}, "output_params": {"passenger_ID": {"description": "the id of the passenger", "type": "Integer"}}, "format": "GetPassengerID(name) -> passenger_ID"}, {"name": "AddToCart", "Description": "This API adds a product to a customer's shopping cart.", "input_params": {"customer_ID": {"description": "the ID of the customer", "type": "Integer"}, "product_ID": {"description": "the ID of the product", "type": "Integer"}}, "output_params": {"Cart status": {"description": "the status of the cart", "type": "String"}}, "format": "AddToCart(customer_ID, product_ID) -> Cart status"}, {"name": "FindHotel", "Description": "This API returns a recommended hotel in a given city.", "input_params": {"city": {"description": "the name of the city", "type": "String"}}, "output_params": {"hotel_name": {"description": "the name of the recommended hotel", "type": "String"}}, "format": "FindHotel(city) -> hotel_name"}, {"name": "BookRoom", "Description": "This API allows the user to book a room at a specific hotel for a specific number of nights and date.", "input_params": {"hotel_name": {"description": "the name of the hotel", "type": "String"}, "date": {"description": "the starting date of the booking", "type": "Date"}, "number_of_nights": {"description": "the number of nights for the booking", "type": "Integer"}}, "output_params": {"booking status": {"description": "the status of the booking", "type": "String"}}, "format": "BookRoom(hotel_name, date, number_of_nights) -> booking status"}, {"name": "GetWeatherForecast", "Description": "This API returns the weather forecast of a specified city on a specific date.", "input_params": {"city": {"description": "the name of the city", "type": "String"}, "date": {"description": "the specific date", "type": "Date"}}, "output_params": {"weather report": {"description": "the weather forecast", "type": "String"}}, "format": "GetWeatherForecast(city, date) -> weather report"}, {"name": "RecommendOutfit", "Description": "This API recommends an outfit based on the weather conditions.", "input_params": {"weather": {"description": "the weather condition", "type": "String"}}, "output_params": {"outfit details": {"description": "the recommended outfit", "type": "String"}}, "format": "RecommendOutfit(weather) -> outfit details"}, {"name": "BookFinder", "Description": "This API is to find a specific book by genre, author, and year.", "input_params": {"genre": {"description": "the genre of the book", "type": "String"}, "author": {"description": "the author of the book", "type": "String"}, "year": {"description": "the year the book was published", "type": "String"}}, "output_params": {"book": {"description": "the specific book matching the given criteria", "type": "String"}}, "format": "BookFinder(genre, author, year) -> book"}, {"name": "BookSummary", "Description": "This API is to get a summary of a particular book.", "input_params": {"book_name": {"description": "the name of the book", "type": "String"}}, "output_params": {"summary": {"description": "the summary of the book", "type": "String"}}, "format": "BookSummary(book_name) -> summary"}, {"name": "MusicIdentifier", "Description": "This API identifies a specific song from a certain genre, by an artist, from a specific album.", "input_params": {"genre": {"description": "the genre of the song", "type": "String"}, "artist": {"description": "the artist of the song", "type": "String"}, "album": {"description": "the album of the song", "type": "String"}}, "output_params": {"song": {"description": "the specific song identified", "type": "String"}}, "format": "MusicIdentifier(genre, artist, album) -> song"}, {"name": "LyricExtractor", "Description": "This API extracts lyrics of a specific song.", "input_params": {"song_name": {"description": "the name of the song", "type": "String"}}, "output_params": {"lyrics": {"description": "the lyrics of the song", "type": "String"}}, "format": "LyricExtractor(song_name) -> lyrics"}, {"name": "MovieSuggestion", "Description": "This API suggests a movie based on the genre, director, and the year.", "input_params": {"genre": {"description": "the genre of the movie", "type": "String"}, "director": {"description": "the director of the movie", "type": "String"}, "year": {"description": "the year of the movie", "type": "Integer"}}, "output_params": {"movie": {"description": "the suggested movie", "type": "String"}}, "format": "MovieSuggestion(genre, director, year) -> movie"}, {"name": "MovieReview", "Description": "This API provides a review of a particular movie.", "input_params": {"movie_name": {"description": "the name of the movie", "type": "String"}}, "output_params": {"review": {"description": "the review of the movie", "type": "String"}}, "format": "MovieReview(movie_name) -> review"}, {"name": "GetFlightDetails", "Description": "This API is to get detailed information about a specific flight.", "input_params": {"flight_id": {"description": "the ID of the flight", "type": "Integer"}}, "output_params": {"details": {"description": "detailed information about the flight", "type": "String"}}, "format": "GetFlightDetails(flight_id) -> details"}, {"name": "GetClothingRecommendation", "Description": "This API is to get clothing recommendation based on the weather forecast.", "input_params": {"weather_info": {"description": "the weather forecast information", "type": "String"}}, "output_params": {"clothing_recommendation": {"description": "the recommended clothing based on the weather forecast", "type": "String"}}, "format": "GetClothingRecommendation(weather_info) -> clothing_recommendation"}, {"name": "GetHotelAvailability", "Description": "This API checks the availability of hotels in a specific city on specific dates.", "input_params": {"city": {"description": "the name of the city", "type": "String"}, "dates": {"description": "specific dates", "type": "String"}}, "output_params": {"hotel": {"description": "list of available hotels", "type": "List"}}, "format": "GetHotelAvailability(city, dates) -> hotel"}, {"name": "GetRestaurants", "Description": "This API provides a list of restaurants in a specific city.", "input_params": {"city": {"description": "the name of the city", "type": "String"}}, "output_params": {"restaurants": {"description": "list of restaurants", "type": "List"}}, "format": "GetRestaurants(city) -> restaurants"}, {"name": "PlanTrip", "Description": "This API plans a trip including a hotel stay and restaurants visits.", "input_params": {"hotel": {"description": "list of available hotels", "type": "List"}, "restaurants": {"description": "list of restaurants", "type": "List"}}, "output_params": {"trip": {"description": "planned trip details", "type": "Object"}}, "format": "PlanTrip(hotel, restaurants) -> trip"}, {"name": "CurrentExchangeRate", "Description": "This API is to get the current exchange rate for a specific currency.", "input_params": {"currency": {"description": "the currency code", "type": "String"}}, "output_params": {"exchangeRate": {"description": "the current exchange rate", "type": "Float"}}, "format": "CurrentExchangeRate(currency) -> exchangeRate"}, {"name": "BudgetInLocalCurrency", "Description": "This API is to calculate the budget in local currency using the original budget and current exchange rate.", "input_params": {"budget": {"description": "the original budget in USD", "type": "Float"}, "exchangeRate": {"description": "the current exchange rate", "type": "Float"}}, "output_params": {"localBudget": {"description": "the budget in local currency", "type": "Float"}}, "format": "BudgetInLocalCurrency(budget, exchangeRate) -> localBudget"}, {"name": "SuggestDiningOptions", "Description": "This API is to suggest dining options based on the local budget and location.", "input_params": {"localBudget": {"description": "the budget in local currency", "type": "Float"}, "location": {"description": "the location", "type": "String"}}, "output_params": {"diningOptions": {"description": "a list of suggested dining options", "type": "List"}}, "format": "SuggestDiningOptions(localBudget, location) -> diningOptions"}, {"name": "GetCurrentFuelPrice", "Description": "This API is to get the current fuel price of a specific city.", "input_params": {"city": {"description": "the name of the city", "type": "String"}}, "output_params": {"fuelPrice": {"description": "the current fuel price", "type": "Decimal"}}, "format": "GetCurrentFuelPrice(city) -> fuelPrice"}, {"name": "GetDrivingDistance", "Description": "This API is to get the driving distance between two points.", "input_params": {"startPoint": {"description": "the starting point of the journey", "type": "String"}, "endPoint": {"description": "the ending point of the journey", "type": "String"}}, "output_params": {"distance": {"description": "the driving distance between the two points", "type": "Decimal"}}, "format": "GetDrivingDistance(startPoint, endPoint) -> distance"}, {"name": "CalculateFuelCost", "Description": "This API is to calculate the potential fuel cost based on the fuel price and distance.", "input_params": {"fuelPrice": {"description": "the current fuel price", "type": "Decimal"}, "distance": {"description": "the driving distance", "type": "Decimal"}}, "output_params": {"cost": {"description": "the potential fuel cost", "type": "Decimal"}}, "format": "CalculateFuelCost(fuelPrice, distance) -> cost"}, {"name": "GetAverageHousePrice", "Description": "This API is to get the average house price of a specific location.", "input_params": {"location": {"description": "the location of the house", "type": "String"}}, "output_params": {"housePrice": {"description": "the average house price", "type": "Float"}}, "format": "GetAverageHousePrice(location) -> housePrice"}, {"name": "GetLoanInterestRate", "Description": "This API is to get the loan interest rate of a specific bank.", "input_params": {"bank": {"description": "the name of the bank", "type": "String"}}, "output_params": {"interestRate": {"description": "the loan interest rate", "type": "Float"}}, "format": "GetLoanInterestRate(bank) -> interestRate"}, {"name": "CalculateMortgagePayment", "Description": "This API is to calculate the monthly mortgage payment based on the house price and interest rate.", "input_params": {"housePrice": {"description": "the house price", "type": "Float"}, "interestRate": {"description": "the loan interest rate", "type": "Float"}}, "output_params": {"mortgagePayment": {"description": "the monthly mortgage payment", "type": "Float"}}, "format": "CalculateMortgagePayment(housePrice, interestRate) -> mortgagePayment"}, {"name": "BookTable", "Description": "This API allows the user to book a table at a specific restaurant for a given date and time.", "input_params": {"restaurant_name": {"description": "the name of the restaurant", "type": "String"}, "date": {"description": "the date of the booking", "type": "Date"}, "time": {"description": "the time of the booking", "type": "Time"}}, "output_params": {"booking status": {"description": "the status of the booking", "type": "String"}}, "format": "BookTable(restaurant_name, date, time) -> booking status"}, {"name": "GetRestaurant", "Description": "This API the name of the restaurant recommended based on city and cuisine.", "input_params": {"city": {"description": "the city to search for restaurants", "type": "String"}, "cuisine": {"description": "the cuisine to search for restaurants", "type": "String"}}, "output_params": {"restaurant_name": {"description": "the name of the recommended restaurant", "type": "String"}}, "format": "GetRestaurant(city,cuisine) -> restaurant_name"}, {"name": "SearchRecipe", "Description": "This API is to search for recipe based on user preferences.", "input_params": {"cuisine": {"description": "the cuisine preference", "type": "String"}, "diet": {"description": "the diet preference", "type": "String"}, "ingredients": {"description": "the list of ingredients", "type": "List"}}, "output_params": {"recipe": {"description": "the searched recipe", "type": "String"}}, "format": "SearchRecipe(cuisine, diet, ingredients) -> recipe"}, {"name": "GetRecipeInstructions", "Description": "This API is to get the instructions to prepare a specific recipe.", "input_params": {"recipe_name": {"description": "the name of the recipe", "type": "String"}}, "output_params": {"instructions": {"description": "the instructions for the recipe", "type": "String"}}, "format": "GetRecipeInstructions(recipe_name) -> instructions"}, {"name": "WeatherForecast", "Description": "This API is to get the temperature for a specific location.", "input_params": {"location": {"description": "location", "type": "String"}}, "output_params": {"temperature": {"description": "the temperature", "type": "Float"}}, "format": "WeatherForecast(location) -> temperature"}, {"name": "GetCityPopulation", "Description": "This API is to get the population of a specific city.", "input_params": {"city": {"description": "city name", "type": "String"}}, "output_params": {"population": {"description": "the population of the city", "type": "Integer"}}, "format": "GetCityPopulation(city) -> population"}, {"name": "RecommendActivity", "Description": "This API is to recommend an activity based on the temperature and population of a city.", "input_params": {"temperature": {"description": "the temperature of the city", "type": "Float"}, "population": {"description": "the population of the city", "type": "Integer"}}, "output_params": {"activity": {"description": "the recommended activity", "type": "String"}}, "format": "RecommendActivity(temperature, population) -> activity"}, {"name": "SearchRestaurant", "Description": "This API finds a restaurant in a given city and with a certain cuisine.", "input_params": {"city": {"description": "city", "type": "String"}, "cuisine": {"description": "cuisine type", "type": "String"}}, "output_params": {"restaurant_name": {"description": "restaurant name", "type": "String"}}, "format": "SearchRestaurant(city, cuisine) -> restaurant_name"}, {"name": "RecommendItems", "Description": "This API retrieves the menu of a given restaurant and recommend items.", "input_params": {"restaurant_name": {"description": "restaurant name", "type": "String"}}, "output_params": {"recommend_items": {"description": "recommended items in menu", "type": "List"}}, "format": "RecommendItems(restaurant_name) -> recommend_items"}, {"name": "GetRoute", "Description": "This API provides the optimal driving route between two locations.", "input_params": {"origin_location": {"description": "starting location,the format: (Latitude,longitude),eg.(23,145)", "type": "String"}, "destination_location": {"description": "destination location,the format: (Latitude,longitude),eg.(23,145)", "type": "String"}}, "output_params": {"route": {"description": "optimal driving route", "type": "String"}}, "format": "GetRoute(origin_location,destination_location) -> route"}, {"name": "Personname2ID", "Description": "This API is to convert user name to user ID.", "input_params": {"person_name": {"description": "the name of the person", "type": "String"}}, "output_params": {"person_ID": {"description": "the ID of the person", "type": "Integer"}}, "format": "Personname2ID(person_name) -> person_ID"}, {"name": "Cityname2Weather", "Description": "This API is to fetch the current weather for a specific city.", "input_params": {"city_name": {"description": "the name of the city", "type": "String"}}, "output_params": {"weather": {"description": "the current weather of the city", "type": "String"}}, "format": "Cityname2Weather(city_name) -> weather"}, {"name": "ActivityRecommend", "Description": "This API is to recommend suitable activities based on the weather in a specific city.", "input_params": {"city_name": {"description": "the name of the city", "type": "String"}, "weather": {"description": "the current weather of the city", "type": "String"}}, "output_params": {"activity": {"description": "the recommended activity based on the weather", "type": "String"}}, "format": "ActivityRecommend(city_name, weather) -> activity"}, {"name": "ActivityBook", "Description": "This API is to book an activity for a specific user.", "input_params": {"activity": {"description": "the activity to be booked", "type": "String"}, "user_name": {"description": "the name of the user", "type": "String"}}, "output_params": {"booking_confirmation": {"description": "the confirmation of the booking", "type": "String"}}, "format": "ActivityBook(activity, user_name) -> booking_confirmation"}, {"name": "Restaurantname2ID", "Description": "This API is to convert a restaurant name to a specific restaurant ID.", "input_params": {"restaurant_name": {"description": "the name of the restaurant", "type": "String"}}, "output_params": {"restaurant_ID": {"description": "the ID of the restaurant", "type": "Integer"}}, "format": "Restaurantname2ID(restaurant_name) -> restaurant_ID"}, {"name": "MenuItem2ID", "Description": "This API is to convert a menu item name with restaurant ID to a specific menu item ID.", "input_params": {"menu_item": {"description": "the name of the menu item", "type": "String"}, "restaurant_id": {"description": "the ID of the restaurant", "type": "Integer"}}, "output_params": {"menu_item_ID": {"description": "the ID of the menu item", "type": "Integer"}}, "format": "MenuItem2ID(menu_item, restaurant_id) -> menu_item_ID"}, {"name": "RetrieveEmail", "Description": "This API is to retrieve the email of a user.", "input_params": {"user_ID": {"description": "the ID of the user", "type": "Integer"}}, "output_params": {"email": {"description": "the email of the user", "type": "String"}}, "format": "RetrieveEmail(user_ID) -> email"}, {"name": "SendEmail", "Description": "This API is to send an email to a user.", "input_params": {"email": {"description": "the email of the user", "type": "String"}, "message": {"description": "the message to be sent", "type": "String"}}, "output_params": {"email_status": {"description": "the status of the email sending", "type": "String"}}, "format": "SendEmail(email, message) -> email_status"}, {"name": "Foodname2ID", "Description": "This API is to convert a food name to a food ID.", "input_params": {"food_name": {"description": "the name of the food", "type": "String"}}, "output_params": {"food_ID": {"description": "the ID of the food", "type": "Integer"}}, "format": "Foodname2ID(food_name) -> food_ID"}, {"name": "Carname2ID", "Description": "This API is to convert a car name to a car ID.", "input_params": {"car_name": {"description": "the name of the car", "type": "String"}}, "output_params": {"car_ID": {"description": "the ID of the car", "type": "Integer"}}, "format": "Carname2ID(car_name) -> car_ID"}, {"name": "Drivername2ID", "Description": "This API is to convert a driver name to a driver ID.", "input_params": {"driver_name": {"description": "the name of the driver", "type": "String"}}, "output_params": {"driver_ID": {"description": "the ID of the driver", "type": "Integer"}}, "format": "Drivername2ID(driver_name) -> driver_ID"}, {"name": "BookCab", "Description": "This API is to book a cab.", "input_params": {"driver_ID": {"description": "the ID of the driver", "type": "Integer"}, "car_ID": {"description": "the ID of the car", "type": "Integer"}}, "output_params": {"booked_cab": {"description": "the status of the booked cab", "type": "String"}}, "format": "BookCab(driver_ID, car_ID) -> booked_cab"}, {"name": "Email2Username", "Description": "This API is to convert an email to a username.", "input_params": {"email": {"description": "the email address", "type": "String"}}, "output_params": {"user_name": {"description": "the username", "type": "String"}}, "format": "Email2Username(email) -> user_name"}, {"name": "ISBN2Title", "Description": "This API is to convert an ISBN to a book title.", "input_params": {"ISBN": {"description": "the ISBN of the book", "type": "String"}}, "output_params": {"book_title": {"description": "the title of the book", "type": "String"}}, "format": "ISBN2Title(ISBN) -> book_title"}, {"name": "AddBookToReadingList", "Description": "This API is to add a book to a user's reading list.", "input_params": {"user_name": {"description": "the username of the user", "type": "String"}, "book_title": {"description": "the title of the book", "type": "String"}}, "output_params": {"reading_list": {"description": "the updated reading list", "type": "List"}}, "format": "AddBookToReadingList(user_name, book_title) -> reading_list"}, {"name": "Authorname2ID", "Description": "This API is to convert an author name to an author ID.", "input_params": {"author_name": {"description": "the name of the author", "type": "String"}}, "output_params": {"author_ID": {"description": "the ID of the author", "type": "Integer"}}, "format": "Authorname2ID(author_name) -> author_ID"}, {"name": "BookTitle2ID", "Description": "This API is to convert a book title to a book ID.", "input_params": {"book_title": {"description": "the title of the book", "type": "String"}}, "output_params": {"book_ID": {"description": "the ID of the book", "type": "Integer"}}, "format": "BookTitle2ID(book_title) -> book_ID"}, {"name": "AddBookToAuthor", "Description": "This API is to add a book to an author's library.", "input_params": {"author_ID": {"description": "the ID of the author", "type": "Integer"}, "book_ID": {"description": "the ID of the book", "type": "Integer"}}, "output_params": {"author_books": {"description": "the updated library of the author", "type": "List"}}, "format": "AddBookToAuthor(author_ID, book_ID) -> author_books"}, {"name": "AddRestaurantToCity", "Description": "This API is to add a restaurant to a city's list.", "input_params": {"city_ID": {"description": "the ID of the city", "type": "Integer"}, "restaurant_ID": {"description": "the ID of the restaurant", "type": "Integer"}}, "output_params": {"city_restaurants": {"description": "the updated list of restaurants in the city", "type": "List"}}, "format": "AddRestaurantToCity(city_ID, restaurant_ID) -> city_restaurants"}, {"name": "FlightDestination2Code", "Description": "This API is to convert flight destination to its corresponding flight code.", "input_params": {"destination": {"description": "the destination of the flight", "type": "String"}}, "output_params": {"flight_code": {"description": "the code of the flight", "type": "String"}}, "format": "FlightDestination2Code(destination) -> flight_code"}, {"name": "CheckFlightAvailability", "Description": "This API is to check the availability of a flight using flight code and date.", "input_params": {"flight_code": {"description": "the code of the flight", "type": "String"}, "date": {"description": "the date of the flight", "type": "Date"}}, "output_params": {"flight_status": {"description": "the status of the flight", "type": "String"}}, "format": "CheckFlightAvailability(flight_code,date) -> flight_status"}, {"name": "FlightCode2ID", "Description": "This API is to convert flight code to flight ID.", "input_params": {"Flight_code": {"description": "the flight code", "type": "String"}}, "output_params": {"Flight_ID": {"description": "the ID of the flight", "type": "Integer"}}, "format": "FlightCode2ID(Flight_code) -> Flight_ID"}, {"name": "DateConversion", "Description": "This API is to convert date in any format to standard format.", "input_params": {"date": {"description": "the date in any format", "type": "String"}}, "output_params": {"standard_date": {"description": "the date in standard format", "type": "String"}}, "format": "DateConversion(date) -> standard_date"}, {"name": "Hotelname2ID", "Description": "This API is to convert hotel name to hotel ID.", "input_params": {"Hotel_name": {"description": "the name of the hotel", "type": "String"}}, "output_params": {"Hotel_ID": {"description": "the ID of the hotel", "type": "Integer"}}, "format": "Hotelname2ID(Hotel_name) -> Hotel_ID"}, {"name": "RoomType2ID", "Description": "This API is to convert room type to room ID.", "input_params": {"Room_type": {"description": "the type of the room", "type": "String"}}, "output_params": {"Room_ID": {"description": "the ID of the room", "type": "Integer"}}, "format": "RoomType2ID(Room_type) -> Room_ID"}, {"name": "Bookname2ID", "Description": "This API is to convert book name to book ID.", "input_params": {"book_name": {"description": "the name of the book", "type": "String"}}, "output_params": {"Book_ID": {"description": "the ID of the book", "type": "Integer"}}, "format": "Bookname2ID(book_name) -> Book_ID"}, {"name": "Email2UserID", "Description": "This API is to convert user's email to user ID.", "input_params": {"email": {"description": "the email of the user", "type": "String"}}, "output_params": {"User_ID": {"description": "the ID of the user", "type": "Integer"}}, "format": "Email2UserID(email) -> User_ID"}, {"name": "BookTitle2BookID", "Description": "This API converts book title to book ID.", "input_params": {"book_title": {"description": "the title of the book", "type": "String"}}, "output_params": {"Book_ID": {"description": "the ID of the book", "type": "Integer"}}, "format": "BookTitle2BookID(book_title) -> Book_ID"}, {"name": "Cityname2Timezone", "Description": "This API retrieves the timezone for a specific city.", "input_params": {"city_name": {"description": "the name of the city", "type": "String"}}, "output_params": {"timezone": {"description": "the timezone information", "type": "String"}}, "format": "Cityname2Timezone(city_name) -> timezone"}, {"name": "WeatherAndTimezone2ClothingAdvice", "Description": "This API provides clothing advice based on the weather and timezone.", "input_params": {"weather": {"description": "the weather information", "type": "String"}, "timezone": {"description": "the timezone information", "type": "String"}}, "output_params": {"clothing_advice": {"description": "the clothing advice", "type": "String"}}, "format": "WeatherAndTimezone2ClothingAdvice(weather, timezone) -> clothing_advice"}, {"name": "Satellitename2ID", "Description": "This API is to convert satellite name to satellite ID.", "input_params": {"satellite_name": {"description": "the name of the satellite", "type": "String"}}, "output_params": {"Satellite_ID": {"description": "the ID of the satellite", "type": "Integer"}}, "format": "Satellitename2ID(satellite_name) -> Satellite_ID"}, {"name": "Frequency2ID", "Description": "This API converts frequency to frequency ID.", "input_params": {"frequency": {"description": "the frequency value", "type": "String"}}, "output_params": {"Frequency_ID": {"description": "the ID of the frequency", "type": "Integer"}}, "format": "Frequency2ID(frequency) -> Frequency_ID"}, {"name": "EstablishCommunication", "Description": "This API is to establish communication with a specific satellite at a specific frequency and time.", "input_params": {"Satellite_ID": {"description": "the ID of the satellite", "type": "Integer"}, "Frequency_ID": {"description": "the ID of the frequency", "type": "Integer"}, "time": {"description": "the time of communication", "type": "Time"}}, "output_params": {"Communication_establishment_confirmation": {"description": "the confirmation of communication establishment", "type": "String"}}, "format": "EstablishCommunication(Satellite_ID, Frequency_ID, time) -> Communication_establishment_confirmation"}, {"name": "GetBookIdByTitle", "Description": "This API finds the book's ID based on its title.", "input_params": {"book_title": {"description": "the title of the book", "type": "String"}}, "output_params": {"book_id": {"description": "the ID of the book", "type": "Integer"}}, "format": "GetBookIdByTitle(book_title) -> book_id"}, {"name": "Username2UserId", "Description": "This API converts user name to user id.", "input_params": {"user_name": {"description": "the name of the user", "type": "String"}}, "output_params": {"user_id": {"description": "the ID of the user", "type": "Integer"}}, "format": "Username2UserId(user_name) -> user_id"}, {"name": "ProductId2Cost", "Description": "This API gets the cost of a product based on its Id.", "input_params": {"product_id": {"description": "the id of the product", "type": "String"}}, "output_params": {"product_cost": {"description": "the cost of the product", "type": "Float"}}, "format": "ProductId2Cost(product_id) -> product_cost"}, {"name": "CartId2TotalCost", "Description": "This API calculates the total cost of all products in a cart.", "input_params": {"cart_id": {"description": "the id of the cart", "type": "String"}}, "output_params": {"total_cost": {"description": "the total cost of all products in the cart", "type": "Float"}}, "format": "CartId2TotalCost(cart_id) -> total_cost"}, {"name": "UserId2CartId", "Description": "This API finds the user's cart id based on the user id.", "input_params": {"user_id": {"description": "the id of the user", "type": "String"}}, "output_params": {"cart_id": {"description": "the id of the cart", "type": "String"}}, "format": "UserId2CartId(user_id) -> cart_id"}, {"name": "UserId2Location", "Description": "This API finds the user's current location based on user id.", "input_params": {"user_id": {"description": "the id of the user", "type": "String"}}, "output_params": {"user_location": {"description": "the current location of the user", "type": "String"}}, "format": "UserId2Location(user_id) -> user_location"}, {"name": "StoreId2OperatingHours", "Description": "This API finds the operating hours of a store based on store id.", "input_params": {"store_id": {"description": "the id of the store", "type": "String"}}, "output_params": {"operating_hours": {"description": "the operating hours of the store", "type": "String"}}, "format": "StoreId2OperatingHours(store_id) -> operating_hours"}, {"name": "ProductID2Availability", "Description": "This API checks the availability of a product based on its Id.", "input_params": {"product_id": {"description": "the Id of the product", "type": "Integer"}}, "output_params": {"product_availability": {"description": "the availability status of the product", "type": "String"}}, "format": "ProductID2Availability(product_id) -> product_availability"}, {"name": "Productname2ProductID", "Description": "This API converts product name to product id.", "input_params": {"product_name": {"description": "the name of the product", "type": "String"}}, "output_params": {"product_id": {"description": "the Id of the product", "type": "Integer"}}, "format": "Productname2ProductID(product_name) -> product_id"}, {"name": "Location2Coordinates", "Description": "This API converts the location name to its geographical coordinates.", "input_params": {"location_name": {"description": "the name of the location", "type": "String"}}, "output_params": {"coordinates": {"description": "the geographical coordinates of the location", "type": "String"}}, "format": "Location2Coordinates(location_name) -> coordinates"}, {"name": "WeatherInfo", "Description": "This API retrieves the weather information for a specific location.", "input_params": {"coordinates": {"description": "the geographical coordinates of the location", "type": "String"}}, "output_params": {"weather_data": {"description": "the weather information for the location", "type": "String"}}, "format": "WeatherInfo(coordinates) -> weather_data"}, {"name": "GenerateWeatherReport", "Description": "This API generates a detailed weather report based on the provided weather data.", "input_params": {"weather_data": {"description": "the weather information for a specific location", "type": "String"}}, "output_params": {"report": {"description": "the detailed weather report", "type": "String"}}, "format": "GenerateWeatherReport(weather_data) -> report"}, {"name": "GetUserBudget", "Description": "This API returns a user's budget for hotel booking.", "input_params": {"user_ID": {"description": "the ID of the user", "type": "Integer"}}, "output_params": {"budget": {"description": "the budget for hotel booking", "type": "Float"}}, "format": "GetUserBudget(user_ID) -> budget"}, {"name": "Product2ID", "Description": "This API generates the ID of a specific product through its product name.", "input_params": {"product_name": {"description": "the name of the product", "type": "String"}}, "output_params": {"product_ID": {"description": "the ID of the product", "type": "Integer"}}, "format": "Product2ID(product_name) -> product_ID"}, {"name": "OrderProduct", "Description": "This API allows the user to order a specific product in a certain quantity.", "input_params": {"product_ID": {"description": "the ID of the product", "type": "Integer"}, "user_ID": {"description": "the ID of the user", "type": "Integer"}, "quantity": {"description": "the quantity of the product", "type": "Integer"}}, "output_params": {"order_status": {"description": "the status of the order", "type": "String"}}, "format": "OrderProduct(product_ID, user_ID, quantity) -> order_status"}, {"name": "RecommendProduct", "Description": "This API suggests a product name according to the category preferred by the user.", "input_params": {"category": {"description": "the preferred category of the user", "type": "String"}}, "output_params": {"product_name": {"description": "the suggested product name", "type": "String"}}, "format": "RecommendProduct(category) -> product_name"}, {"name": "GetFavouriteCategory", "Description": "This API will provide the favourite category of the specified user.", "input_params": {"user_ID": {"description": "the ID of the user", "type": "Integer"}}, "output_params": {"category": {"description": "the favourite category of the user", "type": "String"}}, "format": "GetFavouriteCategory(user_ID) -> category"}, {"name": "UserEmail2ID", "Description": "This API generates the ID of a specific user through the user email.", "input_params": {"user_email": {"description": "the email of the user", "type": "String"}}, "output_params": {"user_ID": {"description": "the ID of the user", "type": "Integer"}}, "format": "UserEmail2ID(user_email) -> user_ID"}, {"name": "SearchMovieByGenre", "Description": "This API is used to retrieve a movie ID by using the movie's genre.", "input_params": {"genre": {"description": "the genre of the movie", "type": "String"}}, "output_params": {"movie_ID": {"description": "the ID of the movie", "type": "Integer"}}, "format": "SearchMovieByGenre(genre) -> movie_ID"}, {"name": "GetUserFavoriteGenre", "Description": "This API will return the user's favorite movie genre based on user ID.", "input_params": {"user_ID": {"description": "the ID of the user", "type": "Integer"}}, "output_params": {"user_genre": {"description": "the favorite genre of the user", "type": "String"}}, "format": "GetUserFavoriteGenre(user_ID) -> user_genre"}, {"name": "ReserveMovieTicket", "Description": "This API reserves a movie ticket for a certain date.", "input_params": {"movie_ID": {"description": "the ID of the movie", "type": "Integer"}, "date": {"description": "the date of the movie ticket reservation", "type": "Date"}}, "output_params": {"reservation_status": {"description": "the status of the movie ticket reservation", "type": "String"}}, "format": "ReserveMovieTicket(movie_ID, date) -> reservation_status"}, {"name": "FindRestaurantByCuisine", "Description": "This API is used to retrieve a restaurant ID by using the restaurant's cuisine.", "input_params": {"cuisine": {"description": "the cuisine of the restaurant", "type": "String"}}, "output_params": {"restaurant_ID": {"description": "the ID of the restaurant", "type": "Integer"}}, "format": "FindRestaurantByCuisine(cuisine) -> restaurant_ID"}, {"name": "GetUserFavoriteCuisine", "Description": "This API will return the user's favorite cuisine based on user ID.", "input_params": {"user_ID": {"description": "the ID of the user", "type": "Integer"}}, "output_params": {"user_cuisine": {"description": "the favorite cuisine of the user", "type": "String"}}, "format": "GetUserFavoriteCuisine(user_ID) -> user_cuisine"}, {"name": "BookRestaurantTable", "Description": "This API books a table at a restaurant for a certain date.", "input_params": {"restaurant_ID": {"description": "the ID of the restaurant", "type": "Integer"}, "date": {"description": "the date of the booking", "type": "Date"}}, "output_params": {"booking_status": {"description": "the status of the booking", "type": "String"}}, "format": "BookRestaurantTable(restaurant_ID, date) -> booking_status"}, {"name": "GetUserPreferredCuisine", "Description": "This API will return the user's preferred cuisine based on user ID.", "input_params": {"user_ID": {"description": "the ID of the user", "type": "Integer"}}, "output_params": {"user_cuisine": {"description": "the preferred cuisine of the user", "type": "String"}}, "format": "GetUserPreferredCuisine(user_ID) -> user_cuisine"}, {"name": "ReserveTable", "Description": "This API reserves a table at a restaurant for a certain date and time.", "input_params": {"restaurant_ID": {"description": "the ID of the restaurant", "type": "Integer"}, "date": {"description": "the date of the reservation", "type": "Date"}, "time": {"description": "the time of the reservation", "type": "Time"}}, "output_params": {"reservation_status": {"description": "the status of the reservation", "type": "String"}}, "format": "ReserveTable(restaurant_ID, date, time) -> reservation_status"}, {"name": "Username2City", "Description": "This API is to convert username to the city they live in.", "input_params": {"username": {"description": "the username of the person", "type": "String"}}, "output_params": {"city": {"description": "the city the person lives in", "type": "String"}}, "format": "Username2City(username) -> city"}, {"name": "City2Weather", "Description": "This API is to get the current weather of a specific city.", "input_params": {"city": {"description": "the name of the city", "type": "String"}}, "output_params": {"weather": {"description": "the current weather of the city", "type": "String"}}, "format": "City2Weather(city) -> weather"}, {"name": "Weather2Advice", "Description": "This API is to provide advice based on the current weather.", "input_params": {"weather": {"description": "the current weather", "type": "String"}}, "output_params": {"advice": {"description": "advice based on the current weather", "type": "String"}}, "format": "Weather2Advice(weather) -> advice"}, {"name": "Card2Number", "Description": "This API is to convert card ID to card number.", "input_params": {"card_id": {"description": "the ID of the card", "type": "String"}}, "output_params": {"card_number": {"description": "the number of the card", "type": "String"}}, "format": "Card2Number(card_id) -> card_number"}, {"name": "CheckCardBalance", "Description": "This API allows the user to check the balance in a card.", "input_params": {"card_number": {"description": "the number of the card", "type": "String"}}, "output_params": {"card_balance": {"description": "the balance in the card", "type": "Float"}}, "format": "CheckCardBalance(card_number) -> card_balance"}, {"name": "EnoughBalance", "Description": "This API checks if there is sufficient balance in the card for the product order and returns an order status.", "input_params": {"product_price": {"description": "the price of the product", "type": "Float"}, "card_balance": {"description": "the balance in the card", "type": "Float"}}, "output_params": {"order_status": {"description": "the status of the order", "type": "String"}}, "format": "EnoughBalance(product_price, card_balance) -> order_status"}, {"name": "SuggestApparel", "Description": "This API suggests suitable apparel based on the weather status.", "input_params": {"weather_status": {"description": "the weather status", "type": "String"}}, "output_params": {"apparel": {"description": "the suggested apparel based on the weather status", "type": "String"}}, "format": "SuggestApparel(weather_status) -> apparel"}, {"name": "GetUserFavoriteFood", "Description": "This API provides the user's favorite food.", "input_params": {"user_name": {"description": "the name of the user", "type": "String"}}, "output_params": {"favorite_food": {"description": "the favorite food of the user", "type": "String"}}, "format": "GetUserFavoriteFood(user_name) -> favorite_food"}, {"name": "GetRestaurantRating", "Description": "This API provides the rating of a particular restaurant.", "input_params": {"restaurant": {"description": "the name of the restaurant", "type": "String"}}, "output_params": {"rating": {"description": "the rating of the restaurant", "type": "Float"}}, "format": "GetRestaurantRating(restaurant) -> rating"}, {"name": "SuggestOutfit", "Description": "This API suggests an outfit based on the current weather.", "input_params": {"weather": {"description": "the weather forecast", "type": "String"}}, "output_params": {"outfit": {"description": "the suggested outfit", "type": "String"}}, "format": "SuggestOutfit(weather) -> outfit"}, {"name": "GetUserBirthday", "Description": "The API returns the birthday of a certain user.", "input_params": {"user_name": {"description": "the name of the user", "type": "String"}}, "output_params": {"user_birthday": {"description": "the birthday of the user", "type": "Date"}}, "format": "GetUserBirthday(user_name) -> user_birthday"}, {"name": "Birthday2ZodiacSign", "Description": "This API is used to convert a user's birthday to their zodiac sign.", "input_params": {"birthday": {"description": "the birthday of the user", "type": "Date"}}, "output_params": {"zodiac_sign": {"description": "the zodiac sign of the user", "type": "String"}}, "format": "Birthday2ZodiacSign(birthday) -> zodiac_sign"}, {"name": "ZodiacSignHoroscope", "Description": "This API returns the daily horoscope for a specific zodiac sign.", "input_params": {"zodiac_sign": {"description": "the zodiac sign of the user", "type": "String"}}, "output_params": {"horoscope": {"description": "the daily horoscope for the zodiac sign", "type": "String"}}, "format": "ZodiacSignHoroscope(zodiac_sign) -> horoscope"}, {"name": "GetUserCurrentWeather", "Description": "This API returns the current weather at the location of a certain user.", "input_params": {"user_name": {"description": "the name of the user", "type": "String"}}, "output_params": {"user_weather": {"description": "the current weather at the user's location", "type": "String"}}, "format": "GetUserCurrentWeather(user_name) -> user_weather"}, {"name": "FindNearestRestaurant", "Description": "This API finds the nearest restaurant of a specific cuisine type according to the user's geolocation.", "input_params": {"geolocation": {"description": "the geolocation of the user", "type": "String"}, "cuisine_type": {"description": "the preferred type of cuisine", "type": "String"}}, "output_params": {"restaurant": {"description": "the nearest restaurant that serves the preferred type of cuisine", "type": "String"}}, "format": "FindNearestRestaurant(geolocation, cuisine_type) -> restaurant"}, {"name": "GetUserCuisinePreference", "Description": "This API returns a user's preferred type of cuisine.", "input_params": {"user_name": {"description": "the name of the user", "type": "String"}}, "output_params": {"user_cuisine_preference": {"description": "the preferred type of cuisine", "type": "String"}}, "format": "GetUserCuisinePreference(user_name) -> user_cuisine_preference"}, {"name": "GetCinema", "Description": "This API fetches a cinema playing a given movie in a certain city.", "input_params": {"city": {"description": "the name of the city", "type": "String"}, "movie": {"description": "the name of the movie", "type": "String"}}, "output_params": {"cinema_name": {"description": "the name of the cinema", "type": "String"}}, "format": "GetCinema(city, movie) -> cinema_name"}, {"name": "CheckTime", "Description": "This API checks the show time of a movie in a certain cinema.", "input_params": {"cinema_name": {"description": "the name of the cinema", "type": "String"}, "movie": {"description": "the name of the movie", "type": "String"}}, "output_params": {"show_time": {"description": "the show time of the movie", "type": "String"}}, "format": "CheckTime(cinema_name, movie) -> show_time"}, {"name": "BookTicket", "Description": "This API is used to book a movie ticket.", "input_params": {"cinema_name": {"description": "the name of the cinema", "type": "String"}, "movie": {"description": "the name of the movie", "type": "String"}, "show_time": {"description": "the show time of the movie", "type": "String"}}, "output_params": {"ticket_status": {"description": "the status of the ticket booking", "type": "String"}}, "format": "BookTicket(cinema_name, movie, show_time) -> ticket_status"}, {"name": "CheckVacancy", "Description": "This API checks if there is any room available for a certain date in a certain hotel.", "input_params": {"hotelname": {"description": "the name of the hotel", "type": "String"}, "date": {"description": "the date to check for room availability", "type": "Date"}}, "output_params": {"roomAvailable": {"description": "the availability of rooms", "type": "Boolean"}}, "format": "CheckVacancy(hotelname, date) -> roomAvailable"}, {"name": "UsernameToID", "Description": "This API is used to convert the name of the user to user ID.", "input_params": {"user_name": {"description": "the name of the user", "type": "String"}}, "output_params": {"user_ID": {"description": "the ID of the user", "type": "Integer"}}, "format": "UsernameToID(user_name) -> user_ID"}, {"name": "CustomernameToID", "Description": "This API is used to convert the name of the customer to customer ID.", "input_params": {"customer_name": {"description": "the name of the customer", "type": "String"}}, "output_params": {"customer_ID": {"description": "the ID of the customer", "type": "Integer"}}, "format": "CustomernameToID(customer_name) -> customer_ID"}, {"name": "ProductnameToID", "Description": "This API is used to convert the name of the product to product ID.", "input_params": {"product_name": {"description": "the name of the product", "type": "String"}}, "output_params": {"product_ID": {"description": "the ID of the product", "type": "Integer"}}, "format": "ProductnameToID(product_name) -> product_ID"}, {"name": "AddProductToCart", "Description": "This API adds a certain quantity of a particular product to the customer's cart.", "input_params": {"product_ID": {"description": "the ID of the product", "type": "Integer"}, "customer_ID": {"description": "the ID of the customer", "type": "Integer"}, "quantity": {"description": "the quantity of the product to be added to the cart", "type": "Integer"}}, "output_params": {"cart_status": {"description": "the status of the cart after adding the product", "type": "String"}}, "format": "AddProductToCart(product_ID, customer_ID, quantity) -> cart_status"}, {"name": "StorenameToID", "Description": "This API is to convert the store name to store ID.", "input_params": {"store_name": {"description": "the name of the store", "type": "String"}}, "output_params": {"store_ID": {"description": "the ID of the store", "type": "Integer"}}, "format": "StorenameToID(store_name) -> store_ID"}, {"name": "MovienameToID", "Description": "This API is to convert the movie name to movie ID.", "input_params": {"movie_name": {"description": "the name of the movie", "type": "String"}}, "output_params": {"movie_ID": {"description": "the ID of the movie", "type": "Integer"}}, "format": "MovienameToID(movie_name) -> movie_ID"}, {"name": "RentMovie", "Description": "This API rents a movie for a particular user on a specified date.", "input_params": {"user_ID": {"description": "the ID of the user", "type": "Integer"}, "movie_ID": {"description": "the ID of the movie", "type": "Integer"}, "date": {"description": "the date of rental", "type": "Date"}}, "output_params": {"rental_status": {"description": "the status of the rental", "type": "String"}}, "format": "RentMovie(user_ID, movie_ID, date) -> rental_status"}, {"name": "PurchaseProduct", "Description": "This API executes a product purchase for a particular customer with a specific quantity.", "input_params": {"customer_ID": {"description": "the ID of the customer", "type": "Integer"}, "product_ID": {"description": "the ID of the product", "type": "Integer"}, "quantity": {"description": "the quantity of the product to purchase", "type": "Integer"}}, "output_params": {"purchase_status": {"description": "the status of the purchase", "type": "String"}}, "format": "PurchaseProduct(customer_ID, product_ID, quantity) -> purchase_status"}, {"name": "CitynameToID", "Description": "This API is used to convert the city name to city ID.", "input_params": {"city_name": {"description": "the name of the city", "type": "String"}}, "output_params": {"city_ID": {"description": "the ID of the city", "type": "Integer"}}, "format": "CitynameToID(city_name) -> city_ID"}, {"name": "HotelnameToID", "Description": "This API is to convert the hotel name to hotel ID.", "input_params": {"hotel_name": {"description": "the name of the hotel", "type": "String"}}, "output_params": {"hotel_ID": {"description": "the ID of the hotel", "type": "Integer"}}, "format": "HotelnameToID(hotel_name) -> hotel_ID"}, {"name": "ProductIDToname", "Description": "This API is used to convert the product ID to product name.", "input_params": {"product_ID": {"description": "the ID of the product", "type": "Integer"}}, "output_params": {"product_name": {"description": "the name of the product", "type": "String"}}, "format": "ProductIDToname(product_ID) -> product_name"}, {"name": "FlightNumberToID", "Description": "This API is used to convert the flight number to flight ID.", "input_params": {"flight_number": {"description": "the flight number", "type": "String"}}, "output_params": {"flight_ID": {"description": "the ID of the flight", "type": "Integer"}}, "format": "FlightNumberToID(flight_number) -> flight_ID"}, {"name": "PassengernameToID", "Description": "This API is to convert the passenger name to passenger ID.", "input_params": {"passenger_name": {"description": "the name of the passenger", "type": "String"}}, "output_params": {"passenger_ID": {"description": "the ID of the passenger", "type": "Integer"}}, "format": "PassengernameToID(passenger_name) -> passenger_ID"}, {"name": "SongnameToID", "Description": "This API is used to convert the song's name to song ID.", "input_params": {"song_name": {"description": "the name of the song", "type": "String"}}, "output_params": {"song_ID": {"description": "the ID of the song", "type": "Integer"}}, "format": "SongnameToID(song_name) -> song_ID"}, {"name": "PlaySong", "Description": "This API plays a song for a particular user.", "input_params": {"user_ID": {"description": "the ID of the user", "type": "Integer"}, "song_ID": {"description": "the ID of the song", "type": "Integer"}}, "output_params": {"play_status": {"description": "the status of the song playback", "type": "String"}}, "format": "PlaySong(user_ID, song_ID) -> play_status"}, {"name": "ISBNToBookname", "Description": "This API is used to convert the ISBN of a book to its name.", "input_params": {"ISBN": {"description": "the ISBN of the book", "type": "String"}}, "output_params": {"book_name": {"description": "the name of the book", "type": "String"}}, "format": "ISBNToBookname(ISBN) -> book_name"}, {"name": "ReturnBook", "Description": "This API returns a book on behalf of a particular user.", "input_params": {"user_ID": {"description": "the ID of the user", "type": "Integer"}, "book_name": {"description": "the name of the book", "type": "String"}}, "output_params": {"return_status": {"description": "the status of the return", "type": "String"}}, "format": "ReturnBook(user_ID, book_name) -> return_status"}, {"name": "SongTitleToID", "Description": "This API is to convert the song title to song ID.", "input_params": {"song_title": {"description": "the title of the song", "type": "String"}}, "output_params": {"song_ID": {"description": "the ID of the song", "type": "Integer"}}, "format": "SongTitleToID(song_title) -> song_ID"}, {"name": "ProductToID", "Description": "This API is used to convert the product name to product ID.", "input_params": {"product_name": {"description": "the name of the product", "type": "String"}}, "output_params": {"product_ID": {"description": "the ID of the product", "type": "Integer"}}, "format": "ProductToID(product_name) -> product_ID"}, {"name": "Cartname2ID", "Description": "This API is to convert a cart's name to cart ID.", "input_params": {"cart_name": {"description": "the name of the cart", "type": "String"}}, "output_params": {"cart_ID": {"description": "the ID of the cart", "type": "Integer"}}, "format": "Cartname2ID(cart_name) -> cart_ID"}, {"name": "Moviename2ID", "Description": "This API is to convert a movie's name to movie ID.", "input_params": {"movie_name": {"description": "the name of the movie", "type": "String"}}, "output_params": {"movie_ID": {"description": "the ID of the movie", "type": "Integer"}}, "format": "Moviename2ID(movie_name) -> movie_ID"}, {"name": "AddMovieToWatchlist", "Description": "This API is to add a movie to a watchlist.", "input_params": {"watchlist_ID": {"description": "the ID of the watchlist", "type": "Integer"}, "movie_ID": {"description": "the ID of the movie", "type": "Integer"}}, "output_params": {"movie_status": {"description": "the status of the movie", "type": "String"}}, "format": "AddMovieToWatchlist(watchlist_ID, movie_ID) -> movie_status"}, {"name": "Watchlistname2ID", "Description": "This API is to convert a watchlist's name to watchlist ID.", "input_params": {"watchlist_name": {"description": "the name of the watchlist", "type": "String"}}, "output_params": {"watchlist_ID": {"description": "the ID of the watchlist", "type": "Integer"}}, "format": "Watchlistname2ID(watchlist_name) -> watchlist_ID"}, {"name": "StoreIDToAddress", "Description": "This API is used to convert a store id to its address.", "input_params": {"storeId": {"description": "the id of the store", "type": "String"}}, "output_params": {"store_address": {"description": "the address of the store", "type": "String"}}, "format": "StoreIDToAddress(storeId) -> store_address"}, {"name": "CheckProductAvailability", "Description": "This API checks the availability of a product in a specific store.", "input_params": {"store_address": {"description": "the address of the store", "type": "String"}, "product_name": {"description": "the name of the product", "type": "String"}}, "output_params": {"product_availability": {"description": "the availability of the product", "type": "String"}}, "format": "CheckProductAvailability(store_address, product_name) -> product_availability"}, {"name": "ISBN2Book", "Description": "This API is used to convert an ISBN to a book title.", "input_params": {"isbn": {"description": "the ISBN of the book", "type": "String"}}, "output_params": {"book_title": {"description": "the title of the book", "type": "String"}}, "format": "ISBN2Book(isbn) -> book_title"}, {"name": "Book2Author", "Description": "This API is used to convert a book title to an author name.", "input_params": {"book_title": {"description": "the title of the book", "type": "String"}}, "output_params": {"author_name": {"description": "the name of the author", "type": "String"}}, "format": "Book2Author(book_title) -> author_name"}, {"name": "CheckAuthorAvailability", "Description": "This API checks if the author is available for a book discussion.", "input_params": {"user_ID": {"description": "the ID of the user", "type": "String"}, "author_name": {"description": "the name of the author", "type": "String"}}, "output_params": {"availability_status": {"description": "the availability status of the author", "type": "String"}}, "format": "CheckAuthorAvailability(user_ID, author_name) -> availability_status"}, {"name": "ScheduleDiscussion", "Description": "This API is used to schedule a book discussion with the author.", "input_params": {"user_ID": {"description": "the ID of the user", "type": "String"}, "author_name": {"description": "the name of the author", "type": "String"}, "date_time": {"description": "the date and time of the book discussion", "type": "String"}}, "output_params": {"schedule_status": {"description": "the schedule status of the book discussion", "type": "String"}}, "format": "ScheduleDiscussion(user_ID, author_name, date_time) -> schedule_status"}, {"name": "LocateCity", "Description": "This API returns the coordinates of a given city.", "input_params": {"city": {"description": "the name of the city", "type": "String"}}, "output_params": {"Coordinates": {"description": "the coordinates of the city", "type": "String"}}, "format": "LocateCity(city) -> Coordinates"}, {"name": "GetClothingAdvice", "Description": "This API gives clothing advice based on the weather.", "input_params": {"weather": {"description": "the weather forecast", "type": "String"}}, "output_params": {"clothing_advice": {"description": "the clothing advice", "type": "String"}}, "format": "GetClothingAdvice(weather) -> clothing_advice"}, {"name": "RecommendDish", "Description": "This API recommends a dish from a given menu.", "input_params": {"menu": {"description": "the menu of the restaurant", "type": "String"}}, "output_params": {"dish": {"description": "the recommended dish", "type": "String"}}, "format": "RecommendDish(menu) -> dish"}, {"name": "Cityname2WeatherCode", "Description": "This API converts a city name to its weather code.", "input_params": {"city_name": {"description": "the name of the city", "type": "String"}}, "output_params": {"weather_code": {"description": "the weather code of the city", "type": "String"}}, "format": "Cityname2WeatherCode(city_name) -> weather_code"}, {"name": "WeatherCode2Forecast", "Description": "This API provides the weather forecast for a specific date based on the weather code.", "input_params": {"weather_code": {"description": "the weather code of the city", "type": "String"}, "date": {"description": "the specific date for the weather forecast", "type": "String"}}, "output_params": {"weather_forecast": {"description": "the weather forecast for the specific date", "type": "String"}}, "format": "WeatherCode2Forecast(weather_code, date) -> weather_forecast"}, {"name": "StringToDatetime", "Description": "This API converts a string to a datetime object.", "input_params": {"date_string": {"description": "the string representation of the date", "type": "String"}}, "output_params": {"date": {"description": "the datetime object", "type": "Datetime"}}, "format": "StringToDatetime(date_string) -> date"}, {"name": "Venuename2ID", "Description": "This API converts a venue name to its ID.", "input_params": {"venue_name": {"description": "the name of the venue", "type": "String"}}, "output_params": {"venue_ID": {"description": "the ID of the venue", "type": "Integer"}}, "format": "Venuename2ID(venue_name) -> venue_ID"}, {"name": "BookEventTicket", "Description": "This API books a ticket for a specified event on a specified date at a specified venue.", "input_params": {"event_ID": {"description": "the ID of the event", "type": "Integer"}, "venue_ID": {"description": "the ID of the venue", "type": "Integer"}, "date": {"description": "the date of the event", "type": "Datetime"}}, "output_params": {"Booking status": {"description": "the status of the booking", "type": "String"}}, "format": "BookEventTicket(event_ID, venue_ID, date) -> Booking status"}, {"name": "Coursename2ID", "Description": "This API converts a course name to its ID.", "input_params": {"course_name": {"description": "the name of the course", "type": "String"}}, "output_params": {"course_ID": {"description": "the ID of the course", "type": "Integer"}}, "format": "Coursename2ID(course_name) -> course_ID"}, {"name": "Instructorname2ID", "Description": "This API converts an instructor's name to their ID.", "input_params": {"instructor_name": {"description": "the name of the instructor", "type": "String"}}, "output_params": {"instructor_ID": {"description": "the ID of the instructor", "type": "Integer"}}, "format": "Instructorname2ID(instructor_name) -> instructor_ID"}, {"name": "Studentname2ID", "Description": "This API converts a student's name to their ID.", "input_params": {"student_name": {"description": "the name of the student", "type": "String"}}, "output_params": {"student_ID": {"description": "the ID of the student", "type": "Integer"}}, "format": "Studentname2ID(student_name) -> student_ID"}, {"name": "FindIndoorActivities", "Description": "This API suggests popular indoor activities in a given city.", "input_params": {"city": {"description": "the name of the city", "type": "String"}}, "output_params": {"activity_name": {"description": "the name of the suggested indoor activity", "type": "String"}}, "format": "FindIndoorActivities(city) -> activity_name"}, {"name": "BookActivity", "Description": "This API allows the user to book a particular indoor activity in a specific city.", "input_params": {"activity_name": {"description": "the name of the indoor activity", "type": "String"}, "city": {"description": "the name of the city", "type": "String"}}, "output_params": {"booking_status": {"description": "the status of the booking", "type": "String"}}, "format": "BookActivity(activity_name, city) -> booking_status"}, {"name": "CheckFlightStatus", "Description": "This API allows the user to check the current status of a certain flight.", "input_params": {"flight_number": {"description": "the number of the flight", "type": "String"}}, "output_params": {"flight_status": {"description": "the status of the flight", "type": "String"}}, "format": "CheckFlightStatus(flight_number) -> flight_status"}, {"name": "FindNearbyHotels", "Description": "This API provides the names of nearby hotels in a given city.", "input_params": {"city": {"description": "the name of the city", "type": "String"}}, "output_params": {"hotel_name": {"description": "the name of the hotel", "type": "String"}}, "format": "FindNearbyHotels(city) -> hotel_name"}, {"name": "GetLocationCoordinates", "Description": "This API returns the geographical coordinates (latitude and longitude) of a specified city.", "input_params": {"city": {"description": "the name of the city", "type": "String"}}, "output_params": {"latitude": {"description": "the latitude coordinate of the city", "type": "Float"}, "longitude": {"description": "the longitude coordinate of the city", "type": "Float"}}, "format": "GetLocationCoordinates(city) -> (latitude, longitude)"}, {"name": "PredictWeather", "Description": "This API provides the weather forecast for a location based on geographic coordinates on a specific date.", "input_params": {"coordinates": {"description": "the geographic coordinates (latitude and longitude) of the location", "type": "Tuple (Float, Float)"}, "date": {"description": "the specific date for the weather forecast", "type": "String"}}, "output_params": {"weather conditions": {"description": "the weather conditions for the specified location and date", "type": "String"}}, "format": "PredictWeather(coordinates, date) -> weather conditions"}, {"name": "SuggestActivity", "Description": "This API suggests an activity based on the weather conditions.", "input_params": {"weather": {"description": "the weather conditions", "type": "String"}}, "output_params": {"activity": {"description": "the suggested activity based on the weather conditions", "type": "String"}}, "format": "SuggestActivity(weather) -> activity"}, {"name": "SearchBook", "Description": "This API returns the ID of a book based on a specified title.", "input_params": {"title": {"description": "the title of the book", "type": "String"}}, "output_params": {"book_id": {"description": "the ID of the book", "type": "Integer"}}, "format": "SearchBook(title) -> book_id"}, {"name": "GetBookReview", "Description": "This API gives a review of a book given its ID.", "input_params": {"book_id": {"description": "the ID of the book", "type": "Integer"}}, "output_params": {"review": {"description": "the review of the book", "type": "String"}}, "format": "GetBookReview(book_id) -> review"}, {"name": "ShareReview", "Description": "This API allows the user to share a review on a specified social media platform.", "input_params": {"review": {"description": "the review of the book", "type": "String"}, "social_media_platform": {"description": "the social media platform to share the review", "type": "String"}}, "output_params": {"share_status": {"description": "the status of the sharing", "type": "String"}}, "format": "ShareReview(review, social_media_platform) -> share_status"}, {"name": "GetShowtimes", "Description": "This API gives the showtime for a given movie in a specific city.", "input_params": {"movie_title": {"description": "the title of the movie", "type": "String"}, "city": {"description": "the city where the showtime is requested", "type": "String"}}, "output_params": {"showtime": {"description": "the showtime of the movie in the specified city", "type": "Time"}}, "format": "GetShowtimes(movie_title, city) -> showtime"}, {"name": "ReserveTickets", "Description": "This API allows the user to reserve a certain number of tickets for a specific showtime.", "input_params": {"showtime": {"description": "the showtime of the movie", "type": "Time"}, "number_of_tickets": {"description": "the number of tickets to be reserved", "type": "Integer"}}, "output_params": {"reservation_status": {"description": "the status of the ticket reservation", "type": "String"}}, "format": "ReserveTickets(showtime, number_of_tickets) -> reservation_status"}, {"name": "LocateLibrary", "Description": "This API provides the name of a library in the specified city.", "input_params": {"city": {"description": "the city name", "type": "String"}}, "output_params": {"library_name": {"description": "the name of the library", "type": "String"}}, "format": "LocateLibrary(city) -> library_name"}, {"name": "RestaurantLocator", "Description": "This API is to find a specific restaurant by city and cuisine.", "input_params": {"city": {"description": "the city where the restaurant is located", "type": "String"}, "cuisine": {"description": "the type of cuisine the restaurant serves", "type": "String"}}, "output_params": {"restaurant": {"description": "the details of the restaurant", "type": "Object"}}, "format": "RestaurantLocator(city, cuisine) -> restaurant"}, {"name": "DishFinder", "Description": "This API is to get information about a specific dish from a particular restaurant.", "input_params": {"restaurant": {"description": "the details of the restaurant", "type": "Object"}, "dish": {"description": "the name of the dish", "type": "String"}}, "output_params": {"dish_details": {"description": "the details of the dish", "type": "Object"}}, "format": "DishFinder(restaurant, dish) -> dish_details"}, {"name": "FoodReview", "Description": "This API is to get reviews of a particular dish.", "input_params": {"dish_details": {"description": "the details of the dish", "type": "Object"}}, "output_params": {"review": {"description": "the reviews of the dish", "type": "Object"}}, "format": "FoodReview(dish_details) -> review"}, {"name": "FoodFinder", "Description": "This API identifies a specific restaurant serving a certain cuisine in a particular location.", "input_params": {"cuisine": {"description": "the type of cuisine", "type": "String"}, "location": {"description": "the location of the restaurant", "type": "String"}}, "output_params": {"restaurant_name": {"description": "the name of the restaurant", "type": "String"}}, "format": "FoodFinder(cuisine, location) -> restaurant_name"}, {"name": "MenuDetails", "Description": "This API provides the menu of a specific restaurant.", "input_params": {"restaurant_name": {"description": "the name of the restaurant", "type": "String"}}, "output_params": {"menu": {"description": "the menu of the restaurant", "type": "String"}}, "format": "MenuDetails(restaurant_name) -> menu"}, {"name": "FoodIngredients", "Description": "This API gives the ingredients of a specific dish from a certain restaurant.", "input_params": {"dish_name": {"description": "the name of the dish", "type": "String"}, "restaurant_name": {"description": "the name of the restaurant", "type": "String"}}, "output_params": {"ingredients": {"description": "the ingredients of the dish", "type": "String"}}, "format": "FoodIngredients(dish_name, restaurant_name) -> ingredients"}, {"name": "FindNearestBookStore", "Description": "This API is to find the nearest bookstore based on the user's location.", "input_params": {"city": {"description": "the city where the user is located", "type": "String"}}, "output_params": {"store_name": {"description": "the name of the nearest bookstore", "type": "String"}}, "format": "FindNearestBookStore(city) -> store_name"}, {"name": "GetLocalCinema", "Description": "This API is to find the local cinema based on the user's location.", "input_params": {"city": {"description": "the name of the city", "type": "String"}}, "output_params": {"cinema_name": {"description": "the name of the cinema", "type": "String"}}, "format": "GetLocalCinema(city) -> cinema_name"}, {"name": "GetCurrentMovies", "Description": "This API is to get the list of movies currently being shown in a given cinema.", "input_params": {"cinema_name": {"description": "the name of the cinema", "type": "String"}}, "output_params": {"movie_list": {"description": "a list of movies currently being shown", "type": "List"}}, "format": "GetCurrentMovies(cinema_name) -> movie_list"}, {"name": "GetMovieReviews", "Description": "This API fetches the reviews of a specific movie.", "input_params": {"movie_name": {"description": "the name of the movie", "type": "String"}}, "output_params": {"reviews": {"description": "the reviews of the movie", "type": "List"}}, "format": "GetMovieReviews(movie_name) -> reviews"}, {"name": "GetRestaurantMenu", "Description": "This API is to get the menu from a specific restaurant.", "input_params": {"restaurant_id": {"description": "the ID of the restaurant", "type": "Integer"}}, "output_params": {"menu_id": {"description": "the ID of the menu", "type": "Integer"}}, "format": "GetRestaurantMenu(restaurant_id) -> menu_id"}, {"name": "GetMovieDetails", "Description": "This API is to get the details of a specific movie.", "input_params": {"movie_name": {"description": "the name of the movie", "type": "String"}}, "output_params": {"movie_info": {"description": "the details of the movie", "type": "Object"}}, "format": "GetMovieDetails(movie_name) -> movie_info"}, {"name": "GetActorDetails", "Description": "This API is to get the details of actors in a specific movie.", "input_params": {"movie_info": {"description": "the details of the movie", "type": "Object"}}, "output_params": {"actor_info": {"description": "the details of the actors", "type": "Object"}}, "format": "GetActorDetails(movie_info) -> actor_info"}, {"name": "GetMovieRecommendation", "Description": "This API is to get movie recommendations based on the actors' performances.", "input_params": {"actor_info": {"description": "the details of the actors", "type": "Object"}}, "output_params": {"movie_recommendation": {"description": "the recommended movies", "type": "Object"}}, "format": "GetMovieRecommendation(actor_info) -> movie_recommendation"}, {"name": "FindOpenHours", "Description": "This API is used to find the opening hours of the selected restaurant.", "input_params": {"restaurant_info": {"description": "information about the restaurant", "type": "String"}}, "output_params": {"open_hours": {"description": "the opening hours of the restaurant", "type": "String"}}, "format": "FindOpenHours(restaurant_info) -> open_hours"}, {"name": "MakeReservation", "Description": "This API is to make a reservation at a restaurant based on its open hours for a specific number of people at a certain date and time.", "input_params": {"open_hours": {"description": "the opening hours of the restaurant", "type": "String"}, "number_of_people": {"description": "the number of people for the reservation", "type": "Integer"}, "date_time": {"description": "the date and time for the reservation", "type": "String"}}, "output_params": {"reservation_info": {"description": "information about the reservation", "type": "String"}}, "format": "MakeReservation(open_hours, number_of_people, date_time) -> reservation_info"}, {"name": "CheckFlights", "Description": "This API checks available flights from source to destination.", "input_params": {"source": {"description": "the source location", "type": "String"}, "destination": {"description": "the destination location", "type": "String"}}, "output_params": {"flight": {"description": "the available flight details", "type": "Object"}}, "format": "CheckFlights(source, destination) -> flight"}, {"name": "PlanItinerary", "Description": "This API plans an itinerary based on the location and the user's interests.", "input_params": {"location": {"description": "the location for the itinerary", "type": "String"}, "interests": {"description": "the user's interests", "type": "String"}, "flight": {"description": "the flight details", "type": "Object"}, "hotel": {"description": "the hotel details", "type": "Object"}}, "output_params": {"itinerary": {"description": "the planned itinerary", "type": "Object"}}, "format": "PlanItinerary(location, interests) -> itinerary"}, {"name": "FindAddress", "Description": "This API finds the address of a specific contact.", "input_params": {"contact": {"description": "the name of the contact", "type": "String"}}, "output_params": {"address": {"description": "the address of the contact", "type": "String"}}, "format": "FindAddress(contact) -> address"}, {"name": "CheckTraffic", "Description": "This API checks the current traffic condition to a specific destination.", "input_params": {"destination": {"description": "the destination to check traffic condition", "type": "String"}}, "output_params": {"traffic_condition": {"description": "the current traffic condition to the destination", "type": "String"}}, "format": "CheckTraffic(destination) -> traffic_condition"}, {"name": "GetLocalEvents", "Description": "This API provides a list of local events happening in a specific city on a specific date.", "input_params": {"city": {"description": "the name of the city", "type": "String"}, "date": {"description": "the date for the local events", "type": "String"}}, "output_params": {"events": {"description": "a list of local events happening in the specified city and date", "type": "List"}}, "format": "GetLocalEvents(city, date) -> events"}, {"name": "PlanOutdoorActivities", "Description": "This API plans outdoor activities based on the weather forecast and local events.", "input_params": {"weather": {"description": "the weather forecast for a specific city and date", "type": "String"}, "events": {"description": "a list of local events happening in a specific city and date", "type": "List"}}, "output_params": {"activities": {"description": "a list of planned outdoor activities based on the weather forecast and local events", "type": "List"}}, "format": "PlanOutdoorActivities(weather, events) -> activities"}, {"name": "FindDoctor", "Description": "This API is to find a doctor based on specialty and location.", "input_params": {"specialty": {"description": "the specialty of the doctor", "type": "String"}, "location": {"description": "the location where the doctor is located", "type": "String"}}, "output_params": {"doctor": {"description": "the information of the doctor", "type": "Object"}}, "format": "FindDoctor(specialty, location) -> doctor"}, {"name": "GetAppointment", "Description": "This API is to get an appointment with a specific doctor on a certain date.", "input_params": {"doctor_id": {"description": "the ID of the doctor", "type": "Integer"}, "date": {"description": "the date of the appointment", "type": "Date"}}, "output_params": {"appointment": {"description": "the information of the appointment", "type": "Object"}}, "format": "GetAppointment(doctor_id, date) -> appointment"}, {"name": "ConfirmAppointment", "Description": "This API is to confirm a specific appointment.", "input_params": {"appointment_id": {"description": "the ID of the appointment", "type": "Integer"}}, "output_params": {"confirmation": {"description": "the confirmation status of the appointment", "type": "String"}}, "format": "ConfirmAppointment(appointment_id) -> confirmation"}, {"name": "BookReservation", "Description": "This API is to book a reservation at a specific restaurant for a specific party size and time.", "input_params": {"restaurantname": {"description": "the name of the specific restaurant", "type": "String"}, "partySize": {"description": "the size of the party", "type": "Integer"}, "time": {"description": "the specific time for the reservation", "type": "Time"}}, "output_params": {"reservationStatus": {"description": "the status of the reservation", "type": "String"}}, "format": "BookReservation(restaurantname, partySize, time) -> reservationStatus"}, {"name": "PlanDay", "Description": "This API is to plan the day's activities and outfits based on the weather and clothing recommendations.", "input_params": {"weatherForecast": {"description": "the weather forecast for planning the day", "type": "String"}, "clothingRecommendation": {"description": "the clothing recommendations for planning the day", "type": "String"}}, "output_params": {"dayPlan": {"description": "the plan for the day's activities and outfits", "type": "String"}}, "format": "PlanDay(weatherForecast, clothingRecommendation) -> dayPlan"}, {"name": "FindAccommodation", "Description": "This API is to find accommodation in the destination within the specified budget.", "input_params": {"destination": {"description": "the destination location", "type": "String"}, "budget": {"description": "the budget for accommodation", "type": "Float"}}, "output_params": {"accommodation": {"description": "the found accommodation", "type": "String"}}, "format": "FindAccommodation(destination, budget) -> accommodation"}, {"name": "CreateTravelPlan", "Description": "This API is to create a travel plan including flight and accommodation.", "input_params": {"flight": {"description": "the booked flight", "type": "String"}, "accommodation": {"description": "the found accommodation", "type": "String"}}, "output_params": {"travelPlan": {"description": "the created travel plan", "type": "String"}}, "format": "CreateTravelPlan(flight, accommodation) -> travelPlan"}, {"name": "GetCurrentTemperature", "Description": "This API is to get the current temperature for a specific city.", "input_params": {"city": {"description": "the name of the city", "type": "String"}}, "output_params": {"temperature": {"description": "the current temperature of the city", "type": "Float"}}, "format": "GetCurrentTemperature(city) -> temperature"}, {"name": "DetermineTemperatureType", "Description": "This API is to determine the type of temperature (Hot, Mild, Cold) based on the current temperature.", "input_params": {"temperature": {"description": "the current temperature", "type": "Float"}}, "output_params": {"temperatureType": {"description": "the type of temperature (Hot, Mild, Cold)", "type": "String"}}, "format": "DetermineTemperatureType(temperature) -> temperatureType"}, {"name": "SuggestClothingOptions", "Description": "This API is to suggest clothing options based on the temperature type and gender.", "input_params": {"temperatureType": {"description": "the type of temperature (Hot, Mild, Cold)", "type": "String"}, "gender": {"description": "the gender of the person", "type": "String"}}, "output_params": {"clothingOptions": {"description": "the suggested clothing options", "type": "List"}}, "format": "SuggestClothingOptions(temperatureType, gender) -> clothingOptions"}, {"name": "GetHealthInformation", "Description": "This API provides general health information based on age and gender.", "input_params": {"age": {"description": "the age of the person", "type": "Integer"}, "gender": {"description": "the gender of the person", "type": "String"}}, "output_params": {"HealthInformation": {"description": "the general health information", "type": "String"}}, "format": "GetHealthInformation(age, gender) -> HealthInformation"}, {"name": "GetDietPlan", "Description": "This API generates a diet plan based on the provided health information.", "input_params": {"HealthInformation": {"description": "the general health information", "type": "String"}}, "output_params": {"DietPlan": {"description": "the generated diet plan", "type": "String"}}, "format": "GetDietPlan(HealthInformation) -> DietPlan"}, {"name": "GetExerciseRoutine", "Description": "This API recommends an exercise routine based on the health information.", "input_params": {"HealthInformation": {"description": "the general health information", "type": "String"}}, "output_params": {"ExerciseRoutine": {"description": "the recommended exercise routine", "type": "String"}}, "format": "GetExerciseRoutine(HealthInformation) -> ExerciseRoutine"}, {"name": "CreateWellnessPlan", "Description": "This API creates a comprehensive wellness plan that includes a diet plan and exercise routine.", "input_params": {"DietPlan": {"description": "the generated diet plan", "type": "String"}, "ExerciseRoutine": {"description": "the recommended exercise routine", "type": "String"}}, "output_params": {"WellnessPlan": {"description": "the comprehensive wellness plan", "type": "String"}}, "format": "CreateWellnessPlan(DietPlan, ExerciseRoutine) -> WellnessPlan"}, {"name": "FetchMovieDetails", "Description": "This API retrieves the details of a movie by its title.", "input_params": {"title": {"description": "the title of the movie", "type": "String"}}, "output_params": {"MovieDetails": {"description": "the details of the movie", "type": "Object"}}, "format": "FetchMovieDetails(title) -> MovieDetails"}, {"name": "GetDirectorFilmography", "Description": "This API retrieves the filmography of a director by their name.", "input_params": {"Directorname": {"description": "the name of the director", "type": "String"}}, "output_params": {"DirectorFilmography": {"description": "the filmography of the director", "type": "Object"}}, "format": "GetDirectorFilmography(Directorname) -> DirectorFilmography"}, {"name": "SuggestSimilarMovies", "Description": "This API suggests similar movies based on the given movie details.", "input_params": {"MovieDetails": {"description": "the details of the movie", "type": "Object"}}, "output_params": {"SimilarMovies": {"description": "the list of similar movies", "type": "Object"}}, "format": "SuggestSimilarMovies(MovieDetails) -> SimilarMovies"}, {"name": "BuildMoviePlaylist", "Description": "This API builds a movie playlist including the main movie, similar movies and other movies from the same director.", "input_params": {"MovieDetails": {"description": "the details of the main movie", "type": "Object"}, "SimilarMovies": {"description": "the list of similar movies", "type": "Object"}, "DirectorFilmography": {"description": "the filmography of the director", "type": "Object"}}, "output_params": {"MoviePlaylist": {"description": "the movie playlist", "type": "Object"}}, "format": "BuildMoviePlaylist(MovieDetails, SimilarMovies, DirectorFilmography) -> MoviePlaylist"}, {"name": "GetBookGenre", "Description": "This API provides the genre of a specified book.", "input_params": {"bookTitle": {"description": "the title of the book", "type": "String"}}, "output_params": {"BookGenre": {"description": "the genre of the book", "type": "String"}}, "format": "GetBookGenre(bookTitle) -> BookGenre"}, {"name": "GetAuthorDetails", "Description": "This API provides the details of the author of the specified book.", "input_params": {"bookTitle": {"description": "the title of the book", "type": "String"}}, "output_params": {"AuthorDetails": {"description": "the details of the author", "type": "String"}}, "format": "GetAuthorDetails(bookTitle) -> AuthorDetails"}, {"name": "GetSimilarBooks", "Description": "This API provides a list of similar books based on the input of book genre and author details.", "input_params": {"BookGenre": {"description": "the genre of the book", "type": "String"}, "AuthorDetails": {"description": "the details of the author", "type": "String"}}, "output_params": {"SimilarBooksList": {"description": "a list of similar books", "type": "List"}}, "format": "GetSimilarBooks(BookGenre, AuthorDetails) -> SimilarBooksList"}, {"name": "CheckInventory", "Description": "This API checks the inventory status of a specific product.", "input_params": {"productID": {"description": "the ID of the product", "type": "Integer"}}, "output_params": {"InventoryStatus": {"description": "the inventory status of the product", "type": "String"}}, "format": "CheckInventory(productID) -> InventoryStatus"}, {"name": "EstimateDeliveryTime", "Description": "This API estimates the delivery time for a product to a specific location.", "input_params": {"productID": {"description": "the ID of the product", "type": "Integer"}, "location": {"description": "the location for delivery", "type": "String"}}, "output_params": {"DeliveryTime": {"description": "the estimated delivery time for the product", "type": "String"}}, "format": "EstimateDeliveryTime(productID, location) -> DeliveryTime"}, {"name": "CalculateShippingCost", "Description": "This API calculates the shipping cost for a product to a specific location.", "input_params": {"productID": {"description": "the ID of the product", "type": "Integer"}, "location": {"description": "the location for delivery", "type": "String"}}, "output_params": {"ShippingCost": {"description": "the calculated shipping cost for the product", "type": "Float"}}, "format": "CalculateShippingCost(productID, location) -> ShippingCost"}, {"name": "FindFlight", "Description": "This API is to find the available flights from one point to another.", "input_params": {"startPoint": {"description": "the starting point of the flight", "type": "String"}, "endPoint": {"description": "the destination of the flight", "type": "String"}}, "output_params": {"flight": {"description": "the available flight options", "type": "List"}}, "format": "FindFlight(startPoint, endPoint) -> flight"}, {"name": "GetFlightPrice", "Description": "This API is to get the price of a specific flight.", "input_params": {"flight": {"description": "the flight option", "type": "String"}}, "output_params": {"price": {"description": "the price of the flight", "type": "Float"}}, "format": "GetFlightPrice(flight) -> price"}, {"name": "CheckLuggageAllowance", "Description": "This API is to check the luggage allowance of a specific flight.", "input_params": {"flight": {"description": "the flight option", "type": "String"}}, "output_params": {"luggage": {"description": "the luggage allowance of the flight", "type": "String"}}, "format": "CheckLuggageAllowance(flight) -> luggage"}, {"name": "GetLuggageFee", "Description": "This API is to get the luggage fee based on the luggage allowance and the weight of the luggage.", "input_params": {"luggage": {"description": "the luggage allowance of the flight", "type": "String"}, "weight": {"description": "the weight of the luggage", "type": "Float"}}, "output_params": {"fee": {"description": "the luggage fee", "type": "Float"}}, "format": "GetLuggageFee(luggage, weight) -> fee"}, {"name": "GetHotelRoomRate", "Description": "This API is to get the rate of a hotel room in a specific city.", "input_params": {"city": {"description": "the name of the city", "type": "String"}}, "output_params": {"roomRate": {"description": "the rate of the hotel room", "type": "Float"}}, "format": "GetHotelRoomRate(city) -> roomRate"}, {"name": "GetMealCost", "Description": "This API is to get the cost of meals in a specific city.", "input_params": {"city": {"description": "the name of the city", "type": "String"}}, "output_params": {"mealCost": {"description": "the cost of meals", "type": "Float"}}, "format": "GetMealCost(city) -> mealCost"}, {"name": "GetSightSeeingCost", "Description": "This API is to get the cost for sightseeing in a specific city.", "input_params": {"city": {"description": "the name of the city", "type": "String"}}, "output_params": {"sightSeeingCost": {"description": "the cost for sightseeing", "type": "Float"}}, "format": "GetSightSeeingCost(city) -> sightSeeingCost"}, {"name": "CalculateVacationCost", "Description": "This API is to calculate the total cost of a vacation including hotel room, meals and sightseeing.", "input_params": {"roomRate": {"description": "the rate of the hotel room", "type": "Float"}, "mealCost": {"description": "the cost of meals", "type": "Float"}, "sightSeeingCost": {"description": "the cost for sightseeing", "type": "Float"}}, "output_params": {"totalCost": {"description": "the total cost of the vacation", "type": "Float"}}, "format": "CalculateVacationCost(roomRate, mealCost, sightSeeingCost) -> totalCost"}, {"name": "GetSuitableClothing", "Description": "This API is to recommend suitable clothing based on the weather forecast.", "input_params": {"weatherForecast": {"description": "the weather forecast", "type": "String"}}, "output_params": {"clothing": {"description": "the recommended clothing based on the weather forecast", "type": "String"}}, "format": "GetSuitableClothing(weatherForecast) -> clothing"}, {"name": "GetPackingList", "Description": "This API is to generate a packing list for a trip to a certain destination, based on the clothing needed and the number of days to stay.", "input_params": {"destination": {"description": "the destination of the trip", "type": "String"}, "clothing": {"description": "the recommended clothing", "type": "String"}, "days": {"description": "the number of days to stay", "type": "Integer"}}, "output_params": {"packingList": {"description": "the generated packing list", "type": "String"}}, "format": "GetPackingList(destination, clothing, days) -> packingList"}, {"name": "FindOutdoorActivities", "Description": "This API is to find suitable outdoor activities based on the city and weather forecast.", "input_params": {"city": {"description": "the name of the city", "type": "String"}, "weatherForecast": {"description": "the weather forecast of the city", "type": "String"}}, "output_params": {"activities": {"description": "the suitable outdoor activities based on the city and weather forecast", "type": "List"}}, "format": "FindOutdoorActivities(city, weatherForecast) -> activities"}, {"name": "FindRestaurants", "Description": "This API is to find restaurants of a specific cuisine type in a specific city.", "input_params": {"city": {"description": "the name of the city", "type": "String"}, "cuisineType": {"description": "the specific cuisine type", "type": "String"}}, "output_params": {"restaurants": {"description": "the restaurants of the specific cuisine type in the specific city", "type": "List"}}, "format": "FindRestaurants(city, cuisineType) -> restaurants"}, {"name": "PlanDayOut", "Description": "This API is to plan a day out including outdoor activities and restaurants in a specific city.", "input_params": {"city": {"description": "the name of the city", "type": "String"}, "activities": {"description": "the suitable outdoor activities", "type": "List"}, "restaurants": {"description": "the restaurants", "type": "List"}}, "output_params": {"dayPlan": {"description": "the plan for a day out including outdoor activities and restaurants", "type": "String"}}, "format": "PlanDayOut(city, activities, restaurants) -> dayPlan"}, {"name": "GetPopulation", "Description": "This API is to get the population of a specific location.", "input_params": {"location": {"description": "the name of the location", "type": "String"}}, "output_params": {"population": {"description": "the population of the location", "type": "Integer"}}, "format": "GetPopulation(location) -> population"}, {"name": "GetActiveCases", "Description": "This API is to get the number of active COVID-19 cases in a specific location.", "input_params": {"location": {"description": "the name of the location", "type": "String"}}, "output_params": {"activeCases": {"description": "the number of active COVID-19 cases", "type": "Integer"}}, "format": "GetActiveCases(location) -> activeCases"}, {"name": "CalculateInfectionRate", "Description": "This API is to calculate the infection rate based on the population and the number of active COVID-19 cases.", "input_params": {"population": {"description": "the population of the location", "type": "Integer"}, "activeCases": {"description": "the number of active COVID-19 cases", "type": "Integer"}}, "output_params": {"infectionRate": {"description": "the infection rate", "type": "Float"}}, "format": "CalculateInfectionRate(population, activeCases) -> infectionRate"}, {"name": "GetLocalWeather", "Description": "This API is to get the current weather conditions of a specific city.", "input_params": {"city": {"description": "the name of the city", "type": "String"}}, "output_params": {"weather": {"description": "the current weather conditions", "type": "String"}}, "format": "GetLocalWeather(city) -> weather"}, {"name": "GetRecommendedClothing", "Description": "This API recommends suitable clothing based on the current weather.", "input_params": {"weather": {"description": "the current weather conditions", "type": "String"}}, "output_params": {"clothing": {"description": "the recommended clothing", "type": "String"}}, "format": "GetRecommendedClothing(weather) -> clothing"}, {"name": "GetDestinationTravelAdvice", "Description": "This API provides travel advice for a specific city depending on the suitable clothing.", "input_params": {"city": {"description": "the name of the city", "type": "String"}, "clothing": {"description": "the recommended clothing", "type": "String"}}, "output_params": {"travelAdvice": {"description": "the travel advice for the city", "type": "String"}}, "format": "GetDestinationTravelAdvice(city, clothing) -> travelAdvice"}, {"name": "GetStockPrice", "Description": "This API is to get the current price of a specific stock.", "input_params": {"stockId": {"description": "the ID of the stock", "type": "String"}}, "output_params": {"price": {"description": "the current price of the stock", "type": "Float"}}, "format": "GetStockPrice(stockId) -> price"}, {"name": "PredictFutureStockPrice", "Description": "This API predicts the future price of a stock based on its current price.", "input_params": {"stockId": {"description": "the ID of the stock", "type": "String"}, "currentPrice": {"description": "the current price of the stock", "type": "Float"}}, "output_params": {"futurePrice": {"description": "the predicted future price of the stock", "type": "Float"}}, "format": "PredictFutureStockPrice(stockId, currentPrice) -> futurePrice"}, {"name": "SuggestStockAction", "Description": "This API suggests whether to buy, sell, or hold a stock based on its current and predicted future price.", "input_params": {"stockId": {"description": "the ID of the stock", "type": "String"}, "currentPrice": {"description": "the current price of the stock", "type": "Float"}, "futurePrice": {"description": "the predicted future price of the stock", "type": "Float"}}, "output_params": {"action": {"description": "the suggested action for the stock (buy, sell, or hold)", "type": "String"}}, "format": "SuggestStockAction(stockId, currentPrice, futurePrice) -> action"}, {"name": "GetMovieByname", "Description": "This API is to get the details of a movie by its name.", "input_params": {"moviename": {"description": "the name of the movie", "type": "String"}}, "output_params": {"movieDetails": {"description": "the details of the movie", "type": "Object"}}, "format": "GetMovieByname(moviename) -> movieDetails"}, {"name": "FindNearestCinema", "Description": "This API is to find the nearest cinema that is currently showing the movie.", "input_params": {"movieDetails": {"description": "the details of the movie", "type": "Object"}}, "output_params": {"cinemaLocation": {"description": "the location of the nearest cinema", "type": "String"}}, "format": "FindNearestCinema(movieDetails) -> cinemaLocation"}, {"name": "FindTrendingFashion", "Description": "This API is to find the trending fashion in a particular season for a specific city.", "input_params": {"city": {"description": "the name of the city", "type": "String"}, "season": {"description": "the current season", "type": "String"}}, "output_params": {"fashion": {"description": "the trending fashion", "type": "String"}}, "format": "FindTrendingFashion(city, season) -> fashion"}, {"name": "GenerateOutfit", "Description": "This API is to generate a stylish outfit based on the recommended clothing and trending fashion.", "input_params": {"clothing": {"description": "the recommended clothing", "type": "String"}, "fashion": {"description": "the trending fashion", "type": "String"}}, "output_params": {"outfit": {"description": "the generated outfit", "type": "String"}}, "format": "GenerateOutfit(clothing, fashion) -> outfit"}, {"name": "GetLocationData", "Description": "This API retrieves location of a specific user.", "input_params": {"Username": {"description": "the username of the user", "type": "String"}}, "output_params": {"Location": {"description": "the location of the user", "type": "String"}}, "format": "GetLocationData(Username) -> Location"}, {"name": "TrackSpending", "Description": "This API is used to track the spending of a specific user.", "input_params": {"Username": {"description": "the username of the user", "type": "String"}}, "output_params": {"SpendingReport": {"description": "the spending report of the user", "type": "Object"}}, "format": "TrackSpending(Username) -> SpendingReport"}, {"name": "CalculateSavings", "Description": "This API calculates the possible savings based on the spending report of a user.", "input_params": {"SpendingReport": {"description": "the spending report of the user", "type": "Object"}}, "output_params": {"Savings": {"description": "the possible savings of the user", "type": "Object"}}, "format": "CalculateSavings(SpendingReport) -> Savings"}, {"name": "SuggestInvestment", "Description": "This API suggests an investment plan based on the savings of a user.", "input_params": {"Savings": {"description": "the possible savings of the user", "type": "Object"}}, "output_params": {"InvestmentPlan": {"description": "the suggested investment plan for the user", "type": "Object"}}, "format": "SuggestInvestment(Savings) -> InvestmentPlan"}, {"name": "RestaurantRecommendations", "Description": "This API fetches restaurant recommendations for a specific city based on user reviews and ratings.", "input_params": {"City": {"description": "the name of the city", "type": "String"}}, "output_params": {"Recommendations": {"description": "the restaurant recommendations for the city", "type": "String"}}, "format": "RestaurantRecommendations(City) -> Recommendations"}, {"name": "OptimalTravelDate", "Description": "This API calculates the optimal travel date considering both the weather forecast and availability of recommended restaurants.", "input_params": {"WeatherForecast": {"description": "the weather forecast for a specific city", "type": "String"}, "RestaurantRecommendations": {"description": "the restaurant recommendations for a specific city", "type": "String"}}, "output_params": {"TravelDate": {"description": "the optimal travel date", "type": "String"}}, "format": "OptimalTravelDate(WeatherForecast, RestaurantRecommendations) -> TravelDate"}, {"name": "TouristAttractions", "Description": "This API provides the tourist attractions for a specific location.", "input_params": {"Location": {"description": "the location for which tourist attractions are needed", "type": "String"}}, "output_params": {"Attractions": {"description": "the tourist attractions for the specified location", "type": "List"}}, "format": "TouristAttractions(Location) -> Attractions"}, {"name": "FindItemInWardrobe", "Description": "This API is to find a specified outfit in my wardrobe.", "input_params": {"outfit": {"description": "the outfit to find in the wardrobe", "type": "String"}}, "output_params": {"location": {"description": "the location of the specified outfit in the wardrobe", "type": "String"}}, "format": "FindItemInWardrobe(outfit) -> location"}, {"name": "FindClothes", "Description": "This API finds the most appropriate outfit to wear based on the current weather.", "input_params": {"weather": {"description": "the current weather", "type": "String"}}, "output_params": {"outfit": {"description": "the recommended outfit", "type": "String"}}, "format": "FindClothes(weather) -> outfit"}, {"name": "PlanOutfit", "Description": "This API suggests a final outfit to wear based on the event and recommended outfit based on weather.", "input_params": {"event": {"description": "the event for which outfit is required", "type": "String"}, "outfit": {"description": "the recommended outfit based on weather", "type": "String"}}, "output_params": {"final_outfit": {"description": "the final outfit suggestion", "type": "String"}}, "format": "PlanOutfit(event, outfit) -> final_outfit"}, {"name": "FetchIngredients", "Description": "This API fetches the list of ingredients required for a particular dish.", "input_params": {"dish_name": {"description": "the name of the dish", "type": "String"}}, "output_params": {"ingredients": {"description": "the list of ingredients required for the dish", "type": "List"}}, "format": "FetchIngredients(dish_name) -> ingredients"}, {"name": "FindGroceryStores", "Description": "This API finds grocery stores in a given location.", "input_params": {"location": {"description": "the location to search for grocery stores", "type": "String"}}, "output_params": {"stores": {"description": "the list of grocery stores in the given location", "type": "List"}}, "format": "FindGroceryStores(location) -> stores"}, {"name": "ComparePrices", "Description": "This API compares the prices of ingredients in different stores and returns the store with the lowest cost.", "input_params": {"ingredients": {"description": "the list of ingredients to compare prices", "type": "List"}, "stores": {"description": "the list of grocery stores to compare prices", "type": "List"}}, "output_params": {"cheapest_store": {"description": "the grocery store with the lowest cost for the ingredients", "type": "String"}}, "format": "ComparePrices(ingredients, stores) -> cheapest_store"}, {"name": "CalculateCalories", "Description": "This API is to calculate the total calories of dishes in the menu.", "input_params": {"menu_details": {"description": "details of the menu", "type": "String"}}, "output_params": {"calorie_info": {"description": "information about the total calories", "type": "String"}}, "format": "CalculateCalories(menu_details) -> calorie_info"}, {"name": "SuggestFood", "Description": "This API is to suggest food from the menu based on dietary preferences.", "input_params": {"menu": {"description": "the menu of the restaurant", "type": "String"}, "dietary_preferences": {"description": "the dietary preferences", "type": "String"}}, "output_params": {"food_suggestion": {"description": "the suggested food", "type": "String"}}, "format": "SuggestFood(menu, dietary_preferences) -> food_suggestion"}, {"name": "CalculateLuggageWeight", "Description": "This API calculates the total weight of the luggage based on the inputted items.", "input_params": {"luggage_items": {"description": "the items of luggage", "type": "List of Strings"}}, "output_params": {"luggage_weight": {"description": "the total weight of the luggage", "type": "Float"}}, "format": "CalculateLuggageWeight(luggage_items) -> luggage_weight"}, {"name": "CanCarryLuggage", "Description": "This API tells if the calculated luggage weight is within the allowed limit or not.", "input_params": {"luggage_weight": {"description": "the total weight of the luggage", "type": "Float"}, "luggage_allowance": {"description": "the luggage allowance for the flight", "type": "String"}}, "output_params": {"permission": {"description": "the permission to carry the luggage", "type": "Boolean"}}, "format": "CanCarryLuggage(luggage_weight, luggage_allowance) -> permission"}, {"name": "FindBook", "Description": "This API is to find a book based on a specified title.", "input_params": {"title": {"description": "the title of the book", "type": "String"}}, "output_params": {"book": {"description": "the information of the book", "type": "Object"}}, "format": "FindBook(title) -> book"}, {"name": "ReadReview", "Description": "This API is to read a review of a specified book.", "input_params": {"book": {"description": "the information of the book", "type": "Object"}}, "output_params": {"review": {"description": "the review of the book", "type": "String"}}, "format": "ReadReview(book) -> review"}, {"name": "SendReview", "Description": "This API is to send the book review to a specified contact.", "input_params": {"contact_info": {"description": "the contact information of the recipient", "type": "String"}, "review": {"description": "the review of the book", "type": "String"}}, "output_params": {"sent_confirmation": {"description": "the confirmation of the review sent", "type": "String"}}, "format": "SendReview(contact_info, review) -> sent_confirmation"}, {"name": "SendTicket", "Description": "This API is to send the flight ticket to a specified contact.", "input_params": {"contact_info": {"description": "the contact information", "type": "String"}, "ticket": {"description": "the flight ticket", "type": "Object"}}, "output_params": {"sent_confirmation": {"description": "the confirmation of ticket sent", "type": "String"}}, "format": "SendTicket(contact_info, ticket) -> sent_confirmation"}, {"name": "MovieFinder", "Description": "This API searches for the movie id of a specific movie name.", "input_params": {"movie_name": {"description": "the name of the movie", "type": "String"}}, "output_params": {"movie_id": {"description": "the id of the movie", "type": "Integer"}}, "format": "MovieFinder(movie_name) -> movie_id"}, {"name": "MovieRatings", "Description": "This API finds the rating scores for a specific movie id.", "input_params": {"movie_id": {"description": "the id of the movie", "type": "Integer"}}, "output_params": {"ratingScores": {"description": "the rating scores of the movie", "type": "Float"}}, "format": "MovieRatings(movie_id) -> ratingScores"}, {"name": "RatingAverage", "Description": "This API calculates the average rating of given rating scores.", "input_params": {"ratingScores": {"description": "the rating scores of the movie", "type": "Float"}}, "output_params": {"avgRating": {"description": "the average rating of the movie", "type": "Float"}}, "format": "RatingAverage(ratingScores) -> avgRating"}, {"name": "MovieLookup", "Description": "This API retrieves the movie id of a specific movie name.", "input_params": {"movie_name": {"description": "the name of the movie", "type": "String"}}, "output_params": {"movie_id": {"description": "the id of the movie", "type": "Integer"}}, "format": "MovieLookup(movie_name) -> movie_id"}, {"name": "MovieRating", "Description": "This API retrieves all the rating scores for a specific movie id.", "input_params": {"movie_id": {"description": "the id of the movie", "type": "Integer"}}, "output_params": {"rating_scores": {"description": "the rating scores for the movie", "type": "List of Floats"}}, "format": "MovieRating(movie_id) -> rating_scores"}, {"name": "HighestRating", "Description": "This API retrieves the highest rating score from a list of rating scores.", "input_params": {"rating_scores": {"description": "the rating scores for the movie", "type": "List of Floats"}}, "output_params": {"highest_rating": {"description": "the highest rating score", "type": "Float"}}, "format": "HighestRating(rating_scores) -> highest_rating"}, {"name": "FlightSearch", "Description": "This API searches for flight id for a specific destination on a particular date.", "input_params": {"destination": {"description": "the destination of the flight", "type": "String"}, "date": {"description": "the date of the flight", "type": "String"}}, "output_params": {"flight_id": {"description": "the ID of the flight", "type": "Integer"}}, "format": "FlightSearch(destination, date) -> flight_id"}, {"name": "SeatSelection", "Description": "This API checks the seat availability for a specific flight id.", "input_params": {"flight_id": {"description": "the ID of the flight", "type": "Integer"}}, "output_params": {"seats": {"description": "the available seats for the flight", "type": "String"}}, "format": "SeatSelection(flight_id) -> seats"}, {"name": "UpgradeAvailability", "Description": "This API checks if there is any seat upgrade options available for the given seat.", "input_params": {"seats": {"description": "the seats to check for upgrade options", "type": "String"}}, "output_params": {"upgradeOptions": {"description": "the available seat upgrade options", "type": "String"}}, "format": "UpgradeAvailability(seats) -> upgradeOptions"}, {"name": "SeatClassAvailability", "Description": "This API checks the seat class availability for a specific flight id.", "input_params": {"flight_id": {"description": "the id of the flight", "type": "Integer"}}, "output_params": {"seat_classes": {"description": "the available seat classes", "type": "List"}}, "format": "SeatClassAvailability(flight_id) -> seat_classes"}, {"name": "BestSeatClass", "Description": "This API finds the best seat class available among the given seat class options.", "input_params": {"seat_classes": {"description": "the available seat classes", "type": "List"}}, "output_params": {"bestSeatClass": {"description": "the best seat class", "type": "String"}}, "format": "BestSeatClass(seat_classes) -> bestSeatClass"}, {"name": "HotelSearch", "Description": "This API searches for hotel id for a specific city between check-in and check-out dates.", "input_params": {"city": {"description": "the name of the city", "type": "String"}, "check_in_date": {"description": "the check-in date", "type": "Date"}, "check_out_date": {"description": "the check-out date", "type": "Date"}}, "output_params": {"hotel_id": {"description": "the ID of the hotel", "type": "Integer"}}, "format": "HotelSearch(city, check_in_date, check_out_date) -> hotel_id"}, {"name": "RoomAvailability", "Description": "This API checks the room availability for a specific hotel id.", "input_params": {"hotel_id": {"description": "the ID of the hotel", "type": "Integer"}}, "output_params": {"rooms": {"description": "the available rooms", "type": "List"}}, "format": "RoomAvailability(hotel_id) -> rooms"}, {"name": "BestRoom", "Description": "This API finds the best room available among the given room options.", "input_params": {"rooms": {"description": "the available rooms", "type": "List"}}, "output_params": {"bestRoom": {"description": "the best room available", "type": "String"}}, "format": "BestRoom(rooms) -> bestRoom"}, {"name": "BookSearch", "Description": "This API searches for book id for a specific title and author.", "input_params": {"title": {"description": "the title of the book", "type": "String"}, "author": {"description": "the author of the book", "type": "String"}}, "output_params": {"book_id": {"description": "the ID of the book", "type": "Integer"}}, "format": "BookSearch(title, author) -> book_id"}, {"name": "BookStoreAvailability", "Description": "This API checks for the store availability for a specific book id.", "input_params": {"book_id": {"description": "the ID of the book", "type": "Integer"}}, "output_params": {"store_ids": {"description": "the IDs of the stores where the book is available", "type": "List of Integers"}}, "format": "BookStoreAvailability(book_id) -> store_ids"}, {"name": "NearestStore", "Description": "This API finds the nearest store among the given store options based on the user's location.", "input_params": {"store_ids": {"description": "the IDs of the stores", "type": "List of Integers"}, "user_location": {"description": "the location of the user", "type": "String"}}, "output_params": {"nearest_store": {"description": "the ID of the nearest store", "type": "Integer"}}, "format": "NearestStore(store_ids, user_location) -> nearest_store"}, {"name": "RestaurantSearch", "Description": "This API searches for restaurant id for a specific name in a particular city.", "input_params": {"name": {"description": "the name of the restaurant", "type": "String"}, "city": {"description": "the city where the restaurant is located", "type": "String"}}, "output_params": {"restaurant_id": {"description": "the ID of the restaurant", "type": "Integer"}}, "format": "RestaurantSearch(name, city) -> restaurant_id"}, {"name": "TableAvailability", "Description": "This API checks the table availability for a specific restaurant id on a specific date.", "input_params": {"restaurant_id": {"description": "the ID of the restaurant", "type": "Integer"}, "date": {"description": "the date for checking table availability", "type": "Date"}}, "output_params": {"tables": {"description": "the available tables for the given restaurant and date", "type": "List"}}, "format": "TableAvailability(restaurant_id, date) -> tables"}, {"name": "BestTable", "Description": "This API finds the best table available among the given table options.", "input_params": {"tables": {"description": "the list of available tables", "type": "List"}}, "output_params": {"bestTable": {"description": "the best table among the given options", "type": "Table"}}, "format": "BestTable(tables) -> bestTable"}, {"name": "CurrencyConversion", "Description": "This API provides the conversion rate from one currency to another.", "input_params": {"from_currency": {"description": "the currency to convert from", "type": "String"}, "to_currency": {"description": "the currency to convert to", "type": "String"}}, "output_params": {"conversion_rate": {"description": "the conversion rate from the 'from_currency' to the 'to_currency'", "type": "Float"}}, "format": "CurrencyConversion(from_currency, to_currency) -> conversion_rate"}, {"name": "ItemPrice", "Description": "This API provides the price of an item.", "input_params": {"item_id": {"description": "the ID of the item", "type": "Integer"}}, "output_params": {"price": {"description": "the price of the item", "type": "Float"}}, "format": "ItemPrice(item_id) -> price"}, {"name": "CalculatePrice", "Description": "This API provides the final price of an item after currency conversion.", "input_params": {"price": {"description": "the price of the item", "type": "Float"}, "conversion_rate": {"description": "the conversion rate from the original currency to the target currency", "type": "Float"}}, "output_params": {"converted_price": {"description": "the final price of the item after currency conversion", "type": "Float"}}, "format": "CalculatePrice(price, conversion_rate) -> converted_price"}, {"name": "CurrentTime", "Description": "This API provides the current time in a specified city.", "input_params": {"city": {"description": "the name of the city", "type": "String"}}, "output_params": {"time": {"description": "the current time", "type": "Time"}}, "format": "CurrentTime(city) -> time"}, {"name": "OpenMuseums", "Description": "This API provides a list of museums that are currently open in a city at a given time.", "input_params": {"city": {"description": "the name of the city", "type": "String"}, "time": {"description": "the specified time", "type": "Time"}}, "output_params": {"museums": {"description": "a list of open museums", "type": "List"}}, "format": "OpenMuseums(city, time) -> museums"}, {"name": "ArtExhibit", "Description": "This API provides a list of current art exhibits at a specified museum.", "input_params": {"museum": {"description": "the name of the museum", "type": "String"}}, "output_params": {"exhibits": {"description": "a list of art exhibits", "type": "List"}}, "format": "ArtExhibit(museum) -> exhibits"}, {"name": "FlightStatus", "Description": "This API is used to get the status of a specific flight on a certain date.", "input_params": {"airline": {"description": "the name of the airline", "type": "String"}, "flight_number": {"description": "the flight number", "type": "String"}, "date": {"description": "the date of the flight", "type": "String"}}, "output_params": {"flight_status": {"description": "the status of the flight, including time", "type": "String"}}, "format": "FlightStatus(airline, flight_number, date) -> flight_status"}, {"name": "AirportTransportation", "Description": "This API is used to suggest transportation options from the city to the airport on a certain date and time considering the flight status.", "input_params": {"city": {"description": "the name of the city", "type": "String"}, "date": {"description": "the date of the transportation", "type": "String"}, "time": {"description": "the time of the transportation", "type": "String"}}, "output_params": {"transportation": {"description": "the suggested transportation options", "type": "String"}}, "format": "AirportTransportation(city, date, time) -> transportation"}, {"name": "TransportationBooking", "Description": "This API is used to book a specific transportation in a certain city on a specific date and time.", "input_params": {"city": {"description": "the name of the city", "type": "String"}, "transportation": {"description": "the transportation option", "type": "String"}, "date": {"description": "the date of the booking", "type": "String"}, "time": {"description": "the time of the booking", "type": "String"}}, "output_params": {"booking": {"description": "the booking status", "type": "String"}}, "format": "TransportationBooking(city, transportation, date, time) -> booking"}, {"name": "TableReservation", "Description": "This API is used to reserve a table at a restaurant on a specific date. The API takes into consideration the weather details to suggest indoor or outdoor seating.", "input_params": {"weatherDetails": {"description": "the details of the weather forecast", "type": "String"}, "restaurantDetails": {"description": "the details of the searched restaurant", "type": "String"}, "num_of_people": {"description": "the number of people for the reservation", "type": "Integer"}, "date": {"description": "the specific date for the reservation", "type": "String"}}, "output_params": {"reservationDetails": {"description": "the details of the table reservation", "type": "String"}}, "format": "TableReservation(weatherDetails, restaurantDetails, num_of_people, date) -> reservationDetails"}, {"name": "ProductLookup", "Description": "This API is to query the product details given a product_id.", "input_params": {"product_id": {"description": "the ID of the product", "type": "String"}}, "output_params": {"product_info": {"description": "the details of the product", "type": "Object"}}, "format": "ProductLookup(product_id) -> product_info"}, {"name": "CustomerPurchase", "Description": "This API fetches the purchase history based on product details.", "input_params": {"product_info": {"description": "the details of the product", "type": "Object"}}, "output_params": {"purchase_info": {"description": "the purchase history", "type": "Object"}}, "format": "CustomerPurchase(product_info) -> purchase_info"}, {"name": "ProductRating", "Description": "This API provides product ratings based on purchase history.", "input_params": {"purchase_info": {"description": "the purchase history", "type": "Object"}, "number_of_ratings": {"description": "the number of ratings to retrieve", "type": "Integer"}}, "output_params": {"ratings": {"description": "the product ratings", "type": "List"}}, "format": "ProductRating(purchase_info, number_of_ratings) -> ratings"}, {"name": "BookInfo", "Description": "This API provides details about a book based on its title.", "input_params": {"title": {"description": "the title of the book", "type": "String"}}, "output_params": {"bookdetails": {"description": "the details of the book", "type": "Object"}}, "format": "BookInfo(title) -> bookdetails"}, {"name": "AuthorBio", "Description": "This API provides information about an author.", "input_params": {"author": {"description": "the name of the author", "type": "String"}}, "output_params": {"authorData": {"description": "the information about the author", "type": "Object"}}, "format": "AuthorBio(author) -> authorData"}, {"name": "ReviewGenerator", "Description": "This API generates a review based on the book and its author details.", "input_params": {"bookdetails": {"description": "the details of the book", "type": "Object"}, "authorData": {"description": "the information about the author", "type": "Object"}}, "output_params": {"review": {"description": "the generated review", "type": "String"}}, "format": "ReviewGenerator(bookdetails, authorData) -> review"}, {"name": "CryptoPrice", "Description": "This API gives the current price of a specified cryptocurrency.", "input_params": {"cryptoType": {"description": "the type of cryptocurrency", "type": "String"}}, "output_params": {"price": {"description": "the current price of the cryptocurrency", "type": "Float"}}, "format": "CryptoPrice(cryptoType) -> price"}, {"name": "StockPrice", "Description": "This API gives the current price of a specified stock.", "input_params": {"stockname": {"description": "the name of the stock", "type": "String"}}, "output_params": {"price": {"description": "the current price of the stock", "type": "Float"}}, "format": "StockPrice(stockname) -> price"}, {"name": "InvestmentSuggestion", "Description": "This API suggests where to invest considering the prices of cryptocurrency and stock.", "input_params": {"cryptoPrice": {"description": "the current price of the cryptocurrency", "type": "Float"}, "stockPrice": {"description": "the current price of the stock", "type": "Float"}}, "output_params": {"suggestion": {"description": "the investment suggestion", "type": "String"}}, "format": "InvestmentSuggestion(cryptoPrice, stockPrice) -> suggestion"}, {"name": "BookTitle", "Description": "This API retrieves the title of a book given the author and genre.", "input_params": {"author": {"description": "the author of the book", "type": "String"}, "genre": {"description": "the genre of the book", "type": "String"}}, "output_params": {"title": {"description": "the title of the book", "type": "String"}}, "format": "BookTitle(author, genre) -> title"}, {"name": "BookPrice", "Description": "This API gives the price of the specified book title.", "input_params": {"title": {"description": "the title of the book", "type": "String"}}, "output_params": {"price": {"description": "the price of the book", "type": "Float"}}, "format": "BookPrice(title) -> price"}, {"name": "ShippingEstimate", "Description": "This API calculates the estimated shipping cost for the book based on its price and shipping destination.", "input_params": {"bookPrice": {"description": "the price of the book", "type": "Float"}, "destination": {"description": "the shipping destination", "type": "String"}}, "output_params": {"estimate": {"description": "the estimated shipping cost", "type": "Float"}}, "format": "ShippingEstimate(bookPrice, destination) -> estimate"}, {"name": "SendInvitation", "Description": "This API sends an invitation for the booked table to the provided email.", "input_params": {"bookingID": {"description": "the ID of the table booking", "type": "Integer"}, "email": {"description": "the email address to send the invitation to", "type": "String"}}, "output_params": {"invitationID": {"description": "the ID of the sent invitation", "type": "Integer"}}, "format": "SendInvitation(bookingID, email) -> invitationID"}, {"name": "MovieSearch", "Description": "This API finds the most popular movie in the specified city of the given genre.", "input_params": {"city": {"description": "the name of the city", "type": "String"}, "genre": {"description": "the genre of the movie", "type": "String"}}, "output_params": {"movie": {"description": "the most popular movie", "type": "String"}}, "format": "MovieSearch(city, genre) -> movie"}, {"name": "ShowTiming", "Description": "This API provides the show timings for the selected movie on the specified date.", "input_params": {"movie": {"description": "the selected movie", "type": "String"}, "date": {"description": "the specified date", "type": "String"}}, "output_params": {"showtime": {"description": "the show timings for the movie on the specified date", "type": "String"}}, "format": "ShowTiming(movie, date) -> showtime"}, {"name": "Weather", "Description": "This API gives the current weather conditions for the given city.", "input_params": {"city": {"description": "the name of the city", "type": "String"}}, "output_params": {"condition": {"description": "the current weather conditions", "type": "String"}}, "format": "Weather(city) -> condition"}, {"name": "FlightDistance", "Description": "This API provides the flight distance between the origin and destination cities.", "input_params": {"origin": {"description": "the origin city", "type": "String"}, "destination": {"description": "the destination city", "type": "String"}}, "output_params": {"distance": {"description": "the flight distance between the origin and destination cities", "type": "Float"}}, "format": "FlightDistance(origin, destination) -> distance"}, {"name": "FuelCostPerFlight", "Description": "This API calculates the fuel cost for the flight given the distance and weather conditions.", "input_params": {"distance": {"description": "the flight distance", "type": "Float"}, "weatherCondition": {"description": "the current weather conditions", "type": "String"}}, "output_params": {"cost": {"description": "the fuel cost for the flight", "type": "Float"}}, "format": "FuelCostPerFlight(distance, weatherCondition) -> cost"}, {"name": "FindRecipe", "Description": "This API provides the recipe of a specified dish.", "input_params": {"dish": {"description": "the name of the dish", "type": "String"}}, "output_params": {"recipe": {"description": "the recipe of the dish", "type": "String"}}, "format": "FindRecipe(dish) -> recipe"}, {"name": "CheckPantry", "Description": "This API checks the pantry for available ingredients needed for a certain recipe.", "input_params": {"recipe": {"description": "the recipe of the dish", "type": "String"}}, "output_params": {"available_ingredients": {"description": "the available ingredients in the pantry", "type": "List"}}, "format": "CheckPantry(recipe) -> available_ingredients"}, {"name": "GroceryList", "Description": "This API generates a grocery list based on the available ingredients and the recipe.", "input_params": {"available_ingredients": {"description": "the available ingredients in the pantry", "type": "List"}, "recipe": {"description": "the recipe of the dish", "type": "String"}}, "output_params": {"list": {"description": "the grocery list", "type": "List"}}, "format": "GroceryList(available_ingredients, recipe) -> list"}, {"name": "PharmacyLocator", "Description": "This API locates all the pharmacies in a specific city.", "input_params": {"city": {"description": "the name of the city", "type": "String"}}, "output_params": {"pharmacies": {"description": "a list of pharmacies in the city", "type": "List"}}, "format": "PharmacyLocator(city) -> pharmacies"}, {"name": "MedicineAvailability", "Description": "This API checks the availability of specific medicine in a given pharmacy.", "input_params": {"pharmacy": {"description": "the name of the pharmacy", "type": "String"}, "medicine_name": {"description": "the name of the medicine", "type": "String"}}, "output_params": {"medicine_stock": {"description": "the availability of the medicine in the pharmacy", "type": "Boolean"}}, "format": "MedicineAvailability(pharmacy, medicine_name) -> medicine_stock"}, {"name": "OrderMedicine", "Description": "This API places an order for a particular medicine at a chosen pharmacy.", "input_params": {"pharmacy": {"description": "the name of the pharmacy", "type": "String"}, "medicine_name": {"description": "the name of the medicine", "type": "String"}, "quantity": {"description": "the quantity of the medicine to order", "type": "Integer"}}, "output_params": {"order_confirmation": {"description": "the confirmation of the order", "type": "String"}}, "format": "OrderMedicine(pharmacy, medicine_name, quantity) -> order_confirmation"}, {"name": "GetMovie", "Description": "This API is to get the information about a specific movie show.", "input_params": {"show": {"description": "the name of the movie show", "type": "String"}}, "output_params": {"movie_info": {"description": "the information about the movie, including the venue", "type": "String"}}, "format": "GetMovie(show) -> movie_info"}, {"name": "RestaurantRecommendation", "Description": "This API recommends restaurants based on the venue.", "input_params": {"venue": {"description": "the name of the venue", "type": "String"}}, "output_params": {"restaurant_list": {"description": "a list of recommended restaurants", "type": "List"}}, "format": "RestaurantRecommendation(venue) -> restaurant_list"}, {"name": "RestaurantDetails", "Description": "This API returns information about a certain restaurant.", "input_params": {"restaurantname": {"description": "the name of the restaurant", "type": "String"}}, "output_params": {"restaurantInfo": {"description": "information about the restaurant", "type": "Object"}}, "format": "RestaurantDetails(restaurantname) -> restaurantInfo"}, {"name": "CuisineRecommendation", "Description": "This API recommends cuisines based on the restaurant's information.", "input_params": {"restaurantInfo": {"description": "information about the restaurant", "type": "Object"}}, "output_params": {"cuisineRec": {"description": "recommended cuisines", "type": "List"}}, "format": "CuisineRecommendation(restaurantInfo) -> cuisineRec"}, {"name": "MenuSelection", "Description": "This API selects a menu based on the restaurant's information and recommended cuisine.", "input_params": {"restaurantInfo": {"description": "information about the restaurant", "type": "Object"}, "cuisineRec": {"description": "recommended cuisines", "type": "List"}}, "output_params": {"selectedMenu": {"description": "selected menu", "type": "Object"}}, "format": "MenuSelection(restaurantInfo, cuisineRec) -> selectedMenu"}, {"name": "ClothingRecommendation", "Description": "This API provides clothing recommendations based on the current weather.", "input_params": {"weatherForecast": {"description": "the weather forecast", "type": "String"}}, "output_params": {"clothes": {"description": "the recommended clothes", "type": "String"}}, "format": "ClothingRecommendation(weatherForecast) -> clothes"}, {"name": "PackItems", "Description": "This API generates a list of items to pack based on clothing recommendations and the duration of the trip.", "input_params": {"clothingRecommendation": {"description": "the recommended clothes", "type": "String"}, "tripDuration": {"description": "the duration of the trip", "type": "String"}}, "output_params": {"packedItems": {"description": "the list of items to pack", "type": "String"}}, "format": "PackItems(clothingRecommendation, tripDuration) -> packedItems"}, {"name": "CarInfo", "Description": "This API retrieves detailed information about a car including its price.", "input_params": {"car_name": {"description": "the name of the car", "type": "String"}, "country": {"description": "the country where the car is being purchased", "type": "String"}}, "output_params": {"carDetails": {"description": "detailed information about the car including its price", "type": "Object"}}, "format": "CarInfo(car_name, country) -> carDetails"}, {"name": "CountryTaxRate", "Description": "This API returns the tax rate in a certain country.", "input_params": {"country": {"description": "the country for which the tax rate is being retrieved", "type": "String"}}, "output_params": {"taxRate": {"description": "the tax rate in the specified country", "type": "Float"}}, "format": "CountryTaxRate(country) -> taxRate"}, {"name": "TaxCostCalculator", "Description": "This API calculates the tax cost of a certain price.", "input_params": {"price": {"description": "the price of the item", "type": "Float"}, "tax_rate": {"description": "the tax rate to be applied", "type": "Float"}}, "output_params": {"taxCost": {"description": "the calculated tax cost", "type": "Float"}}, "format": "TaxCostCalculator(price, tax_rate) -> taxCost"}, {"name": "FlightInfo", "Description": "This API retrieves detailed information about flights including its cost.", "input_params": {"city_from": {"description": "the city of departure", "type": "String"}, "city_to": {"description": "the city of arrival", "type": "String"}, "date_from": {"description": "the start date of the flight", "type": "Date"}, "date_to": {"description": "the end date of the flight", "type": "Date"}}, "output_params": {"flightDetails": {"description": "detailed information about flights including its cost", "type": "Object"}}, "format": "FlightInfo(city_from, city_to, date_from, date_to) -> flightDetails"}, {"name": "CountryWeather", "Description": "This API returns the weather information in a certain city at a certain date.", "input_params": {"city": {"description": "the city for which weather information is required", "type": "String"}, "date": {"description": "the date for which weather information is required", "type": "Date"}}, "output_params": {"weatherDetails": {"description": "the weather information in a certain city at a certain date", "type": "Object"}}, "format": "CountryWeather(city, date) -> weatherDetails"}, {"name": "WeatherEffectPrice", "Description": "This API calculates the potential effects of weather on flight prices.", "input_params": {"city": {"description": "the city for which weather effects on flight prices are to be calculated", "type": "String"}, "date": {"description": "the date for which weather effects on flight prices are to be calculated", "type": "Date"}, "original_price": {"description": "the original price of the flight", "type": "Float"}}, "output_params": {"adjustedPrice": {"description": "the potential adjusted price of the flight considering weather effects", "type": "Float"}}, "format": "WeatherEffectPrice(city, date, original_price) -> adjustedPrice"}, {"name": "ResturantNearCinema", "Description": "This API finds a restaurant near a specific cinema in a city.", "input_params": {"city": {"description": "the name of the city", "type": "String"}, "cinema_name": {"description": "the name of the cinema", "type": "String"}}, "output_params": {"restaurant": {"description": "the recommended restaurant", "type": "String"}}, "format": "ResturantNearCinema(city, cinema_name) -> restaurant"}, {"name": "TableBooking", "Description": "This API allows users to book a table in a specific restaurant at a specified time.", "input_params": {"restaurant_name": {"description": "the name of the restaurant", "type": "String"}, "time": {"description": "the time for table booking", "type": "Time"}}, "output_params": {"booking": {"description": "the booking status", "type": "String"}}, "format": "TableBooking(restaurant_name, time) -> booking"}, {"name": "HotelFinder", "Description": "This API finds all hotels in a particular city with the specified star rating.", "input_params": {"city": {"description": "the name of the city", "type": "String"}, "star_rating": {"description": "the star rating of the hotel", "type": "Integer"}}, "output_params": {"hotel_name": {"description": "the name of the hotel", "type": "String"}}, "format": "HotelFinder(city, star_rating) -> hotel_name"}, {"name": "RoomBooking", "Description": "This API books the specified number of rooms in the given hotel for the duration of stay.", "input_params": {"hotel_name": {"description": "the name of the hotel", "type": "String"}, "number_of_rooms": {"description": "the number of rooms to book", "type": "Integer"}, "check_in_date": {"description": "the check-in date", "type": "Date"}, "check_out_date": {"description": "the check-out date", "type": "Date"}}, "output_params": {"booking_confirmation": {"description": "the booking confirmation", "type": "String"}}, "format": "RoomBooking(hotel_name, number_of_rooms, check_in_date, check_out_date) -> booking_confirmation"}, {"name": "FlightBooking", "Description": "This API books a flight from the origin to the destination for the given dates.", "input_params": {"origin": {"description": "the origin of the flight", "type": "String"}, "destination": {"description": "the destination of the flight", "type": "String"}, "departure_date": {"description": "the departure date", "type": "Date"}, "return_date": {"description": "the return date", "type": "Date"}}, "output_params": {"flight_details": {"description": "the details of the flight", "type": "String"}}, "format": "FlightBooking(origin, destination, departure_date, return_date) -> flight_details"}, {"name": "BoatDetail", "Description": "This API is to query the location information of the boat.", "input_params": {"boat_id": {"description": "the ID of the boat", "type": "String"}}, "output_params": {"boat_location": {"description": "the location of the boat", "type": "String"}}, "format": "BoatDetail(boat_id) -> boat_location"}, {"name": "TideCheck", "Description": "This API is to check the tide status of a location.", "input_params": {"boat_location": {"description": "the location of the boat", "type": "String"}}, "output_params": {"tide_status": {"description": "the tide status of the location", "type": "String"}}, "format": "TideCheck(boat_location) -> tide_status"}, {"name": "BoatStatus", "Description": "This API is to check the status of the boat.", "input_params": {"boat_id": {"description": "the ID of the boat", "type": "String"}}, "output_params": {"status": {"description": "the status of the boat", "type": "String"}}, "format": "BoatStatus(boat_id) -> status"}, {"name": "CityDetail", "Description": "This API is to get the coordinates of a city.", "input_params": {"city_name": {"description": "the name of the city", "type": "String"}}, "output_params": {"city_coordinates": {"description": "the coordinates of the city", "type": "String"}}, "format": "CityDetail(city_name) -> city_coordinates"}, {"name": "PollutionCheck", "Description": "This API is to check the pollution index of a location.", "input_params": {"city_coordinates": {"description": "the coordinates of the city", "type": "String"}}, "output_params": {"pollution_index": {"description": "the pollution index of the location", "type": "Integer"}}, "format": "PollutionCheck(city_coordinates) -> pollution_index"}, {"name": "TrafficStatus", "Description": "This API is to check the traffic status in the city.", "input_params": {"city_name": {"description": "the name of the city", "type": "String"}}, "output_params": {"traffic_status": {"description": "the traffic status in the city", "type": "String"}}, "format": "TrafficStatus(city_name) -> traffic_status"}, {"name": "MovieSchedule", "Description": "This API is to get the schedule of a movie.", "input_params": {"movie_id": {"description": "the id of the movie", "type": "Integer"}}, "output_params": {"schedule": {"description": "the schedule of the movie", "type": "String"}}, "format": "MovieSchedule(movie_id) -> schedule"}, {"name": "ClosetCinema", "Description": "This API is to get the nearest cinema playing a movie at a given schedule.", "input_params": {"schedule": {"description": "the schedule of the movie", "type": "String"}}, "output_params": {"cinema_location": {"description": "the location of the nearest cinema", "type": "String"}}, "format": "ClosetCinema(schedule) -> cinema_location"}, {"name": "RestaurantReview", "Description": "This API is to provide the recent reviews of a specific restaurant.", "input_params": {"restaurant_name": {"description": "the name of the restaurant", "type": "String"}}, "output_params": {"review_report": {"description": "the recent reviews of the restaurant", "type": "String"}}, "format": "RestaurantReview(restaurant_name) -> review_report"}, {"name": "CuisineRecommendations", "Description": "This API provides cuisine recommendations based on the reviews and the dietary preferences of the user.", "input_params": {"review_report": {"description": "the recent reviews of the restaurant", "type": "String"}, "dietary_preferences": {"description": "the dietary preferences of the user", "type": "String"}}, "output_params": {"cuisine": {"description": "the recommended cuisine", "type": "String"}}, "format": "CuisineRecommendations(review_report, dietary_preferences) -> cuisine"}, {"name": "HotelBooking", "Description": "This API books a hotel in the specific location for the given dates.", "input_params": {"destination": {"description": "the destination city", "type": "String"}, "check_in_date": {"description": "the check-in date", "type": "Date"}, "check_out_date": {"description": "the check-out date", "type": "Date"}}, "output_params": {"hotel_booking": {"description": "the booking details of the hotel", "type": "Object"}}, "format": "HotelBooking(destination, check_in_date, check_out_date) -> hotel_booking"}, {"name": "ItineraryPlanner", "Description": "This API plans an itinerary based on the flight and hotel booking details.", "input_params": {"flight_details": {"description": "the details of available flights", "type": "List"}, "hotel_booking": {"description": "the booking details of the hotel", "type": "Object"}}, "output_params": {"itinerary": {"description": "the planned itinerary", "type": "Object"}}, "format": "ItineraryPlanner(flight_details, hotel_booking) -> itinerary"}, {"name": "FoodMenuQuery", "Description": "This API is used to find out the food menu of a specific restaurant.", "input_params": {"restaurant": {"description": "the name of the restaurant", "type": "String"}}, "output_params": {"food_menu": {"description": "the menu of the specified restaurant", "type": "String"}}, "format": "FoodMenuQuery(restaurant) -> food_menu"}, {"name": "RestaurantByLocation", "Description": "This API provides restaurant information in a specific location.", "input_params": {"location": {"description": "the location where the user is", "type": "String"}}, "output_params": {"restaurantData": {"description": "the data of restaurants in the specified location", "type": "JSON"}}, "format": "RestaurantByLocation(location) -> restaurantData"}, {"name": "CuisineByRestaurant", "Description": "This API provides information on the cuisine offered by specific restaurants.", "input_params": {"restaurantData": {"description": "the data of restaurants", "type": "JSON"}}, "output_params": {"cuisineData": {"description": "the data of cuisines offered by the restaurants", "type": "JSON"}}, "format": "CuisineByRestaurant(restaurantData) -> cuisineData"}, {"name": "FoodDelivery", "Description": "This API provides the estimated time of arrival for food delivery based on restaurant and cuisine details.", "input_params": {"cuisineData": {"description": "the data of cuisines", "type": "JSON"}}, "output_params": {"deliveryETA": {"description": "the estimated time of arrival for food delivery", "type": "Time"}}, "format": "FoodDelivery(cuisineData) -> deliveryETA"}, {"name": "RestaurantByname", "Description": "This API provides detailed information about a specific restaurant.", "input_params": {"restaurant_name": {"description": "the name of the restaurant", "type": "String"}}, "output_params": {"restaurant_info": {"description": "detailed information about the restaurant", "type": "Object"}}, "format": "RestaurantByname(restaurant_name) -> restaurant_info"}, {"name": "FoodByDietType", "Description": "This API provides a list of foods based on a specific diet type.", "input_params": {"diet_type": {"description": "the type of diet", "type": "String"}}, "output_params": {"food_list": {"description": "a list of foods based on the diet type", "type": "List"}}, "format": "FoodByDietType(diet_type) -> food_list"}, {"name": "BestOrder", "Description": "This API provides the best order suggestion based on the restaurant and diet type.", "input_params": {"restaurant_info": {"description": "detailed information about the restaurant", "type": "Object"}, "food_list": {"description": "a list of foods based on the diet type", "type": "List"}}, "output_params": {"order_info": {"description": "the best order suggestion", "type": "Object"}}, "format": "BestOrder(restaurant_info, food_list) -> order_info"}, {"name": "EventFinder", "Description": "This API provides information about events happening in a city on a certain date.", "input_params": {"city": {"description": "the name of the city", "type": "String"}, "date": {"description": "the date for the event search", "type": "String"}}, "output_params": {"events": {"description": "a list of events happening in the city on the specified date", "type": "List"}}, "format": "EventFinder(city, date) -> events"}, {"name": "TripAdvisor", "Description": "This API helps in advising your trip by combining weather, restaurants, and events information.", "input_params": {"weather": {"description": "the weather forecast for the city on the specified date", "type": "String"}, "restaurants": {"description": "a list of recommended restaurants in the city", "type": "List"}, "events": {"description": "a list of events happening in the city on the specified date", "type": "List"}}, "output_params": {"trip_advice": {"description": "advice for your trip based on the weather, restaurants, and events information", "type": "String"}}, "format": "TripAdvisor(weather, restaurants, events) -> trip_advice"}, {"name": "SearchMovie", "Description": "This API is to search a movie of a specified genre at a specific location.", "input_params": {"genre": {"description": "the genre of the movie", "type": "String"}, "location": {"description": "the location where the movie is searched", "type": "String"}}, "output_params": {"movie_details": {"description": "the details of the movie", "type": "String"}}, "format": "SearchMovie(genre, location) -> movie_details"}, {"name": "CheckShowtimes", "Description": "This API is to check the showtimes for a specified movie on a certain date.", "input_params": {"movie_name": {"description": "the name of the movie", "type": "String"}, "date": {"description": "the date for which showtimes are checked", "type": "String"}}, "output_params": {"showtime_details": {"description": "the details of the showtimes", "type": "String"}}, "format": "CheckShowtimes(movie_name, date) -> showtime_details"}, {"name": "BookTickets", "Description": "This API is to book a specified number of tickets for a movie at a certain showtime.", "input_params": {"movie_name": {"description": "the name of the movie", "type": "String"}, "showtime": {"description": "the showtime for which tickets are booked", "type": "String"}, "number_of_tickets": {"description": "the number of tickets to be booked", "type": "Integer"}}, "output_params": {"booking_status": {"description": "the status of the booking", "type": "String"}}, "format": "BookTickets(movie_name, showtime, number_of_tickets) -> booking_status"}, {"name": "FindEventCity", "Description": "This API is to find the city where a specific event will take place.", "input_params": {"event_name": {"description": "the name of the event", "type": "String"}}, "output_params": {"city name": {"description": "the name of the city where the event will take place", "type": "String"}}, "format": "FindEventCity(event_name) -> city name"}, {"name": "FindEventDate", "Description": "This API is to find the date when a specific event will take place.", "input_params": {"event_name": {"description": "the name of the event", "type": "String"}}, "output_params": {"date": {"description": "the date when the event will take place", "type": "Date"}}, "format": "FindEventDate(event_name) -> date"}, {"name": "FindRoomType", "Description": "This API is used to find suitable room type in a hotel for specific number of guests.", "input_params": {"hotelname": {"description": "the name of the hotel", "type": "String"}, "guestNumber": {"description": "the number of guests", "type": "Integer"}}, "output_params": {"room type": {"description": "the type of the hotel room", "type": "String"}}, "format": "FindRoomType(hotelname, guestNumber) -> room type"}, {"name": "CreateAppointment", "Description": "This API is used to create an appointment with a specific doctor for a specific patient at a certain date and time.", "input_params": {"doctorId": {"description": "the ID of the doctor", "type": "Integer"}, "patientId": {"description": "the ID of the patient", "type": "Integer"}, "date": {"description": "the date of the appointment", "type": "String"}, "time": {"description": "the time of the appointment", "type": "String"}}, "output_params": {"appointment status": {"description": "the status of the appointment", "type": "String"}}, "format": "CreateAppointment(doctorId, patientId, date, time) -> appointment status"}, {"name": "FindPatient", "Description": "This API is used to find a patient based on patient name.", "input_params": {"patientname": {"description": "the name of the patient", "type": "String"}}, "output_params": {"patient id": {"description": "the ID of the patient", "type": "Integer"}}, "format": "FindPatient(patientname) -> patient id"}, {"name": "GetLunchRecommendation", "Description": "This API is to get lunch recommendation based on the weather.", "input_params": {"weather_info": {"description": "the weather information", "type": "String"}}, "output_params": {"food_recommendation": {"description": "the lunch recommendation", "type": "String"}}, "format": "GetLunchRecommendation(weather_info) -> food_recommendation"}, {"name": "FindShowtime", "Description": "This API is to find the showtime for a specific movie in a given location on a specific date.", "input_params": {"movie_name": {"description": "the name of the movie", "type": "String"}, "location": {"description": "the location where the movie is available", "type": "String"}, "date": {"description": "the date for which the showtime is required", "type": "String"}}, "output_params": {"showtime": {"description": "the showtime of the movie", "type": "String"}}, "format": "FindShowtime(movie_name, location, date) -> showtime"}, {"name": "BookMovieTicket", "Description": "This API is to book movie tickets for a specific movie at a specific showtime.", "input_params": {"movie_name": {"description": "the name of the movie", "type": "String"}, "showtime": {"description": "the showtime of the movie", "type": "String"}, "number_of_tickets": {"description": "the number of tickets to be booked", "type": "Integer"}}, "output_params": {"booking confirmation": {"description": "the confirmation of the booking", "type": "String"}}, "format": "BookMovieTicket(movie_name, showtime, number_of_tickets) -> booking confirmation"}, {"name": "FetchUserDetails", "Description": "This API is to fetch user details based on the user_id.", "input_params": {"user_id": {"description": "the ID of the user", "type": "String"}}, "output_params": {"user_details": {"description": "the details of the user", "type": "Object"}}, "format": "FetchUserDetails(user_id) -> user_details"}, {"name": "GenerateOrderSummary", "Description": "This API is to generate a summary of the order using the order_id.", "input_params": {"order_id": {"description": "the ID of the order", "type": "String"}}, "output_params": {"order_summary": {"description": "the summary of the order", "type": "Object"}}, "format": "GenerateOrderSummary(order_id) -> order_summary"}, {"name": "EmailUser", "Description": "This API is to send an email to a user.", "input_params": {"user_details": {"description": "the details of the user", "type": "Object"}, "message": {"description": "the message to be sent", "type": "String"}}, "output_params": {"email_status": {"description": "the status of the email", "type": "String"}}, "format": "EmailUser(user_details, message) -> email_status"}, {"name": "FoodOrder", "Description": "This API is to order food.", "input_params": {"user_ID": {"description": "the ID of the user", "type": "Integer"}, "restaurant_ID": {"description": "the ID of the restaurant", "type": "Integer"}, "food_item": {"description": "the name of the food item", "type": "String"}}, "output_params": {"order_status": {"description": "the status of the food order", "type": "String"}}, "format": "FoodOrder(user_ID, restaurant_ID, food_item) -> order_status"}, {"name": "Bookname2ISBN", "Description": "This API is to convert book name to book ISBN.", "input_params": {"book_name": {"description": "the name of the book", "type": "String"}}, "output_params": {"isbn": {"description": "the ISBN of the book", "type": "String"}}, "format": "Bookname2ISBN(book_name) -> isbn"}, {"name": "Library2ID", "Description": "This API is to convert library name to library ID.", "input_params": {"library_name": {"description": "the name of the library", "type": "String"}}, "output_params": {"library_id": {"description": "the ID of the library", "type": "Integer"}}, "format": "Library2ID(library_name) -> library_id"}, {"name": "Storename2ID", "Description": "This API is to convert store name to store ID.", "input_params": {"store_name": {"description": "the name of the store", "type": "String"}}, "output_params": {"store_ID": {"description": "the ID of the store", "type": "Integer"}}, "format": "Storename2ID(store_name) -> store_ID"}, {"name": "AddProductToStore", "Description": "This API is to add a product to a store.", "input_params": {"product_ID": {"description": "the ID of the product", "type": "Integer"}, "store_ID": {"description": "the ID of the store", "type": "Integer"}, "quantity": {"description": "the quantity of the product to add", "type": "Integer"}}, "output_params": {"status": {"description": "the status of the operation", "type": "String"}}, "format": "AddProductToStore(product_ID, store_ID, quantity) -> status"}, {"name": "BookTitle2ISBN", "Description": "This API is to convert book title to book ISBN.", "input_params": {"book_title": {"description": "the title of the book", "type": "String"}}, "output_params": {"ISBN": {"description": "the ISBN of the book", "type": "String"}}, "format": "BookTitle2ISBN(book_title) -> ISBN"}, {"name": "BuyBook", "Description": "This API is to purchase a book for a user.", "input_params": {"user_ID": {"description": "the ID of the user", "type": "String"}, "ISBN": {"description": "the ISBN of the book", "type": "String"}}, "output_params": {"purchase_status": {"description": "the status of the purchase", "type": "String"}}, "format": "BuyBook(user_ID, ISBN) -> purchase_status"}, {"name": "Recipename2ID", "Description": "This API is to convert recipe name to recipe ID.", "input_params": {"recipe_name": {"description": "the name of the recipe", "type": "String"}}, "output_params": {"recipe_ID": {"description": "the ID of the recipe", "type": "Integer"}}, "format": "Recipename2ID(recipe_name) -> recipe_ID"}, {"name": "Ingredientname2ID", "Description": "This API is to convert ingredient name to ingredient ID.", "input_params": {"ingredient_name": {"description": "the name of the ingredient", "type": "String"}}, "output_params": {"ingredient_ID": {"description": "the ID of the ingredient", "type": "Integer"}}, "format": "Ingredientname2ID(ingredient_name) -> ingredient_ID"}, {"name": "GetRecipe", "Description": "This API is to get a recipe.", "input_params": {"recipe_ID": {"description": "the ID of the recipe", "type": "Integer"}, "ingredient_ID": {"description": "the ID of the ingredient", "type": "Integer"}}, "output_params": {"recipe": {"description": "the recipe details", "type": "String"}}, "format": "GetRecipe(Recipe_ID, Ingredient_ID) -> recipe"}, {"name": "LocateBook", "Description": "This API is to locate a book in the library.", "input_params": {"book_ID": {"description": "the ID of the book", "type": "Integer"}, "author_ID": {"description": "the ID of the author", "type": "Integer"}}, "output_params": {"location": {"description": "the location of the book in the library", "type": "String"}}, "format": "LocateBook(Book_ID, Author_ID) -> location"}, {"name": "CuisineType2ID", "Description": "This API is to convert cuisine type to cuisine ID.", "input_params": {"cuisine_type": {"description": "the type of cuisine", "type": "String"}}, "output_params": {"Cuisine_ID": {"description": "the ID of the cuisine", "type": "Integer"}}, "format": "CuisineType2ID(cuisine_type) -> Cuisine_ID"}, {"name": "UserEmail2UserId", "Description": "This API is to convert user email to user ID.", "input_params": {"user_email": {"description": "the email of the user", "type": "String"}}, "output_params": {"user_id": {"description": "the ID of the user", "type": "Integer"}}, "format": "UserEmail2UserId(user_email) -> user_id"}, {"name": "MovieTitle2MovieId", "Description": "This API is to convert movie title to movie ID.", "input_params": {"movie_title": {"description": "the title of the movie", "type": "String"}}, "output_params": {"movie_id": {"description": "the ID of the movie", "type": "Integer"}}, "format": "MovieTitle2MovieId(movie_title) -> movie_id"}, {"name": "GetUserIDByUser", "Description": "This API is to convert user name to user ID.", "input_params": {"user_name": {"description": "the name of the user", "type": "String"}}, "output_params": {"user_ID": {"description": "the ID of the user", "type": "Integer"}}, "format": "GetUserIDByUser(user_name) -> user_ID"}, {"name": "GetBookIDByTitle", "Description": "This API is to convert book title to book ID.", "input_params": {"book_title": {"description": "the title of the book", "type": "String"}}, "output_params": {"book_ID": {"description": "the ID of the book", "type": "Integer"}}, "format": "GetBookIDByTitle(book_title) -> book_ID"}, {"name": "RecommendBookByGenre", "Description": "This API is to recommend a book based on genre.", "input_params": {"user_ID": {"description": "the ID of the user", "type": "Integer"}, "genre": {"description": "the genre of the book", "type": "String"}}, "output_params": {"recommended_book": {"description": "the recommended book", "type": "String"}}, "format": "RecommendBookByGenre(user_ID, genre) -> recommended_book"}, {"name": "GetUserFavouriteGenre", "Description": "This API is to get the favourite genre of a user.", "input_params": {"user_ID": {"description": "the ID of the user", "type": "Integer"}}, "output_params": {"genre": {"description": "the favourite genre of the user", "type": "String"}}, "format": "GetUserFavouriteGenre(user_ID) -> genre"}, {"name": "FindMovieByGenre", "Description": "This API is to find a movie by genre.", "input_params": {"genre": {"description": "the genre of the movie", "type": "String"}}, "output_params": {"movie_ID": {"description": "the ID of the movie", "type": "Integer"}}, "format": "FindMovieByGenre(genre) -> movie_ID"}, {"name": "GetUserCar", "Description": "This API is to get the car ID of a user.", "input_params": {"user_name": {"description": "the name of the user", "type": "String"}}, "output_params": {"car_id": {"description": "the ID of the user's car", "type": "Integer"}}, "format": "GetUserCar(user_name) -> car_id"}, {"name": "GetServiceStationNearMe", "Description": "This API is to get the nearest service station based on user location.", "input_params": {"user_location": {"description": "the location of the user", "type": "String"}}, "output_params": {"service_station_id": {"description": "the ID of the nearest service station", "type": "Integer"}}, "format": "GetServiceStationNearMe(user_location) -> service_station_id"}, {"name": "BookCarService", "Description": "This API is to book a car service at a service station.", "input_params": {"car_id": {"description": "the ID of the car", "type": "Integer"}, "service_station_id": {"description": "the ID of the service station", "type": "Integer"}, "user_name": {"description": "the name of the user", "type": "String"}}, "output_params": {"booking_status": {"description": "the status of the booking", "type": "String"}}, "format": "BookCarService(car_id, service_station_id, user_name) -> booking_status"}, {"name": "Favoritename2ID", "Description": "This API is to convert favorite name to favorite ID.", "input_params": {"favorite_name": {"description": "the name of the favorite list", "type": "String"}}, "output_params": {"favorite_ID": {"description": "the ID of the favorite list", "type": "Integer"}}, "format": "Favoritename2ID(favorite_name) -> favorite_ID"}, {"name": "AddMovieToFavorites", "Description": "This API is to add a movie to a favorite list.", "input_params": {"favorite_ID": {"description": "the ID of the favorite list", "type": "Integer"}, "movie_ID": {"description": "the ID of the movie", "type": "Integer"}}, "output_params": {"status": {"description": "the status of adding the movie to the favorite list", "type": "String"}}, "format": "AddMovieToFavorites(favorite_ID, movie_ID) -> status"}, {"name": "ReadingListname2ID", "Description": "This API is to convert reading list name to reading list ID.", "input_params": {"readinglist_name": {"description": "the name of the reading list", "type": "String"}}, "output_params": {"readinglist_ID": {"description": "the ID of the reading list", "type": "Integer"}}, "format": "ReadingListname2ID(readinglist_name) -> readinglist_ID"}, {"name": "GetDueDate", "Description": "This API is to get the due date of a book.", "input_params": {"user_ID": {"description": "the ID of the user", "type": "Integer"}, "book_ID": {"description": "the ID of the book", "type": "Integer"}}, "output_params": {"due_date": {"description": "the due date of the book", "type": "Date"}}, "format": "GetDueDate(user_ID, book_ID) -> due_date"}, {"name": "UserIdToname", "Description": "This API is to convert user ID to user name.", "input_params": {"userId": {"description": "the ID of the user", "type": "Integer"}}, "output_params": {"user_name": {"description": "the name of the user", "type": "String"}}, "format": "UserIdToname(userId) -> user_name"}, {"name": "RouteToLocation", "Description": "This API is to convert route name to location coordinates.", "input_params": {"route": {"description": "the name of the bus route", "type": "String"}}, "output_params": {"location_coordinates": {"description": "the coordinates of the bus route location", "type": "String"}}, "format": "RouteToLocation(route) -> location_coordinates"}, {"name": "CheckBusSchedule", "Description": "This API is to check the bus schedule.", "input_params": {"location_coordinates": {"description": "the coordinates of the bus route location", "type": "String"}, "date": {"description": "the date of the bus schedule", "type": "Date"}, "time": {"description": "the time of the bus schedule", "type": "Time"}}, "output_params": {"bus_schedule_info": {"description": "the information of the bus schedule", "type": "String"}}, "format": "CheckBusSchedule(location_coordinates, date, time) -> bus_schedule_info"}, {"name": "BookBusSeat", "Description": "This API is to book a bus seat.", "input_params": {"user_name": {"description": "the name of the user", "type": "String"}, "bus_schedule_info": {"description": "the information of the bus schedule", "type": "String"}}, "output_params": {"booking_status": {"description": "the status of the booking", "type": "String"}}, "format": "BookBusSeat(user_name, bus_schedule_info) -> booking_status"}, {"name": "Address2Coordinates", "Description": "This API is to convert address to coordinates.", "input_params": {"address": {"description": "the address of the location", "type": "String"}}, "output_params": {"coordinates": {"description": "the coordinates of the location", "type": "String"}}, "format": "Address2Coordinates(address) -> coordinates"}, {"name": "Libraryname2ID", "Description": "This API is to convert library name to library ID.", "input_params": {"library_name": {"description": "the name of the library", "type": "String"}}, "output_params": {"library_ID": {"description": "the ID of the library", "type": "Integer"}}, "format": "Libraryname2ID(library_name) -> library_ID"}, {"name": "RecommendAttire", "Description": "This API is to recommend attire based on the weather.", "input_params": {"weather": {"description": "the weather information", "type": "String"}}, "output_params": {"attire": {"description": "the recommended attire", "type": "String"}}, "format": "RecommendAttire(weather) -> attire"}, {"name": "ActorExtractor", "Description": "This API is to extract the actor name from the movie ID.", "input_params": {"movie_id": {"description": "the ID of the movie", "type": "String"}}, "output_params": {"actor_name": {"description": "the name of the actor", "type": "String"}}, "format": "ActorExtractor(movie_id) -> actor_name"}, {"name": "MovieDatabase", "Description": "This API is to retrieve the movie information based on the title and year.", "input_params": {"title": {"description": "the title of the movie", "type": "String"}, "year": {"description": "the year of the movie", "type": "Integer"}}, "output_params": {"movie_id": {"description": "the ID of the movie", "type": "String"}}, "format": "MovieDatabase(title, year) -> movie_id"}, {"name": "MovieRatingChecker", "Description": "This API is to check the rating of a movie.", "input_params": {"actor_name": {"description": "the name of the actor", "type": "String"}, "movie_id": {"description": "the ID of the movie", "type": "String"}}, "output_params": {"rating": {"description": "the rating of the movie", "type": "Float"}}, "format": "MovieRatingChecker(actor_name, movie_id) -> rating"}, {"name": "GetLocalTheater", "Description": "This API is to get the nearest theater in a specific city.", "input_params": {"city": {"description": "the name of the city", "type": "String"}}, "output_params": {"theater_name": {"description": "the name of the theater", "type": "String"}}, "format": "GetLocalTheater(city) -> theater_name"}, {"name": "GetCurrentPlays", "Description": "This API is to get the currently performed plays at a specific theater.", "input_params": {"theater_name": {"description": "the name of the theater", "type": "String"}}, "output_params": {"play_name": {"description": "the name of the play", "type": "String"}}, "format": "GetCurrentPlays(theater_name) -> play_name"}, {"name": "GetPlayReviews", "Description": "This API is to get the reviews for a specific play.", "input_params": {"play_name": {"description": "the name of the play", "type": "String"}}, "output_params": {"reviews": {"description": "the reviews for the play", "type": "List"}}, "format": "GetPlayReviews(play_name) -> reviews"}, {"name": "GetLocalMusicStore", "Description": "This API is to get the nearest music store in a specific city.", "input_params": {"city": {"description": "the name of the city", "type": "String"}}, "output_params": {"store_name": {"description": "the name of the music store", "type": "String"}}, "format": "GetLocalMusicStore(city) -> store_name"}, {"name": "GetCurrentAlbums", "Description": "This API is to get the currently playing albums at a music store.", "input_params": {"store_name": {"description": "the name of the music store", "type": "String"}}, "output_params": {"album_name": {"description": "the name of the album", "type": "String"}}, "format": "GetCurrentAlbums(store_name) -> album_name"}, {"name": "GetAlbumReviews", "Description": "This API is to get the reviews for a specific album.", "input_params": {"album_name": {"description": "the name of the album", "type": "String"}}, "output_params": {"reviews": {"description": "the reviews for the album", "type": "List of Strings"}}, "format": "GetAlbumReviews(album_name) -> reviews"}, {"name": "GetLocalMuseum", "Description": "This API is to get the local museum in a specific city.", "input_params": {"city": {"description": "the name of the city", "type": "String"}}, "output_params": {"museum_name": {"description": "the name of the museum", "type": "String"}}, "format": "GetLocalMuseum(city) -> museum_name"}, {"name": "GetCurrentExhibitions", "Description": "This API is to get the current exhibitions being showcased at a museum.", "input_params": {"museum_name": {"description": "the name of the museum", "type": "String"}}, "output_params": {"exhibition_name": {"description": "the name of the exhibition", "type": "String"}}, "format": "GetCurrentExhibitions(museum_name) -> exhibition_name"}, {"name": "GetExhibitionReviews", "Description": "This API is to get the reviews for a specific exhibition.", "input_params": {"exhibition_name": {"description": "the name of the exhibition", "type": "String"}}, "output_params": {"reviews": {"description": "the reviews for the exhibition", "type": "List of Strings"}}, "format": "GetExhibitionReviews(exhibition_name) -> reviews"}, {"name": "CheckLibraryAvailability", "Description": "This API is to check the availability of a book in the library.", "input_params": {"bookDetails": {"description": "the details of the book", "type": "Object"}}, "output_params": {"libraryStatus": {"description": "the availability status of the book in the library", "type": "String"}}, "format": "CheckLibraryAvailability(bookDetails) -> libraryStatus"}, {"name": "FetchParts", "Description": "This API is to fetch parts for a specific item.", "input_params": {"item": {"description": "the item for which parts need to be fetched", "type": "String"}}, "output_params": {"parts": {"description": "a list of parts for the specified item", "type": "List"}}, "format": "FetchParts(item) -> parts"}, {"name": "FindElectronicsStores", "Description": "This API is to find electronics stores in a specific location.", "input_params": {"location": {"description": "the location for which electronics stores need to be found", "type": "String"}}, "output_params": {"stores": {"description": "a list of electronics stores in the specified location", "type": "List"}}, "format": "FindElectronicsStores(location) -> stores"}, {"name": "FetchComponents", "Description": "This API is to fetch components for a bicycle.", "input_params": {"product": {"description": "the name of the product", "type": "String"}}, "output_params": {"components": {"description": "a list of components for the product", "type": "List"}}, "format": "FetchComponents(product) -> components"}, {"name": "FindSportingGoodsStores", "Description": "This API is to find sporting goods stores in a specific location.", "input_params": {"location": {"description": "the location to search for sporting goods stores", "type": "String"}}, "output_params": {"stores": {"description": "a list of sporting goods stores in the location", "type": "List"}}, "format": "FindSportingGoodsStores(location) -> stores"}, {"name": "FetchBooks", "Description": "This API is to fetch books based on a specific course.", "input_params": {"course_name": {"description": "the name of the course", "type": "String"}}, "output_params": {"books": {"description": "a list of books related to the course", "type": "List"}}, "format": "FetchBooks(course_name) -> books"}, {"name": "FindBookStores", "Description": "This API is to find bookstores in a specific location.", "input_params": {"location": {"description": "the location to search for bookstores", "type": "String"}}, "output_params": {"bookstores": {"description": "a list of bookstores in the location", "type": "List"}}, "format": "FindBookStores(location) -> bookstores"}, {"name": "FetchSupplies", "Description": "This API is to fetch supplies for a specific class.", "input_params": {"class_name": {"description": "the name of the class", "type": "String"}}, "output_params": {"supplies_list": {"description": "a list of supplies for the class", "type": "List"}}, "format": "FetchSupplies(class_name) -> supplies_list"}, {"name": "FindArtSuppliesStores", "Description": "This API is to find art supplies stores in a specific location.", "input_params": {"location": {"description": "the location to search for art supplies stores", "type": "String"}}, "output_params": {"store_list": {"description": "a list of art supplies stores in the location", "type": "List"}}, "format": "FindArtSuppliesStores(location) -> store_list"}, {"name": "ProductSearch", "Description": "This API is to search for a product by its name.", "input_params": {"product_name": {"description": "the name of the product", "type": "String"}}, "output_params": {"product_id": {"description": "the ID of the product", "type": "Integer"}}, "format": "ProductSearch(product_name) -> product_id"}, {"name": "ProductReviews", "Description": "This API is to get the reviews of a product.", "input_params": {"product_id": {"description": "the ID of the product", "type": "Integer"}}, "output_params": {"review_scores": {"description": "the scores of the reviews", "type": "List of Float"}}, "format": "ProductReviews(product_id) -> review_scores"}, {"name": "ReviewAverage", "Description": "This API is to calculate the average review score.", "input_params": {"review_scores": {"description": "the scores of the reviews", "type": "List of Float"}}, "output_params": {"average_score": {"description": "the average review score", "type": "Float"}}, "format": "ReviewAverage(review_scores) -> average_score"}, {"name": "AverageRating", "Description": "This API is to calculate the average rating of a movie.", "input_params": {"ratingScores": {"description": "the ratings of the movie", "type": "List of Float"}}, "output_params": {"average_rating": {"description": "the average rating of the movie", "type": "Float"}}, "format": "AverageRating(ratingScores) -> average_rating"}, {"name": "AverageReview", "Description": "This API is to calculate the average review score.", "input_params": {"reviewScores": {"description": "the review scores for the product", "type": "List of Float"}}, "output_params": {"averageReview": {"description": "the average review score", "type": "Float"}}, "format": "AverageReview(reviewScores) -> averageReview"}, {"name": "FoodFestival", "Description": "This API is to get the food festivals currently open in parks in a specific city.", "input_params": {"park": {"description": "the name of the park", "type": "String"}}, "output_params": {"food_festivals": {"description": "a list of food festivals", "type": "List"}}, "format": "FoodFestival(park)"}, {"name": "OpenParks", "Description": "This API is to get the list of open parks in a specific city at the current time.", "input_params": {"city": {"description": "the name of the city", "type": "String"}, "time": {"description": "the current time", "type": "Time"}}, "output_params": {"open_parks": {"description": "a list of open parks", "type": "List"}}, "format": "OpenParks(city, time)"}, {"name": "TheatrePlay", "Description": "This API is to get the theatre plays currently showing in theatres in a specific city.", "input_params": {"theatre": {"description": "the name of the theatre", "type": "String"}}, "output_params": {"theatre_plays": {"description": "a list of theatre plays", "type": "List"}}, "format": "TheatrePlay(theatre)"}, {"name": "OpenTheatres", "Description": "This API is to get the list of open theatres in a specific city at the current time.", "input_params": {"city": {"description": "the name of the city", "type": "String"}, "time": {"description": "the current time", "type": "Time"}}, "output_params": {"open_theatres": {"description": "a list of open theatres", "type": "List"}}, "format": "OpenTheatres(city, time)"}, {"name": "TrainSchedule", "Description": "This API is to get the train schedule from source to destination on a specific date.", "input_params": {"source": {"description": "the source city", "type": "String"}, "destination": {"description": "the destination city", "type": "String"}, "date": {"description": "the date of travel", "type": "Date"}}, "output_params": {"train_details": {"description": "the details of the train schedule", "type": "Object"}}, "format": "TrainSchedule(source, destination, date) -> train_details"}, {"name": "PackageBooking", "Description": "This API is to book a package including train and hotel for a specific number of people.", "input_params": {"trainDetails": {"description": "the details of the train schedule", "type": "Object"}, "hotelDetails": {"description": "the details of the available hotels", "type": "Object"}, "num_of_people": {"description": "the number of people for the package", "type": "Integer"}}, "output_params": {"booking_status": {"description": "the status of the package booking", "type": "String"}}, "format": "PackageBooking(trainDetails, hotelDetails, num_of_people) -> booking_status"}, {"name": "WeatherInquiry", "Description": "This API is to inquire about the weather in a specific location on a specific date.", "input_params": {"location": {"description": "the location to inquire about the weather", "type": "String"}, "date": {"description": "the date to inquire about the weather", "type": "Date"}}, "output_params": {"weather_info": {"description": "the weather information for the specified location and date", "type": "String"}}, "format": "WeatherInquiry(location, date) -> weather_info"}, {"name": "RestaurantSelection", "Description": "This API is to select a restaurant based on cuisine and location.", "input_params": {"cuisine": {"description": "the cuisine type to search for", "type": "String"}, "location": {"description": "the location to search for the restaurant", "type": "String"}}, "output_params": {"restaurant_details": {"description": "the details of the selected restaurant", "type": "Object"}}, "format": "RestaurantSelection(cuisine, location) -> restaurant_details"}, {"name": "WeatherVerification", "Description": "This API is to verify the weather in a specific location on a specific date.", "input_params": {"location": {"description": "the location to verify the weather", "type": "String"}, "date": {"description": "the date to verify the weather", "type": "Date"}}, "output_params": {"weather_status": {"description": "the status of the weather", "type": "String"}}, "format": "WeatherVerification(location, date) -> weather_status"}, {"name": "DinnerReservation", "Description": "This API is to book a table for dinner.", "input_params": {"restaurant": {"description": "the recommended restaurant", "type": "String"}, "time": {"description": "the reservation time", "type": "Time"}}, "output_params": {"reservation_status": {"description": "the status of the reservation", "type": "String"}}, "format": "DinnerReservation(restaurant, time) -> reservation_status"}, {"name": "UserEmailRetriever", "Description": "This API is to retrieve the email of a user based on their username.", "input_params": {"username": {"description": "the username of the user", "type": "String"}}, "output_params": {"userEmail": {"description": "the email of the user", "type": "String"}}, "format": "UserEmailRetriever(username) -> userEmail"}, {"name": "EmailCompose", "Description": "This API is to compose an email with a subject and body.", "input_params": {"userEmail": {"description": "the email of the user", "type": "String"}, "subject": {"description": "the subject of the email", "type": "String"}, "body": {"description": "the body of the email", "type": "String"}}, "output_params": {"email": {"description": "the composed email", "type": "Email"}}, "format": "EmailCompose(userEmail, subject, body) -> email"}, {"name": "EmailSender", "Description": "This API is to send an email to a user.", "input_params": {"email": {"description": "the email to be sent", "type": "Email"}}, "output_params": {"status": {"description": "the status of the email sending", "type": "String"}}, "format": "EmailSender(email) -> status"}, {"name": "FindTransport", "Description": "This API is to find the optimal way to get to a destination from a bus station.", "input_params": {"BusStation": {"description": "the name of the bus station", "type": "String"}, "Destination": {"description": "the destination to be reached", "type": "API: RestaurantFinder"}}, "output_params": {"Transportation": {"description": "the optimal transportation method to reach the destination", "type": "String"}}, "format": "FindTransport(BusStation, Destination) -> Transportation"}, {"name": "RestaurantFinder", "Description": "This API is to find a restaurant based on the city name and cuisine type.", "input_params": {"Cityname": {"description": "the name of the city", "type": "String"}, "CuisineType": {"description": "the type of cuisine", "type": "String"}}, "output_params": {"Restaurantname": {"description": "the name of the restaurant", "type": "String"}}, "format": "RestaurantFinder(Cityname, CuisineType) -> Restaurantname"}, {"name": "CinemaLocation", "Description": "This API is to convert city name to cinema location.", "input_params": {"Cityname": {"description": "the name of the city", "type": "String"}, "ShowTime": {"description": "the showtime of the movie", "type": "Time"}}, "output_params": {"Cinemaname": {"description": "the name of the cinema", "type": "String"}}, "format": "CinemaLocation(Cityname, ShowTime) -> Cinemaname"}, {"name": "FetchMovie", "Description": "This API is to fetch movie details.", "input_params": {"Moviename": {"description": "the name of the movie", "type": "String"}}, "output_params": {"ShowTime": {"description": "the showtime of the movie", "type": "Time"}}, "format": "FetchMovie(Moviename) -> ShowTime"}, {"name": "FindNutritionalInfo", "Description": "This API is to find the nutritional information for menu items.", "input_params": {"MenuItems": {"description": "the list of menu items", "type": "List"}}, "output_params": {"NutritionalInfo": {"description": "the nutritional information for the menu items", "type": "Dictionary"}}, "format": "FindNutritionalInfo(MenuItems='MenuItems') -> NutritionalInfo"}, {"name": "FindClothingType", "Description": "This API is to find the appropriate clothing type based on the weather condition.", "input_params": {"weather_condition": {"description": "the current weather condition", "type": "String"}}, "output_params": {"clothing_type": {"description": "the recommended clothing type", "type": "String"}}, "format": "FindClothingType(WeatherCondition) -> clothing_type"}, {"name": "FindStore", "Description": "This API is to find the stores where the clothing type can be purchased.", "input_params": {"ClothingType": {"description": "the recommended clothing type", "type": "String"}, "location": {"description": "the name of the location", "type": "String"}}, "output_params": {"store_list": {"description": "a list of stores where the clothing type can be purchased", "type": "List"}}, "format": "FindStore(ClothingType, location) -> store_list"}, {"name": "GetShoppingSites", "Description": "This API is to get the shopping sites where clothing can be purchased.", "input_params": {"ClothesList": {"description": "the list of recommended clothing", "type": "List"}}, "output_params": {"ShoppingSites": {"description": "the list of shopping sites", "type": "List"}}, "format": "GetShoppingSites(ClothesList)"}, {"name": "GetIngredientsList", "Description": "This API is to get the list of ingredients for a specific recipe.", "input_params": {"Recipe": {"description": "the recipe for the dish", "type": "String"}}, "output_params": {"IngredientsList": {"description": "the list of ingredients for the recipe", "type": "List"}}, "format": "GetIngredientsList(Recipe)"}, {"name": "GetGroceryStores", "Description": "This API is to get the nearest grocery stores where ingredients can be found.", "input_params": {"IngredientsList": {"description": "the list of ingredients", "type": "List"}}, "output_params": {"GroceryStores": {"description": "the nearest grocery stores", "type": "List"}}, "format": "GetGroceryStores(IngredientsList)"}, {"name": "GetBookDetails", "Description": "This API is to get the details of a book by its ID.", "input_params": {"BookID": {"description": "the ID of the book", "type": "Integer"}}, "output_params": {"BookDetails": {"description": "the details of the book", "type": "String"}}, "format": "GetBookDetails(BookID) -> BookDetails"}, {"name": "ConvertToAudio", "Description": "This API is to convert book details to audio in a specific language.", "input_params": {"BookDetails": {"description": "the details of the book", "type": "String"}, "Language": {"description": "the language to convert the audio to", "type": "String"}}, "output_params": {"AudioFile": {"description": "the audio file of the book details in the specified language", "type": "File"}}, "format": "ConvertToAudio(BookDetails, Language) -> AudioFile"}, {"name": "ReserveAirportTransport", "Description": "This API is to reserve airport transportation based on flight details and hotel confirmation.", "input_params": {"flightDetails": {"description": "the details of the flight", "type": "String"}, "hotelConfirmation": {"description": "the confirmation details of the hotel reservation", "type": "String"}}, "output_params": {"reservation_confirmation": {"description": "the confirmation details of the airport transportation reservation", "type": "String"}}, "format": "ReserveAirportTransport(flightDetails, hotelConfirmation) -> reservation_confirmation"}, {"name": "BookReviews", "Description": "This API is to book reviews for a book.", "input_params": {"author_info": {"description": "the information of the author", "type": "AuthorInfo"}, "num_of_reviews": {"description": "the number of reviews needed", "type": "Integer"}}, "output_params": {"reviews": {"description": "a list of reviews", "type": "List"}}, "format": "BookReviews(author_info, num_of_reviews) -> reviews"}, {"name": "AuthorInfo", "Description": "This API is to get the information of an author.", "input_params": {"book_details": {"description": "the details of the book", "type": "BookSearch"}}, "output_params": {"author_info": {"description": "the information of the author", "type": "Author"}}, "format": "AuthorInfo(book_details) -> author_info"}, {"name": "TripPlan", "Description": "This API is to organize a travel itinerary for a trip.", "input_params": {"city": {"description": "the city of the trip", "type": "String"}, "hotel": {"description": "the information of the hotel", "type": "HotelInfo"}, "location": {"description": "the location of the restaurant", "type": "RestaurantLocation"}}, "output_params": {"itinerary": {"description": "the travel itinerary", "type": "String"}}, "format": "TripPlan(city, hotel, location) -> itinerary"}, {"name": "HotelInfo", "Description": "This API is to get information about a top-rated hotel in a city.", "input_params": {"city": {"description": "the city of the hotel", "type": "String"}}, "output_params": {"hotel_info": {"description": "the information of the hotel", "type": "String"}}, "format": "HotelInfo(city) -> hotel_info"}, {"name": "RestaurantLocation", "Description": "This API is to get the location of a renowned restaurant in a city.", "input_params": {"city": {"description": "the city of the restaurant", "type": "String"}}, "output_params": {"restaurant_location": {"description": "the location of the restaurant", "type": "String"}}, "format": "RestaurantLocation(city) -> restaurant_location"}, {"name": "GetCityByZip", "Description": "This API retrieves the city given a zip code.", "input_params": {"zip_code": {"description": "the zip code", "type": "String"}}, "output_params": {"city": {"description": "the city corresponding to the zip code", "type": "String"}}, "format": "GetCityByZip(zip_code) -> city"}, {"name": "GetOutfitStore", "Description": "This API finds stores in a given city where the recommended outfit can be purchased.", "input_params": {"city": {"description": "the city for which stores are to be found", "type": "String"}, "outfit": {"description": "the recommended outfit", "type": "String"}}, "output_params": {"store_name": {"description": "the name of the store where the recommended outfit can be purchased", "type": "String"}}, "format": "GetOutfitStore(city, outfit) -> store_name"}, {"name": "GetClothing", "Description": "This API suggests clothing based on the current weather status.", "input_params": {"weather_status": {"description": "the current weather status", "type": "String"}}, "output_params": {"clothing_suggestion": {"description": "the suggested clothing", "type": "String"}}, "format": "GetClothing(weather_status) -> clothing_suggestion"}, {"name": "GetIngredients", "Description": "This API provides the list of ingredients required for a given recipe.", "input_params": {"recipe_name": {"description": "the name of the recipe", "type": "String"}}, "output_params": {"ingredients": {"description": "the list of ingredients required for the recipe", "type": "List of Strings"}}, "format": "GetIngredients(recipe_name) -> ingredients"}, {"name": "CheckStock", "Description": "This API checks the stock status of a product.", "input_params": {"product_ID": {"description": "the ID of the product", "type": "Integer"}}, "output_params": {"stock_status": {"description": "the stock status of the product", "type": "String"}}, "format": "CheckStock(product_ID) -> stock_status"}, {"name": "PurchaseItem", "Description": "This API is to purchase a product.", "input_params": {"user_ID": {"description": "the ID of the user", "type": "Integer"}, "product_ID": {"description": "the ID of the product", "type": "Integer"}, "quantity": {"description": "the quantity of the product to purchase", "type": "Integer"}}, "output_params": {"purchase_status": {"description": "the status of the purchase", "type": "String"}}, "format": "PurchaseItem(user_ID, product_ID, quantity) -> purchase_status"}, {"name": "GetMovieTimes", "Description": "This API is to get the showtimes for a specific movie.", "input_params": {"movie_name": {"description": "the name of the movie", "type": "String"}}, "output_params": {"showtimes": {"description": "the showtimes for the movie", "type": "List"}}, "format": "GetMovieTimes(movie_name) -> showtimes"}, {"name": "BookMovieTickets", "Description": "This API is to book movie tickets for a specific showtime.", "input_params": {"showtime": {"description": "the showtime for the movie", "type": "String"}}, "output_params": {"ticket": {"description": "the ticket for the movie", "type": "String"}}, "format": "BookMovieTickets(showtime) -> ticket"}, {"name": "GetCityLocation", "Description": "This API is to find the geographical location of a city.", "input_params": {"city_name": {"description": "the name of the city", "type": "String"}}, "output_params": {"latitude": {"description": "the latitude of the city", "type": "Float"}, "longitude": {"description": "the longitude of the city", "type": "Float"}}, "format": "GetCityLocation(city_name) -> latitude, longitude"}, {"name": "GetUserAge", "Description": "This API is to get the user's age based on their username.", "input_params": {"username": {"description": "the username of the user", "type": "String"}}, "output_params": {"age": {"description": "the age of the user", "type": "Integer"}}, "format": "GetUserAge(username) -> age"}, {"name": "GetDailyCalorieIntake", "Description": "This API is to find the appropriate daily calorie intake for someone of a specific age.", "input_params": {"age": {"description": "the age of the person", "type": "Integer"}}, "output_params": {"recommended daily calorie intake": {"description": "the recommended daily calorie intake for the person", "type": "Integer"}}, "format": "GetDailyCalorieIntake(age) -> recommended daily calorie intake"}, {"name": "GetNutritionPlan", "Description": "This API is to generate a nutrition plan based on a certain calorie intake.", "input_params": {"calorie_intake": {"description": "the calorie intake for the nutrition plan", "type": "Integer"}}, "output_params": {"nutrition plan": {"description": "the generated nutrition plan", "type": "String"}}, "format": "GetNutritionPlan(calorie_intake) -> nutrition plan"}, {"name": "LocatePharmacy", "Description": "This API locates a pharmacy in a given city that has a certain drug in stock.", "input_params": {"city": {"description": "the name of the city", "type": "String"}, "drug": {"description": "the name of the drug", "type": "String"}}, "output_params": {"pharmacy_name": {"description": "the name of the pharmacy", "type": "String"}}, "format": "LocatePharmacy(city, drug) -> pharmacy_name"}, {"name": "ReserveMedicine", "Description": "This API allows the user to reserve a medicine in a specific pharmacy.", "input_params": {"pharmacy_name": {"description": "the name of the pharmacy", "type": "String"}, "drug": {"description": "the name of the drug", "type": "String"}, "patient_name": {"description": "the name of the patient", "type": "String"}}, "output_params": {"reservation_status": {"description": "the reservation status of the medicine", "type": "String"}}, "format": "ReserveMedicine(pharmacy_name, drug, patient_name) -> reservation_status"}, {"name": "GetFlightNumber", "Description": "This API retrieves the flight number a certain person booked.", "input_params": {"person_ID": {"description": "the ID of the person", "type": "Integer"}}, "output_params": {"flight_number": {"description": "the number of the flight", "type": "String"}}, "format": "GetFlightNumber(person_ID) -> flight_number"}, {"name": "CheckBaggageAllowance", "Description": "This API is to check the baggage allowance of a specific airline.", "input_params": {"airline": {"description": "the specific airline", "type": "String"}}, "output_params": {"baggage_allowance": {"description": "the baggage allowance of the airline", "type": "Object"}}, "format": "CheckBaggageAllowance(airline) -> baggage_allowance"}, {"name": "SuggestLuggage", "Description": "This API is to suggest the type and amount of luggage based on baggage allowance and trip duration.", "input_params": {"baggage_allowance": {"description": "the baggage allowance of the airline", "type": "Object"}, "trip_duration": {"description": "the duration of the trip", "type": "Integer"}}, "output_params": {"luggage_suggestions": {"description": "the suggested type and amount of luggage", "type": "Object"}}, "format": "SuggestLuggage(baggage_allowance, trip_duration) -> luggage_suggestions"}, {"name": "GetExchangeRate", "Description": "This API is to get the exchange rate from one currency to another.", "input_params": {"from_currency": {"description": "the currency to convert from", "type": "String"}, "to_currency": {"description": "the currency to convert to", "type": "String"}}, "output_params": {"exchange_rate": {"description": "the exchange rate from the from_currency to the to_currency", "type": "Float"}}, "format": "GetExchangeRate(from_currency, to_currency) -> exchange_rate"}, {"name": "CalculateCost", "Description": "This API is to calculate the cost of a product in a different currency.", "input_params": {"price": {"description": "the price of the product", "type": "Float"}, "exchange_rate": {"description": "the exchange rate from the currency of the price to the desired currency", "type": "Float"}}, "output_params": {"cost": {"description": "the cost of the product in the desired currency", "type": "Float"}}, "format": "CalculateCost(price, exchange_rate) -> cost"}, {"name": "GetTravelTime", "Description": "This API is to get the approximate travel time between two locations.", "input_params": {"source": {"description": "the starting location", "type": "String"}, "destination": {"description": "the destination location", "type": "String"}}, "output_params": {"travel_time": {"description": "the approximate travel time between the two locations", "type": "String"}}, "format": "GetTravelTime(source,destination) -> travel_time"}, {"name": "SearchMovieDatabase", "Description": "This API is to search for the details of a specified movie.", "input_params": {"movie": {"description": "the name of the movie", "type": "String"}}, "output_params": {"movie_details": {"description": "the details of the movie", "type": "String"}}, "format": "SearchMovieDatabase(movie) -> movie_details"}, {"name": "CheckCinemaSchedule", "Description": "This API is used to check the schedule of the specified movie in the nearest cinemas.", "input_params": {"movie_details": {"description": "the details of the movie", "type": "String"}}, "output_params": {"schedule": {"description": "the schedule of the movie in the nearest cinemas", "type": "String"}}, "format": "CheckCinemaSchedule(movie_details) -> schedule"}, {"name": "FindBookStore", "Description": "This API is to find a bookstore that has the searched book in stock.", "input_params": {"book_information": {"description": "information about the book", "type": "String"}}, "output_params": {"bookstore_location": {"description": "location of the bookstore", "type": "String"}}, "format": "FindBookStore(book_information) -> bookstore_location"}, {"name": "GetDirections", "Description": "This API is to generate directions to a specified destination.", "input_params": {"destination": {"description": "the destination to get directions to", "type": "String"}}, "output_params": {"direction_information": {"description": "information about the directions", "type": "String"}}, "format": "GetDirections(destination) -> direction_information"}, {"name": "BuyTickets", "Description": "This API is to buy a specified number of tickets for a specified showtime.", "input_params": {"showtime": {"description": "the showtime of the movie", "type": "String"}, "number_of_tickets": {"description": "the number of tickets to buy", "type": "Integer"}}, "output_params": {"ticket_confirmation": {"description": "the confirmation of the ticket purchase", "type": "String"}}, "format": "BuyTickets(showtime, number_of_tickets) -> ticket_confirmation"}, {"name": "RestaurantReviews", "Description": "This API finds the review scores for a specific restaurant id.", "input_params": {"restaurant_id": {"description": "the id of the restaurant", "type": "Integer"}}, "output_params": {"reviewScores": {"description": "the review scores of the restaurant", "type": "List"}}, "format": "RestaurantReviews(restaurant_id) -> reviewScores"}, {"name": "AverageScore", "Description": "This API calculates the average score of given review scores.", "input_params": {"reviewScores": {"description": "the review scores of the restaurant", "type": "List"}}, "output_params": {"avgScore": {"description": "the average score of the review scores", "type": "Float"}}, "format": "AverageScore(reviewScores) -> avgScore"}, {"name": "Reservation", "Description": "This API reserves a table at the given date and time and returns a confirmation.", "input_params": {"table_id": {"description": "the ID of the table", "type": "Integer"}, "date": {"description": "the date of the reservation", "type": "Date"}, "time": {"description": "the time of the reservation", "type": "Time"}}, "output_params": {"confirmation": {"description": "the confirmation of the reservation", "type": "String"}}, "format": "Reservation(table_id, date, time) -> confirmation"}, {"name": "GetHotelDetails", "Description": "This API provides hotel availability and pricing in a specific city on a specific date.", "input_params": {"city": {"description": "the name of the city", "type": "String"}, "date": {"description": "the date of the hotel booking", "type": "Date"}}, "output_params": {"hotel": {"description": "the details of the hotel", "type": "Object"}}, "format": "GetHotelDetails(city, date) -> hotel"}, {"name": "CarRentalSearch", "Description": "This API is used to search for cars available for rent in a certain city on a specific date.", "input_params": {"city": {"description": "the city where the car rental is being searched", "type": "String"}, "date": {"description": "the specific date for the car rental search", "type": "Date"}}, "output_params": {"rentalCarDetails": {"description": "the details of the available rental cars", "type": "List"}}, "format": "CarRentalSearch(city, date) -> rentalCarDetails"}, {"name": "CinemaFinder", "Description": "This API finds the cinemas where the searched movie is being shown.", "input_params": {"movieDetails": {"description": "the details of the movie", "type": "Object"}}, "output_params": {"cinemaLocations": {"description": "the locations of the cinemas", "type": "Object"}}, "format": "CinemaFinder(movieDetails) -> cinemaLocations"}, {"name": "ShowtimeCheck", "Description": "This API checks the showtimes for a specific movie at the found cinemas.", "input_params": {"cinemaLocations": {"description": "the locations of the cinemas", "type": "Object"}, "movieDetails": {"description": "the details of the movie", "type": "Object"}}, "output_params": {"showTimes": {"description": "the showtimes of the movie at the cinemas", "type": "Object"}}, "format": "ShowtimeCheck(cinemaLocations, movieDetails) -> showTimes"}, {"name": "StoreLocator", "Description": "This API finds the store where the searched product is available.", "input_params": {"productDetails": {"description": "the details of the product", "type": "String"}}, "output_params": {"storeLocations": {"description": "the locations of the stores where the product is available", "type": "String"}}, "format": "StoreLocator(productDetails) -> storeLocations"}, {"name": "StoreWorkingHours", "Description": "This API provides the working hours of the selected store.", "input_params": {"storeLocations": {"description": "the locations of the stores", "type": "String"}}, "output_params": {"workingHours": {"description": "the working hours of the store", "type": "String"}}, "format": "StoreWorkingHours(storeLocations) -> workingHours"}, {"name": "CarRentalService", "Description": "This API books a car rental service based on the hotel booking confirmation.", "input_params": {"hotelBookingConfirmation": {"description": "the confirmation of the hotel booking", "type": "String"}}, "output_params": {"carRentalConfirmation": {"description": "the confirmation of the car rental service", "type": "String"}}, "format": "CarRentalService(hotelBookingConfirmation) -> carRentalConfirmation"}, {"name": "GetMovieTime", "Description": "This API gets the showtime for a specific movie.", "input_params": {"movie_name": {"description": "the name of the movie", "type": "String"}}, "output_params": {"ShowTime": {"description": "the showtime for the movie", "type": "Time"}}, "format": "GetMovieTime(movie_name) -> ShowTime"}, {"name": "FindClothing", "Description": "This API recommends the clothing based on the weather status.", "input_params": {"WeatherStatus": {"description": "the weather status", "type": "String"}}, "output_params": {"ClothingRecommendation": {"description": "the recommended clothing", "type": "String"}}, "format": "FindClothing(WeatherStatus) -> ClothingRecommendation"}, {"name": "CheckFlight", "Description": "This API checks the arrival time for a specific flight.", "input_params": {"flight_number": {"description": "the number of the flight", "type": "String"}}, "output_params": {"ArrivalTime": {"description": "the arrival time of the flight", "type": "Time"}}, "format": "CheckFlight(flight_number) -> ArrivalTime"}, {"name": "FindTaxi", "Description": "This API finds a taxi available for the specific arrival time.", "input_params": {"ArrivalTime": {"description": "the arrival time of the flight", "type": "Time"}}, "output_params": {"TaxiInfo": {"description": "information about the available taxi", "type": "String"}}, "format": "FindTaxi(ArrivalTime) -> TaxiInfo"}, {"name": "CalculateFare", "Description": "This API calculates the fare for the taxi ride based on taxi information and destination.", "input_params": {"TaxiInfo": {"description": "information about the available taxi", "type": "String"}, "destination": {"description": "the destination of the taxi ride", "type": "String"}}, "output_params": {"Fare": {"description": "the fare for the taxi ride", "type": "Float"}}, "format": "CalculateFare(TaxiInfo, destination) -> Fare"}, {"name": "MovieFinderAPI", "Description": "This API provides a list of movies based on genre and the year of release.", "input_params": {"Genre": {"description": "the genre of the movie", "type": "String"}, "Year": {"description": "the year of release of the movie", "type": "Integer"}}, "output_params": {"MovieList": {"description": "a list of movies", "type": "List"}}, "format": "MovieFinderAPI(Genre, Year) -> MovieList"}, {"name": "MovieRatingAPI", "Description": "This API provides the rating for a specific movie.", "input_params": {"Moviename": {"description": "the name of the movie", "type": "String"}}, "output_params": {"MovieRating": {"description": "the rating of the movie", "type": "Float"}}, "format": "MovieRatingAPI(Moviename) -> MovieRating"}, {"name": "MovieSuggestionAPI", "Description": "This API suggests a movie to watch based on the movie list and highest movie rating.", "input_params": {"MovieList": {"description": "a list of movies", "type": "List"}, "MovieRating": {"description": "the rating of the movie", "type": "Float"}}, "output_params": {"MovieSuggestion": {"description": "the suggested movie", "type": "String"}}, "format": "MovieSuggestionAPI(MovieList, MovieRating) -> MovieSuggestion"}, {"name": "ConvertToCurrency", "Description": "This API converts a book price into a specific currency.", "input_params": {"Price": {"description": "the price of the book", "type": "Float"}, "Currency": {"description": "the target currency", "type": "String"}}, "output_params": {"Amount": {"description": "the converted price in the target currency", "type": "Float"}}, "format": "ConvertToCurrency(Price, Currency) -> Amount"}, {"name": "PageCount", "Description": "This API fetches the number of pages in a book using its title.", "input_params": {"Title": {"description": "the title of the book", "type": "String"}}, "output_params": {"Pages": {"description": "the number of pages in the book", "type": "Integer"}}, "format": "PageCount(Title) -> Pages"}, {"name": "ReadingTime", "Description": "This API estimates the time it will take to read a book based on the number of pages.", "input_params": {"Pages": {"description": "the number of pages in the book", "type": "Integer"}}, "output_params": {"Time": {"description": "the estimated time to read the book", "type": "String"}}, "format": "ReadingTime(Pages) -> Time"}, {"name": "OutfitSuggestion", "Description": "This API suggests an outfit based on the weather condition.", "input_params": {"WeatherCondition": {"description": "the current weather condition", "type": "String"}}, "output_params": {"Outfit": {"description": "the suggested outfit", "type": "String"}}, "format": "OutfitSuggestion(WeatherCondition) -> Outfit"}, {"name": "Shop", "Description": "This API finds stores that have the suggested outfit in stock.", "input_params": {"Outfit": {"description": "the suggested outfit", "type": "String"}}, "output_params": {"Stores": {"description": "the stores that have the suggested outfit in stock", "type": "List"}}, "format": "Shop(Outfit) -> Stores"}, {"name": "AlbumArtist", "Description": "This API is to query the artist who created a certain album.", "input_params": {"album_name": {"description": "the name of the album", "type": "String"}}, "output_params": {"artist": {"description": "the artist who created the album", "type": "String"}}, "format": "AlbumArtist(album_name) -> artist"}, {"name": "ArtistGenre", "Description": "This API is to query the genre of a certain artist.", "input_params": {"artist_name": {"description": "the name of the artist", "type": "String"}}, "output_params": {"genre": {"description": "the genre of the artist", "type": "String"}}, "format": "ArtistGenre(artist_name) -> genre"}, {"name": "MusicRecommend", "Description": "This API recommends music based on the certain artist, genre and year.", "input_params": {"artist": {"description": "the artist of the song", "type": "String"}, "genre": {"description": "the genre of the song", "type": "String"}, "year": {"description": "the year of the song", "type": "Integer"}}, "output_params": {"music": {"description": "the recommended music", "type": "String"}}, "format": "MusicRecommend(artist, genre, year) -> music"}, {"name": "BookAuthor", "Description": "This API is to query the author information of a book.", "input_params": {"book_name": {"description": "the name of the book", "type": "String"}}, "output_params": {"author": {"description": "the author of the book", "type": "String"}}, "format": "BookAuthor(book_name) -> author"}, {"name": "AuthorBirthplace", "Description": "This API retrieves the birthplace of a specific author.", "input_params": {"author": {"description": "the name of the author", "type": "String"}}, "output_params": {"birthplace": {"description": "the birthplace of the author", "type": "String"}}, "format": "AuthorBirthplace(author) -> birthplace"}, {"name": "FoodCuisine", "Description": "This API retrieves the cuisine of a particular food.", "input_params": {"food_name": {"description": "the name of the food", "type": "String"}}, "output_params": {"cuisine": {"description": "the cuisine of the food", "type": "String"}}, "format": "FoodCuisine(food_name) -> cuisine"}, {"name": "CuisineOrigin", "Description": "This API provides the origin country of a specific cuisine.", "input_params": {"cuisine": {"description": "the cuisine", "type": "String"}}, "output_params": {"country": {"description": "the origin country of the cuisine", "type": "String"}}, "format": "CuisineOrigin(cuisine) -> country"}, {"name": "CountryCapital", "Description": "This API retrieves the capital city of a specific country.", "input_params": {"country": {"description": "the country", "type": "String"}}, "output_params": {"capital": {"description": "the capital city of the country", "type": "String"}}, "format": "CountryCapital(country) -> capital"}, {"name": "UserSearch", "Description": "This API is used to find the details of the user.", "input_params": {"username": {"description": "the username of the user", "type": "String"}}, "output_params": {"user_details": {"description": "the details of the user", "type": "Object"}}, "format": "UserSearch(username) -> user_details"}, {"name": "OrderHistory", "Description": "This API is used to find out the order history of a user.", "input_params": {"user_id": {"description": "the ID of the user", "type": "Integer"}}, "output_params": {"order_history": {"description": "the order history of the user", "type": "List"}}, "format": "OrderHistory(user_id) -> order_history"}, {"name": "OrderSearch", "Description": "This API is used to find the details of the specific order.", "input_params": {"order_id": {"description": "the ID of the order", "type": "Integer"}}, "output_params": {"order_details": {"description": "the details of the order", "type": "Object"}}, "format": "OrderSearch(order_id) -> order_details"}, {"name": "UserProfile", "Description": "This API is used to find user's profile.", "input_params": {"username": {"description": "the username of the user", "type": "String"}}, "output_params": {"user profile": {"description": "the profile of the user", "type": "Object"}}, "format": "UserProfile(username) -> user profile"}, {"name": "CalculateCalorie", "Description": "This API calculates calorie of a given food.", "input_params": {"food": {"description": "the name of the food", "type": "String"}}, "output_params": {"calorie": {"description": "the calorie count of the food", "type": "Integer"}}, "format": "CalculateCalorie(food) -> calorie"}, {"name": "MealSuggestion", "Description": "This API suggests meals based on calorie count and dietary restrictions.", "input_params": {"calorie": {"description": "the calorie count", "type": "Integer"}, "dietary_restrictions": {"description": "the dietary restrictions", "type": "String"}}, "output_params": {"suggested meals": {"description": "the suggested meals", "type": "List"}}, "format": "MealSuggestion(calorie, dietary_restrictions) -> suggested meals"}, {"name": "GetCurrentWeather", "Description": "This API retrieves the current weather for a given location.", "input_params": {"location": {"description": "the location for which to retrieve the current weather", "type": "String"}}, "output_params": {"current_weather": {"description": "the current weather for the given location", "type": "String"}}, "format": "GetCurrentWeather(location) -> current_weather"}, {"name": "CompareWeather", "Description": "This API compares the current weather with the forecasted weather.", "input_params": {"current_weather": {"description": "the current weather for a location", "type": "String"}, "weather_forecast": {"description": "the weather forecast for the next seven days for a location", "type": "String"}}, "output_params": {"weather_comparison": {"description": "the comparison result of the current weather with the forecasted weather", "type": "String"}}, "format": "CompareWeather(current_weather, weather_forecast) -> weather_comparison"}, {"name": "RestaurantRecommend", "Description": "This API recommends restaurants in a certain city that serve a particular cuisine depending on the weather.", "input_params": {"city": {"description": "the name of the city", "type": "String"}, "cuisine": {"description": "the type of cuisine", "type": "String"}, "weather": {"description": "the weather forecast information", "type": "String"}}, "output_params": {"restaurants": {"description": "the recommended restaurants", "type": "String"}}, "format": "RestaurantRecommend(city, cuisine, weather) -> restaurants"}, {"name": "EventSearch", "Description": "This API provides details on events happening in the specified city on a given date.", "input_params": {"city": {"description": "the name of the city", "type": "String"}, "date": {"description": "the date of the event", "type": "Date"}}, "output_params": {"event": {"description": "the details of the event", "type": "Object"}}, "format": "EventSearch(city, date) -> event"}, {"name": "CityGuide", "Description": "This API creates a guide containing restaurant and event information.", "input_params": {"restaurant": {"description": "the details of the restaurant", "type": "Object"}, "event": {"description": "the details of the event", "type": "Object"}}, "output_params": {"guide": {"description": "the guide containing restaurant and event information", "type": "Object"}}, "format": "CityGuide(restaurant, event) -> guide"}, {"name": "TravelPlan", "Description": "This API generates a travel plan based on the weather and restaurant recommendation.", "input_params": {"weather": {"description": "the weather forecast", "type": "String"}, "restaurant": {"description": "the recommended restaurant", "type": "String"}}, "output_params": {"plan": {"description": "the generated travel plan", "type": "String"}}, "format": "TravelPlan(weather, restaurant) -> plan"}, {"name": "NewsHeadlines", "Description": "This API gives the most recent news headlines about the specified company.", "input_params": {"company": {"description": "the name of the company", "type": "String"}}, "output_params": {"news": {"description": "the most recent news headlines about the company", "type": "String"}}, "format": "NewsHeadlines(company) -> news"}, {"name": "InvestmentStrategy", "Description": "This API generates an investment strategy based on the stock price and news headlines.", "input_params": {"stockPrice": {"description": "the current price of the company's stock", "type": "Float"}, "news": {"description": "the most recent news headlines about the company", "type": "String"}}, "output_params": {"strategy": {"description": "the generated investment strategy", "type": "String"}}, "format": "InvestmentStrategy(stockPrice, news) -> strategy"}, {"name": "RestaurantRating", "Description": "This API gives the current rating of a restaurant in a specified city.", "input_params": {"city": {"description": "the name of the city", "type": "String"}, "restaurant": {"description": "the name of the restaurant", "type": "String"}}, "output_params": {"rating": {"description": "the current rating of the restaurant", "type": "Float"}}, "format": "RestaurantRating(city, restaurant) -> rating"}, {"name": "RestaurantPriceRange", "Description": "This API gives the price range for a restaurant in the specified city.", "input_params": {"city": {"description": "the name of the city", "type": "String"}, "restaurant": {"description": "the name of the restaurant", "type": "String"}}, "output_params": {"priceRange": {"description": "the price range of the restaurant", "type": "String"}}, "format": "RestaurantPriceRange(city, restaurant) -> priceRange"}, {"name": "TransportFare", "Description": "This API gives the one-way transportation fare to the destination in a specified city.", "input_params": {"city": {"description": "the name of the city", "type": "String"}, "destination": {"description": "the destination", "type": "String"}}, "output_params": {"fare": {"description": "the one-way transportation fare", "type": "Float"}}, "format": "TransportFare(city, destination) -> fare"}, {"name": "TotalDinnerCost", "Description": "This API calculates the total cost of dinner including the price range of the restaurant and transportation fare.", "input_params": {"restaurantPriceRange": {"description": "the price range of the restaurant", "type": "String"}, "transportFare": {"description": "the one-way transportation fare", "type": "Float"}}, "output_params": {"totalCost": {"description": "the total cost of dinner", "type": "Float"}}, "format": "TotalDinnerCost(restaurantPriceRange, transportFare) -> totalCost"}, {"name": "ClothingSuggestion", "Description": "This API suggests suitable clothing based on the weather.", "input_params": {"weather": {"description": "the weather forecast", "type": "String"}}, "output_params": {"clothes": {"description": "the suggested clothing based on the weather", "type": "String"}}, "format": "ClothingSuggestion(weather) -> clothes"}, {"name": "FashionStore", "Description": "This API gives the price of suggested clothing in the local stores of the given location.", "input_params": {"clothes": {"description": "the suggested clothing", "type": "String"}, "location": {"description": "the location for which price is required", "type": "String"}}, "output_params": {"price": {"description": "the price of suggested clothing in the local stores", "type": "Float"}}, "format": "FashionStore(clothes, location) -> price"}, {"name": "DistanceCalculator", "Description": "This API calculates the distance between two locations.", "input_params": {"origin": {"description": "the starting location", "type": "String"}, "destination": {"description": "the destination location", "type": "String"}}, "output_params": {"distance": {"description": "the calculated distance", "type": "Float"}}, "format": "DistanceCalculator(origin, destination) -> distance"}, {"name": "TrafficEstimator", "Description": "This API estimates the traffic based on the distance.", "input_params": {"distance": {"description": "the distance between two locations", "type": "Float"}}, "output_params": {"traffic": {"description": "the estimated traffic", "type": "String"}}, "format": "TrafficEstimator(distance) -> traffic"}, {"name": "TimeCalculator", "Description": "This API calculates the time taken to travel based on the traffic and mode of transport.", "input_params": {"traffic": {"description": "the estimated traffic", "type": "String"}, "modeOfTransport": {"description": "the mode of transport", "type": "String"}}, "output_params": {"time": {"description": "the calculated time taken to travel", "type": "String"}}, "format": "TimeCalculator(traffic, modeOfTransport) -> time"}, {"name": "CalculateTime", "Description": "This API calculates the travel time based on distance and speed.", "input_params": {"distance": {"description": "the distance of the journey", "type": "Float"}, "speed": {"description": "the average speed of the journey", "type": "Integer"}}, "output_params": {"time": {"description": "the estimated travel time", "type": "Float"}}, "format": "CalculateTime(distance, speed) -> time"}, {"name": "RoutePlanner", "Description": "This API provides a travel route plan from origin to destination with distance and estimated time.", "input_params": {"origin": {"description": "the starting point of the journey", "type": "String"}, "destination": {"description": "the destination point of the journey", "type": "String"}, "distance": {"description": "the distance of the journey", "type": "Float"}, "time": {"description": "the estimated travel time", "type": "Float"}}, "output_params": {"route": {"description": "the travel route plan", "type": "String"}}, "format": "RoutePlanner(origin, destination, distance, time) -> route"}, {"name": "UserLocation", "Description": "This API gets the location of a specific user.", "input_params": {"userID": {"description": "the ID of the user", "type": "Integer"}}, "output_params": {"location": {"description": "the location of the user", "type": "String"}}, "format": "UserLocation(userID) -> location"}, {"name": "WeatherCheck", "Description": "This API checks the weather of a specific location.", "input_params": {"location": {"description": "the location to check the weather", "type": "String"}}, "output_params": {"weather": {"description": "the weather of the location", "type": "String"}}, "format": "WeatherCheck(location) -> weather"}, {"name": "DressSuggestion", "Description": "This API suggests a dress based on the weather.", "input_params": {"weather": {"description": "the weather to suggest a dress", "type": "String"}}, "output_params": {"dress": {"description": "the suggested dress based on the weather", "type": "String"}}, "format": "DressSuggestion(weather) -> dress"}, {"name": "OutdoorActivityRecommend", "Description": "This API recommends outdoor activities based on the weather and city.", "input_params": {"city": {"description": "the name of the city", "type": "String"}, "weather": {"description": "the weather forecast for the city", "type": "String"}}, "output_params": {"activity": {"description": "the recommended outdoor activity based on the weather and city", "type": "String"}}, "format": "OutdoorActivityRecommend(city, weather) -> activity"}, {"name": "BusSchedule", "Description": "This API is to query the schedule and route details of a specific bus.", "input_params": {"bus_number": {"description": "the number of the bus", "type": "String"}}, "output_params": {"bus_info": {"description": "the schedule and route details of the bus", "type": "String"}}, "format": "BusSchedule(bus_number) -> bus_info"}, {"name": "ParkRecommend", "Description": "This API recommends parks in a city that are suitable for particular weather.", "input_params": {"city": {"description": "the name of the city", "type": "String"}, "weather": {"description": "the weather condition", "type": "String"}}, "output_params": {"parks": {"description": "the recommended parks in the city", "type": "List"}}, "format": "ParkRecommend(city, weather) -> parks"}, {"name": "MenuGetter", "Description": "This API is used to get the menu from a specified restaurant.", "input_params": {"restaurant": {"description": "the name of the restaurant", "type": "String"}}, "output_params": {"menu": {"description": "the menu of the restaurant", "type": "String"}}, "format": "MenuGetter(restaurant) -> menu"}, {"name": "FootballTeamInfo", "Description": "This API is to query the detailed information of the football team.", "input_params": {"team_name": {"description": "the name of the football team", "type": "String"}}, "output_params": {"team_info": {"description": "the detailed information of the football team", "type": "String"}}, "format": "FootballTeamInfo(team_name) -> team_info"}, {"name": "GameSchedule", "Description": "This API provides a schedule for the team's games based on the team information.", "input_params": {"team_info": {"description": "the detailed information of the football team", "type": "String"}}, "output_params": {"game_schedule": {"description": "the schedule for the team's games", "type": "String"}}, "format": "GameSchedule(team_info) -> game_schedule"}, {"name": "TicketPrice", "Description": "This API calculates the ticket price based on the game schedule.", "input_params": {"game_schedule": {"description": "the schedule for the team's games", "type": "String"}}, "output_params": {"ticket_price": {"description": "the price for watching the team's games", "type": "Float"}}, "format": "TicketPrice(game_schedule) -> ticket_price"}, {"name": "GetMovieRatings", "Description": "This API returns the rating information of a specific movie.", "input_params": {"movie": {"description": "the name of the movie", "type": "String"}}, "output_params": {"rating_info": {"description": "the rating information of the movie", "type": "String"}}, "format": "GetMovieRatings(movie) -> rating_info"}, {"name": "FindMovieGenre", "Description": "This API finds out the genre of a specific movie.", "input_params": {"movie": {"description": "the name of the movie", "type": "String"}}, "output_params": {"genre": {"description": "the genre of the movie", "type": "String"}}, "format": "FindMovieGenre(movie) -> genre"}, {"name": "BookDetails", "Description": "This API returns details about a certain book.", "input_params": {"title": {"description": "the title of the book", "type": "String"}}, "output_params": {"bookInfo": {"description": "the information about the book", "type": "Object"}}, "format": "BookDetails(title) -> bookInfo"}, {"name": "AuthorInformation", "Description": "This API provides information about an author.", "input_params": {"author": {"description": "the name of the author", "type": "String"}}, "output_params": {"authorBio": {"description": "the information about the author", "type": "Object"}}, "format": "AuthorInformation(author) -> authorBio"}, {"name": "ReadingSuggestion", "Description": "This API generates a reading plan based on book and author information.", "input_params": {"bookInfo": {"description": "the information about the book", "type": "Object"}, "authorBio": {"description": "the information about the author", "type": "Object"}}, "output_params": {"readingPlan": {"description": "the generated reading plan", "type": "Object"}}, "format": "ReadingSuggestion(bookInfo, authorBio) -> readingPlan"}, {"name": "HotelReservation", "Description": "This API returns information about hotel reservations in a certain city on a particular date.", "input_params": {"city": {"description": "the name of the city", "type": "String"}, "date": {"description": "the date of the hotel reservation", "type": "String"}}, "output_params": {"hotelInfo": {"description": "information about hotel reservations", "type": "String"}}, "format": "HotelReservation(city, date) -> hotelInfo"}, {"name": "EventSuggestions", "Description": "This API provides suggestions for events happening in a certain city on a specific date.", "input_params": {"city": {"description": "the name of the city", "type": "String"}, "date": {"description": "the date of the event suggestions", "type": "String"}}, "output_params": {"eventDetails": {"description": "suggestions for events happening in the city", "type": "String"}}, "format": "EventSuggestions(city, date) -> eventDetails"}, {"name": "FuelConsumption", "Description": "This API estimates the fuel amount consumed by a certain flight on a certain distance.", "input_params": {"flightID": {"description": "the ID of the flight", "type": "Integer"}, "distance": {"description": "the distance of the flight", "type": "Float"}}, "output_params": {"fuelAmount": {"description": "the estimated fuel amount consumed by the flight", "type": "Float"}}, "format": "FuelConsumption(flightID, distance) -> fuelAmount"}, {"name": "OutfitStoreSearch", "Description": "This API searches for stores that sell the recommended clothing in the city.", "input_params": {"clothing": {"description": "the recommended clothing", "type": "String"}, "city": {"description": "the name of the city", "type": "String"}}, "output_params": {"store": {"description": "the stores that sell the recommended clothing", "type": "String"}}, "format": "OutfitStoreSearch(clothing, city) -> store"}, {"name": "CityPopulation", "Description": "This API retrieves the population of a given city.", "input_params": {"city": {"description": "the name of the city", "type": "String"}}, "output_params": {"population": {"description": "the population of the city", "type": "Integer"}}, "format": "CityPopulation(city) -> population"}, {"name": "WeatherImpactOnPopulation", "Description": "This API estimates the impact of weather conditions on the population.", "input_params": {"weather": {"description": "the current weather conditions", "type": "String"}, "population": {"description": "the population of the city", "type": "Integer"}}, "output_params": {"impact": {"description": "the estimated impact of weather conditions on the population", "type": "String"}}, "format": "WeatherImpactOnPopulation(weather, population) -> impact"}, {"name": "MovieRecommender", "Description": "This API recommends a movie based on a specific genre.", "input_params": {"genre": {"description": "the genre of the movie", "type": "String"}}, "output_params": {"movie": {"description": "the recommended movie", "type": "String"}}, "format": "MovieRecommender(genre) -> movie"}, {"name": "ReservationMaker", "Description": "This API makes a reservation at a specific restaurant for a certain time.", "input_params": {"restaurant_name": {"description": "the name of the restaurant", "type": "String"}, "time": {"description": "the time of the reservation", "type": "String"}}, "output_params": {"reservation": {"description": "the reservation details", "type": "String"}}, "format": "ReservationMaker(restaurant_name, time) -> reservation"}, {"name": "MovieDetails", "Description": "This API is to get the movie ID using the movie title.", "input_params": {"movie_title": {"description": "the title of the movie", "type": "String"}}, "output_params": {"movie_id": {"description": "the ID of the movie", "type": "Integer"}}, "format": "MovieDetails(movie_title) -> movie_id"}, {"name": "MovieReviews", "Description": "This API is to gather reviews of a movie using the movie ID.", "input_params": {"movie_id": {"description": "the ID of the movie", "type": "Integer"}}, "output_params": {"reviews": {"description": "the reviews of the movie", "type": "String"}}, "format": "MovieReviews(movie_id) -> reviews"}, {"name": "SentimentAnalysis", "Description": "This API is to perform sentiment analysis on a set of reviews to determine public opinion about a movie.", "input_params": {"reviews": {"description": "the set of reviews", "type": "String"}}, "output_params": {"sentiment": {"description": "the public sentiment about the movie", "type": "String"}}, "format": "SentimentAnalysis(reviews) -> sentiment"}, {"name": "Bookname", "Description": "This API is used to get the title of the book given its ISBN.", "input_params": {"ISBN": {"description": "the ISBN of the book", "type": "String"}}, "output_params": {"title": {"description": "the title of the book", "type": "String"}}, "format": "Bookname(ISBN) -> title"}, {"name": "Authorname", "Description": "This API is used to fetch the name of the author of a book given its title.", "input_params": {"title": {"description": "the title of the book", "type": "String"}}, "output_params": {"author": {"description": "the name of the author", "type": "String"}}, "format": "Authorname(title) -> author"}, {"name": "Publisher", "Description": "This API is used to get the publisher of the book given its author.", "input_params": {"author": {"description": "the name of the author", "type": "String"}}, "output_params": {"publisher": {"description": "the publisher of the book", "type": "String"}}, "format": "Publisher(author) -> publisher"}, {"name": "TrainInfo", "Description": "This API is to query the location information of the train station.", "input_params": {"train_name": {"description": "the name of the train", "type": "String"}, "city": {"description": "the name of the city", "type": "String"}}, "output_params": {"train_station": {"description": "the location information of the train station", "type": "String"}}, "format": "TrainInfo(train_name, city) -> train_station"}, {"name": "StoreFinder", "Description": "This API is to find the nearest store of a given type located in the given zip code.", "input_params": {"zip_code": {"description": "the zip code of the location", "type": "String"}, "store_type": {"description": "the type of the store", "type": "String"}}, "output_params": {"store_location": {"description": "the location of the store", "type": "String"}}, "format": "StoreFinder(zip_code, store_type) -> store_location"}, {"name": "StoreRating", "Description": "This API is to find the customer rating of a particular store.", "input_params": {"store_location": {"description": "the location of the store", "type": "String"}}, "output_params": {"store_rating": {"description": "the rating of the store", "type": "Float"}}, "format": "StoreRating(store_location) -> store_rating"}, {"name": "ProductPriceQuery", "Description": "This API is to find the price of a specific product in the given store.", "input_params": {"store_location": {"description": "the location of the store", "type": "String"}, "product_name": {"description": "the name of the product", "type": "String"}}, "output_params": {"product_price": {"description": "the price of the product", "type": "Float"}}, "format": "ProductPriceQuery(store_location, product_name) -> product_price"}, {"name": "ConnectivityCheck", "Description": "This API checks the internet connectivity status between the origin and destination.", "input_params": {"origin": {"description": "the origin location", "type": "String"}, "destination": {"description": "the destination location", "type": "String"}}, "output_params": {"connection_status": {"description": "the status of the internet connectivity", "type": "String"}}, "format": "ConnectivityCheck(origin, destination) -> connection_status"}, {"name": "SpeedTest", "Description": "This API performs a speed test for the connection and provides the details.", "input_params": {"connection_status": {"description": "the status of the internet connectivity", "type": "String"}}, "output_params": {"speed_details": {"description": "the details of the internet connection speed", "type": "String"}}, "format": "SpeedTest(connection_status) -> speed_details"}, {"name": "FileTransfer", "Description": "This API calculates the time required to transfer a file of a certain size over the input internet connection speed.", "input_params": {"speed_details": {"description": "the details of the internet connection speed", "type": "String"}, "file_size": {"description": "the size of the file to be transferred", "type": "String"}}, "output_params": {"transfer_time": {"description": "the time required to transfer the file", "type": "String"}}, "format": "FileTransfer(speed_details, file_size) -> transfer_time"}, {"name": "ActivitySuggestion", "Description": "This API suggests suitable activities based on the weather condition.", "input_params": {"weather_condition": {"description": "the weather condition", "type": "String"}}, "output_params": {"activity_type": {"description": "the suggested activity type", "type": "String"}}, "format": "ActivitySuggestion(weather_condition) -> activity_type"}, {"name": "PlacesRecommender", "Description": "This API recommends places to do the suggested activity in the city.", "input_params": {"city": {"description": "the name of the city", "type": "String"}, "activity_type": {"description": "the suggested activity type", "type": "String"}}, "output_params": {"place_name": {"description": "the recommended place name", "type": "String"}}, "format": "PlacesRecommender(city, activity_type) -> place_name"}, {"name": "WeatherForecaster", "Description": "This API provides the weather condition of a city on a specific date.", "input_params": {"city": {"description": "the name of the city", "type": "String"}, "date": {"description": "the specific date", "type": "String"}}, "output_params": {"weather_condition": {"description": "the weather condition", "type": "String"}}, "format": "WeatherForecaster(city, date) -> weather_condition"}, {"name": "OutfitRecommender", "Description": "This API suggests an appropriate outfit based on the weather condition.", "input_params": {"weather_condition": {"description": "the weather condition", "type": "String"}}, "output_params": {"outfit": {"description": "the recommended outfit", "type": "String"}}, "format": "OutfitRecommender(weather_condition) -> outfit"}, {"name": "ShoppingAssistant", "Description": "This API locates the nearest store where the recommended outfit can be purchased.", "input_params": {"outfit": {"description": "the recommended outfit", "type": "String"}, "city": {"description": "the name of the city", "type": "String"}}, "output_params": {"store_address": {"description": "the address of the nearest store", "type": "String"}}, "format": "ShoppingAssistant(outfit, city) -> store_address"}, {"name": "CarRentalAvailability", "Description": "This API provides information about the availability of rental cars in a city on a certain date.", "input_params": {"city": {"description": "the name of the city", "type": "String"}, "date": {"description": "the date for car rental availability", "type": "String"}}, "output_params": {"available_cars": {"description": "the information about the availability of rental cars in the city on the specified date", "type": "String"}}, "format": "CarRentalAvailability(city, date) -> available_cars"}, {"name": "ConferenceDetails", "Description": "This API provides information about conferences in a city.", "input_params": {"city": {"description": "the name of the city", "type": "String"}}, "output_params": {"conferences": {"description": "the information about conferences in the city", "type": "String"}}, "format": "ConferenceDetails(city) -> conferences"}, {"name": "BusinessTripPlanner", "Description": "This API helps in planning your business trip by combining weather, car rental, and conference information.", "input_params": {"weather": {"description": "the weather forecast for the city on the specified date", "type": "String"}, "available_cars": {"description": "the information about the availability of rental cars in the city on the specified date", "type": "String"}, "conferences": {"description": "the information about conferences in the city", "type": "String"}}, "output_params": {"business_plan": {"description": "the business trip plan combining weather, car rental, and conference information", "type": "String"}}, "format": "BusinessTripPlanner(weather, available_cars, conferences) -> business_plan"}, {"name": "OutdoorActivities", "Description": "This API provides information about possible outdoor activities in a city based on the weather forecast.", "input_params": {"city": {"description": "the name of the city", "type": "String"}, "weather_forecast": {"description": "the weather forecast for the city", "type": "String"}}, "output_params": {"activities": {"description": "the possible outdoor activities in the city based on the weather forecast", "type": "String"}}, "format": "OutdoorActivities(city, weather_forecast) -> activities"}, {"name": "RestaurantSuggestion", "Description": "This API provides suggestions for restaurants based on food preferences in a city.", "input_params": {"city": {"description": "the name of the city", "type": "String"}, "food_preference": {"description": "the food preference", "type": "String"}}, "output_params": {"suggested_restaurant": {"description": "the suggested restaurant based on food preferences in the city", "type": "String"}}, "format": "RestaurantSuggestion(city, food_preference) -> suggested_restaurant"}, {"name": "TripPlanner", "Description": "This API helps in planning your trip by combining weather forecast, outdoor activities and restaurant suggestions.", "input_params": {"weather_forecast": {"description": "the weather forecast for the city", "type": "String"}, "activities": {"description": "the possible outdoor activities in the city based on the weather forecast", "type": "String"}, "suggested_restaurant": {"description": "the suggested restaurant based on food preferences in the city", "type": "String"}}, "output_params": {"trip_plan": {"description": "the trip plan combining weather forecast, outdoor activities and restaurant suggestions", "type": "String"}}, "format": "TripPlanner(weather_forecast, activities, suggested_restaurant) -> trip_plan"}, {"name": "GetAuthor", "Description": "This API is used to get the author name of a specific book.", "input_params": {"book_id": {"description": "the ID of the book", "type": "Integer"}}, "output_params": {"author_name": {"description": "the name of the author", "type": "String"}}, "format": "GetAuthor(book_id) -> author_name"}, {"name": "GetFlightID", "Description": "This API returns the flight id considering the weather status.", "input_params": {"flight_options": {"description": "the available flight options", "type": "List"}, "weather_status": {"description": "the current weather status", "type": "String"}}, "output_params": {"flight_id": {"description": "the id of the flight", "type": "String"}}, "format": "GetFlightID(flight_options, weather_status) -> flight_id"}, {"name": "SearchFare", "Description": "This API is used to search for the fare between source and destination on a particular date.", "input_params": {"src": {"description": "the source location", "type": "String"}, "dest": {"description": "the destination location", "type": "String"}, "date": {"description": "the date of travel", "type": "String"}}, "output_params": {"fare_id": {"description": "the ID of the fare", "type": "Integer"}}, "format": "SearchFare(src, dest, date) -> fare_id"}, {"name": "CheckDiscount", "Description": "This API is used to check the discount available on a particular fare using a coupon.", "input_params": {"coupon": {"description": "the coupon code", "type": "String"}, "fare_id": {"description": "the ID of the fare", "type": "Integer"}}, "output_params": {"discount_amount": {"description": "the amount of discount", "type": "Float"}}, "format": "CheckDiscount(coupon, fare_id) -> discount_amount"}, {"name": "CalculateFinalFare", "Description": "This API calculates the final fare after applying the discount.", "input_params": {"fare_id": {"description": "the ID of the fare", "type": "Integer"}, "discount_amount": {"description": "the amount of discount", "type": "Float"}}, "output_params": {"final_fare": {"description": "the final fare after applying the discount", "type": "Float"}}, "format": "CalculateFinalFare(fare_id, discount_amount) -> final_fare"}, {"name": "SearchProduct", "Description": "This API is to search for a product based on its ID.", "input_params": {"productId": {"description": "the ID of the product", "type": "String"}}, "output_params": {"product details": {"description": "the details of the product", "type": "Object"}}, "format": "SearchProduct(productId) -> product details"}, {"name": "GetLocation", "Description": "This API is to fetch the location where the product is available.", "input_params": {"product": {"description": "the product details", "type": "Object"}}, "output_params": {"location": {"description": "the location where the product is available", "type": "String"}}, "format": "GetLocation(product) -> location"}, {"name": "GetOutdoorActivity", "Description": "This API is to suggest an outdoor activity based on the weather forecast.", "input_params": {"weather_forecast": {"description": "the forecast of the weather", "type": "String"}}, "output_params": {"activity": {"description": "the suggested outdoor activity", "type": "String"}}, "format": "GetOutdoorActivity(weather_forecast) -> activity"}, {"name": "IdentifyBook", "Description": "This API is to find the book details when the user specifies a book title.", "input_params": {"title": {"description": "the title of the book", "type": "String"}}, "output_params": {"book_details": {"description": "the details of the book", "type": "Object"}}, "format": "IdentifyBook(title) -> book_details"}, {"name": "BookStore", "Description": "This API checks the availability of the book in the store given a book id.", "input_params": {"book_id": {"description": "the id of the book", "type": "Integer"}}, "output_params": {"availability": {"description": "the availability of the book", "type": "String"}}, "format": "BookStore(book_id) -> availability"}, {"name": "SearchFilm", "Description": "This API is to find the film id when the user specifies a film title.", "input_params": {"title": {"description": "the title of the film", "type": "String"}}, "output_params": {"film_id": {"description": "the id of the film", "type": "Integer"}}, "format": "SearchFilm(title) -> film_id"}, {"name": "ShowTimes", "Description": "This API returns the available show times for a specific film on a specific date.", "input_params": {"film_id": {"description": "the id of the film", "type": "Integer"}, "date": {"description": "the date of the show", "type": "String"}}, "output_params": {"show_times": {"description": "the available show times", "type": "List"}}, "format": "ShowTimes(film_id, date) -> show_times"}, {"name": "BookMovie", "Description": "This API is to book movie tickets for a specific film, date and show time.", "input_params": {"film_id": {"description": "the id of the film", "type": "Integer"}, "date": {"description": "the date of the show", "type": "String"}, "show_time": {"description": "the show time", "type": "String"}}, "output_params": {"booking confirmation": {"description": "the confirmation of the booking", "type": "String"}}, "format": "BookMovie(film_id, date, show_time) -> booking confirmation"}, {"name": "GetBookISBN", "Description": "This API retrieves the ISBN of a specific book title.", "input_params": {"book_title": {"description": "the title of the book", "type": "String"}}, "output_params": {"ISBN": {"description": "the ISBN of the book", "type": "String"}}, "format": "GetBookISBN(book_title) -> ISBN"}, {"name": "GetAvailability", "Description": "This API checks the availability of a book by its ISBN.", "input_params": {"ISBN": {"description": "the ISBN of the book", "type": "String"}}, "output_params": {"availability": {"description": "the availability of the book", "type": "String"}}, "format": "GetAvailability(ISBN) -> availability"}, {"name": "FetchStockData", "Description": "This API is to retrieve real-time stock data for a given stock symbol.", "input_params": {"stock_symbol": {"description": "the symbol of the stock", "type": "String"}}, "output_params": {"stock_data": {"description": "the real-time stock data", "type": "Object"}}, "format": "FetchStockData(stock_symbol) -> stock_data"}, {"name": "BasicDataAnalysis", "Description": "This API performs a basic data analysis on the input stock data.", "input_params": {"stock_data": {"description": "the real-time stock data", "type": "Object"}}, "output_params": {"analyzed_data": {"description": "the analyzed stock data", "type": "Object"}}, "format": "BasicDataAnalysis(stock_data) -> analyzed_data"}, {"name": "GenerateReport", "Description": "This API generates a stock analysis report based on the analyzed data and a specific template.", "input_params": {"analyzed_data": {"description": "the analyzed stock data", "type": "Object"}, "template": {"description": "the specific template for the report", "type": "String"}}, "output_params": {"report": {"description": "the generated stock analysis report", "type": "Object"}}, "format": "GenerateReport(analyzed_data, template) -> report"}, {"name": "FetchProductDetails", "Description": "This API fetches the product details using product id.", "input_params": {"product_id": {"description": "the id of the product", "type": "String"}}, "output_params": {"product_info": {"description": "the details of the product", "type": "Object"}}, "format": "FetchProductDetails(product_id) -> product_info"}, {"name": "CreateShoppingCart", "Description": "This API creates a shopping cart with the provided user id and product info.", "input_params": {"user_id": {"description": "the id of the user", "type": "String"}, "product_info": {"description": "the details of the product", "type": "Object"}}, "output_params": {"shopping_cart_id": {"description": "the id of the shopping cart", "type": "String"}}, "format": "CreateShoppingCart(user_id, product_info) -> shopping_cart_id"}, {"name": "CheckoutShoppingCart", "Description": "This API checks out the shopping cart and completes the purchase.", "input_params": {"shopping_cart_id": {"description": "the id of the shopping cart", "type": "String"}}, "output_params": {"checkout_status": {"description": "the status of the checkout", "type": "String"}}, "format": "CheckoutShoppingCart(shopping_cart_id) -> checkout_status"}, {"name": "GetPassengerId", "Description": "This API is to get the passenger id using the name and date of birth.", "input_params": {"name": {"description": "the name of the passenger", "type": "String"}, "dob": {"description": "the date of birth of the passenger", "type": "Date"}}, "output_params": {"passenger_id": {"description": "the ID of the passenger", "type": "Integer"}}, "format": "GetPassengerId(name, dob) -> passenger_id"}, {"name": "SearchLocation", "Description": "This API is to find the location based on person's name.", "input_params": {"person": {"description": "the name of the person", "type": "String"}}, "output_params": {"location": {"description": "the location of the person", "type": "String"}}, "format": "SearchLocation(person) -> location"}, {"name": "SuggestClothing", "Description": "This API is to suggest clothing based on the weather status.", "input_params": {"weather_status": {"description": "the status of the weather", "type": "String"}}, "output_params": {"clothing_suggestion": {"description": "suggested clothing based on the weather status", "type": "String"}}, "format": "SuggestClothing(weather_status) -> clothing_suggestion"}, {"name": "BookAvailability", "Description": "This API is to check the availability of a book by its ID.", "input_params": {"book_id": {"description": "the ID of the book", "type": "Integer"}}, "output_params": {"availability": {"description": "the availability status of the book", "type": "String"}}, "format": "BookAvailability(book_id) -> availability"}, {"name": "BookLocation", "Description": "This API is to find the location of a book in the library.", "input_params": {"book_availability": {"description": "the availability status of the book", "type": "String"}}, "output_params": {"location": {"description": "the location of the book in the library", "type": "String"}}, "format": "BookLocation(book_availability) -> location"}, {"name": "FilmFinder", "Description": "This API is to find the film ID based on genre and location.", "input_params": {"genre": {"description": "the genre of the film", "type": "String"}, "location": {"description": "the location where film is played", "type": "String"}}, "output_params": {"film_id": {"description": "the ID of the film", "type": "Integer"}}, "format": "FilmFinder(genre, location) -> film_id"}, {"name": "TicketBooking", "Description": "This API is to book tickets for an event.", "input_params": {"eventDetails": {"description": "the details of the event", "type": "String"}, "num_of_tickets": {"description": "the number of tickets to book", "type": "Integer"}}, "output_params": {"booking confirmation": {"description": "the confirmation of the booking", "type": "String"}}, "format": "TicketBooking(eventDetails, num_of_tickets) -> booking confirmation."}, {"name": "ReservationBooking", "Description": "This API is to book a hotel and a restaurant.", "input_params": {"hotelDetails": {"description": "the details of the hotel", "type": "Object"}, "restaurantLocations": {"description": "the locations of the restaurants", "type": "Object"}}, "output_params": {"booking status": {"description": "the status of the booking", "type": "String"}}, "format": "ReservationBooking(hotelDetails, restaurantLocations) -> booking status"}, {"name": "WeatherAPI", "Description": "This API is to get the current weather conditions of a specified city.", "input_params": {"City": {"description": "the name of the city", "type": "String"}}, "output_params": {"WeatherConditions": {"description": "the current weather conditions of the city", "type": "String"}}, "format": "WeatherAPI(City) -> WeatherConditions"}, {"name": "PackingListGenerator", "Description": "This API is to generate a packing list for a trip.", "input_params": {"numberOfDays": {"description": "the number of the days of the trip", "type": "String"}, "Clothes": {"description": "the suggestion of clothes", "type": "String"}}, "output_params": {"Packing List": {"description": "the generated packing list for the trip", "type": "String"}}, "format": "PackingListGenerator(numberOfDays, Clothes) -> Packing List"}, {"name": "IPGeolocation", "Description": "This API is to get the location based on the IP address.", "input_params": {"ip": {"description": "the IP address", "type": "String"}}, "output_params": {"location": {"description": "the location of the IP address", "type": "String"}}, "format": "IPGeolocation(ip) -> location"}, {"name": "AuthorDetails", "Description": "This API is to get the details of an author from a book.", "input_params": {"book_details": {"description": "the details of the book", "type": "Object"}}, "output_params": {"author_info": {"description": "the information of the author", "type": "Object"}}, "format": "AuthorDetails(book_details) -> author_info"}, {"name": "TopBooks", "Description": "This API is to get the top rated books of an author.", "input_params": {"author_info": {"description": "the information of the author", "type": "Object"}, "num_of_books": {"description": "the number of top rated books to retrieve", "type": "Integer"}}, "output_params": {"Top_Books": {"description": "the list of top rated books of the author", "type": "List"}}, "format": "TopBooks(author_info, num_of_books) -> Top_Books"}, {"name": "DirectorDetails", "Description": "This API is to get the details about a director based on a movie's information.", "input_params": {"movie_info": {"description": "The information about the movie, including director information", "type": "Object"}}, "output_params": {"director_info": {"description": "The information about the director", "type": "Object"}}, "format": "DirectorDetails(movie_info) -> director_info"}, {"name": "TopMovies", "Description": "This API is to get the top movies directed by a specific director.", "input_params": {"director_info": {"description": "The information about the director", "type": "Object"}, "num_of_movies": {"description": "The number of top movies to recommend", "type": "Integer"}}, "output_params": {"top_movies": {"description": "A list of the top movies directed by the director", "type": "List"}}, "format": "TopMovies(director_info, num_of_movies) -> top_movies"}, {"name": "RealEstatePrice", "Description": "This API is to get the price of a specific type of property in a specific city.", "input_params": {"city": {"description": "the city where the property is located", "type": "String"}, "propertyType": {"description": "the type of the property", "type": "String"}}, "output_params": {"propertyPrice": {"description": "the price of the specific property", "type": "Float"}}, "format": "RealEstatePrice(city, propertyType) -> propertyPrice"}, {"name": "MortgageCalculator", "Description": "This API is to calculate the mortgage payment based on property price, down payment, interest rate and term.", "input_params": {"propertyPrice": {"description": "the price of the property", "type": "Float"}, "downPayment": {"description": "the down payment for the property", "type": "Float"}, "interestRate": {"description": "the interest rate of the mortgage", "type": "Float"}, "term": {"description": "the term of the mortgage", "type": "Integer"}}, "output_params": {"mortgagePayment": {"description": "the mortgage payment", "type": "Float"}}, "format": "MortgageCalculator(propertyPrice, downPayment, interestRate, term) -> mortgagePayment"}, {"name": "TaxEstimator", "Description": "This API is to estimate the tax based on property price and city.", "input_params": {"propertyPrice": {"description": "the price of the property", "type": "Float"}, "city": {"description": "the city where the property is located", "type": "String"}}, "output_params": {"tax": {"description": "the estimated tax", "type": "Float"}}, "format": "TaxEstimator(propertyPrice, city) -> tax"}, {"name": "PropertyOwnershipCost", "Description": "This API is to calculate the overall cost of property ownership including mortgage payment and tax.", "input_params": {"mortgagePayment": {"description": "the mortgage payment", "type": "Float"}, "tax": {"description": "the property tax", "type": "Float"}}, "output_params": {"ownershipCost": {"description": "the overall cost of property ownership", "type": "Float"}}, "format": "PropertyOwnershipCost(mortgagePayment, tax) -> ownershipCost"}, {"name": "HotelAvailability", "Description": "This API is to check the availability of hotels in a specific city on a specific date.", "input_params": {"city": {"description": "the city where the hotel is located", "type": "String"}, "date": {"description": "the date for checking the hotel availability", "type": "Date"}}, "output_params": {"hotel": {"description": "the available hotels", "type": "String"}}, "format": "HotelAvailability(city, date) -> hotel"}, {"name": "BookTrip", "Description": "This API is to book a trip including flight and hotel.", "input_params": {"flight": {"description": "the flight to be booked", "type": "String"}, "hotel": {"description": "the hotel to be booked", "type": "String"}}, "output_params": {"booking status": {"description": "the status of the booking", "type": "String"}}, "format": "BookTrip(flight, hotel) -> booking status."}, {"name": "FindFlights", "Description": "This API is to find flights between two cities on a specific date.", "input_params": {"city1": {"description": "the departure city", "type": "String"}, "city2": {"description": "the destination city", "type": "String"}, "date": {"description": "the date of the flight", "type": "Date"}}, "output_params": {"flight": {"description": "the flight details", "type": "String"}}, "format": "FindFlights(city1, city2, date) -> flight"}, {"name": "FlightDetails", "Description": "This API is to get the flight details.", "input_params": {"destination": {"description": "The destination of the trip", "type": "String"}, "departure_date": {"description": "The departure date of the flight", "type": "Date"}}, "output_params": {"flight_info": {"description": "Information of the flight to the destination on the specified date", "type": "Object"}}, "format": "FlightDetails(destination, departure_date) -> flight_info"}, {"name": "ActivityPlanning", "Description": "This API is to plan activities.", "input_params": {"hotel_reservation": {"description": "Information of the hotel reservation", "type": "Object"}, "destination": {"description": "The destination of the trip", "type": "String"}}, "output_params": {"activity_plan": {"description": "Plan of activities at the destination", "type": "Object"}}, "format": "ActivityPlanning(hotel_reservation, destination) -> activity_plan"}, {"name": "ClothingSuggestionAPI", "Description": "This API is to recommend clothing based on the weather.", "input_params": {"weather": {"description": "the weather condition", "type": "String"}}, "output_params": {"clothing_info": {"description": "the information of recommended clothing", "type": "String"}}, "format": "ClothingSuggestionAPI(weather) -> clothing_info"}, {"name": "StoreSearchAPI", "Description": "This API is to find the store based on city and recommended clothing.", "input_params": {"city": {"description": "the name of the city", "type": "String"}, "clothing_info": {"description": "the information of recommended clothing", "type": "String"}}, "output_params": {"store_info": {"description": "the information of the store", "type": "String"}}, "format": "StoreSearchAPI(city, clothing_info) -> store_info"}, {"name": "BuyOnlineAPI", "Description": "This API is to purchase clothing online from the recommended store.", "input_params": {"store_info": {"description": "the information of the store", "type": "String"}}, "output_params": {"purchase_status": {"description": "the status of the purchase", "type": "String"}}, "format": "BuyOnlineAPI(store_info) -> purchase_status"}, {"name": "BookValue", "Description": "This API is to get the value of a book.", "input_params": {"ISBN": {"description": "the ISBN of the book", "type": "String"}, "authorDetails": {"description": "the details of the author of the book", "type": "String"}}, "output_params": {"book_value": {"description": "the value of the book", "type": "Float"}}, "format": "BookValue(ISBN, authorDetails) -> book_value"}, {"name": "MovieRecommendation", "Description": "This API is to recommend a movie based on genre.", "input_params": {"genre": {"description": "the genre of the movie", "type": "String"}}, "output_params": {"movie_name": {"description": "the name of the recommended movie", "type": "String"}}, "format": "MovieRecommendation(genre) -> movie_name"}, {"name": "GameDetails", "Description": "This API is to get the details of a game using the game title.", "input_params": {"game_title": {"description": "The title of the video game", "type": "String"}}, "output_params": {"game_id": {"description": "The unique identifier of the game", "type": "Integer"}}, "format": "GameDetails(game_title) -> game_id"}, {"name": "GameReviews", "Description": "This API is to get the reviews of a game using the game id.", "input_params": {"game_id": {"description": "The unique identifier of the game", "type": "Integer"}}, "output_params": {"reviews": {"description": "The reviews of the game", "type": "String"}}, "format": "GameReviews(game_id) -> reviews"}, {"name": "DocumentaryDetails", "Description": "This API is to get details of a documentary.", "input_params": {"doc_title": {"description": "the title of the documentary", "type": "String"}}, "output_params": {"doc_id": {"description": "the ID of the documentary", "type": "Integer"}}, "format": "DocumentaryDetails(doc_title) -> doc_id"}, {"name": "DocumentaryReviews", "Description": "This API is to retrieve reviews of a documentary.", "input_params": {"doc_id": {"description": "the ID of the documentary", "type": "Integer"}}, "output_params": {"reviews": {"description": "the reviews of the documentary", "type": "String"}}, "format": "DocumentaryReviews(doc_id) -> reviews"}, {"name": "BestTravelTime", "Description": "This API is to get the most favourable time to visit a certain attraction given the weather condition.", "input_params": {"weather_condition": {"description": "the weather condition of the city where the attraction is located", "type": "String"}, "attraction": {"description": "the name of the attraction", "type": "String"}}, "output_params": {"best_time": {"description": "the most favourable time to visit the attraction", "type": "String"}}, "format": "BestTravelTime(weather_condition, attraction) -> best_time"}, {"name": "AuthorOfBook", "Description": "This API is to find the author's ID by the book's ID.", "input_params": {"book_id": {"description": "the ID of the book", "type": "Integer"}}, "output_params": {"author_id": {"description": "the ID of the author", "type": "Integer"}}, "format": "AuthorOfBook(book_id) -> author_id"}, {"name": "BooksByAuthor", "Description": "This API is to find the books written by the author.", "input_params": {"author_id": {"description": "the ID of the author", "type": "Integer"}}, "output_params": {"book_list": {"description": "the list of books written by the author", "type": "List of Strings"}}, "format": "BooksByAuthor(author_id) -> book_list"}, {"name": "MovieTheaterLocator", "Description": "This API locates the movie theaters in a given city.", "input_params": {"city": {"description": "the city where the user wants to find a movie theater", "type": "String"}}, "output_params": {"theater_address": {"description": "the address of the located movie theater in the given city", "type": "String"}}, "format": "MovieTheaterLocator(city) -> theater_address"}, {"name": "GetMovieTheater", "Description": "This API is to get the theater where the movie is showing.", "input_params": {"movie_name": {"description": "the name of the movie", "type": "String"}}, "output_params": {"theater_name": {"description": "the name of the theater", "type": "String"}}, "format": "GetMovieTheater(movie_name) -> theater_name"}, {"name": "GetTheaterLocation", "Description": "This API is to get the location of the theater.", "input_params": {"theater_name": {"description": "the name of the theater", "type": "String"}}, "output_params": {"location": {"description": "the location of the theater", "type": "String"}}, "format": "GetTheaterLocation(theater_name) -> location"}, {"name": "WeatherInCity", "Description": "This API is to determine the weather in a specific city.", "input_params": {"city": {"description": "the name of the city", "type": "String"}, "date": {"description": "the date for weather forecast", "type": "Date"}}, "output_params": {"weather": {"description": "the weather condition in the city", "type": "String"}}, "format": "WeatherInCity(city, date) -> weather"}, {"name": "NearbyHospitalQuery", "Description": "This API is to find a hospital near a given location.", "input_params": {"coordinate_position": {"description": "the coordinates of the location", "type": "Coordinate"}}, "output_params": {"hospital": {"description": "the name of the nearby hospital", "type": "String"}}, "format": "NearbyHospitalQuery(coordinate_position) -> hospital"}, {"name": "DoctorAvailabilityQuery", "Description": "This API is to check the availability of a doctor at a given hospital.", "input_params": {"hospital": {"description": "the name of the hospital", "type": "String"}, "specialty": {"description": "the specialty of the doctor", "type": "String"}}, "output_params": {"availability": {"description": "the availability of the doctor", "type": "Boolean"}}, "format": "DoctorAvailabilityQuery(hospital, specialty) -> availability"}, {"name": "NearbyFarmersMarketQuery", "Description": "This API is to find a nearby farmers market based on the coordinate position of a grocery store.", "input_params": {"coordinate_position": {"description": "the coordinate position of the grocery store", "type": "CoordinatePosition"}}, "output_params": {"farmers_market": {"description": "the nearby farmers market", "type": "FarmersMarket"}}, "format": "NearbyFarmersMarketQuery(coordinate_position) -> farmers_market"}, {"name": "GroceryStoreDetail", "Description": "This API is to get the details of a grocery store.", "input_params": {"store_name": {"description": "the name of the grocery store", "type": "String"}, "city": {"description": "the city where the grocery store is located", "type": "String"}}, "output_params": {"coordinate_position": {"description": "the coordinate position of the grocery store", "type": "CoordinatePosition"}}, "format": "GroceryStoreDetail(store_name, city) -> coordinate_position"}, {"name": "ProduceAvailabilityQuery", "Description": "This API is to check the availability of a produce at a farmers market.", "input_params": {"farmers_market": {"description": "the farmers market to check", "type": "FarmersMarket"}, "produce_type": {"description": "the type of produce to check", "type": "String"}}, "output_params": {"availability_status": {"description": "the availability status of the produce", "type": "String"}}, "format": "ProduceAvailabilityQuery(farmers_market, produce_type) -> availability_status"}, {"name": "OpenVenues", "Description": "This API is to get a list of open venues in a specific city at the current time.", "input_params": {"city": {"description": "the name of the city", "type": "String"}, "time": {"description": "the current time in the city", "type": "Time"}}, "output_params": {"venues": {"description": "a list of open venues in the city", "type": "List"}}, "format": "OpenVenues(city, time) -> venues"}, {"name": "MusicConcert", "Description": "This API is to get a list of music concerts happening in specific venues.", "input_params": {"venue": {"description": "the name of the venue", "type": "String"}}, "output_params": {"concerts": {"description": "a list of music concerts happening in the venue", "type": "List"}}, "format": "MusicConcert(venue) -> concerts"}, {"name": "HotelInformation", "Description": "This API provides information about hotels in a given city.", "input_params": {"city": {"description": "The city where the user wants to find a hotel", "type": "String"}}, "output_params": {"hotelDetails": {"description": "Details of selected hotels in the specified city", "type": "String"}}, "format": "HotelInformation(city) -> hotelDetails"}, {"name": "TravelItinerary", "Description": "This API creates a travel itinerary based on hotel details and restaurant choices.", "input_params": {"hotelDetails": {"description": "Details of the selected hotels", "type": "String"}, "restaurantChoices": {"description": "List of selected restaurants", "type": "String"}}, "output_params": {"itinerary": {"description": "A travel itinerary based on the provided hotel details and restaurant choices", "type": "String"}}, "format": "TravelItinerary(hotelDetails, restaurantChoices) -> itinerary"}, {"name": "WeatherQuery", "Description": "This API is to provide the weather in a specific city on a specific date.", "input_params": {"city": {"description": "the name of the city", "type": "String"}, "date": {"description": "the date to check the weather", "type": "Date"}}, "output_params": {"weather": {"description": "the weather of the city on the specific date", "type": "String"}}, "format": "WeatherQuery(city, date) -> weather"}, {"name": "WeatherInformation", "Description": "This API is to provide weather information for a specific city and date.", "input_params": {"city": {"description": "the name of the city", "type": "String"}, "date": {"description": "the date for which weather information is required", "type": "Date"}}, "output_params": {"weather_info": {"description": "the weather information for the specified city and date", "type": "String"}}, "format": "WeatherInformation(city, date) -> weather_info"}, {"name": "BookStoreLocator", "Description": "This API is to find the closest bookstore in a specific city.", "input_params": {"city": {"description": "the city where the user is currently located", "type": "String"}}, "output_params": {"bookstore_address": {"description": "the address of the nearest bookstore", "type": "String"}}, "format": "BookStoreLocator(city) -> bookstore_address"}, {"name": "BookRecommender", "Description": "This API is to recommend books based on the bookstore location.", "input_params": {"bookstore_address": {"description": "the address of the bookstore", "type": "String"}}, "output_params": {"book_genre": {"description": "the genre of the books", "type": "String"}}, "format": "BookRecommender(bookstore_address) -> book_genre"}, {"name": "BestSeller", "Description": "This API is to find the most popular book in a specific genre.", "input_params": {"book_genre": {"description": "the genre of the book", "type": "String"}}, "output_params": {"best_selling_book": {"description": "the most popular book in a specific genre", "type": "String"}}, "format": "BestSeller(book_genre) -> best_selling_book"}, {"name": "Username2Id", "Description": "This API converts username to user id.", "input_params": {"username": {"description": "the username of the user", "type": "String"}}, "output_params": {"user_id": {"description": "the id of the user", "type": "Integer"}}, "format": "Username2Id(username) -> user_id"}, {"name": "Id2AllergyList", "Description": "This API finds the allergy list of a user based on its Id.", "input_params": {"user_id": {"description": "the id of the user", "type": "Integer"}}, "output_params": {"allergy_list": {"description": "the list of allergies of the user", "type": "List"}}, "format": "Id2AllergyList(user_id) -> allergy_list"}, {"name": "Productname2Ingredients", "Description": "This API finds the ingredients of a product.", "input_params": {"product_name": {"description": "the name of the product", "type": "String"}}, "output_params": {"ingredients": {"description": "the list of ingredients of the product", "type": "List"}}, "format": "Productname2Ingredients(product_name) -> ingredients"}, {"name": "Disease2Symptoms", "Description": "This API is to convert a disease name to its symptom list.", "input_params": {"disease_name": {"description": "the name of the disease", "type": "String"}}, "output_params": {"symptoms_list": {"description": "a list of symptoms related to the disease", "type": "List"}}, "format": "Disease2Symptoms(disease_name) -> symptoms_list"}, {"name": "Symptoms2Diagnosis", "Description": "This API is to convert a list of symptoms to potential related diseases.", "input_params": {"symptoms": {"description": "a list of symptoms", "type": "List"}}, "output_params": {"potential_diseases": {"description": "a list of potential diseases related to the symptoms", "type": "List"}}, "format": "Symptoms2Diagnosis(symptoms) -> potential_diseases"}, {"name": "Diagnosis2Treatment", "Description": "This API is to convert a disease name to its treatment plan.", "input_params": {"disease": {"description": "the name of the disease", "type": "String"}}, "output_params": {"treatment_plan": {"description": "the treatment plan for the disease", "type": "String"}}, "format": "Diagnosis2Treatment(disease) -> treatment_plan"}, {"name": "GetReview", "Description": "This API gets the review of a book.", "input_params": {"bookname": {"description": "the name of the book", "type": "String"}}, "output_params": {"review": {"description": "the review of the book", "type": "String"}}, "format": "GetReview(bookname) -> review"}, {"name": "ISBN2BookTitle", "Description": "This API is to convert an ISBN to its corresponding book title.", "input_params": {"ISBN": {"description": "the ISBN of the book", "type": "String"}}, "output_params": {"book_title": {"description": "the title of the book", "type": "String"}}, "format": "ISBN2BookTitle(ISBN) -> book_title"}, {"name": "NotifyUser", "Description": "This API is to send a notification to the user.", "input_params": {"person_ID": {"description": "the ID of the person", "type": "Integer"}, "message": {"description": "the notification message", "type": "String"}}, "output_params": {"Notification status": {"description": "the status of the notification", "type": "String"}}, "format": "NotifyUser(person_ID, message) -> Notification status"}, {"name": "ReserveHotel", "Description": "This API allows the user to reserve a hotel in a certain city considering the weather status on a specific date.", "input_params": {"city": {"description": "the name of the city", "type": "String"}, "date": {"description": "the specific date", "type": "Date"}, "weather_status": {"description": "the weather status", "type": "String"}}, "output_params": {"reservation_status": {"description": "the reservation status", "type": "String"}}, "format": "ReserveHotel(city, date, weather_status) -> reservation_status"}, {"name": "GetCountryCurrency", "Description": "This API provides the official currency of a specific country.", "input_params": {"country": {"description": "the name of the country", "type": "String"}}, "output_params": {"currency": {"description": "the official currency of the country", "type": "String"}}, "format": "GetCountryCurrency(country) -> currency"}, {"name": "CurrencyConverter", "Description": "This API provides a conversion tool from one currency to another.", "input_params": {"base_currency": {"description": "the base currency to convert from", "type": "String"}, "target_currency": {"description": "the target currency to convert to", "type": "String"}, "amount": {"description": "the amount to convert", "type": "Float"}}, "output_params": {"converted_amount": {"description": "the converted amount in the target currency", "type": "Float"}}, "format": "CurrencyConverter(base_currency, target_currency, amount) -> converted_amount"}, {"name": "CountryBudgetPlanner", "Description": "This API helps to generate a budget plan for a country based on the provided budget in the country's currency.", "input_params": {"country": {"description": "the name of the country", "type": "String"}, "budget": {"description": "the budget for the trip", "type": "Float"}}, "output_params": {"plan": {"description": "the budget plan for the trip", "type": "String"}}, "format": "CountryBudgetPlanner(country, budget) -> plan"}, {"name": "RestaurantDetail", "Description": "This API is to query the restaurant information of a specific cuisine type in a city.", "input_params": {"city_name": {"description": "the name of the city", "type": "String"}, "cuisine_type": {"description": "the type of cuisine", "type": "String"}}, "output_params": {"restaurant_list": {"description": "a list of restaurants", "type": "List"}}, "format": "RestaurantDetail(city_name, cuisine_type) -> restaurant_list"}, {"name": "MealPlan", "Description": "This API provides a meal plan based on the restaurant list and user preferences.", "input_params": {"restaurant_list": {"description": "a list of restaurants", "type": "List"}, "preferences": {"description": "user preferences", "type": "String"}}, "output_params": {"meal_plan": {"description": "a meal plan", "type": "List"}}, "format": "MealPlan(restaurant_list, preferences) -> meal_plan"}, {"name": "BookingMake", "Description": "This API makes a booking based on the meal plan and the preferred date and time.", "input_params": {"meal_plan": {"description": "a meal plan", "type": "List"}, "date_time": {"description": "preferred date and time", "type": "DateTime"}}, "output_params": {"booking_confirmation": {"description": "booking confirmation", "type": "String"}}, "format": "BookingMake(meal_plan, date_time) -> booking_confirmation"}, {"name": "BookReviewRating", "Description": "This API generates a review and rating based on the book's information and author's bio.", "input_params": {"bookInformation": {"description": "information about the book", "type": "String"}, "authorBio": {"description": "biography of the author", "type": "String"}}, "output_params": {"reviewRating": {"description": "review and rating of the book", "type": "String"}}, "format": "BookReviewRating(bookInformation, authorBio) -> reviewRating"}, {"name": "MovieInfo", "Description": "This API retrieves detailed information about a movie.", "input_params": {"title": {"description": "the title of the movie", "type": "String"}}, "output_params": {"movieDetails": {"description": "detailed information about the movie", "type": "Object"}}, "format": "MovieInfo(title) -> movieDetails"}, {"name": "CinemaShowtimes", "Description": "This API retrieves the showtimes of a movie in a specific cinema.", "input_params": {"cinema": {"description": "the name of the cinema", "type": "String"}, "movieDetails": {"description": "detailed information about the movie", "type": "Object"}}, "output_params": {"showtimes": {"description": "the showtimes of the movie in the cinema", "type": "List"}}, "format": "CinemaShowtimes(cinema, movieDetails) -> showtimes"}, {"name": "TicketAvailability", "Description": "This API checks the availability of tickets for a showtime in a cinema.", "input_params": {"cinema": {"description": "the name of the cinema", "type": "String"}, "showtimes": {"description": "the showtimes of the movie in the cinema", "type": "List"}}, "output_params": {"ticketStatus": {"description": "the availability status of tickets", "type": "String"}}, "format": "TicketAvailability(cinema, showtimes) -> ticketStatus"}, {"name": "CreateInvoice", "Description": "This API is to create an invoice based on the customer ID, product ID and the quantity purchased.", "input_params": {"customer_id": {"description": "the ID of the customer", "type": "String"}, "product_id": {"description": "the ID of the product", "type": "String"}, "quantity": {"description": "the quantity purchased", "type": "Integer"}}, "output_params": {"invoice": {"description": "the created invoice", "type": "Object"}}, "format": "CreateInvoice(customer_id, product_id, quantity) -> invoice"}, {"name": "CalculateTotal", "Description": "This API is to calculate the total cost of the items in the invoice.", "input_params": {"invoice": {"description": "the invoice object", "type": "Object"}}, "output_params": {"total_cost": {"description": "the total cost of the items in the invoice", "type": "Float"}}, "format": "CalculateTotal(invoice) -> total_cost"}, {"name": "UsernameToId", "Description": "This API is to convert user name to its Id.", "input_params": {"user_name": {"description": "the name of the user", "type": "String"}}, "output_params": {"User_Id": {"description": "the Id of the user", "type": "Integer"}}, "format": "UsernameToId(user_name) -> User_Id"}, {"name": "UserShoppingHistory", "Description": "API to get the shopping history of a user.", "input_params": {"user_id": {"description": "the Id of the user", "type": "Integer"}}, "output_params": {"shopping_history": {"description": "the shopping history of the user", "type": "List"}}, "format": "UserShoppingHistory(user_id) -> shopping_history"}, {"name": "ProductPriceHistory", "Description": "API to get the price history of a product.", "input_params": {"product_id": {"description": "the Id of the product", "type": "Integer"}}, "output_params": {"price_history": {"description": "the price history of the product", "type": "List"}}, "format": "ProductPriceHistory(product_id) -> price_history"}, {"name": "User2Age", "Description": "This API generates the age of a specific user through its user name.", "input_params": {"user_name": {"description": "the name of the user", "type": "String"}}, "output_params": {"user_age": {"description": "the age of the user", "type": "Integer"}}, "format": "User2Age(user_name) -> user_age"}, {"name": "BuyAlcohol", "Description": "This API allows the user to purchase alcohol if their age is over the legal limit.", "input_params": {"user_age": {"description": "the age of the user", "type": "Integer"}}, "output_params": {"purchase_status": {"description": "the status of the purchase", "type": "String"}}, "format": "BuyAlcohol(user_age) -> purchase_status"}, {"name": "RecommendDrink", "Description": "This API suggests a type of drink according to user preference.", "input_params": {"user_preference": {"description": "the preference of the user", "type": "String"}}, "output_params": {"drink": {"description": "the suggested drink", "type": "String"}}, "format": "RecommendDrink(user_preference) -> drink"}, {"name": "UserPreference", "Description": "This API will provide the preferred type of drink of the specified user.", "input_params": {"user_name": {"description": "the name of the user", "type": "String"}}, "output_params": {"user_preference": {"description": "the preferred type of drink", "type": "String"}}, "format": "UserPreference(user_name) -> user_preference"}, {"name": "FindNearbyRestaurant", "Description": "This API finds a nearby restaurant based on the user's current location.", "input_params": {"user_location": {"description": "the current location of the user", "type": "String"}}, "output_params": {"restaurant": {"description": "the nearby restaurant", "type": "String"}}, "format": "FindNearbyRestaurant(user_location) -> restaurant"}, {"name": "GetUserDietaryRestrictions", "Description": "This API returns the user's dietary restrictions.", "input_params": {"user_name": {"description": "the name of the user", "type": "String"}}, "output_params": {"restrictions": {"description": "the dietary restrictions of the user", "type": "String"}}, "format": "GetUserDietaryRestrictions(user_name) -> restrictions"}, {"name": "FilterRestaurantByDietaryRestrictions", "Description": "This API filters the restaurant options based on dietary restrictions.", "input_params": {"restaurant": {"description": "the nearby restaurant", "type": "String"}, "restrictions": {"description": "the dietary restrictions of the user", "type": "String"}}, "output_params": {"filtered_restaurant": {"description": "the filtered restaurant options", "type": "String"}}, "format": "FilterRestaurantByDietaryRestrictions(restaurant, restrictions) -> filtered_restaurant"}, {"name": "GetUserNextMeeting", "Description": "This API returns the next scheduled meeting of a user.", "input_params": {"user_name": {"description": "the name of the user", "type": "String"}}, "output_params": {"next_meeting": {"description": "the next scheduled meeting", "type": "Time"}}, "format": "GetUserNextMeeting(user_name) -> next_meeting"}, {"name": "Meeting2TimeZone", "Description": "This API converts a meeting to the timezone where it will be held.", "input_params": {"meeting": {"description": "the meeting to be converted", "type": "Time"}}, "output_params": {"timezone": {"description": "the timezone where the meeting will be held", "type": "String"}}, "format": "Meeting2TimeZone(meeting) -> timezone"}, {"name": "ConvertTime", "Description": "This API converts a specific time from the source timezone to the target timezone.", "input_params": {"time": {"description": "the specific time to be converted", "type": "Time"}, "source_timezone": {"description": "the source timezone of the time", "type": "String"}, "target_timezone": {"description": "the target timezone to convert the time to", "type": "String"}}, "output_params": {"converted_time": {"description": "the converted time in the target timezone", "type": "Time"}}, "format": "ConvertTime(time, source_timezone, target_timezone) -> converted_time"}, {"name": "AvailabilityCheck", "Description": "This API checks the availability of a book using its ISBN.", "input_params": {"ISBN": {"description": "the ISBN of the book", "type": "String"}}, "output_params": {"availability_status": {"description": "the availability status of the book", "type": "String"}}, "format": "AvailabilityCheck(ISBN) -> availability_status"}, {"name": "GetUserLocationByUsername", "Description": "This API is used to get a user's location based on their username.", "input_params": {"username": {"description": "the username of the user", "type": "String"}}, "output_params": {"user_location": {"description": "the location of the user", "type": "String"}}, "format": "GetUserLocationByUsername(username) -> user_location"}, {"name": "GetTimeZoneByLocation", "Description": "This API is used to determine the timezone based on a given location.", "input_params": {"location": {"description": "the location", "type": "String"}}, "output_params": {"timezone": {"description": "the timezone", "type": "String"}}, "format": "GetTimeZoneByLocation(location) -> timezone"}, {"name": "ScheduleMeeting", "Description": "This API schedules a meeting.", "input_params": {"user_email": {"description": "the email of the user", "type": "String"}, "start_time": {"description": "the start time of the meeting", "type": "Time"}, "end_time": {"description": "the end time of the meeting", "type": "Time"}, "timezone": {"description": "the timezone of the meeting", "type": "String"}}, "output_params": {"meeting_status": {"description": "the status of the meeting", "type": "String"}}, "format": "ScheduleMeeting(user_email, start_time, end_time, timezone) -> meeting_status"}, {"name": "GetPriceByID", "Description": "This API retrieves the price for a product by its ID.", "input_params": {"product_id": {"description": "the ID of the product", "type": "Integer"}}, "output_params": {"product_price": {"description": "the price of the product", "type": "Float"}}, "format": "GetPriceByID(product_id) -> product_price"}, {"name": "GetDiscount", "Description": "This API gives the discounted price of the product after applying a coupon code.", "input_params": {"product_id": {"description": "the ID of the product", "type": "Integer"}, "coupon_code": {"description": "the coupon code", "type": "String"}}, "output_params": {"discount_price": {"description": "the discounted price of the product", "type": "Float"}}, "format": "GetDiscount(product_id, coupon_code) -> discount_price"}, {"name": "FindRestaurantByname", "Description": "This API returns the id of a restaurant by its name.", "input_params": {"name": {"description": "the name of the restaurant", "type": "String"}}, "output_params": {"restaurant_ID": {"description": "the id of the restaurant", "type": "Integer"}}, "format": "FindRestaurantByname(name) -> restaurant_ID"}, {"name": "FindProductId", "Description": "This API returns the id of a product.", "input_params": {"product_name": {"description": "the name of the product", "type": "String"}}, "output_params": {"product_id": {"description": "the id of the product", "type": "Integer"}}, "format": "FindProductId(product_name) -> product_id"}, {"name": "GetCustomerID", "Description": "This API returns the id of a customer.", "input_params": {"name": {"description": "the name of the customer", "type": "String"}}, "output_params": {"customer_ID": {"description": "the id of the customer", "type": "Integer"}}, "format": "GetCustomerID(name) -> customer_ID"}, {"name": "CheckOutCart", "Description": "This API checks out a customer's cart.", "input_params": {"customer_ID": {"description": "the id of the customer", "type": "Integer"}}, "output_params": {"checkout_status": {"description": "the status of the checkout", "type": "String"}}, "format": "CheckOutCart(customer_ID) -> checkout_status"}, {"name": "GetRoomType", "Description": "This API returns the ID of a specific room type in a particular hotel.", "input_params": {"hotel_ID": {"description": "the ID of the hotel", "type": "Integer"}, "room_type": {"description": "the type of the room", "type": "String"}}, "output_params": {"room_ID": {"description": "the ID of the room", "type": "Integer"}}, "format": "GetRoomType(hotel_ID, room_type) -> room_ID"}, {"name": "MovieTitle2ID", "Description": "This API converts a movie title to its ID.", "input_params": {"movie_title": {"description": "the title of the movie", "type": "String"}}, "output_params": {"movie_ID": {"description": "the ID of the movie", "type": "Integer"}}, "format": "MovieTitle2ID(movie_title) -> movie_ID"}, {"name": "AddToWatchlist", "Description": "This API adds a movie to a user's watchlist.", "input_params": {"user_ID": {"description": "the ID of the user", "type": "Integer"}, "movie_ID": {"description": "the ID of the movie", "type": "Integer"}}, "output_params": {"Watchlist status": {"description": "the status of adding the movie to the watchlist", "type": "String"}}, "format": "AddToWatchlist(user_ID, movie_ID) -> Watchlist status"}, {"name": "EmailNotification", "Description": "This API sends a notification email to the user.", "input_params": {"user_ID": {"description": "the ID of the user", "type": "Integer"}, "message": {"description": "the notification message", "type": "String"}}, "output_params": {"Notification status": {"description": "the status of sending the notification email", "type": "String"}}, "format": "EmailNotification(user_ID, message) -> Notification status"}, {"name": "GetBoardingPass", "Description": "This API generates a boarding pass for a confirmed reservation and sends it to a specified email.", "input_params": {"reservation_id": {"description": "the ID of the confirmed reservation", "type": "Integer"}, "email": {"description": "the email address to which the boarding pass will be sent", "type": "String"}}, "output_params": {"boarding_pass": {"description": "the generated boarding pass", "type": "String"}}, "format": "GetBoardingPass(reservation_id, email) -> boarding_pass"}, {"name": "FindNutritionInfo", "Description": "This API is to find the nutritional information of a specific menu item.", "input_params": {"menu_item": {"description": "the name of the menu item", "type": "String"}}, "output_params": {"nutrition_details": {"description": "the nutritional information of the menu item", "type": "String"}}, "format": "FindNutritionInfo(menu_item) -> nutrition_details"}, {"name": "GetCalories", "Description": "This API is to get the calories of a specific menu item.", "input_params": {"menu_item": {"description": "the specific menu item", "type": "String"}}, "output_params": {"calories": {"description": "the calories of the menu item", "type": "Integer"}}, "format": "GetCalories(menu_item) -> calories"}, {"name": "GetRestaurantDetails", "Description": "This API is to get the restaurant details of a specific location.", "input_params": {"location": {"description": "the location of the restaurant", "type": "String"}}, "output_params": {"restaurant_info": {"description": "the details of the restaurant", "type": "Object"}}, "format": "GetRestaurantDetails(location) -> restaurant_info"}, {"name": "GetRestaurantReview", "Description": "This API is to get reviews of a specific restaurant.", "input_params": {"restaurant_info": {"description": "the details of the restaurant", "type": "Object"}}, "output_params": {"restaurant_review": {"description": "the reviews of the restaurant", "type": "Object"}}, "format": "GetRestaurantReview(restaurant_info) -> restaurant_review"}, {"name": "GetCuisineRecommendation", "Description": "This API is to get cuisine recommendation based on the restaurant review.", "input_params": {"restaurant_review": {"description": "the reviews of the restaurant", "type": "Object"}}, "output_params": {"cuisine_recommendation": {"description": "the cuisine recommendation", "type": "Object"}}, "format": "GetCuisineRecommendation(restaurant_review) -> cuisine_recommendation"}, {"name": "RetrieveLocalTrafficInfo", "Description": "This API is to get real-time traffic information on the roads of a specific city.", "input_params": {"city": {"description": "the name of the city", "type": "String"}}, "output_params": {"traffic_info": {"description": "the real-time traffic information", "type": "String"}}, "format": "RetrieveLocalTrafficInfo(city) -> traffic_info"}, {"name": "FetchNextBus", "Description": "This API is to fetch the timing of the next bus on a specific route based on the estimated travel time.", "input_params": {"travel_time": {"description": "the calculated travel time", "type": "Time"}, "bus_route": {"description": "the specific bus route", "type": "String"}}, "output_params": {"bus_info": {"description": "the timing of the next bus on the specific route", "type": "String"}}, "format": "FetchNextBus(travel_time, bus_route) -> bus_info"}, {"name": "SearchEvent", "Description": "This API searches for a specific type of event in a certain city.", "input_params": {"city": {"description": "the city where the event is searched", "type": "String"}, "type": {"description": "the type of event to search", "type": "String"}}, "output_params": {"event": {"description": "the specific event found", "type": "String"}}, "format": "SearchEvent(city, type) -> event"}, {"name": "FindTickets", "Description": "This API finds the required number of tickets for a specific event.", "input_params": {"event": {"description": "the specific event to find tickets for", "type": "String"}, "number": {"description": "the number of tickets required", "type": "Integer"}}, "output_params": {"tickets": {"description": "the required number of tickets", "type": "String"}}, "format": "FindTickets(event, number) -> tickets"}, {"name": "ArrangeTransportation", "Description": "This API arranges transportation to a specific city on a certain date.", "input_params": {"city": {"description": "the specific city to arrange transportation to", "type": "String"}, "date": {"description": "the date of transportation", "type": "Date"}}, "output_params": {"transportation": {"description": "the arranged transportation", "type": "String"}}, "format": "ArrangeTransportation(city, date) -> transportation"}, {"name": "GetEventCalendar", "Description": "This API retrieves the user's event calendar based on their user id.", "input_params": {"user_id": {"description": "the id of the user", "type": "String"}}, "output_params": {"event": {"description": "the user's event calendar", "type": "List"}}, "format": "GetEventCalendar(user_id) -> event"}, {"name": "FindTravelTime", "Description": "This API finds the estimated travel time between two locations.", "input_params": {"start_location": {"description": "the starting location", "type": "String"}, "end_location": {"description": "the ending location", "type": "String"}}, "output_params": {"travel_time": {"description": "the estimated travel time", "type": "Time"}}, "format": "FindTravelTime(start_location, end_location) -> travel_time"}, {"name": "GetAvailableFlights", "Description": "This API is to get available flights from an origin to a destination.", "input_params": {"origin": {"description": "the origin location", "type": "String"}, "destination": {"description": "the destination location", "type": "String"}}, "output_params": {"flights": {"description": "a list of available flights", "type": "List"}}, "format": "GetAvailableFlights(origin, destination) -> flights"}, {"name": "FindCheapestFlight", "Description": "This API is to find the cheapest flight from the list of available flights.", "input_params": {"flights": {"description": "a list of available flights", "type": "List"}}, "output_params": {"cheapestFlight": {"description": "the cheapest flight from the list", "type": "Flight"}}, "format": "FindCheapestFlight(flights) -> cheapestFlight"}, {"name": "GetTicketPrice", "Description": "This API is to get the ticket price of a specific movie at a specific cinema.", "input_params": {"cinema": {"description": "the name of the cinema", "type": "String"}, "movie": {"description": "the name of the movie", "type": "String"}}, "output_params": {"price": {"description": "the ticket price", "type": "Float"}}, "format": "GetTicketPrice(cinema, movie) -> price"}, {"name": "CalculateTotalMovieOutingTime", "Description": "This API is to calculate the total time of the movie outing considering the travel time and the movie length.", "input_params": {"travelTime": {"description": "the estimated travel time", "type": "Time"}, "movieLength": {"description": "the length of the movie", "type": "String"}}, "output_params": {"totalOutingTime": {"description": "the total time of the movie outing", "type": "Time"}}, "format": "CalculateTotalMovieOutingTime(travelTime, movieLength) -> totalOutingTime"}, {"name": "SuggestMealType", "Description": "This API is to suggest a meal type based on the weather forecast.", "input_params": {"weather_forecast": {"description": "the weather forecast", "type": "String"}}, "output_params": {"meal_type": {"description": "the suggested meal type", "type": "String"}}, "format": "SuggestMealType(weather_forecast) -> meal_type"}, {"name": "LibraryHours", "Description": "This API is used to check the opening hours of a library in a certain city on a specific date.", "input_params": {"city": {"description": "the name of the city", "type": "String"}, "date": {"description": "the specific date", "type": "Date"}}, "output_params": {"hours": {"description": "the opening hours of the library", "type": "String"}}, "format": "LibraryHours(city, date) -> hours"}, {"name": "FetchFlightID", "Description": "This API retrieves the flight ID using the flight name.", "input_params": {"flight_name": {"description": "the name of the flight", "type": "String"}}, "output_params": {"flight_ID": {"description": "the ID of the flight", "type": "Integer"}}, "format": "FetchFlightID(flight_name) -> flight_ID"}, {"name": "FetchCity", "Description": "This API will return the city of the user based on user ID.", "input_params": {"user_ID": {"description": "the ID of the user", "type": "Integer"}}, "output_params": {"city": {"description": "the city of the user", "type": "String"}}, "format": "FetchCity(user_ID) -> city"}, {"name": "Plate2VehicleID", "Description": "This API is to convert a vehicle's plate number to vehicle ID.", "input_params": {"plate_number": {"description": "the plate number of the vehicle", "type": "String"}}, "output_params": {"vehicle_ID": {"description": "the ID of the vehicle", "type": "Integer"}}, "format": "Plate2VehicleID(plate_number) -> vehicle_ID"}, {"name": "CurrentLocation", "Description": "This API gives the current location of a vehicle based on vehicle ID.", "input_params": {"vehicle_ID": {"description": "the ID of the vehicle", "type": "Integer"}}, "output_params": {"location_info": {"description": "the current location information of the vehicle", "type": "String"}}, "format": "CurrentLocation(vehicle_ID) -> location_info"}, {"name": "NotifyOwner", "Description": "This API is to send a notification to the vehicle's owner.", "input_params": {"vehicle_ID": {"description": "the ID of the vehicle", "type": "Integer"}, "message": {"description": "the notification message", "type": "String"}}, "output_params": {"Notification status": {"description": "the status of the notification", "type": "String"}}, "format": "NotifyOwner(vehicle_ID, message) -> Notification status"}, {"name": "CalculateDistances", "Description": "This API is to calculate the distance between two cities.", "input_params": {"city_from": {"description": "the name of the starting city", "type": "String"}, "city_to": {"description": "the name of the destination city", "type": "String"}}, "output_params": {"distance between cities": {"description": "the distance between the two cities", "type": "Float"}}, "format": "CalculateDistances(city_from, city_to) -> distance between cities"}, {"name": "GetFlightDuration", "Description": "This API is to get the flight duration between two cities.", "input_params": {"city_from": {"description": "the name of the starting city", "type": "String"}, "city_to": {"description": "the name of the destination city", "type": "String"}}, "output_params": {"flight duration": {"description": "the duration of the flight between the two cities", "type": "Time"}}, "format": "GetFlightDuration(city_from, city_to) -> flight duration"}, {"name": "GetCurrencyExchangeRate", "Description": "This API is to get the exchange rate between two currencies.", "input_params": {"currency_from": {"description": "the currency to convert from", "type": "String"}, "currency_to": {"description": "the currency to convert to", "type": "String"}}, "output_params": {"exchange rate": {"description": "the exchange rate between the two currencies", "type": "Float"}}, "format": "GetCurrencyExchangeRate(currency_from, currency_to) -> exchange rate"}, {"name": "FetchUserPlaylist", "Description": "This API allows the user to fetch a playlist of a certain user.", "input_params": {"user_id": {"description": "the ID of the user", "type": "Integer"}}, "output_params": {"playlist": {"description": "the playlist of the user", "type": "List"}}, "format": "FetchUserPlaylist(user_id) -> playlist"}, {"name": "GetUserPreferences", "Description": "This API returns the preferred movie genre of a certain user.", "input_params": {"user_ID": {"description": "the ID of the user", "type": "Integer"}}, "output_params": {"movie_genre": {"description": "the preferred movie genre", "type": "String"}}, "format": "GetUserPreferences(user_ID) -> movie_genre"}]